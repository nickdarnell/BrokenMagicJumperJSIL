/* Generated by JSIL v0.7.8 build 40775. See http://jsil.org/ for more information. */ 
/* Generating type stubs only */ 
var $asm11 = JSIL.DeclareAssembly("System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

/* class FXAssembly */ 

(function FXAssembly$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("FXAssembly", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Version", "4.0.0.0"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ThisAssembly */ 

(function ThisAssembly$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Title", "System.Runtime.Serialization.dll"); 
    $.Constant({Static:true , Public:false}, "Description", "System.Runtime.Serialization.dll"); 
    $.Constant({Static:true , Public:false}, "DefaultAlias", "System.Runtime.Serialization.dll"); 
    $.Constant({Static:true , Public:false}, "Copyright", "\xa9 Microsoft Corporation.  All rights reserved."); 
    $.Constant({Static:true , Public:false}, "Version", "4.0.0.0"); 
    $.Constant({Static:true , Public:false}, "InformationalVersion", "4.0.30319.1"); 
    $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", "30319"); 
    $.Constant({Static:true , Public:false}, "BuildRevisionStr", "1"); 
    $.Constant({Static:true , Public:false}, "DailyBuildNumber", 30319); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class AssemblyRef */ 

(function AssemblyRef$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("AssemblyRef", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "EcmaPublicKey", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", "00000000000000000400000000000000"); 
    $.Constant({Static:true , Public:false}, "SilverlightPublicKey", "31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyToken", "31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyFull", "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"); 
    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKey", "7cec85d7bea7798e"); 
    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyToken", "7cec85d7bea7798e"); 
    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyFull", "00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB"); 
    $.Constant({Static:true , Public:false}, "PlatformPublicKey", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "PlatformPublicKeyToken", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "PlatformPublicKeyFull", "00000000000000000400000000000000"); 
    $.Constant({Static:true , Public:false}, "Mscorlib", "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemData", "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemDataOracleClient", "System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "System", "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemCore", "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemNumerics", "System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", "System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemWindowsForms", "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemXml", "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", "b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", "b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293"); 
    $.Constant({Static:true , Public:false}, "SharedLibPublicKey", "31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", "31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"); 
    $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", "System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemConfiguration", "System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDeployment", "System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDesign", "System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDirectoryServices", "System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDrawingDesign", "System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDrawing", "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", "System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemManagement", "System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemMessaging", "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", "System.Runtime.Serialization.Formatters.Soap, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemSecurity", "System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemServiceProcess", "System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWeb", "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebAbstractions", "System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebDynamicData", "System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", "System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", "System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemWebExtensions", "System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", "System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebMobile", "System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", "System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebRouting", "System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebServices", "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "WindowsBase", "WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", "Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", "Microsoft.VisualStudio.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", "VJSharpCodeProvider, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", "b7bd7678b977bd8f"); 
    $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", "ASP.BrowserCapsFactory, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", "Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", "Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", "Microsoft.Web.Design.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftJScript", "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Runtime");
JSIL.DeclareNamespace("System.Runtime.Serialization");
/* class System.Runtime.Serialization.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.Runtime.Serialization.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

/* class System.Runtime.Serialization.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.Runtime.Serialization.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

/* class System.Runtime.Serialization.SR */ 

(function SR$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Globalization.CultureInfo"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Resources.ResourceManager"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.Constant({Static:true , Public:false}, "AbstractElementNotSupported", "AbstractElementNotSupported"); 
    $.Constant({Static:true , Public:false}, "AbstractTypeNotSupported", "AbstractTypeNotSupported"); 
    $.Constant({Static:true , Public:false}, "AmbiguousReferencedTypes1", "AmbiguousReferencedTypes1"); 
    $.Constant({Static:true , Public:false}, "AmbiguousReferencedTypes3", "AmbiguousReferencedTypes3"); 
    $.Constant({Static:true , Public:false}, "AmbiguousReferencedCollectionTypes1", "AmbiguousReferencedCollectionTypes1"); 
    $.Constant({Static:true , Public:false}, "AmbiguousReferencedCollectionTypes3", "AmbiguousReferencedCollectionTypes3"); 
    $.Constant({Static:true , Public:false}, "AnnotationAttributeNotFound", "AnnotationAttributeNotFound"); 
    $.Constant({Static:true , Public:false}, "AnonymousTypeNotSupported", "AnonymousTypeNotSupported"); 
    $.Constant({Static:true , Public:false}, "AnyAttributeNotSupported", "AnyAttributeNotSupported"); 
    $.Constant({Static:true , Public:false}, "ArrayExceededSizeAttribute", "ArrayExceededSizeAttribute"); 
    $.Constant({Static:true , Public:false}, "ArrayExceededSize", "ArrayExceededSize"); 
    $.Constant({Static:true , Public:false}, "ArraySizeXmlMismatch", "ArraySizeXmlMismatch"); 
    $.Constant({Static:true , Public:false}, "ArrayItemFormMustBe", "ArrayItemFormMustBe"); 
    $.Constant({Static:true , Public:false}, "ArraySizeAttributeIncorrect", "ArraySizeAttributeIncorrect"); 
    $.Constant({Static:true , Public:false}, "ArrayTypeCannotBeImported", "ArrayTypeCannotBeImported"); 
    $.Constant({Static:true , Public:false}, "ArrayTypeIsNotSupported", "ArrayTypeIsNotSupported"); 
    $.Constant({Static:true , Public:false}, "AssemblyNotFound", "AssemblyNotFound"); 
    $.Constant({Static:true , Public:false}, "AttributeNotFound", "AttributeNotFound"); 
    $.Constant({Static:true , Public:false}, "BaseTypeNotISerializable", "BaseTypeNotISerializable"); 
    $.Constant({Static:true , Public:false}, "CLRNamespaceMappedMultipleTimes", "CLRNamespaceMappedMultipleTimes"); 
    $.Constant({Static:true , Public:false}, "CallbackMustReturnVoid", "CallbackMustReturnVoid"); 
    $.Constant({Static:true , Public:false}, "CallbackParameterInvalid", "CallbackParameterInvalid"); 
    $.Constant({Static:true , Public:false}, "CallbacksCannotBeVirtualMethods", "CallbacksCannotBeVirtualMethods"); 
    $.Constant({Static:true , Public:false}, "CanOnlyStoreIntoArgOrLocGot0", "CanOnlyStoreIntoArgOrLocGot0"); 
    $.Constant({Static:true , Public:false}, "CannotComputeUniqueName", "CannotComputeUniqueName"); 
    $.Constant({Static:true , Public:false}, "CannotDeriveFromSealedReferenceType", "CannotDeriveFromSealedReferenceType"); 
    $.Constant({Static:true , Public:false}, "CannotDeserializeRefAtTopLevel", "CannotDeserializeRefAtTopLevel"); 
    $.Constant({Static:true , Public:false}, "CannotExportNullAssembly", "CannotExportNullAssembly"); 
    $.Constant({Static:true , Public:false}, "CannotExportNullKnownType", "CannotExportNullKnownType"); 
    $.Constant({Static:true , Public:false}, "CannotExportNullType", "CannotExportNullType"); 
    $.Constant({Static:true , Public:false}, "CannotHaveDuplicateElementNames", "CannotHaveDuplicateElementNames"); 
    $.Constant({Static:true , Public:false}, "CannotHaveDuplicateAttributeNames", "CannotHaveDuplicateAttributeNames"); 
    $.Constant({Static:true , Public:false}, "CannotImportInvalidSchemas", "CannotImportInvalidSchemas"); 
    $.Constant({Static:true , Public:false}, "CannotImportNullDataContractName", "CannotImportNullDataContractName"); 
    $.Constant({Static:true , Public:false}, "CannotImportNullSchema", "CannotImportNullSchema"); 
    $.Constant({Static:true , Public:false}, "CannotLoadMemberType", "CannotLoadMemberType"); 
    $.Constant({Static:true , Public:false}, "CannotSerializeObjectWithCycles", "CannotSerializeObjectWithCycles"); 
    $.Constant({Static:true , Public:false}, "CannotSetMembersForReferencedType", "CannotSetMembersForReferencedType"); 
    $.Constant({Static:true , Public:false}, "CannotSetNamespaceForReferencedType", "CannotSetNamespaceForReferencedType"); 
    $.Constant({Static:true , Public:false}, "CannotUseGenericTypeAsBase", "CannotUseGenericTypeAsBase"); 
    $.Constant({Static:true , Public:false}, "CharIsInvalidPrimitive", "CharIsInvalidPrimitive"); 
    $.Constant({Static:true , Public:false}, "CircularTypeReference", "CircularTypeReference"); 
    $.Constant({Static:true , Public:false}, "ClrTypeNotFound", "ClrTypeNotFound"); 
    $.Constant({Static:true , Public:false}, "CollectionTypeCannotBeBuiltIn", "CollectionTypeCannotBeBuiltIn"); 
    $.Constant({Static:true , Public:false}, "CollectionTypeIsNotIEnumerable", "CollectionTypeIsNotIEnumerable"); 
    $.Constant({Static:true , Public:false}, "CollectionTypeDoesNotHaveDefaultCtor", "CollectionTypeDoesNotHaveDefaultCtor"); 
    $.Constant({Static:true , Public:false}, "CollectionTypeDoesNotHaveAddMethod", "CollectionTypeDoesNotHaveAddMethod"); 
    $.Constant({Static:true , Public:false}, "CollectionTypeHasMultipleDefinitionsOfInterface", "CollectionTypeHasMultipleDefinitionsOfInterface"); 
    $.Constant({Static:true , Public:false}, "CollectionTypeCannotHaveDataContract", "CollectionTypeCannotHaveDataContract"); 
    $.Constant({Static:true , Public:false}, "CollectionMustHaveGetEnumeratorMethod", "CollectionMustHaveGetEnumeratorMethod"); 
    $.Constant({Static:true , Public:false}, "CollectionMustHaveAddMethod", "CollectionMustHaveAddMethod"); 
    $.Constant({Static:true , Public:false}, "CollectionMustHaveItemType", "CollectionMustHaveItemType"); 
    $.Constant({Static:true , Public:false}, "ComplexTypeRestrictionNotSupported", "ComplexTypeRestrictionNotSupported"); 
    $.Constant({Static:true , Public:false}, "ConfigIndexOutOfRange", "ConfigIndexOutOfRange"); 
    $.Constant({Static:true , Public:false}, "ConfigMustSetTypeOrIndex", "ConfigMustSetTypeOrIndex"); 
    $.Constant({Static:true , Public:false}, "ConfigMustOnlySetTypeOrIndex", "ConfigMustOnlySetTypeOrIndex"); 
    $.Constant({Static:true , Public:false}, "ConfigMustOnlyAddParamsWithType", "ConfigMustOnlyAddParamsWithType"); 
    $.Constant({Static:true , Public:false}, "ConfigDataContractSerializerSectionLoadError", "ConfigDataContractSerializerSectionLoadError"); 
    $.Constant({Static:true , Public:false}, "CouldNotReadSerializationSchema", "CouldNotReadSerializationSchema"); 
    $.Constant({Static:true , Public:false}, "DataContractCacheOverflow", "DataContractCacheOverflow"); 
    $.Constant({Static:true , Public:false}, "DataContractNamespaceAlreadySet", "DataContractNamespaceAlreadySet"); 
    $.Constant({Static:true , Public:false}, "DataContractNamespaceIsNotValid", "DataContractNamespaceIsNotValid"); 
    $.Constant({Static:true , Public:false}, "DataContractNamespaceReserved", "DataContractNamespaceReserved"); 
    $.Constant({Static:true , Public:false}, "DataMemberOnEnumField", "DataMemberOnEnumField"); 
    $.Constant({Static:true , Public:false}, "DcTypeNotFoundOnDeserialize", "DcTypeNotFoundOnDeserialize"); 
    $.Constant({Static:true , Public:false}, "DcTypeNotFoundOnSerialize", "DcTypeNotFoundOnSerialize"); 
    $.Constant({Static:true , Public:false}, "DcTypeNotResolvedOnDeserialize", "DcTypeNotResolvedOnDeserialize"); 
    $.Constant({Static:true , Public:false}, "DefaultOnElementNotSupported", "DefaultOnElementNotSupported"); 
    $.Constant({Static:true , Public:false}, "DerivedTypeNotISerializable", "DerivedTypeNotISerializable"); 
    $.Constant({Static:true , Public:false}, "DeserializedObjectWithIdNotFound", "DeserializedObjectWithIdNotFound"); 
    $.Constant({Static:true , Public:false}, "DupContractInDataContractSet", "DupContractInDataContractSet"); 
    $.Constant({Static:true , Public:false}, "DupContractInKnownTypes", "DupContractInKnownTypes"); 
    $.Constant({Static:true , Public:false}, "DupEnumMemberValue", "DupEnumMemberValue"); 
    $.Constant({Static:true , Public:false}, "DupKeyValueName", "DupKeyValueName"); 
    $.Constant({Static:true , Public:false}, "DupMemberName", "DupMemberName"); 
    $.Constant({Static:true , Public:false}, "DupTypeContractInDataContractSet", "DupTypeContractInDataContractSet"); 
    $.Constant({Static:true , Public:false}, "DuplicateAttribute", "DuplicateAttribute"); 
    $.Constant({Static:true , Public:false}, "DuplicateCallback", "DuplicateCallback"); 
    $.Constant({Static:true , Public:false}, "DuplicateExtensionDataSetMethod", "DuplicateExtensionDataSetMethod"); 
    $.Constant({Static:true , Public:false}, "ElementMaxOccursMustBe", "ElementMaxOccursMustBe"); 
    $.Constant({Static:true , Public:false}, "ElementMinOccursMustBe", "ElementMinOccursMustBe"); 
    $.Constant({Static:true , Public:false}, "ElementRefOnLocalElementNotSupported", "ElementRefOnLocalElementNotSupported"); 
    $.Constant({Static:true , Public:false}, "EnumListInAnonymousTypeNotSupported", "EnumListInAnonymousTypeNotSupported"); 
    $.Constant({Static:true , Public:false}, "EnumListMustContainAnonymousType", "EnumListMustContainAnonymousType"); 
    $.Constant({Static:true , Public:false}, "EnumOnlyEnumerationFacetsSupported", "EnumOnlyEnumerationFacetsSupported"); 
    $.Constant({Static:true , Public:false}, "EnumEnumerationFacetsMustHaveValue", "EnumEnumerationFacetsMustHaveValue"); 
    $.Constant({Static:true , Public:false}, "EnumRestrictionInvalid", "EnumRestrictionInvalid"); 
    $.Constant({Static:true , Public:false}, "EnumTypeCannotBeImported", "EnumTypeCannotBeImported"); 
    $.Constant({Static:true , Public:false}, "EnumTypeCannotHaveIsReference", "EnumTypeCannotHaveIsReference"); 
    $.Constant({Static:true , Public:false}, "EnumUnionInAnonymousTypeNotSupported", "EnumUnionInAnonymousTypeNotSupported"); 
    $.Constant({Static:true , Public:false}, "ErrorInLine", "ErrorInLine"); 
    $.Constant({Static:true , Public:false}, "ErrorIsStartObject", "ErrorIsStartObject"); 
    $.Constant({Static:true , Public:false}, "ErrorDeserializing", "ErrorDeserializing"); 
    $.Constant({Static:true , Public:false}, "ErrorSerializing", "ErrorSerializing"); 
    $.Constant({Static:true , Public:false}, "ErrorWriteStartObject", "ErrorWriteStartObject"); 
    $.Constant({Static:true , Public:false}, "ErrorWriteEndObject", "ErrorWriteEndObject"); 
    $.Constant({Static:true , Public:false}, "ErrorTypeInfo", "ErrorTypeInfo"); 
    $.Constant({Static:true , Public:false}, "ExceededMaxItemsQuota", "ExceededMaxItemsQuota"); 
    $.Constant({Static:true , Public:false}, "ExpectingElement", "ExpectingElement"); 
    $.Constant({Static:true , Public:false}, "ExpectingElementAtDeserialize", "ExpectingElementAtDeserialize"); 
    $.Constant({Static:true , Public:false}, "ExpectingEnd", "ExpectingEnd"); 
    $.Constant({Static:true , Public:false}, "ExpectingState", "ExpectingState"); 
    $.Constant({Static:true , Public:false}, "EncounteredWithNameNamespace", "EncounteredWithNameNamespace"); 
    $.Constant({Static:true , Public:false}, "FactoryObjectContainsSelfReference", "FactoryObjectContainsSelfReference"); 
    $.Constant({Static:true , Public:false}, "FactoryTypeNotISerializable", "FactoryTypeNotISerializable"); 
    $.Constant({Static:true , Public:false}, "FixedOnElementNotSupported", "FixedOnElementNotSupported"); 
    $.Constant({Static:true , Public:false}, "FormMustBeQualified", "FormMustBeQualified"); 
    $.Constant({Static:true , Public:false}, "GenericAnnotationAttributeNotFound", "GenericAnnotationAttributeNotFound"); 
    $.Constant({Static:true , Public:false}, "GenericAnnotationForNestedLevelMustBeIncreasing", "GenericAnnotationForNestedLevelMustBeIncreasing"); 
    $.Constant({Static:true , Public:false}, "GenericAnnotationHasInvalidAttributeValue", "GenericAnnotationHasInvalidAttributeValue"); 
    $.Constant({Static:true , Public:false}, "GenericAnnotationHasInvalidElement", "GenericAnnotationHasInvalidElement"); 
    $.Constant({Static:true , Public:false}, "GenericNameBraceMismatch", "GenericNameBraceMismatch"); 
    $.Constant({Static:true , Public:false}, "GenericParameterNotValid", "GenericParameterNotValid"); 
    $.Constant({Static:true , Public:false}, "GenericTypeNameMismatch", "GenericTypeNameMismatch"); 
    $.Constant({Static:true , Public:false}, "GenericTypeNotExportable", "GenericTypeNotExportable"); 
    $.Constant({Static:true , Public:false}, "GetOnlyCollectionMustHaveAddMethod", "GetOnlyCollectionMustHaveAddMethod"); 
    $.Constant({Static:true , Public:false}, "GetRealObjectReturnedNull", "GetRealObjectReturnedNull"); 
    $.Constant({Static:true , Public:false}, "InconsistentIsReference", "InconsistentIsReference"); 
    $.Constant({Static:true , Public:false}, "IsAnyCannotBeNull", "IsAnyCannotBeNull"); 
    $.Constant({Static:true , Public:false}, "IsAnyNotSupportedByNetDataContractSerializer", "IsAnyNotSupportedByNetDataContractSerializer"); 
    $.Constant({Static:true , Public:false}, "IsAnyCannotBeSerializedAsDerivedType", "IsAnyCannotBeSerializedAsDerivedType"); 
    $.Constant({Static:true , Public:false}, "IsAnyCannotHaveXmlRoot", "IsAnyCannotHaveXmlRoot"); 
    $.Constant({Static:true , Public:false}, "ISerializableCannotHaveDataContract", "ISerializableCannotHaveDataContract"); 
    $.Constant({Static:true , Public:false}, "ISerializableContainsMoreThanOneItems", "ISerializableContainsMoreThanOneItems"); 
    $.Constant({Static:true , Public:false}, "ISerializableDerivedContainsOneOrMoreItems", "ISerializableDerivedContainsOneOrMoreItems"); 
    $.Constant({Static:true , Public:false}, "ISerializableDoesNotContainAny", "ISerializableDoesNotContainAny"); 
    $.Constant({Static:true , Public:false}, "ISerializableMustRefFactoryTypeAttribute", "ISerializableMustRefFactoryTypeAttribute"); 
    $.Constant({Static:true , Public:false}, "ISerializableTypeCannotBeImported", "ISerializableTypeCannotBeImported"); 
    $.Constant({Static:true , Public:false}, "ISerializableWildcardMaxOccursMustBe", "ISerializableWildcardMaxOccursMustBe"); 
    $.Constant({Static:true , Public:false}, "ISerializableWildcardMinOccursMustBe", "ISerializableWildcardMinOccursMustBe"); 
    $.Constant({Static:true , Public:false}, "ISerializableWildcardNamespaceInvalid", "ISerializableWildcardNamespaceInvalid"); 
    $.Constant({Static:true , Public:false}, "ISerializableWildcardProcessContentsInvalid", "ISerializableWildcardProcessContentsInvalid"); 
    $.Constant({Static:true , Public:false}, "IndexedPropertyCannotBeSerialized", "IndexedPropertyCannotBeSerialized"); 
    $.Constant({Static:true , Public:false}, "InterfaceTypeCannotBeCreated", "InterfaceTypeCannotBeCreated"); 
    $.Constant({Static:true , Public:false}, "InvalidAnnotationExpectingText", "InvalidAnnotationExpectingText"); 
    $.Constant({Static:true , Public:false}, "InvalidAssemblyFormat", "InvalidAssemblyFormat"); 
    $.Constant({Static:true , Public:false}, "InvalidClassDerivation", "InvalidClassDerivation"); 
    $.Constant({Static:true , Public:false}, "InvalidClrNameGeneratedForISerializable", "InvalidClrNameGeneratedForISerializable"); 
    $.Constant({Static:true , Public:false}, "InvalidClrNamespaceGeneratedForISerializable", "InvalidClrNamespaceGeneratedForISerializable"); 
    $.Constant({Static:true , Public:false}, "InvalidCollectionContractItemName", "InvalidCollectionContractItemName"); 
    $.Constant({Static:true , Public:false}, "InvalidCollectionContractKeyName", "InvalidCollectionContractKeyName"); 
    $.Constant({Static:true , Public:false}, "InvalidCollectionContractKeyNoDictionary", "InvalidCollectionContractKeyNoDictionary"); 
    $.Constant({Static:true , Public:false}, "InvalidCollectionContractName", "InvalidCollectionContractName"); 
    $.Constant({Static:true , Public:false}, "InvalidCollectionContractNamespace", "InvalidCollectionContractNamespace"); 
    $.Constant({Static:true , Public:false}, "InvalidCollectionDataContract", "InvalidCollectionDataContract"); 
    $.Constant({Static:true , Public:false}, "InvalidCollectionContractValueName", "InvalidCollectionContractValueName"); 
    $.Constant({Static:true , Public:false}, "InvalidCollectionContractValueNoDictionary", "InvalidCollectionContractValueNoDictionary"); 
    $.Constant({Static:true , Public:false}, "InvalidCollectionType", "InvalidCollectionType"); 
    $.Constant({Static:true , Public:false}, "InvalidDataContractName", "InvalidDataContractName"); 
    $.Constant({Static:true , Public:false}, "InvalidDataContractNamespace", "InvalidDataContractNamespace"); 
    $.Constant({Static:true , Public:false}, "InvalidDataMemberName", "InvalidDataMemberName"); 
    $.Constant({Static:true , Public:false}, "InvalidDataNode", "InvalidDataNode"); 
    $.Constant({Static:true , Public:false}, "InvalidEmitDefaultAnnotation", "InvalidEmitDefaultAnnotation"); 
    $.Constant({Static:true , Public:false}, "InvalidEnumBaseType", "InvalidEnumBaseType"); 
    $.Constant({Static:true , Public:false}, "InvalidEnumMemberValue", "InvalidEnumMemberValue"); 
    $.Constant({Static:true , Public:false}, "InvalidEnumValueOnWrite", "InvalidEnumValueOnWrite"); 
    $.Constant({Static:true , Public:false}, "InvalidEnumValueOnRead", "InvalidEnumValueOnRead"); 
    $.Constant({Static:true , Public:false}, "InvalidGetSchemaMethod", "InvalidGetSchemaMethod"); 
    $.Constant({Static:true , Public:false}, "InvalidGlobalDataContractNamespace", "InvalidGlobalDataContractNamespace"); 
    $.Constant({Static:true , Public:false}, "InvalidInclusivePrefixListCollection", "InvalidInclusivePrefixListCollection"); 
    $.Constant({Static:true , Public:false}, "InvalidISerializableDerivation", "InvalidISerializableDerivation"); 
    $.Constant({Static:true , Public:false}, "InvalidIdDefinition", "InvalidIdDefinition"); 
    $.Constant({Static:true , Public:false}, "InvalidKeyValueType", "InvalidKeyValueType"); 
    $.Constant({Static:true , Public:false}, "InvalidKeyValueTypeNamespace", "InvalidKeyValueTypeNamespace"); 
    $.Constant({Static:true , Public:false}, "InvalidMember", "InvalidMember"); 
    $.Constant({Static:true , Public:false}, "InvalidLocalNameEmpty", "InvalidLocalNameEmpty"); 
    $.Constant({Static:true , Public:false}, "InvalidNodeType", "InvalidNodeType"); 
    $.Constant({Static:true , Public:false}, "InvalidNonNullReturnValueByIsAny", "InvalidNonNullReturnValueByIsAny"); 
    $.Constant({Static:true , Public:false}, "InvalidPrimitiveType", "InvalidPrimitiveType"); 
    $.Constant({Static:true , Public:false}, "InvalidRefDefinition", "InvalidRefDefinition"); 
    $.Constant({Static:true , Public:false}, "InvalidReturnTypeOnGetSchemaMethod", "InvalidReturnTypeOnGetSchemaMethod"); 
    $.Constant({Static:true , Public:false}, "InvalidReturnSchemaOnGetSchemaMethod", "InvalidReturnSchemaOnGetSchemaMethod"); 
    $.Constant({Static:true , Public:false}, "InvalidSizeDefinition", "InvalidSizeDefinition"); 
    $.Constant({Static:true , Public:false}, "InvalidStateInExtensionDataReader", "InvalidStateInExtensionDataReader"); 
    $.Constant({Static:true , Public:false}, "InvalidXmlDataContractName", "InvalidXmlDataContractName"); 
    $.Constant({Static:true , Public:false}, "InvalidXmlDeserializingExtensionData", "InvalidXmlDeserializingExtensionData"); 
    $.Constant({Static:true , Public:false}, "InvalidXsIdDefinition", "InvalidXsIdDefinition"); 
    $.Constant({Static:true , Public:false}, "InvalidXsRefDefinition", "InvalidXsRefDefinition"); 
    $.Constant({Static:true , Public:false}, "InvalidXmlQualifiedNameValue", "InvalidXmlQualifiedNameValue"); 
    $.Constant({Static:true , Public:false}, "IsNotAssignableFrom", "IsNotAssignableFrom"); 
    $.Constant({Static:true , Public:false}, "IsDictionaryFormattedIncorrectly", "IsDictionaryFormattedIncorrectly"); 
    $.Constant({Static:true , Public:false}, "IsRequiredDataMemberOnIsReferenceDataContractType", "IsRequiredDataMemberOnIsReferenceDataContractType"); 
    $.Constant({Static:true , Public:false}, "IsValueTypeFormattedIncorrectly", "IsValueTypeFormattedIncorrectly"); 
    $.Constant({Static:true , Public:false}, "IXmlSerializableCannotHaveCollectionDataContract", "IXmlSerializableCannotHaveCollectionDataContract"); 
    $.Constant({Static:true , Public:false}, "IXmlSerializableCannotHaveDataContract", "IXmlSerializableCannotHaveDataContract"); 
    $.Constant({Static:true , Public:false}, "IXmlSerializableIllegalOperation", "IXmlSerializableIllegalOperation"); 
    $.Constant({Static:true , Public:false}, "IXmlSerializableMustHaveDefaultConstructor", "IXmlSerializableMustHaveDefaultConstructor"); 
    $.Constant({Static:true , Public:false}, "IXmlSerializableWritePastSubTree", "IXmlSerializableWritePastSubTree"); 
    $.Constant({Static:true , Public:false}, "IXmlSerializableMissingEndElements", "IXmlSerializableMissingEndElements"); 
    $.Constant({Static:true , Public:false}, "PartialTrustIXmlSerializableTypeNotPublic", "PartialTrustIXmlSerializableTypeNotPublic"); 
    $.Constant({Static:true , Public:false}, "PartialTrustIXmlSerialzableNoPublicConstructor", "PartialTrustIXmlSerialzableNoPublicConstructor"); 
    $.Constant({Static:true , Public:false}, "PartialTrustDataContractTypeNotPublic", "PartialTrustDataContractTypeNotPublic"); 
    $.Constant({Static:true , Public:false}, "PartialTrustISerializableNoPublicConstructor", "PartialTrustISerializableNoPublicConstructor"); 
    $.Constant({Static:true , Public:false}, "PartialTrustNonAttributedSerializableTypeNoPublicConstructor", "PartialTrustNonAttributedSerializableTypeNoPublicConstructor"); 
    $.Constant({Static:true , Public:false}, "PartialTrustDataContractOnSerializingNotPublic", "PartialTrustDataContractOnSerializingNotPublic"); 
    $.Constant({Static:true , Public:false}, "PartialTrustDataContractOnSerializedNotPublic", "PartialTrustDataContractOnSerializedNotPublic"); 
    $.Constant({Static:true , Public:false}, "PartialTrustDataContractOnDeserializingNotPublic", "PartialTrustDataContractOnDeserializingNotPublic"); 
    $.Constant({Static:true , Public:false}, "PartialTrustDataContractOnDeserializedNotPublic", "PartialTrustDataContractOnDeserializedNotPublic"); 
    $.Constant({Static:true , Public:false}, "PartialTrustDataContractFieldGetNotPublic", "PartialTrustDataContractFieldGetNotPublic"); 
    $.Constant({Static:true , Public:false}, "PartialTrustDataContractFieldSetNotPublic", "PartialTrustDataContractFieldSetNotPublic"); 
    $.Constant({Static:true , Public:false}, "PartialTrustDataContractPropertyGetNotPublic", "PartialTrustDataContractPropertyGetNotPublic"); 
    $.Constant({Static:true , Public:false}, "PartialTrustDataContractPropertySetNotPublic", "PartialTrustDataContractPropertySetNotPublic"); 
    $.Constant({Static:true , Public:false}, "PartialTrustCollectionContractTypeNotPublic", "PartialTrustCollectionContractTypeNotPublic"); 
    $.Constant({Static:true , Public:false}, "PartialTrustCollectionContractNoPublicConstructor", "PartialTrustCollectionContractNoPublicConstructor"); 
    $.Constant({Static:true , Public:false}, "PartialTrustCollectionContractAddMethodNotPublic", "PartialTrustCollectionContractAddMethodNotPublic"); 
    $.Constant({Static:true , Public:false}, "NonAttributedSerializableTypesMustHaveDefaultConstructor", "NonAttributedSerializableTypesMustHaveDefaultConstructor"); 
    $.Constant({Static:true , Public:false}, "AttributedTypesCannotInheritFromNonAttributedSerializableTypes", "AttributedTypesCannotInheritFromNonAttributedSerializableTypes"); 
    $.Constant({Static:true , Public:false}, "ClassDataContractReturnedForGetOnlyCollection", "ClassDataContractReturnedForGetOnlyCollection"); 
    $.Constant({Static:true , Public:false}, "IsReferenceGetOnlyCollectionsNotSupported", "IsReferenceGetOnlyCollectionsNotSupported"); 
    $.Constant({Static:true , Public:false}, "SurrogatesWithGetOnlyCollectionsNotSupported", "SurrogatesWithGetOnlyCollectionsNotSupported"); 
    $.Constant({Static:true , Public:false}, "SurrogatesWithGetOnlyCollectionsNotSupportedSerDeser", "SurrogatesWithGetOnlyCollectionsNotSupportedSerDeser"); 
    $.Constant({Static:true , Public:false}, "NullValueReturnedForGetOnlyCollection", "NullValueReturnedForGetOnlyCollection"); 
    $.Constant({Static:true , Public:false}, "KnownTypeAttributeEmptyString", "KnownTypeAttributeEmptyString"); 
    $.Constant({Static:true , Public:false}, "KnownTypeAttributeUnknownMethod", "KnownTypeAttributeUnknownMethod"); 
    $.Constant({Static:true , Public:false}, "KnownTypeAttributeReturnType", "KnownTypeAttributeReturnType"); 
    $.Constant({Static:true , Public:false}, "KnownTypeAttributeOneScheme", "KnownTypeAttributeOneScheme"); 
    $.Constant({Static:true , Public:false}, "KnownTypeAttributeValidMethodTypes", "KnownTypeAttributeValidMethodTypes"); 
    $.Constant({Static:true , Public:false}, "KnownTypeAttributeNoData", "KnownTypeAttributeNoData"); 
    $.Constant({Static:true , Public:false}, "KnownTypeAttributeMethodNull", "KnownTypeAttributeMethodNull"); 
    $.Constant({Static:true , Public:false}, "KnownTypeConfigObject", "KnownTypeConfigObject"); 
    $.Constant({Static:true , Public:false}, "KnownTypeConfigClosedGenericDeclared", "KnownTypeConfigClosedGenericDeclared"); 
    $.Constant({Static:true , Public:false}, "KnownTypeConfigGenericParamMismatch", "KnownTypeConfigGenericParamMismatch"); 
    $.Constant({Static:true , Public:false}, "KnownTypeConfigIndexOutOfBoundsZero", "KnownTypeConfigIndexOutOfBoundsZero"); 
    $.Constant({Static:true , Public:false}, "KnownTypeConfigIndexOutOfBounds", "KnownTypeConfigIndexOutOfBounds"); 
    $.Constant({Static:true , Public:false}, "MaxArrayLengthExceeded", "MaxArrayLengthExceeded"); 
    $.Constant({Static:true , Public:false}, "MixedContentNotSupported", "MixedContentNotSupported"); 
    $.Constant({Static:true , Public:false}, "MissingGetSchemaMethod", "MissingGetSchemaMethod"); 
    $.Constant({Static:true , Public:false}, "MissingSchemaType", "MissingSchemaType"); 
    $.Constant({Static:true , Public:false}, "MultipleIdDefinition", "MultipleIdDefinition"); 
    $.Constant({Static:true , Public:false}, "MustContainOnlyLocalElements", "MustContainOnlyLocalElements"); 
    $.Constant({Static:true , Public:false}, "NameCannotBeNullOrEmpty", "NameCannotBeNullOrEmpty"); 
    $.Constant({Static:true , Public:false}, "NoConversionPossibleTo", "NoConversionPossibleTo"); 
    $.Constant({Static:true , Public:false}, "NoGetMethodForProperty", "NoGetMethodForProperty"); 
    $.Constant({Static:true , Public:false}, "NoSetMethodForProperty", "NoSetMethodForProperty"); 
    $.Constant({Static:true , Public:false}, "NonOptionalFieldMemberOnIsReferenceSerializableType", "NonOptionalFieldMemberOnIsReferenceSerializableType"); 
    $.Constant({Static:true , Public:false}, "NullKnownType", "NullKnownType"); 
    $.Constant({Static:true , Public:false}, "ObjectTableOverflow", "ObjectTableOverflow"); 
    $.Constant({Static:true , Public:false}, "OnlyDataContractTypesCanHaveExtensionData", "OnlyDataContractTypesCanHaveExtensionData"); 
    $.Constant({Static:true , Public:false}, "OrderCannotBeNegative", "OrderCannotBeNegative"); 
    $.Constant({Static:true , Public:false}, "OutParametersMustBeByRefTypeReceived", "OutParametersMustBeByRefTypeReceived"); 
    $.Constant({Static:true , Public:false}, "ParameterCountMismatch", "ParameterCountMismatch"); 
    $.Constant({Static:true , Public:false}, "QueryGeneratorPathToMemberNotFound", "QueryGeneratorPathToMemberNotFound"); 
    $.Constant({Static:true , Public:false}, "QuotaMustBePositive", "QuotaMustBePositive"); 
    $.Constant({Static:true , Public:false}, "QuotaIsReadOnly", "QuotaIsReadOnly"); 
    $.Constant({Static:true , Public:false}, "QuotaCopyReadOnly", "QuotaCopyReadOnly"); 
    $.Constant({Static:true , Public:false}, "RecursiveCollectionType", "RecursiveCollectionType"); 
    $.Constant({Static:true , Public:false}, "RedefineNotSupported", "RedefineNotSupported"); 
    $.Constant({Static:true , Public:false}, "ReferencedBaseTypeDoesNotExist", "ReferencedBaseTypeDoesNotExist"); 
    $.Constant({Static:true , Public:false}, "ReferencedCollectionTypesCannotContainNull", "ReferencedCollectionTypesCannotContainNull"); 
    $.Constant({Static:true , Public:false}, "ReferencedTypeDoesNotMatch", "ReferencedTypeDoesNotMatch"); 
    $.Constant({Static:true , Public:false}, "ReferencedTypeMatchingMessage", "ReferencedTypeMatchingMessage"); 
    $.Constant({Static:true , Public:false}, "ReferencedTypeNotMatchingMessage", "ReferencedTypeNotMatchingMessage"); 
    $.Constant({Static:true , Public:false}, "ReferencedTypesCannotContainNull", "ReferencedTypesCannotContainNull"); 
    $.Constant({Static:true , Public:false}, "RequiredMemberMustBeEmitted", "RequiredMemberMustBeEmitted"); 
    $.Constant({Static:true , Public:false}, "RequiresClassDataContractToSetIsISerializable", "RequiresClassDataContractToSetIsISerializable"); 
    $.Constant({Static:true , Public:false}, "ResolveTypeReturnedFalse", "ResolveTypeReturnedFalse"); 
    $.Constant({Static:true , Public:false}, "ResolveTypeReturnedNull", "ResolveTypeReturnedNull"); 
    $.Constant({Static:true , Public:false}, "RootParticleMustBeSequence", "RootParticleMustBeSequence"); 
    $.Constant({Static:true , Public:false}, "RootSequenceMaxOccursMustBe", "RootSequenceMaxOccursMustBe"); 
    $.Constant({Static:true , Public:false}, "RootSequenceMustBeRequired", "RootSequenceMustBeRequired"); 
    $.Constant({Static:true , Public:false}, "SerializationInfo_ConstructorNotFound", "SerializationInfo_ConstructorNotFound"); 
    $.Constant({Static:true , Public:false}, "SimpleContentNotSupported", "SimpleContentNotSupported"); 
    $.Constant({Static:true , Public:false}, "SimpleTypeRestrictionDoesNotSpecifyBase", "SimpleTypeRestrictionDoesNotSpecifyBase"); 
    $.Constant({Static:true , Public:false}, "SimpleTypeUnionNotSupported", "SimpleTypeUnionNotSupported"); 
    $.Constant({Static:true , Public:false}, "SpecifiedTypeNotFoundInSchema", "SpecifiedTypeNotFoundInSchema"); 
    $.Constant({Static:true , Public:false}, "SubstitutionGroupOnElementNotSupported", "SubstitutionGroupOnElementNotSupported"); 
    $.Constant({Static:true , Public:false}, "SupportForMultidimensionalArraysNotPresent", "SupportForMultidimensionalArraysNotPresent"); 
    $.Constant({Static:true , Public:false}, "TooManyCollectionContracts", "TooManyCollectionContracts"); 
    $.Constant({Static:true , Public:false}, "TooManyDataContracts", "TooManyDataContracts"); 
    $.Constant({Static:true , Public:false}, "TooManyDataMembers", "TooManyDataMembers"); 
    $.Constant({Static:true , Public:false}, "TooManyEnumMembers", "TooManyEnumMembers"); 
    $.Constant({Static:true , Public:false}, "TooManyIgnoreDataMemberAttributes", "TooManyIgnoreDataMemberAttributes"); 
    $.Constant({Static:true , Public:false}, "TopLevelElementRepresentsDifferentType", "TopLevelElementRepresentsDifferentType"); 
    $.Constant({Static:true , Public:false}, "TraceCodeElementIgnored", "TraceCodeElementIgnored"); 
    $.Constant({Static:true , Public:false}, "TraceCodeFactoryTypeNotFound", "TraceCodeFactoryTypeNotFound"); 
    $.Constant({Static:true , Public:false}, "TraceCodeObjectWithLargeDepth", "TraceCodeObjectWithLargeDepth"); 
    $.Constant({Static:true , Public:false}, "TraceCodeWriteObjectBegin", "TraceCodeWriteObjectBegin"); 
    $.Constant({Static:true , Public:false}, "TraceCodeWriteObjectEnd", "TraceCodeWriteObjectEnd"); 
    $.Constant({Static:true , Public:false}, "TraceCodeWriteObjectContentBegin", "TraceCodeWriteObjectContentBegin"); 
    $.Constant({Static:true , Public:false}, "TraceCodeWriteObjectContentEnd", "TraceCodeWriteObjectContentEnd"); 
    $.Constant({Static:true , Public:false}, "TraceCodeReadObjectBegin", "TraceCodeReadObjectBegin"); 
    $.Constant({Static:true , Public:false}, "TraceCodeReadObjectEnd", "TraceCodeReadObjectEnd"); 
    $.Constant({Static:true , Public:false}, "TraceCodeXsdExportAnnotationFailed", "TraceCodeXsdExportAnnotationFailed"); 
    $.Constant({Static:true , Public:false}, "TraceCodeXsdExportBegin", "TraceCodeXsdExportBegin"); 
    $.Constant({Static:true , Public:false}, "TraceCodeXsdExportDupItems", "TraceCodeXsdExportDupItems"); 
    $.Constant({Static:true , Public:false}, "TraceCodeXsdExportEnd", "TraceCodeXsdExportEnd"); 
    $.Constant({Static:true , Public:false}, "TraceCodeXsdExportError", "TraceCodeXsdExportError"); 
    $.Constant({Static:true , Public:false}, "TraceCodeXsdImportAnnotationFailed", "TraceCodeXsdImportAnnotationFailed"); 
    $.Constant({Static:true , Public:false}, "TraceCodeXsdImportBegin", "TraceCodeXsdImportBegin"); 
    $.Constant({Static:true , Public:false}, "TraceCodeXsdImportEnd", "TraceCodeXsdImportEnd"); 
    $.Constant({Static:true , Public:false}, "TraceCodeXsdImportError", "TraceCodeXsdImportError"); 
    $.Constant({Static:true , Public:false}, "TypeCannotBeImported", "TypeCannotBeImported"); 
    $.Constant({Static:true , Public:false}, "TypeCannotBeImportedHowToFix", "TypeCannotBeImportedHowToFix"); 
    $.Constant({Static:true , Public:false}, "TypeHasNotBeenImported", "TypeHasNotBeenImported"); 
    $.Constant({Static:true , Public:false}, "TypeMustBeIXmlSerializable", "TypeMustBeIXmlSerializable"); 
    $.Constant({Static:true , Public:false}, "TypeNotSerializable", "TypeNotSerializable"); 
    $.Constant({Static:true , Public:false}, "TypeMustNotBeOpenGeneric", "TypeMustNotBeOpenGeneric"); 
    $.Constant({Static:true , Public:false}, "TypeMustBeConcrete", "TypeMustBeConcrete"); 
    $.Constant({Static:true , Public:false}, "TypeShouldNotContainAttributes", "TypeShouldNotContainAttributes"); 
    $.Constant({Static:true , Public:false}, "UnexpectedContractType", "UnexpectedContractType"); 
    $.Constant({Static:true , Public:false}, "UnexpectedElementExpectingElements", "UnexpectedElementExpectingElements"); 
    $.Constant({Static:true , Public:false}, "UnexpectedEndOfFile", "UnexpectedEndOfFile"); 
    $.Constant({Static:true , Public:false}, "UnknownConstantType", "UnknownConstantType"); 
    $.Constant({Static:true , Public:false}, "UnknownXmlType", "UnknownXmlType"); 
    $.Constant({Static:true , Public:false}, "ExtensionDataSetMustReturnVoid", "ExtensionDataSetMustReturnVoid"); 
    $.Constant({Static:true , Public:false}, "ExtensionDataSetParameterInvalid", "ExtensionDataSetParameterInvalid"); 
    $.Constant({Static:true , Public:false}, "ValueTypeCannotBeNull", "ValueTypeCannotBeNull"); 
    $.Constant({Static:true , Public:false}, "ValueTypeCannotHaveBaseType", "ValueTypeCannotHaveBaseType"); 
    $.Constant({Static:true , Public:false}, "ValueTypeCannotHaveId", "ValueTypeCannotHaveId"); 
    $.Constant({Static:true , Public:false}, "ValueTypeCannotHaveIsReference", "ValueTypeCannotHaveIsReference"); 
    $.Constant({Static:true , Public:false}, "ValueTypeCannotHaveRef", "ValueTypeCannotHaveRef"); 
    $.Constant({Static:true , Public:false}, "XmlForObjectCannotHaveContent", "XmlForObjectCannotHaveContent"); 
    $.Constant({Static:true , Public:false}, "XmlFoundElement", "XmlFoundElement"); 
    $.Constant({Static:true , Public:false}, "XmlFoundEndElement", "XmlFoundEndElement"); 
    $.Constant({Static:true , Public:false}, "XmlFoundText", "XmlFoundText"); 
    $.Constant({Static:true , Public:false}, "XmlFoundCData", "XmlFoundCData"); 
    $.Constant({Static:true , Public:false}, "XmlFoundComment", "XmlFoundComment"); 
    $.Constant({Static:true , Public:false}, "XmlFoundEndOfFile", "XmlFoundEndOfFile"); 
    $.Constant({Static:true , Public:false}, "XmlFoundNodeType", "XmlFoundNodeType"); 
    $.Constant({Static:true , Public:false}, "XmlCloseCData", "XmlCloseCData"); 
    $.Constant({Static:true , Public:false}, "XmlStartElementExpected", "XmlStartElementExpected"); 
    $.Constant({Static:true , Public:false}, "XmlStartElementNameExpected", "XmlStartElementNameExpected"); 
    $.Constant({Static:true , Public:false}, "XmlStartElementLocalNameNsExpected", "XmlStartElementLocalNameNsExpected"); 
    $.Constant({Static:true , Public:false}, "XmlFullStartElementExpected", "XmlFullStartElementExpected"); 
    $.Constant({Static:true , Public:false}, "XmlFullStartElementNameExpected", "XmlFullStartElementNameExpected"); 
    $.Constant({Static:true , Public:false}, "XmlFullStartElementLocalNameNsExpected", "XmlFullStartElementLocalNameNsExpected"); 
    $.Constant({Static:true , Public:false}, "XmlEndElementExpected", "XmlEndElementExpected"); 
    $.Constant({Static:true , Public:false}, "XmlMaxDepthExceeded", "XmlMaxDepthExceeded"); 
    $.Constant({Static:true , Public:false}, "XmlMaxStringContentLengthExceeded", "XmlMaxStringContentLengthExceeded"); 
    $.Constant({Static:true , Public:false}, "XmlMaxArrayLengthExceeded", "XmlMaxArrayLengthExceeded"); 
    $.Constant({Static:true , Public:false}, "XmlMaxArrayLengthOrMaxItemsQuotaExceeded", "XmlMaxArrayLengthOrMaxItemsQuotaExceeded"); 
    $.Constant({Static:true , Public:false}, "XmlMaxBytesPerReadExceeded", "XmlMaxBytesPerReadExceeded"); 
    $.Constant({Static:true , Public:false}, "XmlMaxNameTableCharCountExceeded", "XmlMaxNameTableCharCountExceeded"); 
    $.Constant({Static:true , Public:false}, "XmlBase64DataExpected", "XmlBase64DataExpected"); 
    $.Constant({Static:true , Public:false}, "XmlUndefinedPrefix", "XmlUndefinedPrefix"); 
    $.Constant({Static:true , Public:false}, "XmlProcessingInstructionNotSupported", "XmlProcessingInstructionNotSupported"); 
    $.Constant({Static:true , Public:false}, "XmlUnexpectedEndOfFile", "XmlUnexpectedEndOfFile"); 
    $.Constant({Static:true , Public:false}, "XmlUnexpectedEndElement", "XmlUnexpectedEndElement"); 
    $.Constant({Static:true , Public:false}, "XmlDuplicateAttribute", "XmlDuplicateAttribute"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidFormat", "XmlInvalidFormat"); 
    $.Constant({Static:true , Public:false}, "XmlTokenExpected", "XmlTokenExpected"); 
    $.Constant({Static:true , Public:false}, "XmlTagMismatch", "XmlTagMismatch"); 
    $.Constant({Static:true , Public:false}, "XmlDeclNotFirst", "XmlDeclNotFirst"); 
    $.Constant({Static:true , Public:false}, "XmlConversionOverflow", "XmlConversionOverflow"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidConversion", "XmlInvalidConversion"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidUTF8Bytes", "XmlInvalidUTF8Bytes"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidBytes", "XmlInvalidBytes"); 
    $.Constant({Static:true , Public:false}, "XmlEmptyNamespaceRequiresNullPrefix", "XmlEmptyNamespaceRequiresNullPrefix"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidCharRef", "XmlInvalidCharRef"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidFFFE", "XmlInvalidFFFE"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidCommentChars", "XmlInvalidCommentChars"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidDepth", "XmlInvalidDepth"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidHighSurrogate", "XmlInvalidHighSurrogate"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidLowSurrogate", "XmlInvalidLowSurrogate"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidSurrogate", "XmlInvalidSurrogate"); 
    $.Constant({Static:true , Public:false}, "XmlMissingLowSurrogate", "XmlMissingLowSurrogate"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidID", "XmlInvalidID"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidOperation", "XmlInvalidOperation"); 
    $.Constant({Static:true , Public:false}, "XmlEndElementNoOpenNodes", "XmlEndElementNoOpenNodes"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidPrefixState", "XmlInvalidPrefixState"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidRootData", "XmlInvalidRootData"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidWriteState", "XmlInvalidWriteState"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidXmlSpace", "XmlInvalidXmlSpace"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidXmlByte", "XmlInvalidXmlByte"); 
    $.Constant({Static:true , Public:false}, "XmlIDDefined", "XmlIDDefined"); 
    $.Constant({Static:true , Public:false}, "XmlKeyAlreadyExists", "XmlKeyAlreadyExists"); 
    $.Constant({Static:true , Public:false}, "XmlLineInfo", "XmlLineInfo"); 
    $.Constant({Static:true , Public:false}, "XmlMethodNotSupported", "XmlMethodNotSupported"); 
    $.Constant({Static:true , Public:false}, "XmlMultipleRootElements", "XmlMultipleRootElements"); 
    $.Constant({Static:true , Public:false}, "XmlWriteFunctionInvalid", "XmlWriteFunctionInvalid"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidDeclaration", "XmlInvalidDeclaration"); 
    $.Constant({Static:true , Public:false}, "XmlPrefixBoundToNamespace", "XmlPrefixBoundToNamespace"); 
    $.Constant({Static:true , Public:false}, "XmlReservedPrefix", "XmlReservedPrefix"); 
    $.Constant({Static:true , Public:false}, "XmlNamespaceNotFound", "XmlNamespaceNotFound"); 
    $.Constant({Static:true , Public:false}, "XmlSpecificBindingNamespace", "XmlSpecificBindingNamespace"); 
    $.Constant({Static:true , Public:false}, "XmlSpecificBindingPrefix", "XmlSpecificBindingPrefix"); 
    $.Constant({Static:true , Public:false}, "XmlOnlyWhitespace", "XmlOnlyWhitespace"); 
    $.Constant({Static:true , Public:false}, "XmlWriterMustBeInElement", "XmlWriterMustBeInElement"); 
    $.Constant({Static:true , Public:false}, "XmlOnlySingleValue", "XmlOnlySingleValue"); 
    $.Constant({Static:true , Public:false}, "XmlWriterClosed", "XmlWriterClosed"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidVersion", "XmlInvalidVersion"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidEncoding", "XmlInvalidEncoding"); 
    $.Constant({Static:true , Public:false}, "XmlEncodingNotSupported", "XmlEncodingNotSupported"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidStandalone", "XmlInvalidStandalone"); 
    $.Constant({Static:true , Public:false}, "XmlSpaceBetweenAttributes", "XmlSpaceBetweenAttributes"); 
    $.Constant({Static:true , Public:false}, "XmlCDATAInvalidAtTopLevel", "XmlCDATAInvalidAtTopLevel"); 
    $.Constant({Static:true , Public:false}, "XmlEncodingMismatch", "XmlEncodingMismatch"); 
    $.Constant({Static:true , Public:false}, "XmlMalformedDecl", "XmlMalformedDecl"); 
    $.Constant({Static:true , Public:false}, "XmlExpectedEncoding", "XmlExpectedEncoding"); 
    $.Constant({Static:true , Public:false}, "XmlDeclarationRequired", "XmlDeclarationRequired"); 
    $.Constant({Static:true , Public:false}, "XmlDeclMissingVersion", "XmlDeclMissingVersion"); 
    $.Constant({Static:true , Public:false}, "XmlDeclMissing", "XmlDeclMissing"); 
    $.Constant({Static:true , Public:false}, "XmlBadBOM", "XmlBadBOM"); 
    $.Constant({Static:true , Public:false}, "XmlNoRootElement", "XmlNoRootElement"); 
    $.Constant({Static:true , Public:false}, "XmlIllegalOutsideRoot", "XmlIllegalOutsideRoot"); 
    $.Constant({Static:true , Public:false}, "XmlOnlyOneRoot", "XmlOnlyOneRoot"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidBase64Sequence", "XmlInvalidBase64Sequence"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidBase64Length", "XmlInvalidBase64Length"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidBinHexSequence", "XmlInvalidBinHexSequence"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidBinHexLength", "XmlInvalidBinHexLength"); 
    $.Constant({Static:true , Public:false}, "XmlArrayTooSmall", "XmlArrayTooSmall"); 
    $.Constant({Static:true , Public:false}, "XmlArrayTooSmallInput", "XmlArrayTooSmallInput"); 
    $.Constant({Static:true , Public:false}, "XmlArrayTooSmallOutput", "XmlArrayTooSmallOutput"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidQualifiedName", "XmlInvalidQualifiedName"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidUniqueId", "XmlInvalidUniqueId"); 
    $.Constant({Static:true , Public:false}, "XmlInvalidStream", "XmlInvalidStream"); 
    $.Constant({Static:true , Public:false}, "XmlNestedArraysNotSupported", "XmlNestedArraysNotSupported"); 
    $.Constant({Static:true , Public:false}, "XmlCanonicalizationStarted", "XmlCanonicalizationStarted"); 
    $.Constant({Static:true , Public:false}, "XmlCanonicalizationNotStarted", "XmlCanonicalizationNotStarted"); 
    $.Constant({Static:true , Public:false}, "XmlElementAttributes", "XmlElementAttributes"); 
    $.Constant({Static:true , Public:false}, "ValueMustBeNonNegative", "ValueMustBeNonNegative"); 
    $.Constant({Static:true , Public:false}, "OffsetExceedsBufferSize", "OffsetExceedsBufferSize"); 
    $.Constant({Static:true , Public:false}, "SizeExceedsRemainingBufferSpace", "SizeExceedsRemainingBufferSpace"); 
    $.Constant({Static:true , Public:false}, "XmlDictionaryStringIDRange", "XmlDictionaryStringIDRange"); 
    $.Constant({Static:true , Public:false}, "XmlDictionaryStringIDUndefinedSession", "XmlDictionaryStringIDUndefinedSession"); 
    $.Constant({Static:true , Public:false}, "XmlDictionaryStringIDUndefinedStatic", "XmlDictionaryStringIDUndefinedStatic"); 
    $.Constant({Static:true , Public:false}, "ValueMustBeInRange", "ValueMustBeInRange"); 
    $.Constant({Static:true , Public:false}, "CombinedPrefixNSLength", "CombinedPrefixNSLength"); 
    $.Constant({Static:true , Public:false}, "MimeContentTypeHeaderInvalid", "MimeContentTypeHeaderInvalid"); 
    $.Constant({Static:true , Public:false}, "MimeHeaderInvalidCharacter", "MimeHeaderInvalidCharacter"); 
    $.Constant({Static:true , Public:false}, "MimeMessageGetContentStreamCalledAlready", "MimeMessageGetContentStreamCalledAlready"); 
    $.Constant({Static:true , Public:false}, "MimeReaderHeaderAlreadyExists", "MimeReaderHeaderAlreadyExists"); 
    $.Constant({Static:true , Public:false}, "MimeReaderMalformedHeader", "MimeReaderMalformedHeader"); 
    $.Constant({Static:true , Public:false}, "MimeReaderResetCalledBeforeEOF", "MimeReaderResetCalledBeforeEOF"); 
    $.Constant({Static:true , Public:false}, "MimeReaderTruncated", "MimeReaderTruncated"); 
    $.Constant({Static:true , Public:false}, "MimeVersionHeaderInvalid", "MimeVersionHeaderInvalid"); 
    $.Constant({Static:true , Public:false}, "MimeWriterInvalidStateForClose", "MimeWriterInvalidStateForClose"); 
    $.Constant({Static:true , Public:false}, "MimeWriterInvalidStateForHeader", "MimeWriterInvalidStateForHeader"); 
    $.Constant({Static:true , Public:false}, "MimeWriterInvalidStateForContent", "MimeWriterInvalidStateForContent"); 
    $.Constant({Static:true , Public:false}, "MimeWriterInvalidStateForStartPart", "MimeWriterInvalidStateForStartPart"); 
    $.Constant({Static:true , Public:false}, "MimeWriterInvalidStateForStartPreface", "MimeWriterInvalidStateForStartPreface"); 
    $.Constant({Static:true , Public:false}, "MtomBoundaryInvalid", "MtomBoundaryInvalid"); 
    $.Constant({Static:true , Public:false}, "MtomBufferQuotaExceeded", "MtomBufferQuotaExceeded"); 
    $.Constant({Static:true , Public:false}, "MtomContentTransferEncodingNotPresent", "MtomContentTransferEncodingNotPresent"); 
    $.Constant({Static:true , Public:false}, "MtomContentTransferEncodingNotSupported", "MtomContentTransferEncodingNotSupported"); 
    $.Constant({Static:true , Public:false}, "MtomContentTypeInvalid", "MtomContentTypeInvalid"); 
    $.Constant({Static:true , Public:false}, "MtomDataMustNotContainXopInclude", "MtomDataMustNotContainXopInclude"); 
    $.Constant({Static:true , Public:false}, "MtomExceededMaxSizeInBytes", "MtomExceededMaxSizeInBytes"); 
    $.Constant({Static:true , Public:false}, "MtomInvalidCIDUri", "MtomInvalidCIDUri"); 
    $.Constant({Static:true , Public:false}, "MtomInvalidEmptyURI", "MtomInvalidEmptyURI"); 
    $.Constant({Static:true , Public:false}, "MtomInvalidStartUri", "MtomInvalidStartUri"); 
    $.Constant({Static:true , Public:false}, "MtomInvalidTransferEncodingForMimePart", "MtomInvalidTransferEncodingForMimePart"); 
    $.Constant({Static:true , Public:false}, "MtomMessageContentTypeNotFound", "MtomMessageContentTypeNotFound"); 
    $.Constant({Static:true , Public:false}, "MtomMessageInvalidContent", "MtomMessageInvalidContent"); 
    $.Constant({Static:true , Public:false}, "MtomMessageInvalidContentInMimePart", "MtomMessageInvalidContentInMimePart"); 
    $.Constant({Static:true , Public:false}, "MtomMessageInvalidMimeVersion", "MtomMessageInvalidMimeVersion"); 
    $.Constant({Static:true , Public:false}, "MtomMessageNotApplicationXopXml", "MtomMessageNotApplicationXopXml"); 
    $.Constant({Static:true , Public:false}, "MtomMessageNotMultipart", "MtomMessageNotMultipart"); 
    $.Constant({Static:true , Public:false}, "MtomMessageRequiredParamNotSpecified", "MtomMessageRequiredParamNotSpecified"); 
    $.Constant({Static:true , Public:false}, "MtomMimePartReferencedMoreThanOnce", "MtomMimePartReferencedMoreThanOnce"); 
    $.Constant({Static:true , Public:false}, "MtomPartNotFound", "MtomPartNotFound"); 
    $.Constant({Static:true , Public:false}, "MtomRootContentTypeNotFound", "MtomRootContentTypeNotFound"); 
    $.Constant({Static:true , Public:false}, "MtomRootNotApplicationXopXml", "MtomRootNotApplicationXopXml"); 
    $.Constant({Static:true , Public:false}, "MtomRootPartNotFound", "MtomRootPartNotFound"); 
    $.Constant({Static:true , Public:false}, "MtomRootRequiredParamNotSpecified", "MtomRootRequiredParamNotSpecified"); 
    $.Constant({Static:true , Public:false}, "MtomRootUnexpectedCharset", "MtomRootUnexpectedCharset"); 
    $.Constant({Static:true , Public:false}, "MtomRootUnexpectedType", "MtomRootUnexpectedType"); 
    $.Constant({Static:true , Public:false}, "MtomXopIncludeHrefNotSpecified", "MtomXopIncludeHrefNotSpecified"); 
    $.Constant({Static:true , Public:false}, "MtomXopIncludeInvalidXopAttributes", "MtomXopIncludeInvalidXopAttributes"); 
    $.Constant({Static:true , Public:false}, "MtomXopIncludeInvalidXopElement", "MtomXopIncludeInvalidXopElement"); 
    $.Constant({Static:true , Public:false}, "ReadNotSupportedOnStream", "ReadNotSupportedOnStream"); 
    $.Constant({Static:true , Public:false}, "SeekNotSupportedOnStream", "SeekNotSupportedOnStream"); 
    $.Constant({Static:true , Public:false}, "WriteBufferOverflow", "WriteBufferOverflow"); 
    $.Constant({Static:true , Public:false}, "WriteNotSupportedOnStream", "WriteNotSupportedOnStream"); 
    $.Constant({Static:true , Public:false}, "JsonOnlyWhitespace", "JsonOnlyWhitespace"); 
    $.Constant({Static:true , Public:false}, "JsonInvalidStartElementCall", "JsonInvalidStartElementCall"); 
    $.Constant({Static:true , Public:false}, "JsonNodeTypeArrayOrObjectNotSpecified", "JsonNodeTypeArrayOrObjectNotSpecified"); 
    $.Constant({Static:true , Public:false}, "JsonInvalidLocalNameEmpty", "JsonInvalidLocalNameEmpty"); 
    $.Constant({Static:true , Public:false}, "JsonMustSpecifyDataType", "JsonMustSpecifyDataType"); 
    $.Constant({Static:true , Public:false}, "JsonAttributeAlreadyWritten", "JsonAttributeAlreadyWritten"); 
    $.Constant({Static:true , Public:false}, "JsonSizeExceedsRemainingBufferSpace", "JsonSizeExceedsRemainingBufferSpace"); 
    $.Constant({Static:true , Public:false}, "JsonEndElementNoOpenNodes", "JsonEndElementNoOpenNodes"); 
    $.Constant({Static:true , Public:false}, "JsonNoMatchingStartAttribute", "JsonNoMatchingStartAttribute"); 
    $.Constant({Static:true , Public:false}, "JsonWriterClosed", "JsonWriterClosed"); 
    $.Constant({Static:true , Public:false}, "JsonCannotWriteStandaloneTextAfterQuotedText", "JsonCannotWriteStandaloneTextAfterQuotedText"); 
    $.Constant({Static:true , Public:false}, "JsonOffsetExceedsBufferSize", "JsonOffsetExceedsBufferSize"); 
    $.Constant({Static:true , Public:false}, "JsonEncounteredUnexpectedCharacter", "JsonEncounteredUnexpectedCharacter"); 
    $.Constant({Static:true , Public:false}, "JsonInvalidBytes", "JsonInvalidBytes"); 
    $.Constant({Static:true , Public:false}, "JsonEncodingNotSupported", "JsonEncodingNotSupported"); 
    $.Constant({Static:true , Public:false}, "JsonUnexpectedEndOfFile", "JsonUnexpectedEndOfFile"); 
    $.Constant({Static:true , Public:false}, "JsonValueMustBeInRange", "JsonValueMustBeInRange"); 
    $.Constant({Static:true , Public:false}, "JsonDuplicateMemberNames", "JsonDuplicateMemberNames"); 
    $.Constant({Static:true , Public:false}, "JsonDuplicateMemberInInput", "JsonDuplicateMemberInInput"); 
    $.Constant({Static:true , Public:false}, "JsonRequiredMembersNotFound", "JsonRequiredMembersNotFound"); 
    $.Constant({Static:true , Public:false}, "JsonOneRequiredMemberNotFound", "JsonOneRequiredMemberNotFound"); 
    $.Constant({Static:true , Public:false}, "JsonInvalidWriteStat", "JsonInvalidWriteStat"); 
    $.Constant({Static:true , Public:false}, "JsonInvalidDateTimeString", "JsonInvalidDateTimeString"); 
    $.Constant({Static:true , Public:false}, "JsonExpectedEncoding", "JsonExpectedEncoding"); 
    $.Constant({Static:true , Public:false}, "JsonOpenAttributeMustBeClosedFirst", "JsonOpenAttributeMustBeClosedFirst"); 
    $.Constant({Static:true , Public:false}, "JsonTypeNotSupportedByDataContractJsonSerializer", "JsonTypeNotSupportedByDataContractJsonSerializer"); 
    $.Constant({Static:true , Public:false}, "EnumTypeNotSupportedByDataContractJsonSerializer", "EnumTypeNotSupportedByDataContractJsonSerializer"); 
    $.Constant({Static:true , Public:false}, "JsonNamespaceMustBeEmpty", "JsonNamespaceMustBeEmpty"); 
    $.Constant({Static:true , Public:false}, "ChangingFullTypeNameNotSupported", "ChangingFullTypeNameNotSupported"); 
    $.Constant({Static:true , Public:false}, "JsonXmlProcessingInstructionNotSupported", "JsonXmlProcessingInstructionNotSupported"); 
    $.Constant({Static:true , Public:false}, "JsonXmlInvalidDeclaration", "JsonXmlInvalidDeclaration"); 
    $.Constant({Static:true , Public:false}, "JsonMultipleRootElementsNotAllowedOnWriter", "JsonMultipleRootElementsNotAllowedOnWriter"); 
    $.Constant({Static:true , Public:false}, "JsonInvalidMethodBetweenStartEndAttribute", "JsonInvalidMethodBetweenStartEndAttribute"); 
    $.Constant({Static:true , Public:false}, "JsonServerTypeSpecifiedForInvalidDataType", "JsonServerTypeSpecifiedForInvalidDataType"); 
    $.Constant({Static:true , Public:false}, "JsonInvalidDataTypeSpecifiedForServerType", "JsonInvalidDataTypeSpecifiedForServerType"); 
    $.Constant({Static:true , Public:false}, "JsonUnexpectedAttributeValue", "JsonUnexpectedAttributeValue"); 
    $.Constant({Static:true , Public:false}, "JsonPrefixMustBeNullOrEmpty", "JsonPrefixMustBeNullOrEmpty"); 
    $.Constant({Static:true , Public:false}, "JsonUnexpectedAttributeLocalName", "JsonUnexpectedAttributeLocalName"); 
    $.Constant({Static:true , Public:false}, "JsonCannotWriteTextAfterNonTextAttribute", "JsonCannotWriteTextAfterNonTextAttribute"); 
    $.Constant({Static:true , Public:false}, "JsonInvalidItemNameForArrayElement", "JsonInvalidItemNameForArrayElement"); 
    $.Constant({Static:true , Public:false}, "JsonInvalidRootElementName", "JsonInvalidRootElementName"); 
    $.Constant({Static:true , Public:false}, "JsonAttributeMustHaveElement", "JsonAttributeMustHaveElement"); 
    $.Constant({Static:true , Public:false}, "JsonNestedArraysNotSupported", "JsonNestedArraysNotSupported"); 
    $.Constant({Static:true , Public:false}, "JsonMethodNotSupported", "JsonMethodNotSupported"); 
    $.Constant({Static:true , Public:false}, "JsonInvalidFFFE", "JsonInvalidFFFE"); 
    $.Constant({Static:true , Public:false}, "JsonUnsupportedForIsReference", "JsonUnsupportedForIsReference"); 
    $.Constant({Static:true , Public:false}, "JsonMustUseWriteStringForWritingAttributeValues", "JsonMustUseWriteStringForWritingAttributeValues"); 
    $.Constant({Static:true , Public:false}, "JsonWriteArrayNotSupported", "JsonWriteArrayNotSupported"); 
    $.Constant({Static:true , Public:false}, "JsonDateTimeOutOfRange", "JsonDateTimeOutOfRange"); 
    $.Constant({Static:true , Public:false}, "XmlObjectAssignedToIncompatibleInterface", "XmlObjectAssignedToIncompatibleInterface"); 
    $.Constant({Static:true , Public:false}, "CollectionAssignedToIncompatibleInterface", "CollectionAssignedToIncompatibleInterface"); 
    $.Constant({Static:true , Public:false}, "InvalidCharacterEncountered", "InvalidCharacterEncountered"); 
    $.Constant({Static:true , Public:false}, "JsonInvalidWriteState", "JsonInvalidWriteState"); 
    $.Field({Static:true , Public:false}, "loader", $.Type); 
    $.Field({Static:false, Public:false}, "resources", $asm09.TypeRef("System.Resources.ResourceManager")); 
    $.Property({Static:true , Public:false}, "Culture", $asm09.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm09.TypeRef("System.Resources.ResourceManager"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DiagnosticUtility */ 

(function DiagnosticUtility$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Serialization.DiagnosticUtility", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "DebugAssert", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "DebugAssert", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "get_DiagnosticTrace", 
      new JSIL.MethodSignature($asm17.TypeRef("System.ServiceModel.Diagnostics.DiagnosticTrace"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "get_ExceptionUtility", 
      new JSIL.MethodSignature($asm17.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceError", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceInformation", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceVerbose", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldTraceWarning", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "GetExceptionUtility", 
      new JSIL.MethodSignature($asm17.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitDiagnosticTraceImpl", 
      new JSIL.MethodSignature(null, [$asm17.TypeRef("System.ServiceModel.Diagnostics.TraceSourceKind"), $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "InitializeTracing", 
      new JSIL.MethodSignature($asm17.TypeRef("System.ServiceModel.Diagnostics.DiagnosticTrace"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateLevel", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "EventSourceName", "System.Runtime.Serialization 4.0.0.0"); 
    $.Constant({Static:true , Public:false}, "DefaultTraceListenerName", "Default"); 
    $.Field({Static:true , Public:false}, "level", $asm0B.TypeRef("System.Diagnostics.SourceLevels"), function ($pi) {
        return $asm0B.System.Diagnostics.SourceLevels.Off;
      }); 
    $.Field({Static:true , Public:false}, "tracingEnabled", $.Boolean, false); 
    $.Field({Static:true , Public:false}, "shouldUseActivity", $.Boolean, false); 
    $.Field({Static:true , Public:false}, "shouldTraceVerbose", $.Boolean, false); 
    $.Field({Static:true , Public:false}, "shouldTraceInformation", $.Boolean, false); 
    $.Field({Static:true , Public:false}, "shouldTraceWarning", $.Boolean, false); 
    $.Field({Static:true , Public:false}, "shouldTraceError", $.Boolean, false); 
    $.Field({Static:true , Public:false}, "shouldTraceCritical", $.Boolean, false); 
    $.Field({Static:true , Public:false}, "diagnosticTrace", $asm17.TypeRef("System.ServiceModel.Diagnostics.DiagnosticTrace")); 
    $.Field({Static:true , Public:false}, "lockObject", $.Object); 
    $.Field({Static:true , Public:false}, "exceptionUtility", $asm17.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"), null); 
    $.Constant({Static:true , Public:false}, "TraceSourceName", "System.Runtime.Serialization"); 
    $.Property({Static:true , Public:false}, "DiagnosticTrace", $asm17.TypeRef("System.ServiceModel.Diagnostics.DiagnosticTrace"));

    $.Property({Static:true , Public:false}, "ExceptionUtility", $asm17.TypeRef("System.ServiceModel.Diagnostics.ExceptionUtility"));

    $.Property({Static:true , Public:false}, "ShouldTraceError", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceWarning", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceInformation", $.Boolean);

    $.Property({Static:true , Public:false}, "ShouldTraceVerbose", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.CollectionDataContractAttribute */ 

(function CollectionDataContractAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Serialization.CollectionDataContractAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_IsItemNameSetExplicit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_IsKeyNameSetExplicit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_IsNameSetExplicit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_IsNamespaceSetExplicit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IsReference", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_IsReferenceSetExplicit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_IsValueNameSetExplicit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ItemName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_KeyName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ValueName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_IsReference", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ItemName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ValueName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "itemName", $.String); 
    $.Field({Static:false, Public:false}, "keyName", $.String); 
    $.Field({Static:false, Public:false}, "valueName", $.String); 
    $.Field({Static:false, Public:false}, "isReference", $.Boolean); 
    $.Field({Static:false, Public:false}, "isNameSetExplicit", $.Boolean); 
    $.Field({Static:false, Public:false}, "isNamespaceSetExplicit", $.Boolean); 
    $.Field({Static:false, Public:false}, "isReferenceSetExplicit", $.Boolean); 
    $.Field({Static:false, Public:false}, "isItemNameSetExplicit", $.Boolean); 
    $.Field({Static:false, Public:false}, "isKeyNameSetExplicit", $.Boolean); 
    $.Field({Static:false, Public:false}, "isValueNameSetExplicit", $.Boolean); 
    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:false}, "IsNamespaceSetExplicit", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:false}, "IsNameSetExplicit", $.Boolean);

    $.Property({Static:false, Public:true }, "ItemName", $.String);

    $.Property({Static:false, Public:false}, "IsItemNameSetExplicit", $.Boolean);

    $.Property({Static:false, Public:true }, "KeyName", $.String);

    $.Property({Static:false, Public:true }, "IsReference", $.Boolean);

    $.Property({Static:false, Public:false}, "IsReferenceSetExplicit", $.Boolean);

    $.Property({Static:false, Public:false}, "IsKeyNameSetExplicit", $.Boolean);

    $.Property({Static:false, Public:true }, "ValueName", $.String);

    $.Property({Static:false, Public:false}, "IsValueNameSetExplicit", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Class", "Struct")]; });

})();

/* class System.Runtime.Serialization.ContractNamespaceAttribute */ 

(function ContractNamespaceAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Serialization.ContractNamespaceAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ClrNamespace", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ContractNamespace", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_ClrNamespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "clrNamespace", $.String); 
    $.Field({Static:false, Public:false}, "contractNamespace", $.String); 
    $.Property({Static:false, Public:true }, "ClrNamespace", $.String);

    $.Property({Static:false, Public:true }, "ContractNamespace", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Assembly", "Module")]; });

})();

/* class System.Runtime.Serialization.DataContractAttribute */ 

(function DataContractAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Serialization.DataContractAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_IsNameSetExplicit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_IsNamespaceSetExplicit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IsReference", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_IsReferenceSetExplicit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_IsReference", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "isNameSetExplicit", $.Boolean); 
    $.Field({Static:false, Public:false}, "isNamespaceSetExplicit", $.Boolean); 
    $.Field({Static:false, Public:false}, "isReference", $.Boolean); 
    $.Field({Static:false, Public:false}, "isReferenceSetExplicit", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsReference", $.Boolean);

    $.Property({Static:false, Public:false}, "IsReferenceSetExplicit", $.Boolean);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:false}, "IsNamespaceSetExplicit", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:false}, "IsNameSetExplicit", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Class", "Enum", "Struct")]; });

})();

/* class System.Runtime.Serialization.DataMemberAttribute */ 

(function DataMemberAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Serialization.DataMemberAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EmitDefaultValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_IsNameSetExplicit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IsRequired", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Order", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_EmitDefaultValue", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_IsRequired", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Order", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "isNameSetExplicit", $.Boolean); 
    $.Field({Static:false, Public:false}, "order", $.Int32); 
    $.Field({Static:false, Public:false}, "isRequired", $.Boolean); 
    $.Field({Static:false, Public:false}, "emitDefaultValue", $.Boolean); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:false}, "IsNameSetExplicit", $.Boolean);

    $.Property({Static:false, Public:true }, "Order", $.Int32);

    $.Property({Static:false, Public:true }, "IsRequired", $.Boolean);

    $.Property({Static:false, Public:true }, "EmitDefaultValue", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* class System.Runtime.Serialization.EnumMemberAttribute */ 

(function EnumMemberAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Serialization.EnumMemberAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_IsValueSetExplicit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "value", $.String); 
    $.Field({Static:false, Public:false}, "isValueSetExplicit", $.Boolean); 
    $.Property({Static:false, Public:true }, "Value", $.String);

    $.Property({Static:false, Public:false}, "IsValueSetExplicit", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.Field]; });

})();

/* interface System.Runtime.Serialization.IExtensibleDataObject */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.IExtensibleDataObject", true, [], function ($) {
    $.Method({}, "get_ExtensionData", new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.ExtensionDataObject"), [], []));
    $.Method({}, "set_ExtensionData", new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ExtensionDataObject")], []));
    $.Property({}, "ExtensionData");
  }, []);

/* class System.Runtime.Serialization.KnownTypeAttribute */ 

(function KnownTypeAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Serialization.KnownTypeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MethodName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "methodName", $.String); 
    $.Field({Static:false, Public:false}, "type", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "MethodName", $.String);

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Class", "Struct")]; });

})();

/* class System.Runtime.Serialization.ExtensionDataObject */ 

(function ExtensionDataObject$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ExtensionDataObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("System.Runtime.Serialization.ExtensionDataMember")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_Members", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("System.Runtime.Serialization.ExtensionDataMember")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "members", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("System.Runtime.Serialization.ExtensionDataMember")])); 
    $.Property({Static:false, Public:false}, "Members", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("System.Runtime.Serialization.ExtensionDataMember")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ExtensionDataMember */ 

(function ExtensionDataMember$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ExtensionDataMember", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_MemberIndex", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IDataNode"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_MemberIndex", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.IDataNode")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "value", $asm11.TypeRef("System.Runtime.Serialization.IDataNode")); 
    $.Field({Static:false, Public:false}, "memberIndex", $.Int32); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "Value", $asm11.TypeRef("System.Runtime.Serialization.IDataNode"));

    $.Property({Static:false, Public:true }, "MemberIndex", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Runtime.Serialization.IDataNode */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.IDataNode", false, [], function ($) {
    $.Method({}, "get_DataType", new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], []));
    $.Method({}, "get_Value", new JSIL.MethodSignature($.Object, [], []));
    $.Method({}, "set_Value", new JSIL.MethodSignature(null, [$.Object], []));
    $.Method({}, "get_DataContractName", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "set_DataContractName", new JSIL.MethodSignature(null, [$.String], []));
    $.Method({}, "get_DataContractNamespace", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "set_DataContractNamespace", new JSIL.MethodSignature(null, [$.String], []));
    $.Method({}, "get_ClrTypeName", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "set_ClrTypeName", new JSIL.MethodSignature(null, [$.String], []));
    $.Method({}, "get_ClrAssemblyName", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "set_ClrAssemblyName", new JSIL.MethodSignature(null, [$.String], []));
    $.Method({}, "get_Id", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "set_Id", new JSIL.MethodSignature(null, [$.String], []));
    $.Method({}, "get_PreservesReferences", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "GetData", new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ElementData")], []));
    $.Method({}, "get_IsFinalValue", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "set_IsFinalValue", new JSIL.MethodSignature(null, [$.Boolean], []));
    $.Method({}, "Clear", new JSIL.MethodSignature(null, [], []));
    $.Property({}, "DataType");
    $.Property({}, "Value");
    $.Property({}, "DataContractName");
    $.Property({}, "DataContractNamespace");
    $.Property({}, "ClrTypeName");
    $.Property({}, "ClrAssemblyName");
    $.Property({}, "Id");
    $.Property({}, "PreservesReferences");
    $.Property({}, "IsFinalValue");
  }, []);

/* class System.Runtime.Serialization.DataNode`1 */ 

(function DataNode$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.DataNode`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Runtime.Serialization.DataNode`1")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "AddQualifiedNameAttribute", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.ElementData"), $.String, 
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ClrAssemblyName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ClrTypeName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DataContractName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DataContractNamespace", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DataType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreservesReferences", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetData", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ElementData")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetValue", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.Serialization.DataNode`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ClrAssemblyName", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ClrTypeName", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_DataContractName", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_DataContractNamespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Id", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.IDataNode.get_IsFinalValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_IsFinalValue");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.IDataNode.set_IsFinalValue", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Overrides(0, "set_IsFinalValue");

    $.Field({Static:false, Public:false}, "dataType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "value", $.GenericParameter("T")); 
    $.Field({Static:false, Public:false}, "dataContractName", $.String); 
    $.Field({Static:false, Public:false}, "dataContractNamespace", $.String); 
    $.Field({Static:false, Public:false}, "clrTypeName", $.String); 
    $.Field({Static:false, Public:false}, "clrAssemblyName", $.String); 
    $.Field({Static:false, Public:false}, "id", $.String); 
    $.Field({Static:false, Public:false}, "isFinalValue", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "DataType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.IDataNode.IsFinalValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "DataContractName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "DataContractNamespace", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ClrTypeName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ClrAssemblyName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "PreservesReferences", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Runtime.Serialization.IDataNode")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ClassDataNode */ 

(function ClassDataNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataNode`1", [$asm09.TypeRef("System.Object")]), 
      Name: "System.Runtime.Serialization.ClassDataNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("System.Runtime.Serialization.ExtensionDataMember")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_Members", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("System.Runtime.Serialization.ExtensionDataMember")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "members", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("System.Runtime.Serialization.ExtensionDataMember")])); 
    $.Property({Static:false, Public:false}, "Members", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("System.Runtime.Serialization.ExtensionDataMember")]));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.CollectionDataNode */ 

(function CollectionDataNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataNode`1", [$asm09.TypeRef("System.Array")]), 
      Name: "System.Runtime.Serialization.CollectionDataNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ItemName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_ItemNamespace", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Items", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("System.Runtime.Serialization.IDataNode")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Size", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetData", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ElementData")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ItemName", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_ItemNamespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_Items", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("System.Runtime.Serialization.IDataNode")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_Size", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "items", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("System.Runtime.Serialization.IDataNode")])); 
    $.Field({Static:false, Public:false}, "itemName", $.String); 
    $.Field({Static:false, Public:false}, "itemNamespace", $.String); 
    $.Field({Static:false, Public:false}, "size", $.Int32); 
    $.Property({Static:false, Public:false}, "Items", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("System.Runtime.Serialization.IDataNode")]));

    $.Property({Static:false, Public:false}, "ItemName", $.String);

    $.Property({Static:false, Public:false}, "ItemNamespace", $.String);

    $.Property({Static:false, Public:false}, "Size", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlDataNode */ 

(function XmlDataNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataNode`1", [$asm09.TypeRef("System.Object")]), 
      Name: "System.Runtime.Serialization.XmlDataNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OwnerDocument", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlDocument"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_XmlAttributes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm13.TypeRef("System.Xml.XmlAttribute")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_XmlChildNodes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm13.TypeRef("System.Xml.XmlNode")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_OwnerDocument", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlDocument")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_XmlAttributes", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm13.TypeRef("System.Xml.XmlAttribute")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_XmlChildNodes", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm13.TypeRef("System.Xml.XmlNode")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "xmlAttributes", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm13.TypeRef("System.Xml.XmlAttribute")])); 
    $.Field({Static:false, Public:false}, "xmlChildNodes", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm13.TypeRef("System.Xml.XmlNode")])); 
    $.Field({Static:false, Public:false}, "ownerDocument", $asm13.TypeRef("System.Xml.XmlDocument")); 
    $.Property({Static:false, Public:false}, "XmlAttributes", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm13.TypeRef("System.Xml.XmlAttribute")]));

    $.Property({Static:false, Public:false}, "XmlChildNodes", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm13.TypeRef("System.Xml.XmlNode")]));

    $.Property({Static:false, Public:false}, "OwnerDocument", $asm13.TypeRef("System.Xml.XmlDocument"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ISerializableDataNode */ 

(function ISerializableDataNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataNode`1", [$asm09.TypeRef("System.Object")]), 
      Name: "System.Runtime.Serialization.ISerializableDataNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FactoryTypeName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_FactoryTypeNamespace", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("System.Runtime.Serialization.ISerializableDataMember")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetData", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ElementData")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_FactoryTypeName", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_FactoryTypeNamespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_Members", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("System.Runtime.Serialization.ISerializableDataMember")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "factoryTypeName", $.String); 
    $.Field({Static:false, Public:false}, "factoryTypeNamespace", $.String); 
    $.Field({Static:false, Public:false}, "members", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("System.Runtime.Serialization.ISerializableDataMember")])); 
    $.Property({Static:false, Public:false}, "FactoryTypeName", $.String);

    $.Property({Static:false, Public:false}, "FactoryTypeNamespace", $.String);

    $.Property({Static:false, Public:false}, "Members", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("System.Runtime.Serialization.ISerializableDataMember")]));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ISerializableDataMember */ 

(function ISerializableDataMember$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ISerializableDataMember", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IDataNode"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_Value", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.IDataNode")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "value", $asm11.TypeRef("System.Runtime.Serialization.IDataNode")); 
    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Value", $asm11.TypeRef("System.Runtime.Serialization.IDataNode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.IgnoreDataMemberAttribute */ 

(function IgnoreDataMemberAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Serialization.IgnoreDataMemberAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* class System.Runtime.Serialization.DataContractResolver */ 

(function DataContractResolver$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.DataContractResolver", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveName", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [
          $.String, $.String, 
          $asm09.TypeRef("System.Type"), $.Type
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryResolveType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $.Type, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlObjectSerializer */ 

(function XmlObjectSerializer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlObjectSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "CheckIfNeedsContractNsAtRoot", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Runtime.Serialization.DataContract")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckNull", 
      new JSIL.MethodSignature(null, [$.Object, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSerializationException", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.Serialization.SerializationException"), [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "CreateSerializationException", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.Serialization.SerializationException"), [$.String, $asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSerializationExceptionWithReaderDetails", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.String, $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FormatterConverter", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.Serialization.IFormatterConverter"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDeserializeType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSerializeType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeInfo", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeInfoError", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalIsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalReadObject", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalReadObject", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Boolean, 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteEndObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObject", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteStartObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsContractDeclared", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsRootElement", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsRootXmlAny", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsStartObjectHandleExceptions", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm09.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm13.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm13.TypeRef("System.Xml.XmlReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadObjectHandleExceptions", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "ReadObjectHandleExceptions", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Boolean, 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryAddLineInfo", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndObjectHandleExceptions", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteNull", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteObjectContentHandleExceptions", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteObjectHandleExceptions", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "WriteObjectHandleExceptions", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRootElement", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartObjectHandleExceptions", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    );

    $.Field({Static:true , Public:false}, "formatterConverter", $asm09.TypeRef("System.Runtime.Serialization.IFormatterConverter"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:true , Public:false}, "FormatterConverter", $asm09.TypeRef("System.Runtime.Serialization.IFormatterConverter"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DataContractSerializer */ 

(function DataContractSerializer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), 
      Name: "System.Runtime.Serialization.DataContractSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $.Boolean, $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $.Boolean, $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $.String, 
          $.String, $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $.String, 
          $.String, $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $.Boolean, $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $.String, 
          $.String, $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $.Boolean, $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $.Boolean, $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $.Boolean, $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_DataContractResolver", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContractResolver"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_DataContractSurrogate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreExtensionDataObject", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KnownTypes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Type")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxItemsInObjectGraph", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_PreserveObjectReferences", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_RootContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDeserializeType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSerializeType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSurrogatedType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $.Boolean, $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $.Boolean, $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalIsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalReadObject", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalReadObject", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Boolean, 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteEndObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObject", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "InternalWriteObjectContent", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteStartObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm13.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm13.TypeRef("System.Xml.XmlReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean, 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SurrogateToDataContractType", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $.Object, 
          $asm09.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Type")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object], [])
    );

    $.Field({Static:false, Public:false}, "rootType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "rootContract", $asm11.TypeRef("System.Runtime.Serialization.DataContract")); 
    $.Field({Static:false, Public:false}, "needsContractNsAtRoot", $.Boolean); 
    $.Field({Static:false, Public:false}, "rootName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:false, Public:false}, "rootNamespace", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:false, Public:false}, "maxItemsInObjectGraph", $.Int32); 
    $.Field({Static:false, Public:false}, "ignoreExtensionDataObject", $.Boolean); 
    $.Field({Static:false, Public:false}, "preserveObjectReferences", $.Boolean); 
    $.Field({Static:false, Public:false}, "dataContractSurrogate", $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")); 
    $.Field({Static:false, Public:false}, "knownTypeCollection", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:false}, "knownTypeList", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:false}, "knownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])); 
    $.Field({Static:false, Public:false}, "dataContractResolver", $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")); 
    $.Property({Static:false, Public:true }, "KnownTypes", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Type")]));

    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:true }, "MaxItemsInObjectGraph", $.Int32);

    $.Property({Static:false, Public:true }, "DataContractSurrogate", $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"));

    $.Property({Static:false, Public:true }, "PreserveObjectReferences", $.Boolean);

    $.Property({Static:false, Public:true }, "IgnoreExtensionDataObject", $.Boolean);

    $.Property({Static:false, Public:true }, "DataContractResolver", $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver"));

    $.Property({Static:false, Public:false}, "RootContract", $asm11.TypeRef("System.Runtime.Serialization.DataContract"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Runtime.Serialization.IDataContractSurrogate */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.IDataContractSurrogate", true, [], function ($) {
    $.Method({}, "GetDataContractType", new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type")], []));
    $.Method({}, "GetObjectToSerialize", new JSIL.MethodSignature($.Object, [$.Object, $asm09.TypeRef("System.Type")], []));
    $.Method({}, "GetDeserializedObject", new JSIL.MethodSignature($.Object, [$.Object, $asm09.TypeRef("System.Type")], []));
    $.Method({}, "GetCustomDataToExport", new JSIL.MethodSignature($.Object, [$asm09.TypeRef("System.Reflection.MemberInfo"), $asm09.TypeRef("System.Type")], []));
    $.Method({}, "GetCustomDataToExport", new JSIL.MethodSignature($.Object, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], []));
    $.Method({}, "GetKnownCustomDataTypes", new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm09.TypeRef("System.Type")])], []));
    $.Method({}, "GetReferencedTypeOnImport", new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [
          $.String, $.String, 
          $.Object
        ], []));
    $.Method({}, "ProcessImportedType", new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm0B.TypeRef("System.CodeDom.CodeTypeDeclaration"), $asm0B.TypeRef("System.CodeDom.CodeCompileUnit")], []));
  }, []);

/* class System.Runtime.Serialization.DataContractSurrogateCaller */ 

(function DataContractSurrogateCaller$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Serialization.DataContractSurrogateCaller", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "GetCustomDataToExport", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $asm09.TypeRef("System.Reflection.MemberInfo"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCustomDataToExport", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDeserializedObject", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $.Object, 
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKnownCustomDataTypes", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $asm09.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetObjectToSerialize", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $.Object, 
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetReferencedTypeOnImport", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [
          $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $.String, 
          $.String, $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcessImportedType", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeTypeDeclaration"), [
          $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $asm0B.TypeRef("System.CodeDom.CodeTypeDeclaration"), 
          $asm0B.TypeRef("System.CodeDom.CodeCompileUnit")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.InvalidDataContractException */ 

(function InvalidDataContractException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Exception"), 
      Name: "System.Runtime.Serialization.InvalidDataContractException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Exception")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.NetDataContractSerializer */ 

(function NetDataContractSerializer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), 
      Name: "System.Runtime.Serialization.NetDataContractSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Int32, 
          $.Boolean, $asm09.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"), 
          $asm09.TypeRef("System.Runtime.Serialization.ISurrogateSelector")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm09.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Int32, 
          $.Boolean, $asm09.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"), 
          $asm09.TypeRef("System.Runtime.Serialization.ISurrogateSelector")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm09.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Int32, 
          $.Boolean, $asm09.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"), 
          $asm09.TypeRef("System.Runtime.Serialization.ISurrogateSelector")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm09.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyFormat", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Binder", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.Serialization.SerializationBinder"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Context", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.Serialization.StreamingContext"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreExtensionDataObject", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_MaxItemsInObjectGraph", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SurrogateSelector", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.Serialization.ISurrogateSelector"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$.Object, $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Collections.Hashtable")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm09.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Collections.Hashtable")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm09.TypeRef("System.RuntimeTypeHandle"), $asm09.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Collections.Hashtable")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractFromSurrogateSelector", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm09.TypeRef("System.Runtime.Serialization.ISurrogateSelector"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext"), 
          $asm09.TypeRef("System.RuntimeTypeHandle"), $asm09.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Collections.Hashtable")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSurrogate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.Serialization.ISerializationSurrogate"), [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Runtime.Serialization.ISurrogateSelector"), 
          $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetTypeInformation", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.TypeInformation"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Int32, 
          $.Boolean, $asm09.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"), 
          $asm09.TypeRef("System.Runtime.Serialization.ISurrogateSelector")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm09.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Int32, 
          $.Boolean, $asm09.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"), 
          $asm09.TypeRef("System.Runtime.Serialization.ISurrogateSelector")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalIsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalReadObject", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteEndObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalWriteObjectContent", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm09.TypeRef("System.Collections.Hashtable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteStartObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalWriteStartObject", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.DataContract")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm13.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm13.TypeRef("System.Xml.XmlReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AssemblyFormat", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Binder", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationBinder")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Context", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_SurrogateSelector", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.ISurrogateSelector")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "WriteClrTypeInfo", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm09.TypeRef("System.Runtime.Serialization.SerializationBinder")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteClrTypeInfo", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Runtime.Serialization.SerializationBinder"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteClrTypeInfo", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Runtime.Serialization.SerializationBinder"), $asm09.TypeRef("System.Runtime.Serialization.SerializationInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteClrTypeInfo", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object], [])
    );

    $.Field({Static:false, Public:false}, "rootName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:false, Public:false}, "rootNamespace", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:false, Public:false}, "context", $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")); 
    $.Field({Static:false, Public:false}, "binder", $asm09.TypeRef("System.Runtime.Serialization.SerializationBinder")); 
    $.Field({Static:false, Public:false}, "surrogateSelector", $asm09.TypeRef("System.Runtime.Serialization.ISurrogateSelector")); 
    $.Field({Static:false, Public:false}, "maxItemsInObjectGraph", $.Int32); 
    $.Field({Static:false, Public:false}, "ignoreExtensionDataObject", $.Boolean); 
    $.Field({Static:false, Public:false}, "assemblyFormat", $asm09.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle")); 
    $.Field({Static:false, Public:false}, "cachedDataContract", $asm11.TypeRef("System.Runtime.Serialization.DataContract")); 
    $.Field({Static:true , Public:false}, "typeNameCache", $asm09.TypeRef("System.Collections.Hashtable")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Context", $asm09.TypeRef("System.Runtime.Serialization.StreamingContext"));

    $.Property({Static:false, Public:true , Virtual:true }, "Binder", $asm09.TypeRef("System.Runtime.Serialization.SerializationBinder"));

    $.Property({Static:false, Public:true , Virtual:true }, "SurrogateSelector", $asm09.TypeRef("System.Runtime.Serialization.ISurrogateSelector"));

    $.Property({Static:false, Public:true }, "AssemblyFormat", $asm09.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"));

    $.Property({Static:false, Public:true }, "MaxItemsInObjectGraph", $.Int32);

    $.Property({Static:false, Public:true }, "IgnoreExtensionDataObject", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Runtime.Serialization.IFormatter")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XPathQueryGenerator */ 

(function XPathQueryGenerator$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Serialization.XPathQueryGenerator", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "CreateFromDataContractSerializer", 
      new JSIL.MethodSignature($.String, [
          $asm09.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.MemberInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm13.TypeRef("System.Xml.XmlNamespaceManager")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateFromDataContractSerializer", 
      new JSIL.MethodSignature($.String, [
          $asm09.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.MemberInfo")]), 
          $asm09.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$asm13.TypeRef("System.Xml.XmlNamespaceManager")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcessClassDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm11.TypeRef("System.Runtime.Serialization.XPathQueryGenerator/ExportContext"), 
          $asm09.TypeRef("System.Reflection.MemberInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcessDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.XPathQueryGenerator/ExportContext"), 
          $asm09.TypeRef("System.Reflection.MemberInfo")
        ], [])
    );

    $.Constant({Static:true , Public:false}, "XPathSeparator", "/"); 
    $.Constant({Static:true , Public:false}, "NsSeparator", ":"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XPathQueryGenerator/ExportContext */ 

(function ExportContext$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XPathQueryGenerator/ExportContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlNamespaceManager"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XPath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteChildToContext", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataMember"), $.String], [])
    );

    $.Field({Static:false, Public:false}, "namespaces", $asm13.TypeRef("System.Xml.XmlNamespaceManager")); 
    $.Field({Static:false, Public:false}, "nextPrefix", $.Int32); 
    $.Field({Static:false, Public:false}, "xPathBuilder", $asm09.TypeRef("System.Text.StringBuilder")); 
    $.Property({Static:false, Public:true }, "Namespaces", $asm13.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:true }, "XPath", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XsdDataContractExporter */ 

(function XsdDataContractExporter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XsdDataContractExporter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "AddKnownTypes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddType", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanExport", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Reflection.Assembly")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanExport", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanExport", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAndAddType", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Export", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Reflection.Assembly")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Export", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Export", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Export", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DataContractSet", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContractSet"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Options", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.ExportOptions"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Schemas", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRootElementName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaSet", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSchemaType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSchemaTypeName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSurrogatedType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Options", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ExportOptions")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "TraceExportBegin", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceExportEnd", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceExportError", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Exception")], [])
    );

    $.Field({Static:false, Public:false}, "options", $asm11.TypeRef("System.Runtime.Serialization.ExportOptions")); 
    $.Field({Static:false, Public:false}, "schemas", $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet")); 
    $.Field({Static:false, Public:false}, "dataContractSet", $asm11.TypeRef("System.Runtime.Serialization.DataContractSet")); 
    $.Property({Static:false, Public:true }, "Options", $asm11.TypeRef("System.Runtime.Serialization.ExportOptions"));

    $.Property({Static:false, Public:true }, "Schemas", $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Property({Static:false, Public:false}, "DataContractSet", $asm11.TypeRef("System.Runtime.Serialization.DataContractSet"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XsdDataContractImporter */ 

(function XsdDataContractImporter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XsdDataContractImporter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.CodeDom.CodeCompileUnit")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "CanImport", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanImport", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm13.TypeRef("System.Xml.XmlQualifiedName")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanImport", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CanImport", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CodeCompileUnit", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeCompileUnit"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_DataContractSet", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContractSet"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ImportXmlDataType", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Options", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.ImportOptions"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_SingleElementArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm13.TypeRef("System.Xml.Schema.XmlSchemaElement")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SingleTypeNameArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm13.TypeRef("System.Xml.XmlQualifiedName")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCodeCompileUnit", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeCompileUnit"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCodeTypeReference", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeTypeReference"), [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCodeTypeReference", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeTypeReference"), [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetKnownTypeReferences", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm0B.TypeRef("System.CodeDom.CodeTypeReference")]), [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Import", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Import", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm13.TypeRef("System.Xml.XmlQualifiedName")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Import", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Import", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [$asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalCanImport", 
      new JSIL.MethodSignature($.Boolean, [
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm13.TypeRef("System.Xml.XmlQualifiedName")]), 
          $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm13.TypeRef("System.Xml.Schema.XmlSchemaElement")]), $jsilcore.TypeRef("System.Array", [$asm13.TypeRef("System.Xml.XmlQualifiedName")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalImport", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm13.TypeRef("System.Xml.XmlQualifiedName")]), 
          $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm13.TypeRef("System.Xml.Schema.XmlSchemaElement")]), $jsilcore.TypeRef("System.Array", [$asm13.TypeRef("System.Xml.XmlQualifiedName")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Options", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ImportOptions")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "TraceImportError", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Exception")], [])
    );

    $.Field({Static:false, Public:false}, "options", $asm11.TypeRef("System.Runtime.Serialization.ImportOptions")); 
    $.Field({Static:false, Public:false}, "codeCompileUnit", $asm0B.TypeRef("System.CodeDom.CodeCompileUnit")); 
    $.Field({Static:false, Public:false}, "dataContractSet", $asm11.TypeRef("System.Runtime.Serialization.DataContractSet")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "emptyTypeNameArray", $jsilcore.TypeRef("System.Array", [$asm13.TypeRef("System.Xml.XmlQualifiedName")]), function ($pi) {
        return JSIL.Array.New($asm13.System.Xml.XmlQualifiedName, 0);
      }); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "emptyElementArray", $jsilcore.TypeRef("System.Array", [$asm13.TypeRef("System.Xml.Schema.XmlSchemaElement")]), function ($pi) {
        return JSIL.Array.New($asm13.System.Xml.Schema.XmlSchemaElement, 0);
      }); 
    $.Field({Static:false, Public:false}, "singleTypeNameArray", $jsilcore.TypeRef("System.Array", [$asm13.TypeRef("System.Xml.XmlQualifiedName")])); 
    $.Field({Static:false, Public:false}, "singleElementArray", $jsilcore.TypeRef("System.Array", [$asm13.TypeRef("System.Xml.Schema.XmlSchemaElement")])); 
    $.Property({Static:false, Public:true }, "Options", $asm11.TypeRef("System.Runtime.Serialization.ImportOptions"));

    $.Property({Static:false, Public:true }, "CodeCompileUnit", $asm0B.TypeRef("System.CodeDom.CodeCompileUnit"));

    $.Property({Static:false, Public:false}, "DataContractSet", $asm11.TypeRef("System.Runtime.Serialization.DataContractSet"));

    $.Property({Static:false, Public:false}, "SingleTypeNameArray", $jsilcore.TypeRef("System.Array", [$asm13.TypeRef("System.Xml.XmlQualifiedName")]));

    $.Property({Static:false, Public:false}, "SingleElementArray", $jsilcore.TypeRef("System.Array", [$asm13.TypeRef("System.Xml.Schema.XmlSchemaElement")]));

    $.Property({Static:false, Public:false}, "ImportXmlDataType", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DataContract */ 

(function DataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.DataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataContract/DataContractCriticalHelper")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BindGenericParameters", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Type]), $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.Type, $.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckAndAdd", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $.Type])])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CheckExplicitDataContractNamespaceUri", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckRootTypeInConfigIsGeneric", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConstructorRequiresMemberAccess", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.ConstructorInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateQualifiedName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeLocalName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Runtime.Serialization.DataContractPairKey"), $.Object])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpandGenericParameters", 
      new JSIL.MethodSignature($.String, [$.String, $asm11.TypeRef("System.Runtime.Serialization.IGenericNameProvider")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpandGenericParameters", 
      new JSIL.MethodSignature($.String, [$.String, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldRequiresMemberAccess", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.FieldInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanContainReferences", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ConfigSection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Configuration.DataContractSerializerSection"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_GenericInfo", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.GenericInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasRoot", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Helper", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract/DataContractCriticalHelper"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsBuiltInDataContract", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsISerializable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsPrimitive", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReference", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsValueType", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $.Type]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Namespace", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_OriginalUnderlyingType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_StableName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TopLevelElementName", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TopLevelElementNamespace", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_TypeForInitialization", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_UnderlyingType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetArrayPrefix", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetArrayTypeName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInDataContract", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInDataContract", 
      new JSIL.MethodSignature($.Type, [$.String, $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInDataContract", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetClrAssemblyName", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClrNameAndNamespace", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClrTypeFullName", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClrTypeFullNameForArray", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClrTypeFullNameForNonArrayTypes", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClrTypeFullNameUsingTypeForwardedFromAttribute", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClrTypeString", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetCollectionNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCollectionStableName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContractAttribute")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCollectionStableName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $asm0D.TypeRef("System.Collections.Generic.HashSet`1", [$asm09.TypeRef("System.Type")]), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContractAttribute")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.RuntimeTypeHandle"), $asm09.TypeRef("System.Type"), 
          $asm11.TypeRef("System.Runtime.Serialization.SerializationMode")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $asm09.TypeRef("System.RuntimeTypeHandle"), 
          $asm11.TypeRef("System.Runtime.Serialization.SerializationMode")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractForInitialization", 
      new JSIL.MethodSignature($.Type, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractNameForGenericName", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$.Int32]), [$.String, $asm09.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractNamespaceFromUri", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractSkipValidation", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $asm09.TypeRef("System.RuntimeTypeHandle"), 
          $asm09.TypeRef("System.Type")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetDCTypeStableName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [$asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Runtime.Serialization.DataContractAttribute")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultDataContractNamespace", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultStableLocalName", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultStableName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultStableName", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultStableName", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.CodeDom.CodeTypeReference"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultStableNamespace", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultStableNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetGetOnlyCollectionDataContract", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $asm09.TypeRef("System.RuntimeTypeHandle"), 
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Runtime.Serialization.SerializationMode")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetGetOnlyCollectionDataContractSkipValidation", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $asm09.TypeRef("System.RuntimeTypeHandle"), 
          $asm09.TypeRef("System.Type")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetGlobalDataContractNamespace", 
      new JSIL.MethodSignature($.String, [$.String, $asm09.TypeRef("System.Reflection.ICustomAttributeProvider")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetId", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.RuntimeTypeHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetIdForInitialization", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetNamespacesDigest", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNonDCTypeStableName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [$asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Collections.Generic.HashSet`1", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStableName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStableName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [$asm09.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStableName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [
          $asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Collections.Generic.HashSet`1", [$asm09.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValidContract", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Runtime.Serialization.SerializationMode")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValidContract", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ImportKnownTypeAttributes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $.Type]), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ImportKnownTypeAttributes", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $.Type])])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAlpha", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAsciiLocalName", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAssemblyFriendOfSerialization", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.Assembly")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsBuiltInNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCollectionElementTypeEqualToRootType", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDigit", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsElemTypeNullOrNotEqualToRootType", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEqualOrChecked", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Runtime.Serialization.DataContractPairKey"), $.Object])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMemberVisibleInSerializationModule", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.MemberInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsOpenGenericType", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeNullable", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeSerializable", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeSerializable", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Collections.Generic.HashSet`1", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeVisible", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeVisibleInSerializationModule", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidContract", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.SerializationMode")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidNCName", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadKnownTypesFromConfig", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $.Type])])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MethodRequiresMemberAccess", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_GenericInfo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.GenericInfo")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_HasRoot", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsISerializable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsReference", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsValueType", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_KnownDataContracts", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $.Type])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_StableName", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_TopLevelElementName", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_TopLevelElementNamespace", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ThrowInvalidDataContractException", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ThrowInvalidDataContractException", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowTypeNotSerializable", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetBuiltInXmlAndArrayTypeStableName", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Collections.Generic.HashSet`1", [$asm09.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm13.TypeRef("System.Xml.XmlQualifiedName")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetDCAttribute", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Runtime.Serialization.DataContractAttribute")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UnwrapNullableType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnwrapRedundantNullableType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidatePreviousCollectionTypes", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $asm0D.TypeRef("System.Collections.Generic.HashSet`1", [$asm09.TypeRef("System.Type")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteRootElement", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Field({Static:false, Public:false}, "$name", $asm11.TypeRef("System.Xml.XmlDictionaryString"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "ns", $asm11.TypeRef("System.Xml.XmlDictionaryString"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "helper", $asm11.TypeRef("System.Runtime.Serialization.DataContract/DataContractCriticalHelper"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "configSection", $asm11.TypeRef("System.Runtime.Serialization.Configuration.DataContractSerializerSection"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:false, Public:false}, "Helper", $asm11.TypeRef("System.Runtime.Serialization.DataContract/DataContractCriticalHelper"));

    $.Property({Static:false, Public:false}, "UnderlyingType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "OriginalUnderlyingType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsBuiltInDataContract", $.Boolean);

    $.Property({Static:false, Public:false}, "TypeForInitialization", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "IsValueType", $.Boolean);

    $.Property({Static:false, Public:false}, "IsReference", $.Boolean);

    $.Property({Static:false, Public:false}, "StableName", $asm13.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "GenericInfo", $asm11.TypeRef("System.Runtime.Serialization.GenericInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $.Type]));

    $.Property({Static:false, Public:false, Virtual:true }, "IsISerializable", $.Boolean);

    $.Property({Static:false, Public:false}, "Name", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true , Virtual:true }, "Namespace", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasRoot", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "TopLevelElementName", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "TopLevelElementNamespace", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "CanContainReferences", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsPrimitive", $.Boolean);

    $.Property({Static:true , Public:false}, "ConfigSection", $asm11.TypeRef("System.Runtime.Serialization.Configuration.DataContractSerializerSection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DataContract/DataContractCriticalHelper */ 

(function DataContractCriticalHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.DataContract/DataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ContractMatches", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.Int32, $asm09.TypeRef("System.RuntimeTypeHandle"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateGetOnlyCollectionDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.Int32, $asm09.TypeRef("System.RuntimeTypeHandle"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanContainReferences", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GenericInfo", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.GenericInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasRoot", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsBuiltInDataContract", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsISerializable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsPrimitive", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReference", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_IsValueType", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_OriginalUnderlyingType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StableName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TopLevelElementName", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TopLevelElementNamespace", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_TypeForInitialization", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_UnderlyingType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClrTypeString", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractAdapterType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractAdapterTypeHandle", 
      new JSIL.MethodSignature($asm09.TypeRef("System.RuntimeTypeHandle"), [$asm09.TypeRef("System.RuntimeTypeHandle")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractForInitialization", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractOriginalType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractSkipValidation", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.Int32, $asm09.TypeRef("System.RuntimeTypeHandle"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetGetOnlyCollectionDataContractSkipValidation", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.Int32, $asm09.TypeRef("System.RuntimeTypeHandle"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetId", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.RuntimeTypeHandle")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIdForInitialization", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNextId", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IntRef"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_GenericInfo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.GenericInfo")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_HasRoot", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsISerializable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsReference", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_IsValueType", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_KnownDataContracts", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Name", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_StableName", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_TopLevelElementName", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_TopLevelElementNamespace", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "SetDataContractName", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDataContractName", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTypeForInitialization", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ThrowInvalidDataContractException", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowInvalidDataContractException", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryCreateBuiltInDataContract", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Runtime.Serialization.DataContract")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryCreateBuiltInDataContract", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Runtime.Serialization.DataContract")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteRootElement", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.Field({Static:true , Public:false}, "typeToIDCache", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Runtime.Serialization.TypeHandleRef"), $asm11.TypeRef("System.Runtime.Serialization.IntRef")])); 
    $.Field({Static:true , Public:false}, "dataContractCache", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Runtime.Serialization.DataContract")]), function ($pi) {
        return JSIL.Array.New($asm11.System.Runtime.Serialization.DataContract, 32);
      }); 
    $.Field({Static:true , Public:false}, "dataContractID", $.Int32, 0); 
    $.Field({Static:true , Public:false}, "typeToBuiltInContract", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])); 
    $.Field({Static:true , Public:false}, "nameToBuiltInContract", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])); 
    $.Field({Static:true , Public:false}, "typeNameToBuiltInContract", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Runtime.Serialization.DataContract")])); 
    $.Field({Static:true , Public:false}, "namespaces", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])); 
    $.Field({Static:true , Public:false}, "clrTypeStrings", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")])); 
    $.Field({Static:true , Public:false}, "clrTypeStringsDictionary", $asm11.TypeRef("System.Xml.XmlDictionary")); 
    $.Field({Static:true , Public:false}, "typeHandleRef", $asm11.TypeRef("System.Runtime.Serialization.TypeHandleRef")); 
    $.Field({Static:true , Public:false}, "cacheLock", $.Object); 
    $.Field({Static:true , Public:false}, "createDataContractLock", $.Object); 
    $.Field({Static:true , Public:false}, "initBuiltInContractsLock", $.Object); 
    $.Field({Static:true , Public:false}, "namespacesLock", $.Object); 
    $.Field({Static:true , Public:false}, "clrTypeStringsLock", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "underlyingType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "originalUnderlyingType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "isReference", $.Boolean); 
    $.Field({Static:false, Public:false}, "isValueType", $.Boolean); 
    $.Field({Static:false, Public:false}, "stableName", $asm13.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "genericInfo", $asm11.TypeRef("System.Runtime.Serialization.GenericInfo")); 
    $.Field({Static:false, Public:false}, "$name", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:false, Public:false}, "ns", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:false, Public:false}, "typeForInitialization", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:false}, "UnderlyingType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "OriginalUnderlyingType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsBuiltInDataContract", $.Boolean);

    $.Property({Static:false, Public:false}, "TypeForInitialization", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "IsReference", $.Boolean);

    $.Property({Static:false, Public:false}, "IsValueType", $.Boolean);

    $.Property({Static:false, Public:false}, "StableName", $asm13.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "GenericInfo", $asm11.TypeRef("System.Runtime.Serialization.GenericInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:false, Virtual:true }, "IsISerializable", $.Boolean);

    $.Property({Static:false, Public:false}, "Name", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:true }, "Namespace", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasRoot", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "TopLevelElementName", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "TopLevelElementNamespace", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "CanContainReferences", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsPrimitive", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.ClassDataContract */ 

(function ClassDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
      Name: "System.Runtime.Serialization.ClassDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BindGenericParameters", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Runtime.Serialization.DataContract")]), $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CheckAndAddMember", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Runtime.Serialization.DataMember")]), $asm11.TypeRef("System.Runtime.Serialization.DataMember"), 
          $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Runtime.Serialization.DataMember")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateChildElementNamespaces", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateClassDataContractForKeyValue", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureMethodsImported", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Runtime.Serialization.DataContractPairKey"), $.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseContract", 
      new JSIL.MethodSignature($.Type, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ChildElementNamespaces", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ExtensionDataSetMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_HasDataContract", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_HasExtensionData", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsISerializable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsNonAttributedType", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Runtime.Serialization.DataMember")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_OnDeserialized", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_OnDeserializing", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_OnSerialized", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_OnSerializing", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatReaderDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatClassReaderDelegate"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatWriterDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatClassWriterDelegate"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetChildNamespaceToDeclare", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm09.TypeRef("System.Type"), 
          $asm11.TypeRef("System.Xml.XmlDictionary")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetISerializableConstructor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.ConstructorInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetNonAttributedTypeConstructor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.ConstructorInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "InitClassDataContract", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IsEveryDataMemberOptional", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm11.TypeRef("System.Runtime.Serialization.DataMember")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNonAttributedTypeValidForSerialization", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RequiresMemberAccessForRead", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Security.SecurityException")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RequiresMemberAccessForWrite", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Security.SecurityException")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseContract", 
      new JSIL.MethodSignature(null, [$.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsISerializable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_KnownDataContracts", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_Members", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Runtime.Serialization.DataMember")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Field({Static:false, Public:true }, "ContractNamespaces", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])); 
    $.Field({Static:false, Public:true }, "MemberNames", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])); 
    $.Field({Static:false, Public:true }, "MemberNamespaces", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])); 
    $.Field({Static:false, Public:false}, "childElementNamespaces", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "helper", $asm11.TypeRef("System.Runtime.Serialization.ClassDataContract/ClassDataContractCriticalHelper"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:false, Public:false}, "BaseContract", $.Type);

    $.Property({Static:false, Public:false}, "Members", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Runtime.Serialization.DataMember")]));

    $.Property({Static:false, Public:true }, "ChildElementNamespaces", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Property({Static:false, Public:false}, "OnSerializing", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "OnSerialized", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "OnDeserializing", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "OnDeserialized", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "ExtensionDataSetMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:false, Virtual:true }, "IsISerializable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNonAttributedType", $.Boolean);

    $.Property({Static:false, Public:false}, "HasDataContract", $.Boolean);

    $.Property({Static:false, Public:false}, "HasExtensionData", $.Boolean);

    $.Property({Static:false, Public:false}, "XmlFormatWriterDelegate", $asm11.TypeRef("System.Runtime.Serialization.XmlFormatClassWriterDelegate"));

    $.Property({Static:false, Public:false}, "XmlFormatReaderDelegate", $asm11.TypeRef("System.Runtime.Serialization.XmlFormatClassReaderDelegate"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ClassDataContract/ClassDataContractCriticalHelper */ 

(function ClassDataContractCriticalHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataContract/DataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.ClassDataContract/ClassDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureIsReferenceImported", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureMethodsImported", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ChildElementNamespaces", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_ExtensionDataSetMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDataContract", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasExtensionData", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsISerializable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_IsNonAttributedType", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Runtime.Serialization.DataMember")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OnDeserialized", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OnDeserializing", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OnSerialized", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OnSerializing", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SerInfoCtorArgs", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatReaderDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatClassReaderDelegate"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatWriterDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatClassWriterDelegate"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetISerializableConstructor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.ConstructorInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNonAttributedTypeConstructor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.ConstructorInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStableNameAndSetHasDataContract", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ImportDataMembers", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMethodOverriding", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidCallback", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.ParameterInfo")]), 
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Type")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidExtensionDataSetMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.ParameterInfo")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ChildElementNamespaces", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsISerializable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_KnownDataContracts", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_Members", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Runtime.Serialization.DataMember")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlFormatReaderDelegate", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlFormatClassReaderDelegate")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlFormatWriterDelegate", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlFormatClassWriterDelegate")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetIfGetOnlyCollection", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.DataMember")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetIfMembersHaveConflict", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Runtime.Serialization.DataMember")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetIsNonAttributedType", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false}, "baseContract", $asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")); 
    $.Field({Static:false, Public:false}, "members", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Runtime.Serialization.DataMember")])); 
    $.Field({Static:false, Public:false}, "onSerializing", $asm09.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "onSerialized", $asm09.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "onDeserializing", $asm09.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "onDeserialized", $asm09.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "extensionDataSetMethod", $asm09.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "knownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])); 
    $.Field({Static:false, Public:false}, "isISerializable", $.Boolean); 
    $.Field({Static:false, Public:false}, "isKnownTypeAttributeChecked", $.Boolean); 
    $.Field({Static:false, Public:false}, "isMethodChecked", $.Boolean); 
    $.Field({Static:false, Public:false}, "hasExtensionData", $.Boolean); 
    $.Field({Static:false, Public:false}, "isNonAttributedType", $.Boolean); 
    $.Field({Static:false, Public:false}, "hasDataContract", $.Boolean); 
    $.Field({Static:false, Public:false}, "childElementNamespaces", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])); 
    $.Field({Static:false, Public:false}, "xmlFormatReaderDelegate", $asm11.TypeRef("System.Runtime.Serialization.XmlFormatClassReaderDelegate")); 
    $.Field({Static:false, Public:false}, "xmlFormatWriterDelegate", $asm11.TypeRef("System.Runtime.Serialization.XmlFormatClassWriterDelegate")); 
    $.Field({Static:false, Public:true }, "ContractNamespaces", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])); 
    $.Field({Static:false, Public:true }, "MemberNames", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])); 
    $.Field({Static:false, Public:true }, "MemberNamespaces", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])); 
    $.Field({Static:true , Public:false}, "serInfoCtorArgs", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])); 
    $.Property({Static:false, Public:false}, "BaseContract", $asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"));

    $.Property({Static:false, Public:false}, "Members", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Runtime.Serialization.DataMember")]));

    $.Property({Static:false, Public:false}, "OnSerializing", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "OnSerialized", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "OnDeserializing", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "OnDeserialized", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "ExtensionDataSetMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:false, Virtual:true }, "IsISerializable", $.Boolean);

    $.Property({Static:false, Public:false}, "HasDataContract", $.Boolean);

    $.Property({Static:false, Public:false}, "HasExtensionData", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNonAttributedType", $.Boolean);

    $.Property({Static:false, Public:false}, "XmlFormatWriterDelegate", $asm11.TypeRef("System.Runtime.Serialization.XmlFormatClassWriterDelegate"));

    $.Property({Static:false, Public:false}, "XmlFormatReaderDelegate", $asm11.TypeRef("System.Runtime.Serialization.XmlFormatClassReaderDelegate"));

    $.Property({Static:false, Public:true }, "ChildElementNamespaces", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Property({Static:true , Public:false}, "SerInfoCtorArgs", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* struct System.Runtime.Serialization.ClassDataContract/ClassDataContractCriticalHelper/Member */ 

(function Member$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Serialization.ClassDataContract/ClassDataContractCriticalHelper/Member", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.DataMember"), $.String, 
          $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "member", $asm11.TypeRef("System.Runtime.Serialization.DataMember")); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "baseTypeIndex", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ClassDataContract/ClassDataContractCriticalHelper/DataMemberConflictComparer */ 

(function DataMemberConflictComparer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ClassDataContract/ClassDataContractCriticalHelper/DataMemberConflictComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract/ClassDataContractCriticalHelper/Member"), $asm11.TypeRef("System.Runtime.Serialization.ClassDataContract/ClassDataContractCriticalHelper/Member")], [])
    );

    $.Field({Static:true , Public:false}, "Singleton", $.Type); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract/ClassDataContractCriticalHelper/Member")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ClassDataContract/DataMemberComparer */ 

(function DataMemberComparer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ClassDataContract/DataMemberComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Runtime.Serialization.DataMember"), $asm11.TypeRef("System.Runtime.Serialization.DataMember")], [])
    );

    $.Field({Static:true , Public:false}, "Singleton", $.Type); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$asm11.TypeRef("System.Runtime.Serialization.DataMember")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.Serialization.KeyValue`2 */ 

(function KeyValue$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Serialization.KeyValue`2", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["K", "V"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("K", "System.Runtime.Serialization.KeyValue`2"), new JSIL.GenericParameter("V", "System.Runtime.Serialization.KeyValue`2")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("K", "System.Runtime.Serialization.KeyValue`2"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("V", "System.Runtime.Serialization.KeyValue`2"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Key", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("K", "System.Runtime.Serialization.KeyValue`2")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("V", "System.Runtime.Serialization.KeyValue`2")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "key", $.GenericParameter("K")); 
    $.Field({Static:false, Public:false}, "value", $.GenericParameter("V")); 
    $.Property({Static:false, Public:true }, "Key", new JSIL.GenericParameter("K", "System.Runtime.Serialization.KeyValue`2"))
      .Attribute($asm11.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:true }, "Value", new JSIL.GenericParameter("V", "System.Runtime.Serialization.KeyValue`2"))
      .Attribute($asm11.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm11.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* enum System.Runtime.Serialization.CollectionKind */ 

JSIL.MakeEnum(
  "System.Runtime.Serialization.CollectionKind", false, {
    None: 0, 
    GenericDictionary: 1, 
    Dictionary: 2, 
    GenericList: 3, 
    GenericCollection: 4, 
    List: 5, 
    GenericEnumerable: 6, 
    Collection: 7, 
    Enumerable: 8, 
    Array: 9
  }, false
);

/* class System.Runtime.Serialization.CollectionDataContract */ 

(function CollectionDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
      Name: "System.Runtime.Serialization.CollectionDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.CollectionKind")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Runtime.Serialization.CollectionKind"), 
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Reflection.ConstructorInfo")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Runtime.Serialization.CollectionKind"), 
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Reflection.ConstructorInfo"), 
          $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BindGenericParameters", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Runtime.Serialization.DataContract")]), $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckConstructor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CreateGetOnlyCollectionDataContract", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Runtime.Serialization.DataContract")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Runtime.Serialization.DataContractPairKey"), $.Object])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindCollectionMethodsOnInterface", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Reflection.MethodInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Reflection.MethodInfo")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AddMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ChildElementNamespace", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_CollectionItemName", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Constructor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.ConstructorInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_GetEnumeratorMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_InvalidCollectionInSharedContractMessage", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsConstructorCheckRequired", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsDictionary", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsItemTypeNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ItemContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ItemName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ItemNameSetExplicit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ItemType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_KeyName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Kind", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.CollectionKind"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_KnownInterfaces", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_SharedTypeContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_ValueName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatGetOnlyCollectionReaderDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatReaderDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatCollectionReaderDelegate"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatWriterDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatCollectionWriterDelegate"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetCollectionMethods", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Reflection.MethodInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Reflection.MethodInfo")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInvalidCollectionMessage", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSharedTypeContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTargetMethodWithName", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [
          $.String, $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValidContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm11.TypeRef("System.Runtime.Serialization.SerializationMode")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetValidContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleIfInvalidCollection", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Type"), $.Boolean, 
          $.Boolean, $.Boolean, 
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Runtime.Serialization.DataContract")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitCollectionDataContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "InitSharedTypeContract", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCollection", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCollection", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Type")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "IsCollection", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCollectionDataContract", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCollectionHelper", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Type")]), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCollectionInterface", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCollectionOrTryCreate", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Type"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Runtime.Serialization.DataContract")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Type")]), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsKnownInterface", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidContract", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.SerializationMode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RequiresMemberAccessForRead", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Security.SecurityException")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RequiresMemberAccessForWrite", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Security.SecurityException")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsConstructorCheckRequired", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsItemTypeNullable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ItemContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_ItemName", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_KeyName", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_KnownDataContracts", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_ValueName", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfInvalid", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryCreate", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Runtime.Serialization.DataContract")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Field({Static:false, Public:false}, "collectionItemName", $asm11.TypeRef("System.Xml.XmlDictionaryString"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "childElementNamespace", $asm11.TypeRef("System.Xml.XmlDictionaryString"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "itemContract", $asm11.TypeRef("System.Runtime.Serialization.DataContract"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "helper", $asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract/CollectionDataContractCriticalHelper"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:true , Public:false}, "KnownInterfaces", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]));

    $.Property({Static:false, Public:false}, "Kind", $asm11.TypeRef("System.Runtime.Serialization.CollectionKind"));

    $.Property({Static:false, Public:false}, "ItemType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "ItemContract", $asm11.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:false}, "SharedTypeContract", $asm11.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:false}, "ItemName", $.String);

    $.Property({Static:false, Public:true }, "CollectionItemName", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false}, "KeyName", $.String);

    $.Property({Static:false, Public:false}, "ValueName", $.String);

    $.Property({Static:false, Public:false}, "IsDictionary", $.Boolean);

    $.Property({Static:false, Public:true }, "ChildElementNamespace", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false}, "IsItemTypeNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsConstructorCheckRequired", $.Boolean);

    $.Property({Static:false, Public:false}, "GetEnumeratorMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "AddMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "Constructor", $asm09.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:false}, "InvalidCollectionInSharedContractMessage", $.String);

    $.Property({Static:false, Public:false}, "ItemNameSetExplicit", $.Boolean);

    $.Property({Static:false, Public:false}, "XmlFormatWriterDelegate", $asm11.TypeRef("System.Runtime.Serialization.XmlFormatCollectionWriterDelegate"));

    $.Property({Static:false, Public:false}, "XmlFormatReaderDelegate", $asm11.TypeRef("System.Runtime.Serialization.XmlFormatCollectionReaderDelegate"));

    $.Property({Static:false, Public:false}, "XmlFormatGetOnlyCollectionReaderDelegate", $asm11.TypeRef("System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.CollectionDataContract/CollectionDataContractCriticalHelper */ 

(function CollectionDataContractCriticalHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataContract/DataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.CollectionDataContract/CollectionDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.CollectionKind")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Runtime.Serialization.CollectionKind"), 
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Reflection.ConstructorInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Runtime.Serialization.CollectionKind"), 
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Reflection.ConstructorInfo"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AddMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ChildElementNamespace", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_CollectionItemName", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Constructor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.ConstructorInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GetEnumeratorMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InvalidCollectionInSharedContractMessage", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsConstructorCheckRequired", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDictionary", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsItemTypeNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ItemContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ItemName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ItemNameSetExplicit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ItemType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Kind", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.CollectionKind"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_KnownInterfaces", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SharedTypeContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatGetOnlyCollectionReaderDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatReaderDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatCollectionReaderDelegate"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatWriterDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatCollectionWriterDelegate"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.CollectionKind"), $asm09.TypeRef("System.Type"), 
          $asm11.TypeRef("System.Runtime.Serialization.CollectionDataContractAttribute")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ChildElementNamespace", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_IsConstructorCheckRequired", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsItemTypeNullable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ItemContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ItemName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_KeyName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_KnownDataContracts", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_SharedTypeContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ValueName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlFormatGetOnlyCollectionReaderDelegate", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlFormatReaderDelegate", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlFormatCollectionReaderDelegate")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlFormatWriterDelegate", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlFormatCollectionWriterDelegate")], [])
    );

    $.Field({Static:true , Public:false}, "_knownInterfaces", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:false}, "itemType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "isItemTypeNullable", $.Boolean); 
    $.Field({Static:false, Public:false}, "kind", $asm11.TypeRef("System.Runtime.Serialization.CollectionKind")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "getEnumeratorMethod", $asm09.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "addMethod", $asm09.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "$constructor", $asm09.TypeRef("System.Reflection.ConstructorInfo")); 
    $.Field({Static:false, Public:false}, "itemContract", $asm11.TypeRef("System.Runtime.Serialization.DataContract")); 
    $.Field({Static:false, Public:false}, "sharedTypeContract", $asm11.TypeRef("System.Runtime.Serialization.DataContract")); 
    $.Field({Static:false, Public:false}, "knownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])); 
    $.Field({Static:false, Public:false}, "isKnownTypeAttributeChecked", $.Boolean); 
    $.Field({Static:false, Public:false}, "itemName", $.String); 
    $.Field({Static:false, Public:false}, "itemNameSetExplicit", $.Boolean); 
    $.Field({Static:false, Public:false}, "collectionItemName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:false, Public:false}, "keyName", $.String); 
    $.Field({Static:false, Public:false}, "valueName", $.String); 
    $.Field({Static:false, Public:false}, "childElementNamespace", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:false, Public:false}, "invalidCollectionInSharedContractMessage", $.String); 
    $.Field({Static:false, Public:false}, "xmlFormatReaderDelegate", $asm11.TypeRef("System.Runtime.Serialization.XmlFormatCollectionReaderDelegate")); 
    $.Field({Static:false, Public:false}, "xmlFormatGetOnlyCollectionReaderDelegate", $asm11.TypeRef("System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate")); 
    $.Field({Static:false, Public:false}, "xmlFormatWriterDelegate", $asm11.TypeRef("System.Runtime.Serialization.XmlFormatCollectionWriterDelegate")); 
    $.Field({Static:false, Public:false}, "isConstructorCheckRequired", $.Boolean); 
    $.Property({Static:true , Public:false}, "KnownInterfaces", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]));

    $.Property({Static:false, Public:false}, "Kind", $asm11.TypeRef("System.Runtime.Serialization.CollectionKind"));

    $.Property({Static:false, Public:false}, "ItemType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ItemContract", $asm11.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:false}, "SharedTypeContract", $asm11.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:false}, "ItemName", $.String);

    $.Property({Static:false, Public:false}, "IsConstructorCheckRequired", $.Boolean);

    $.Property({Static:false, Public:true }, "CollectionItemName", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false}, "KeyName", $.String);

    $.Property({Static:false, Public:false}, "ValueName", $.String);

    $.Property({Static:false, Public:false}, "IsDictionary", $.Boolean);

    $.Property({Static:false, Public:true }, "ChildElementNamespace", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false}, "IsItemTypeNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "GetEnumeratorMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "AddMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "Constructor", $asm09.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:false}, "InvalidCollectionInSharedContractMessage", $.String);

    $.Property({Static:false, Public:false}, "ItemNameSetExplicit", $.Boolean);

    $.Property({Static:false, Public:false}, "XmlFormatWriterDelegate", $asm11.TypeRef("System.Runtime.Serialization.XmlFormatCollectionWriterDelegate"));

    $.Property({Static:false, Public:false}, "XmlFormatReaderDelegate", $asm11.TypeRef("System.Runtime.Serialization.XmlFormatCollectionReaderDelegate"));

    $.Property({Static:false, Public:false}, "XmlFormatGetOnlyCollectionReaderDelegate", $asm11.TypeRef("System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.CollectionDataContract/DictionaryEnumerator */ 

(function DictionaryEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.CollectionDataContract/DictionaryEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.IDictionaryEnumerator")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.KeyValue`2", [$.Object, $.Object]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(2, "get_Current");

    $.Field({Static:false, Public:false}, "enumerator", $asm09.TypeRef("System.Collections.IDictionaryEnumerator")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm11.TypeRef("System.Runtime.Serialization.KeyValue`2", [$.Object, $.Object]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm11.TypeRef("System.Runtime.Serialization.KeyValue`2", [$.Object, $.Object])]), 
      /* 1 */ $asm09.TypeRef("System.IDisposable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.CollectionDataContract/GenericDictionaryEnumerator`2 */ 

(function GenericDictionaryEnumerator$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.CollectionDataContract/GenericDictionaryEnumerator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K", "V"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("K", "System.Runtime.Serialization.CollectionDataContract/GenericDictionaryEnumerator`2"), new JSIL.GenericParameter("V", "System.Runtime.Serialization.CollectionDataContract/GenericDictionaryEnumerator`2")])])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.KeyValue`2", [new JSIL.GenericParameter("K", "System.Runtime.Serialization.CollectionDataContract/GenericDictionaryEnumerator`2"), new JSIL.GenericParameter("V", "System.Runtime.Serialization.CollectionDataContract/GenericDictionaryEnumerator`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(2, "get_Current");

    $.Field({Static:false, Public:false}, "enumerator", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("K"), $.GenericParameter("V")])])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm11.TypeRef("System.Runtime.Serialization.KeyValue`2", [new JSIL.GenericParameter("K", "System.Runtime.Serialization.CollectionDataContract/GenericDictionaryEnumerator`2"), new JSIL.GenericParameter("V", "System.Runtime.Serialization.CollectionDataContract/GenericDictionaryEnumerator`2")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm11.TypeRef("System.Runtime.Serialization.KeyValue`2", [new JSIL.GenericParameter("K", "System.Runtime.Serialization.CollectionDataContract/GenericDictionaryEnumerator`2"), new JSIL.GenericParameter("V", "System.Runtime.Serialization.CollectionDataContract/GenericDictionaryEnumerator`2")])]), 
      /* 1 */ $asm09.TypeRef("System.IDisposable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Runtime.Serialization.IGenericNameProvider */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.IGenericNameProvider", false, [], function ($) {
    $.Method({}, "GetParameterCount", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "GetNestedParameterCounts", new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$.Int32]), [], []));
    $.Method({}, "GetParameterName", new JSIL.MethodSignature($.String, [$.Int32], []));
    $.Method({}, "GetNamespaces", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "GetGenericTypeName", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "get_ParametersFromBuiltInNamespaces", new JSIL.MethodSignature($.Boolean, [], []));
    $.Property({}, "ParametersFromBuiltInNamespaces");
  }, []);

/* class System.Runtime.Serialization.GenericNameProvider */ 

(function GenericNameProvider$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.GenericNameProvider", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParametersFromBuiltInNamespaces", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGenericTypeName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespaces", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNestedParameterCounts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetParameterCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetParameterName", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStableName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "genericTypeName", $.String); 
    $.Field({Static:false, Public:false}, "genericParams", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:false}, "nestedParamCounts", $asm09.TypeRef("System.Collections.Generic.IList`1", [$.Int32])); 
    $.Property({Static:false, Public:true , Virtual:true }, "ParametersFromBuiltInNamespaces", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Runtime.Serialization.IGenericNameProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.GenericInfo */ 

(function GenericInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.GenericInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToLevel", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parameters", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$.Type]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParametersFromBuiltInNamespaces", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StableName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "GetExpandedStableName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetGenericTypeName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespaces", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNestedParameterCounts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetParameterCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetParameterName", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStableNamespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "genericTypeName", $.String); 
    $.Field({Static:false, Public:false}, "stableName", $asm13.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "paramGenericInfos", $asm09.TypeRef("System.Collections.Generic.List`1", [$.Type])); 
    $.Field({Static:false, Public:false}, "nestedParamCounts", $asm09.TypeRef("System.Collections.Generic.List`1", [$.Int32])); 
    $.Property({Static:false, Public:false}, "StableName", $asm13.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "Parameters", $asm09.TypeRef("System.Collections.Generic.IList`1", [$.Type]));

    $.Property({Static:false, Public:true , Virtual:true }, "ParametersFromBuiltInNamespaces", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Runtime.Serialization.IGenericNameProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DataContractPairKey */ 

(function DataContractPairKey$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.DataContractPairKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $.Object], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false}, "object1", $.Object); 
    $.Field({Static:false, Public:false}, "object2", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.TypeHandleRefEqualityComparer */ 

(function TypeHandleRefEqualityComparer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.TypeHandleRefEqualityComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.TypeHandleRef"), $asm11.TypeRef("System.Runtime.Serialization.TypeHandleRef")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Runtime.Serialization.TypeHandleRef")], [])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm11.TypeRef("System.Runtime.Serialization.TypeHandleRef")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.TypeHandleRef */ 

(function TypeHandleRef$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.TypeHandleRef", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.RuntimeTypeHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($asm09.TypeRef("System.RuntimeTypeHandle"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.RuntimeTypeHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "value", $asm09.TypeRef("System.RuntimeTypeHandle")); 
    $.Property({Static:false, Public:true }, "Value", $asm09.TypeRef("System.RuntimeTypeHandle"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.IntRef */ 

(function IntRef$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.IntRef", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "value", $.Int32); 
    $.Property({Static:false, Public:true }, "Value", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DataMember */ 

(function DataMember$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.DataMember", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MemberInfo")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $.String, 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "BindGenericParameters", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Runtime.Serialization.DataContract")]), $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Runtime.Serialization.DataContractPairKey"), $.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConflictingMember", 
      new JSIL.MethodSignature($.Type, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_EmitDefaultValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_HasConflictingNameAndType", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsGetOnlyCollection", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsRequired", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_MemberInfo", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MemberInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_MemberType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_MemberTypeContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Order", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RequiresMemberAccessForGet", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RequiresMemberAccessForSet", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ConflictingMember", 
      new JSIL.MethodSignature(null, [$.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_EmitDefaultValue", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_HasConflictingNameAndType", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsGetOnlyCollection", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsNullable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsRequired", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_MemberTypeContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_Order", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "helper", $asm11.TypeRef("System.Runtime.Serialization.DataMember/CriticalHelper"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:false, Public:false}, "MemberInfo", $asm09.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Order", $.Int32);

    $.Property({Static:false, Public:false}, "IsRequired", $.Boolean);

    $.Property({Static:false, Public:false}, "EmitDefaultValue", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsGetOnlyCollection", $.Boolean);

    $.Property({Static:false, Public:false}, "MemberType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "MemberTypeContract", $asm11.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:false}, "HasConflictingNameAndType", $.Boolean);

    $.Property({Static:false, Public:false}, "ConflictingMember", $.Type);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DataMember/CriticalHelper */ 

(function CriticalHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.DataMember/CriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MemberInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $.String, 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConflictingMember", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataMember"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EmitDefaultValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasConflictingNameAndType", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsGetOnlyCollection", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRequired", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MemberInfo", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MemberInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MemberType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MemberTypeContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Order", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ConflictingMember", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataMember")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EmitDefaultValue", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HasConflictingNameAndType", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsGetOnlyCollection", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsNullable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsRequired", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MemberTypeContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Order", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "memberTypeContract", $asm11.TypeRef("System.Runtime.Serialization.DataContract")); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "order", $.Int32); 
    $.Field({Static:false, Public:false}, "isRequired", $.Boolean); 
    $.Field({Static:false, Public:false}, "emitDefaultValue", $.Boolean); 
    $.Field({Static:false, Public:false}, "isNullable", $.Boolean); 
    $.Field({Static:false, Public:false}, "isGetOnlyCollection", $.Boolean); 
    $.Field({Static:false, Public:false}, "memberInfo", $asm09.TypeRef("System.Reflection.MemberInfo")); 
    $.Field({Static:false, Public:false}, "hasConflictingNameAndType", $.Boolean); 
    $.Field({Static:false, Public:false}, "conflictingMember", $asm11.TypeRef("System.Runtime.Serialization.DataMember")); 
    $.Property({Static:false, Public:false}, "MemberInfo", $asm09.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Order", $.Int32);

    $.Property({Static:false, Public:false}, "IsRequired", $.Boolean);

    $.Property({Static:false, Public:false}, "EmitDefaultValue", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsGetOnlyCollection", $.Boolean);

    $.Property({Static:false, Public:false}, "MemberType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "MemberTypeContract", $asm11.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:false}, "HasConflictingNameAndType", $.Boolean);

    $.Property({Static:false, Public:false}, "ConflictingMember", $asm11.TypeRef("System.Runtime.Serialization.DataMember"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.EnumDataContract */ 

(function EnumDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
      Name: "System.Runtime.Serialization.EnumDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Runtime.Serialization.DataContractPairKey"), $.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseContractName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanContainReferences", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChildElementNames", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsFlags", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsULong", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Runtime.Serialization.DataMember")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Values", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$.Int64]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetBaseContractName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetBaseType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetEnumValueFromString", 
      new JSIL.MethodSignature($.Int64, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringFromEnumValue", 
      new JSIL.MethodSignature($.String, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadEnumValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadEnumValue", 
      new JSIL.MethodSignature($.Int64, [
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseContractName", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsFlags", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_Members", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Runtime.Serialization.DataMember")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_Values", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.List`1", [$.Int64])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEnumValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "helper", $asm11.TypeRef("System.Runtime.Serialization.EnumDataContract/EnumDataContractCriticalHelper"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:false, Public:false}, "BaseContractName", $asm13.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "Members", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Runtime.Serialization.DataMember")]));

    $.Property({Static:false, Public:false}, "Values", $asm09.TypeRef("System.Collections.Generic.List`1", [$.Int64]));

    $.Property({Static:false, Public:false}, "IsFlags", $.Boolean);

    $.Property({Static:false, Public:false}, "IsULong", $.Boolean);

    $.Property({Static:false, Public:false}, "ChildElementNames", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Property({Static:false, Public:false, Virtual:true }, "CanContainReferences", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.EnumDataContract/EnumDataContractCriticalHelper */ 

(function EnumDataContractCriticalHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataContract/DataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.EnumDataContract/EnumDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseContractName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChildElementNames", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsFlags", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsULong", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Runtime.Serialization.DataMember")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Values", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$.Int64]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBaseContractName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBaseType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportBaseType", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportDataMembers", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseContractName", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsFlags", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Members", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Runtime.Serialization.DataMember")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Values", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.List`1", [$.Int64])], [])
    );

    $.Field({Static:true , Public:false}, "typeToName", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Type"), $asm13.TypeRef("System.Xml.XmlQualifiedName")])); 
    $.Field({Static:true , Public:false}, "nameToType", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm09.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:false}, "baseContractName", $asm13.TypeRef("System.Xml.XmlQualifiedName")); 
    $.Field({Static:false, Public:false}, "members", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Runtime.Serialization.DataMember")])); 
    $.Field({Static:false, Public:false}, "values", $asm09.TypeRef("System.Collections.Generic.List`1", [$.Int64])); 
    $.Field({Static:false, Public:false}, "isULong", $.Boolean); 
    $.Field({Static:false, Public:false}, "isFlags", $.Boolean); 
    $.Field({Static:false, Public:false}, "hasDataContract", $.Boolean); 
    $.Field({Static:false, Public:false}, "childElementNames", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])); 
    $.Property({Static:false, Public:false}, "BaseContractName", $asm13.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "Members", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Runtime.Serialization.DataMember")]));

    $.Property({Static:false, Public:false}, "Values", $asm09.TypeRef("System.Collections.Generic.List`1", [$.Int64]));

    $.Property({Static:false, Public:false}, "IsFlags", $.Boolean);

    $.Property({Static:false, Public:false}, "IsULong", $.Boolean);

    $.Property({Static:false, Public:false}, "ChildElementNames", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.GenericParameterDataContract */ 

(function GenericParameterDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
      Name: "System.Runtime.Serialization.GenericParameterDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BindGenericParameters", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Runtime.Serialization.DataContract")]), $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsBuiltInDataContract", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParameterPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "helper", $asm11.TypeRef("System.Runtime.Serialization.GenericParameterDataContract/GenericParameterDataContractCriticalHelper"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:false, Public:false}, "ParameterPosition", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsBuiltInDataContract", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.GenericParameterDataContract/GenericParameterDataContractCriticalHelper */ 

(function GenericParameterDataContractCriticalHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataContract/DataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.GenericParameterDataContract/GenericParameterDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParameterPosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false}, "parameterPosition", $.Int32); 
    $.Property({Static:false, Public:false}, "ParameterPosition", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.PrimitiveDataContract */ 

(function PrimitiveDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
      Name: "System.Runtime.Serialization.PrimitiveDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Runtime.Serialization.DataContractPairKey"), $.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanContainReferences", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsBuiltInDataContract", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsPrimitive", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TopLevelElementNamespace", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatContentWriterMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatReaderMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatWriterMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetPrimitiveDataContract", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPrimitiveDataContract", 
      new JSIL.MethodSignature($.Type, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleReadValue", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_TopLevelElementNamespace", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadNullAtTopLevel", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Field({Static:false, Public:false}, "helper", $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract/PrimitiveDataContractCriticalHelper"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "TopLevelElementNamespace", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "CanContainReferences", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsPrimitive", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsBuiltInDataContract", $.Boolean);

    $.Property({Static:false, Public:false}, "XmlFormatWriterMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "XmlFormatContentWriterMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "XmlFormatReaderMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.PrimitiveDataContract/PrimitiveDataContractCriticalHelper */ 

(function PrimitiveDataContractCriticalHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataContract/DataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.PrimitiveDataContract/PrimitiveDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatContentWriterMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatReaderMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFormatWriterMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlFormatContentWriterMethod", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlFormatReaderMethod", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlFormatWriterMethod", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.Field({Static:false, Public:false}, "xmlFormatWriterMethod", $asm09.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "xmlFormatContentWriterMethod", $asm09.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "xmlFormatReaderMethod", $asm09.TypeRef("System.Reflection.MethodInfo")); 
    $.Property({Static:false, Public:false}, "XmlFormatWriterMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "XmlFormatContentWriterMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "XmlFormatReaderMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.CharDataContract */ 

(function CharDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.CharDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.AsmxCharDataContract */ 

(function AsmxCharDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.CharDataContract"), 
      Name: "System.Runtime.Serialization.AsmxCharDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.BooleanDataContract */ 

(function BooleanDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.BooleanDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SignedByteDataContract */ 

(function SignedByteDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.SignedByteDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.UnsignedByteDataContract */ 

(function UnsignedByteDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.UnsignedByteDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ShortDataContract */ 

(function ShortDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.ShortDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.UnsignedShortDataContract */ 

(function UnsignedShortDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.UnsignedShortDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.IntDataContract */ 

(function IntDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.IntDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.UnsignedIntDataContract */ 

(function UnsignedIntDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.UnsignedIntDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.LongDataContract */ 

(function LongDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.LongDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.IntegerDataContract */ 

(function IntegerDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.LongDataContract"), 
      Name: "System.Runtime.Serialization.IntegerDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.PositiveIntegerDataContract */ 

(function PositiveIntegerDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.LongDataContract"), 
      Name: "System.Runtime.Serialization.PositiveIntegerDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.NegativeIntegerDataContract */ 

(function NegativeIntegerDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.LongDataContract"), 
      Name: "System.Runtime.Serialization.NegativeIntegerDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.NonPositiveIntegerDataContract */ 

(function NonPositiveIntegerDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.LongDataContract"), 
      Name: "System.Runtime.Serialization.NonPositiveIntegerDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.NonNegativeIntegerDataContract */ 

(function NonNegativeIntegerDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.LongDataContract"), 
      Name: "System.Runtime.Serialization.NonNegativeIntegerDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.UnsignedLongDataContract */ 

(function UnsignedLongDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.UnsignedLongDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.FloatDataContract */ 

(function FloatDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.FloatDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DoubleDataContract */ 

(function DoubleDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.DoubleDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DecimalDataContract */ 

(function DecimalDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.DecimalDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DateTimeDataContract */ 

(function DateTimeDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.DateTimeDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.StringDataContract */ 

(function StringDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.StringDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.TimeDataContract */ 

(function TimeDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.TimeDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DateDataContract */ 

(function DateDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.DateDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.HexBinaryDataContract */ 

(function HexBinaryDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.HexBinaryDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.GYearMonthDataContract */ 

(function GYearMonthDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.GYearMonthDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.GYearDataContract */ 

(function GYearDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.GYearDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.GMonthDayDataContract */ 

(function GMonthDayDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.GMonthDayDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.GDayDataContract */ 

(function GDayDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.GDayDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.GMonthDataContract */ 

(function GMonthDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.GMonthDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.NormalizedStringDataContract */ 

(function NormalizedStringDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.NormalizedStringDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.TokenDataContract */ 

(function TokenDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.TokenDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.LanguageDataContract */ 

(function LanguageDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.LanguageDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.NameDataContract */ 

(function NameDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.NameDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.NCNameDataContract */ 

(function NCNameDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.NCNameDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.IDDataContract */ 

(function IDDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.IDDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.IDREFDataContract */ 

(function IDREFDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.IDREFDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.IDREFSDataContract */ 

(function IDREFSDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.IDREFSDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ENTITYDataContract */ 

(function ENTITYDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.ENTITYDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ENTITIESDataContract */ 

(function ENTITIESDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.ENTITIESDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.NMTOKENDataContract */ 

(function NMTOKENDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.NMTOKENDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.NMTOKENSDataContract */ 

(function NMTOKENSDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.StringDataContract"), 
      Name: "System.Runtime.Serialization.NMTOKENSDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ByteArrayDataContract */ 

(function ByteArrayDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.ByteArrayDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ObjectDataContract */ 

(function ObjectDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.ObjectDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanContainReferences", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsPrimitive", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "CanContainReferences", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsPrimitive", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.TimeSpanDataContract */ 

(function TimeSpanDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.TimeSpanDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XsDurationDataContract */ 

(function XsDurationDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.TimeSpanDataContract"), 
      Name: "System.Runtime.Serialization.XsDurationDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.GuidDataContract */ 

(function GuidDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.GuidDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.AsmxGuidDataContract */ 

(function AsmxGuidDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.GuidDataContract"), 
      Name: "System.Runtime.Serialization.AsmxGuidDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.UriDataContract */ 

(function UriDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.UriDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.QNameDataContract */ 

(function QNameDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.PrimitiveDataContract"), 
      Name: "System.Runtime.Serialization.QNameDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsPrimitive", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ReadMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_WriteMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteRootElement", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "WriteMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "ReadMethodName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "IsPrimitive", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SpecialTypeDataContract */ 

(function SpecialTypeDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
      Name: "System.Runtime.Serialization.SpecialTypeDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsBuiltInDataContract", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "helper", $asm11.TypeRef("System.Runtime.Serialization.SpecialTypeDataContract/SpecialTypeDataContractCriticalHelper"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:false, Public:false, Virtual:true }, "IsBuiltInDataContract", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SpecialTypeDataContract/SpecialTypeDataContractCriticalHelper */ 

(function SpecialTypeDataContractCriticalHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataContract/DataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.SpecialTypeDataContract/SpecialTypeDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* delegate System.Runtime.Serialization.CreateXmlSerializableDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.CreateXmlSerializableDelegate", false, []);

/* class System.Runtime.Serialization.XmlDataContract */ 

(function XmlDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
      Name: "System.Runtime.Serialization.XmlDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Runtime.Serialization.DataContractPairKey"), $.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCreateXmlSerializableDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.CreateXmlSerializableDelegate"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_CanContainReferences", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CreateXmlSerializableDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.CreateXmlSerializableDelegate"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasRoot", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsAnonymous", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsBuiltInDataContract", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsTopLevelElementNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_IsTypeDefinedOnImport", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TopLevelElementName", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TopLevelElementNamespace", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_XsdType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetConstructor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.ConstructorInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RequiresMemberAccessForCreate", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Security.SecurityException")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_HasRoot", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsTopLevelElementNullable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsTypeDefinedOnImport", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_KnownDataContracts", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_TopLevelElementName", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_TopLevelElementNamespace", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_XsdType", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetTopLevelElementName", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Field({Static:false, Public:false}, "helper", $asm11.TypeRef("System.Runtime.Serialization.XmlDataContract/XmlDataContractCriticalHelper"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:false}, "XsdType", $asm13.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:false}, "IsAnonymous", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "HasRoot", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "TopLevelElementName", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "TopLevelElementNamespace", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false}, "IsTopLevelElementNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsTypeDefinedOnImport", $.Boolean);

    $.Property({Static:false, Public:false}, "CreateXmlSerializableDelegate", $asm11.TypeRef("System.Runtime.Serialization.CreateXmlSerializableDelegate"));

    $.Property({Static:false, Public:false, Virtual:true }, "CanContainReferences", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsBuiltInDataContract", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlDataContract/XmlDataContractCriticalHelper */ 

(function XmlDataContractCriticalHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataContract/DataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.XmlDataContract/XmlDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CreateXmlSerializableDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.CreateXmlSerializableDelegate"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasRoot", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_IsAnonymous", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsTopLevelElementNullable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsTypeDefinedOnImport", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TopLevelElementName", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TopLevelElementNamespace", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_XsdType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CreateXmlSerializableDelegate", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.CreateXmlSerializableDelegate")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_HasRoot", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_IsTopLevelElementNullable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsTypeDefinedOnImport", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_KnownDataContracts", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_TopLevelElementName", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_TopLevelElementNamespace", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_XsdType", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.Field({Static:false, Public:false}, "knownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])); 
    $.Field({Static:false, Public:false}, "isKnownTypeAttributeChecked", $.Boolean); 
    $.Field({Static:false, Public:false}, "topLevelElementName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:false, Public:false}, "topLevelElementNamespace", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:false, Public:false}, "isTopLevelElementNullable", $.Boolean); 
    $.Field({Static:false, Public:false}, "isTypeDefinedOnImport", $.Boolean); 
    $.Field({Static:false, Public:false}, "xsdType", $asm13.TypeRef("System.Xml.Schema.XmlSchemaType")); 
    $.Field({Static:false, Public:false}, "hasRoot", $.Boolean); 
    $.Field({Static:false, Public:false}, "createXmlSerializable", $asm11.TypeRef("System.Runtime.Serialization.CreateXmlSerializableDelegate")); 
    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:false}, "XsdType", $asm13.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:false}, "IsAnonymous", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "HasRoot", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "TopLevelElementName", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false, Virtual:true }, "TopLevelElementNamespace", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    $.Property({Static:false, Public:false}, "IsTopLevelElementNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsTypeDefinedOnImport", $.Boolean);

    $.Property({Static:false, Public:false}, "CreateXmlSerializableDelegate", $asm11.TypeRef("System.Runtime.Serialization.CreateXmlSerializableDelegate"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.Attributes */ 

(function Attributes$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.Attributes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadArraySize", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadFactoryType", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadId", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadRef", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXsiNil", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXsiType", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false}, "serializationLocalNames", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "schemaInstanceLocalNames", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "Id", $.String); 
    $.Field({Static:false, Public:false}, "Ref", $.String); 
    $.Field({Static:false, Public:false}, "XsiTypeName", $.String); 
    $.Field({Static:false, Public:false}, "XsiTypeNamespace", $.String); 
    $.Field({Static:false, Public:false}, "XsiTypePrefix", $.String); 
    $.Field({Static:false, Public:false}, "XsiNil", $.Boolean); 
    $.Field({Static:false, Public:false}, "ClrAssembly", $.String); 
    $.Field({Static:false, Public:false}, "ClrType", $.String); 
    $.Field({Static:false, Public:false}, "ArraySZSize", $.Int32); 
    $.Field({Static:false, Public:false}, "FactoryTypeName", $.String); 
    $.Field({Static:false, Public:false}, "FactoryTypeNamespace", $.String); 
    $.Field({Static:false, Public:false}, "FactoryTypePrefix", $.String); 
    $.Field({Static:false, Public:false}, "UnrecognizedAttributesFound", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.CodeGenerator */ 

(function CodeGenerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.CodeGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "And", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginMethod", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.DynamicMethod"), $asm09.TypeRef("System.Type"), 
          $.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginMethod", 
      new JSIL.MethodSignature(null, [
          $.String, $asm09.TypeRef("System.Type"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginMethod", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Bgt", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.Label")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ble", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.Label")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Blt", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.Label")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Box", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Br", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.Label")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Break", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Brfalse", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.Label")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Brtrue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.Label")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $.Object, $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $.Object, $.Object, 
          $.Object, $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $.Object, $.Object, 
          $.Object, $.Object, 
          $.Object, $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Call", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.ConstructorInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallStringFormat", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Case", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.Label"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Castclass", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ceq", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Concat2", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Concat3", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertAddress", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "ConvertValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Dec", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeclareLocal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), [
          $asm09.TypeRef("System.Type"), $.String, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeclareLocal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm09.TypeRef("System.Type"), $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "DeclareLocal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), [
          $asm09.TypeRef("System.Type"), $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DefaultCase", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DefineLabel", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.Label"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dup", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Else", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ElseIf", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm11.TypeRef("System.Runtime.Serialization.Cmp"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ElseIfIsEmptyString", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.LocalBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSourceComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSourceInstruction", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSourceLabel", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "EmitSourceLine", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitStackTop", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndCase", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndFor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndForEach", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndIf", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Delegate"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndSwitch", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "For", 
      new JSIL.MethodSignature($.Object, [
          $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ForEach", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArraySetValue", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "get_GetTypeFromHandle", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_LocalNames", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ObjectEquals", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ObjectToString", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_SerializationModule", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Module"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_StringConcat2", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_StringConcat3", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_StringFormat", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetArg", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.ArgBuilder"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBranchCode", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.OpCode"), [$asm11.TypeRef("System.Runtime.Serialization.Cmp")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCmpInverse", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Cmp"), [$asm11.TypeRef("System.Runtime.Serialization.Cmp")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConvOpCode", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.OpCode"), [$asm09.TypeRef("System.TypeCode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLdelemOpCode", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.OpCode"), [$asm09.TypeRef("System.TypeCode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLdindOpCode", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.OpCode"), [$asm09.TypeRef("System.TypeCode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStelemOpCode", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.OpCode"), [$asm09.TypeRef("System.TypeCode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetVariableType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "If", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "If", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.Cmp")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "If", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm11.TypeRef("System.Runtime.Serialization.Cmp"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IfFalseBreak", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IfNot", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "IfNotDefaultValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IfNotIsEmptyString", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.LocalBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IfTrueBreak", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IgnoreReturnValue", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Inc", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitILGeneration", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitObj", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalBreakFor", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.Reflection.Emit.OpCode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalConvert", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalIf", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsStruct", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldarg", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldarg", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldarga", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldarga", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LdargAddress", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldc", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldc", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldc", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldc", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldc", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldc", 
      new JSIL.MethodSignature(null, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldelem", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldelema", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldlen", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldloc", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.LocalBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldloc", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldloca", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.LocalBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldloca", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LdlocAddress", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.LocalBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldobj", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldstr", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ldtoken", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Load", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadAddress", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadArrayElement", 
      new JSIL.MethodSignature(null, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDefaultValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadMember", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Reflection.MemberInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadParam", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $asm09.TypeRef("System.Reflection.MethodBase")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadThis", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkLabel", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.Label")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "New", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.ConstructorInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "New", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.ConstructorInfo"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewArray", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Not", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Or", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopIfState", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IfState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Ret", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Starg", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Starg", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Stelem", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Stloc", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.LocalBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Stloc", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Stobj", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Store", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StoreArrayElement", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StoreMember", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MemberInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Subtract", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Switch", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.Emit.Label")]), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowMismatchException", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToString", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Unbox", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyParameterCount", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MethodInfo"), $.Int32], [])
    );

    $.Field({Static:true , Public:false}, "getTypeFromHandle", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "stringFormat", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "stringConcat2", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "stringConcat3", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "objectToString", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "objectEquals", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "arraySetValue", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "delegateType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:true , Public:false}, "serializationModule", $asm09.TypeRef("System.Reflection.Module"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "dynamicMethod", $asm09.TypeRef("System.Reflection.Emit.DynamicMethod")); 
    $.Field({Static:false, Public:false}, "ilGen", $asm09.TypeRef("System.Reflection.Emit.ILGenerator")); 
    $.Field({Static:false, Public:false}, "argList", $asm09.TypeRef("System.Collections.ArrayList")); 
    $.Field({Static:false, Public:false}, "blockStack", $asm09.TypeRef("System.Collections.Stack")); 
    $.Field({Static:false, Public:false}, "methodEndLabel", $asm09.TypeRef("System.Reflection.Emit.Label")); 
    $.Field({Static:false, Public:false}, "stringFormatArray", $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")); 
    $.Field({Static:false, Public:false}, "localNames", $asm09.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "lineNo", $.Int32); 
    $.Field({Static:false, Public:false}, "codeGenTrace", $asm11.TypeRef("System.Runtime.Serialization.CodeGenerator/CodeGenTrace")); 
    $.Field({Static:true , Public:false}, "stringLength", $asm09.TypeRef("System.Reflection.MethodInfo")); 
    $.Property({Static:true , Public:false}, "GetTypeFromHandle", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "StringFormat", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "StringConcat2", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "StringConcat3", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ObjectToString", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ObjectEquals", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ArraySetValue", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "SerializationModule", $asm09.TypeRef("System.Reflection.Module"));

    $.Property({Static:false, Public:false}, "CurrentMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "LocalNames", $asm09.TypeRef("System.Collections.Hashtable"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.Serialization.CodeGenerator/CodeGenTrace */ 

JSIL.MakeEnum(
  "System.Runtime.Serialization.CodeGenerator/CodeGenTrace", false, {
    None: 0, 
    Save: 1, 
    Tron: 2
  }, false
);

/* class System.Runtime.Serialization.ArgBuilder */ 

(function ArgBuilder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ArgBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "Index", $.Int32); 
    $.Field({Static:false, Public:false}, "ArgType", $asm09.TypeRef("System.Type")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ForState */ 

(function ForState$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ForState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm09.TypeRef("System.Reflection.Emit.Label"), 
          $asm09.TypeRef("System.Reflection.Emit.Label"), $.Object
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_BeginLabel", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.Label"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_End", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_EndLabel", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.Label"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Index", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_RequiresEndLabel", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_TestLabel", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.Label"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_EndLabel", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.Label")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_RequiresEndLabel", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "indexVar", $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")); 
    $.Field({Static:false, Public:false}, "beginLabel", $asm09.TypeRef("System.Reflection.Emit.Label")); 
    $.Field({Static:false, Public:false}, "testLabel", $asm09.TypeRef("System.Reflection.Emit.Label")); 
    $.Field({Static:false, Public:false}, "endLabel", $asm09.TypeRef("System.Reflection.Emit.Label")); 
    $.Field({Static:false, Public:false}, "requiresEndLabel", $.Boolean); 
    $.Field({Static:false, Public:false}, "end", $.Object); 
    $.Property({Static:false, Public:false}, "Index", $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Property({Static:false, Public:false}, "BeginLabel", $asm09.TypeRef("System.Reflection.Emit.Label"));

    $.Property({Static:false, Public:false}, "TestLabel", $asm09.TypeRef("System.Reflection.Emit.Label"));

    $.Property({Static:false, Public:false}, "EndLabel", $asm09.TypeRef("System.Reflection.Emit.Label"));

    $.Property({Static:false, Public:false}, "RequiresEndLabel", $.Boolean);

    $.Property({Static:false, Public:false}, "End", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.Serialization.Cmp */ 

JSIL.MakeEnum(
  "System.Runtime.Serialization.Cmp", false, {
    LessThan: 0, 
    EqualTo: 1, 
    LessThanOrEqualTo: 2, 
    GreaterThan: 3, 
    NotEqualTo: 4, 
    GreaterThanOrEqualTo: 5
  }, false
);

/* class System.Runtime.Serialization.IfState */ 

(function IfState$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.IfState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_ElseBegin", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.Label"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_EndIf", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.Label"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_ElseBegin", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.Label")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_EndIf", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.Label")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "elseBegin", $asm09.TypeRef("System.Reflection.Emit.Label")); 
    $.Field({Static:false, Public:false}, "endIf", $asm09.TypeRef("System.Reflection.Emit.Label")); 
    $.Property({Static:false, Public:false}, "EndIf", $asm09.TypeRef("System.Reflection.Emit.Label"));

    $.Property({Static:false, Public:false}, "ElseBegin", $asm09.TypeRef("System.Reflection.Emit.Label"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SwitchState */ 

(function SwitchState$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.SwitchState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.Label"), $asm09.TypeRef("System.Reflection.Emit.Label")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultDefined", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultLabel", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.Label"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_EndOfSwitchLabel", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.Label"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_DefaultDefined", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "defaultLabel", $asm09.TypeRef("System.Reflection.Emit.Label")); 
    $.Field({Static:false, Public:false}, "endOfSwitchLabel", $asm09.TypeRef("System.Reflection.Emit.Label")); 
    $.Field({Static:false, Public:false}, "defaultDefined", $.Boolean); 
    $.Property({Static:false, Public:false}, "DefaultLabel", $asm09.TypeRef("System.Reflection.Emit.Label"));

    $.Property({Static:false, Public:false}, "EndOfSwitchLabel", $asm09.TypeRef("System.Reflection.Emit.Label"));

    $.Property({Static:false, Public:false}, "DefaultDefined", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.Serialization.DateTimeOffsetAdapter */ 

(function DateTimeOffsetAdapter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Serialization.DateTimeOffsetAdapter", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.DateTime"), $.Int16], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_OffsetMinutes", 
      new JSIL.MethodSignature($.Int16, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_UtcDateTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "GetDateTimeOffset", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTimeOffset"), [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDateTimeOffsetAdapter", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.DateTimeOffset")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OffsetMinutes", 
      new JSIL.MethodSignature(null, [$.Int16], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_UtcDateTime", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.DateTime")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.IFormatProvider")], [])
    );

    $.Field({Static:false, Public:false}, "utcDateTime", $asm09.TypeRef("System.DateTime")); 
    $.Field({Static:false, Public:false}, "offsetMinutes", $.Int16); 
    $.Property({Static:false, Public:true }, "UtcDateTime", $asm09.TypeRef("System.DateTime"))
      .Attribute($asm11.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    $.Property({Static:false, Public:true }, "OffsetMinutes", $.Int16)
      .Attribute($asm11.TypeRef("System.Runtime.Serialization.DataMemberAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm11.TypeRef("System.Runtime.Serialization.DataContractAttribute"));

})();

/* class System.Runtime.Serialization.DictionaryGlobals */ 

(function DictionaryGlobals$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Serialization.DictionaryGlobals", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:true , Public:true , ReadOnly:true }, "EmptyString", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SchemaInstanceNamespace", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SchemaNamespace", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SerializationNamespace", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "XmlnsNamespace", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "XsiTypeLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "XsiNilLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ClrTypeLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ClrAssemblyLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ArraySizeLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "IdLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "RefLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ISerializableFactoryTypeLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "CharLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "BooleanLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SignedByteLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "UnsignedByteLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ShortLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "UnsignedShortLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "IntLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "UnsignedIntLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LongLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "UnsignedLongLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "FloatLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DoubleLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DecimalLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DateTimeLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "StringLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ByteArrayLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ObjectLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "TimeSpanLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "GuidLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "UriLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "QNameLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Space", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "timeLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "dateLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "hexBinaryLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "gYearMonthLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "gYearLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "gMonthDayLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "gDayLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "gMonthLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "integerLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "positiveIntegerLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "negativeIntegerLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "nonPositiveIntegerLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "nonNegativeIntegerLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "normalizedStringLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "tokenLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "languageLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "NameLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "NCNameLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "XSDIDLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "IDREFLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "IDREFSLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ENTITYLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ENTITIESLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "NMTOKENLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "NMTOKENSLocalName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "AsmxTypesNamespace", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Globals */ 

(function Globals$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Serialization.Globals", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "get_DataContractXsdBaseNamespaceUri", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Uri"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_EmptyObjectArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_EmptyTypeArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_IdQualifiedName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_MemberAccessPermission", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.Permissions.ReflectionPermission"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_RefQualifiedName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_SerializationFormatterPermission", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.Permissions.SecurityPermission"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfArray", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfByteArray", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfClassDataNode", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfCollectionDataContractAttribute", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfCollectionDataNode", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfContractNamespaceAttribute", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfDataContractAttribute", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfDataMemberAttribute", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfDateTimeOffset", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfDateTimeOffsetAdapter", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfDBNull", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfDictionaryEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfDictionaryGeneric", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfEnumMemberAttribute", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfExtensionDataObject", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfFlagsAttribute", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfGenericDictionaryEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfGuid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfHashtable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfICollection", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfICollectionGeneric", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIDeserializationCallback", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIDictionary", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIDictionaryEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIDictionaryGeneric", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIEnumerable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIEnumerableGeneric", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIEnumeratorGeneric", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIExtensibleDataObject", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIList", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIListGeneric", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfInt", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIObjectReference", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIPropertyChange", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfISerializable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfISerializableDataNode", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfIXmlSerializable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfKeyValue", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfKeyValuePair", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfKnownTypeAttribute", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfListGeneric", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfNonSerializedAttribute", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfNullable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfObject", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfObjectArray", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfOnDeserializedAttribute", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfOnDeserializingAttribute", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfOnSerializedAttribute", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfOnSerializingAttribute", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfOptionalFieldAttribute", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfReflectionPointer", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfSafeSerializationManager", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfSerializableAttribute", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfSerializationEntry", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfSerializationInfo", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfSerializationInfoEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfStreamingContext", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfString", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfTimeSpan", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfTypeEnumerable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfULong", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfUri", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfValueType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfVoid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlDataNode", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlElement", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlFormatClassReaderDelegate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlFormatClassWriterDelegate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlFormatCollectionReaderDelegate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlFormatCollectionWriterDelegate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlFormatGetOnlyCollectionReaderDelegate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlNodeArray", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlQualifiedName", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlRootAttribute", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlSchemaProviderAttribute", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlSchemaSet", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlSchemaType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TypeOfXmlSerializableServices", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "ScanAllMembers", 60); 
    $.Constant({Static:true , Public:true }, "DefaultIsRequired", false); 
    $.Constant({Static:true , Public:true }, "DefaultEmitDefaultValue", true); 
    $.Constant({Static:true , Public:true }, "DefaultOrder", 0); 
    $.Constant({Static:true , Public:true }, "DefaultIsReference", false); 
    $.Constant({Static:true , Public:true }, "SimpleSRSInternalsVisiblePattern", "^[\\s]*System\\.Runtime\\.Serialization[\\s]*$"); 
    $.Constant({Static:true , Public:true }, "FullSRSInternalsVisiblePattern", "^[\\s]*System\\.Runtime\\.Serialization[\\s]*,[\\s]*PublicKey[\\s]*=[\\s]*(?i:00000000000000000400000000000000)[\\s]*$"); 
    $.Constant({Static:true , Public:true }, "SafeSerializationManagerName", "SafeSerializationManager"); 
    $.Constant({Static:true , Public:true }, "SafeSerializationManagerNamespace", "http://schemas.datacontract.org/2004/07/System.Runtime.Serialization"); 
    $.Constant({Static:true , Public:true }, "NullObjectId", null); 
    $.Constant({Static:true , Public:true }, "Space", " "); 
    $.Constant({Static:true , Public:true }, "OpenBracket", "["); 
    $.Constant({Static:true , Public:true }, "CloseBracket", "]"); 
    $.Constant({Static:true , Public:true }, "Comma", ","); 
    $.Constant({Static:true , Public:true }, "XsiPrefix", "i"); 
    $.Constant({Static:true , Public:true }, "XsdPrefix", "x"); 
    $.Constant({Static:true , Public:true }, "SerPrefix", "z"); 
    $.Constant({Static:true , Public:true }, "SerPrefixForSchema", "ser"); 
    $.Constant({Static:true , Public:true }, "ElementPrefix", "q"); 
    $.Constant({Static:true , Public:true }, "DataContractXsdBaseNamespace", "http://schemas.datacontract.org/2004/07/"); 
    $.Constant({Static:true , Public:true }, "DataContractXmlNamespace", "http://schemas.datacontract.org/2004/07/System.Xml"); 
    $.Constant({Static:true , Public:true }, "SchemaInstanceNamespace", "http://www.w3.org/2001/XMLSchema-instance"); 
    $.Constant({Static:true , Public:true }, "SchemaNamespace", "http://www.w3.org/2001/XMLSchema"); 
    $.Constant({Static:true , Public:true }, "XsiNilLocalName", "nil"); 
    $.Constant({Static:true , Public:true }, "XsiTypeLocalName", "type"); 
    $.Constant({Static:true , Public:true }, "TnsPrefix", "tns"); 
    $.Constant({Static:true , Public:true }, "OccursUnbounded", "unbounded"); 
    $.Constant({Static:true , Public:true }, "AnyTypeLocalName", "anyType"); 
    $.Constant({Static:true , Public:true }, "StringLocalName", "string"); 
    $.Constant({Static:true , Public:true }, "IntLocalName", "int"); 
    $.Constant({Static:true , Public:true }, "True", "true"); 
    $.Constant({Static:true , Public:true }, "False", "false"); 
    $.Constant({Static:true , Public:true }, "ArrayPrefix", "ArrayOf"); 
    $.Constant({Static:true , Public:true }, "XmlnsNamespace", "http://www.w3.org/2000/xmlns/"); 
    $.Constant({Static:true , Public:true }, "XmlnsPrefix", "xmlns"); 
    $.Constant({Static:true , Public:true }, "SchemaLocalName", "schema"); 
    $.Constant({Static:true , Public:true }, "CollectionsNamespace", "http://schemas.microsoft.com/2003/10/Serialization/Arrays"); 
    $.Constant({Static:true , Public:true }, "DefaultClrNamespace", "GeneratedNamespace"); 
    $.Constant({Static:true , Public:true }, "DefaultTypeName", "GeneratedType"); 
    $.Constant({Static:true , Public:true }, "DefaultGeneratedMember", "GeneratedMember"); 
    $.Constant({Static:true , Public:true }, "DefaultFieldSuffix", "Field"); 
    $.Constant({Static:true , Public:true }, "DefaultPropertySuffix", "Property"); 
    $.Constant({Static:true , Public:true }, "DefaultMemberSuffix", "Member"); 
    $.Constant({Static:true , Public:true }, "NameProperty", "Name"); 
    $.Constant({Static:true , Public:true }, "NamespaceProperty", "Namespace"); 
    $.Constant({Static:true , Public:true }, "OrderProperty", "Order"); 
    $.Constant({Static:true , Public:true }, "IsReferenceProperty", "IsReference"); 
    $.Constant({Static:true , Public:true }, "IsRequiredProperty", "IsRequired"); 
    $.Constant({Static:true , Public:true }, "EmitDefaultValueProperty", "EmitDefaultValue"); 
    $.Constant({Static:true , Public:true }, "ClrNamespaceProperty", "ClrNamespace"); 
    $.Constant({Static:true , Public:true }, "ItemNameProperty", "ItemName"); 
    $.Constant({Static:true , Public:true }, "KeyNameProperty", "KeyName"); 
    $.Constant({Static:true , Public:true }, "ValueNameProperty", "ValueName"); 
    $.Constant({Static:true , Public:true }, "SerializationInfoPropertyName", "SerializationInfo"); 
    $.Constant({Static:true , Public:true }, "SerializationInfoFieldName", "info"); 
    $.Constant({Static:true , Public:true }, "NodeArrayPropertyName", "Nodes"); 
    $.Constant({Static:true , Public:true }, "NodeArrayFieldName", "nodesField"); 
    $.Constant({Static:true , Public:true }, "ExportSchemaMethod", "ExportSchema"); 
    $.Constant({Static:true , Public:true }, "IsAnyProperty", "IsAny"); 
    $.Constant({Static:true , Public:true }, "ContextFieldName", "context"); 
    $.Constant({Static:true , Public:true }, "GetObjectDataMethodName", "GetObjectData"); 
    $.Constant({Static:true , Public:true }, "GetEnumeratorMethodName", "GetEnumerator"); 
    $.Constant({Static:true , Public:true }, "MoveNextMethodName", "MoveNext"); 
    $.Constant({Static:true , Public:true }, "AddValueMethodName", "AddValue"); 
    $.Constant({Static:true , Public:true }, "CurrentPropertyName", "Current"); 
    $.Constant({Static:true , Public:true }, "ValueProperty", "Value"); 
    $.Constant({Static:true , Public:true }, "EnumeratorFieldName", "enumerator"); 
    $.Constant({Static:true , Public:true }, "SerializationEntryFieldName", "entry"); 
    $.Constant({Static:true , Public:true }, "ExtensionDataSetMethod", "set_ExtensionData"); 
    $.Constant({Static:true , Public:true }, "ExtensionDataSetExplicitMethod", "System.Runtime.Serialization.IExtensibleDataObject.set_ExtensionData"); 
    $.Constant({Static:true , Public:true }, "ExtensionDataObjectPropertyName", "ExtensionData"); 
    $.Constant({Static:true , Public:true }, "ExtensionDataObjectFieldName", "extensionDataField"); 
    $.Constant({Static:true , Public:true }, "AddMethodName", "Add"); 
    $.Constant({Static:true , Public:true }, "GetCurrentMethodName", "get_Current"); 
    $.Constant({Static:true , Public:true }, "SerializationNamespace", "http://schemas.microsoft.com/2003/10/Serialization/"); 
    $.Constant({Static:true , Public:true }, "ClrTypeLocalName", "Type"); 
    $.Constant({Static:true , Public:true }, "ClrAssemblyLocalName", "Assembly"); 
    $.Constant({Static:true , Public:true }, "IsValueTypeLocalName", "IsValueType"); 
    $.Constant({Static:true , Public:true }, "EnumerationValueLocalName", "EnumerationValue"); 
    $.Constant({Static:true , Public:true }, "SurrogateDataLocalName", "Surrogate"); 
    $.Constant({Static:true , Public:true }, "GenericTypeLocalName", "GenericType"); 
    $.Constant({Static:true , Public:true }, "GenericParameterLocalName", "GenericParameter"); 
    $.Constant({Static:true , Public:true }, "GenericNameAttribute", "Name"); 
    $.Constant({Static:true , Public:true }, "GenericNamespaceAttribute", "Namespace"); 
    $.Constant({Static:true , Public:true }, "GenericParameterNestedLevelAttribute", "NestedLevel"); 
    $.Constant({Static:true , Public:true }, "IsDictionaryLocalName", "IsDictionary"); 
    $.Constant({Static:true , Public:true }, "ActualTypeLocalName", "ActualType"); 
    $.Constant({Static:true , Public:true }, "ActualTypeNameAttribute", "Name"); 
    $.Constant({Static:true , Public:true }, "ActualTypeNamespaceAttribute", "Namespace"); 
    $.Constant({Static:true , Public:true }, "DefaultValueLocalName", "DefaultValue"); 
    $.Constant({Static:true , Public:true }, "EmitDefaultValueAttribute", "EmitDefaultValue"); 
    $.Constant({Static:true , Public:true }, "ISerializableFactoryTypeLocalName", "FactoryType"); 
    $.Constant({Static:true , Public:true }, "IdLocalName", "Id"); 
    $.Constant({Static:true , Public:true }, "RefLocalName", "Ref"); 
    $.Constant({Static:true , Public:true }, "ArraySizeLocalName", "Size"); 
    $.Constant({Static:true , Public:true }, "KeyLocalName", "Key"); 
    $.Constant({Static:true , Public:true }, "ValueLocalName", "Value"); 
    $.Constant({Static:true , Public:true }, "MscorlibAssemblyName", "0"); 
    $.Constant({Static:true , Public:true }, "SerializationSchema", "<?xml version='1.0' encoding='utf-8'?>\r\n<xs:schema elementFormDefault='qualified' attributeFormDefault='qualified' xmlns:tns='http://schemas.microsoft.com/2003/10/Serialization/' targetNamespace='http://schemas.microsoft.com/2003/10/Serialization/' xmlns:xs='http://www.w3.org/2001/XMLSchema'>\r\n  <xs:element name='anyType' nillable='true' type='xs:anyType' />\r\n  <xs:element name='anyURI' nillable='true' type='xs:anyURI' />\r\n  <xs:element name='base64Binary' nillable='true' type='xs:base64Binary' />\r\n  <xs:element name='boolean' nillable='true' type='xs:boolean' />\r\n  <xs:element name='byte' nillable='true' type='xs:byte' />\r\n  <xs:element name='dateTime' nillable='true' type='xs:dateTime' />\r\n  <xs:element name='decimal' nillable='true' type='xs:decimal' />\r\n  <xs:element name='double' nillable='true' type='xs:double' />\r\n  <xs:element name='float' nillable='true' type='xs:float' />\r\n  <xs:element name='int' nillable='true' type='xs:int' />\r\n  <xs:element name='long' nillable='true' type='xs:long' />\r\n  <xs:element name='QName' nillable='true' type='xs:QName' />\r\n  <xs:element name='short' nillable='true' type='xs:short' />\r\n  <xs:element name='string' nillable='true' type='xs:string' />\r\n  <xs:element name='unsignedByte' nillable='true' type='xs:unsignedByte' />\r\n  <xs:element name='unsignedInt' nillable='true' type='xs:unsignedInt' />\r\n  <xs:element name='unsignedLong' nillable='true' type='xs:unsignedLong' />\r\n  <xs:element name='unsignedShort' nillable='true' type='xs:unsignedShort' />\r\n  <xs:element name='char' nillable='true' type='tns:char' />\r\n  <xs:simpleType name='char'>\r\n    <xs:restriction base='xs:int'/>\r\n  </xs:simpleType>  \r\n  <xs:element name='duration' nillable='true' type='tns:duration' />\r\n  <xs:simpleType name='duration'>\r\n    <xs:restriction base='xs:duration'>\r\n      <xs:pattern value='\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?' />\r\n      <xs:minInclusive value='-P10675199DT2H48M5.4775808S' />\r\n      <xs:maxInclusive value='P10675199DT2H48M5.4775807S' />\r\n    </xs:restriction>\r\n  </xs:simpleType>\r\n  <xs:element name='guid' nillable='true' type='tns:guid' />\r\n  <xs:simpleType name='guid'>\r\n    <xs:restriction base='xs:string'>\r\n      <xs:pattern value='[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}' />\r\n    </xs:restriction>\r\n  </xs:simpleType>\r\n  <xs:attribute name='FactoryType' type='xs:QName' />\r\n  <xs:attribute name='Id' type='xs:ID' />\r\n  <xs:attribute name='Ref' type='xs:IDREF' />\r\n</xs:schema>\r\n"); 
    $.Field({Static:true , Public:false}, "idQualifiedName", $asm13.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "refQualifiedName", $asm13.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfObject", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfValueType", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfArray", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfString", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfInt", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfULong", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfVoid", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfByteArray", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfTimeSpan", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfGuid", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfDateTimeOffset", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfDateTimeOffsetAdapter", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfUri", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfTypeEnumerable", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfStreamingContext", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfISerializable", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfIDeserializationCallback", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfIObjectReference", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfXmlFormatClassWriterDelegate", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfXmlFormatCollectionWriterDelegate", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfXmlFormatClassReaderDelegate", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfXmlFormatCollectionReaderDelegate", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfXmlFormatGetOnlyCollectionReaderDelegate", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfKnownTypeAttribute", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfDataContractAttribute", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfContractNamespaceAttribute", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfDataMemberAttribute", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfEnumMemberAttribute", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfCollectionDataContractAttribute", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfOptionalFieldAttribute", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfObjectArray", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfOnSerializingAttribute", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfOnSerializedAttribute", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfOnDeserializingAttribute", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfOnDeserializedAttribute", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfFlagsAttribute", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfSerializableAttribute", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfNonSerializedAttribute", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfSerializationInfo", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfSerializationInfoEnumerator", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfSerializationEntry", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfIXmlSerializable", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfXmlSchemaProviderAttribute", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfXmlRootAttribute", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfXmlQualifiedName", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfXmlSchemaType", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfXmlSerializableServices", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfXmlNodeArray", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfXmlSchemaSet", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "emptyObjectArray", $jsilcore.TypeRef("System.Array", [$.Object]))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "emptyTypeArray", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfIPropertyChange", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfIExtensibleDataObject", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfExtensionDataObject", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfISerializableDataNode", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfClassDataNode", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfCollectionDataNode", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfXmlDataNode", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfNullable", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfReflectionPointer", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfIDictionaryGeneric", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfIDictionary", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfIListGeneric", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfIList", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfICollectionGeneric", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfICollection", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfIEnumerableGeneric", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfIEnumerable", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfIEnumeratorGeneric", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfIEnumerator", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfKeyValuePair", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfKeyValue", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfIDictionaryEnumerator", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfDictionaryEnumerator", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfGenericDictionaryEnumerator", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfDictionaryGeneric", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfHashtable", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfListGeneric", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfXmlElement", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfDBNull", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfSafeSerializationManager", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeOfSafeSerializationManagerSet", $.Boolean); 
    $.Field({Static:true , Public:false}, "dataContractXsdBaseNamespaceUri", $asm0B.TypeRef("System.Uri"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "serializationFormatterPermission", $asm09.TypeRef("System.Security.Permissions.SecurityPermission"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "memberAccessPermission", $asm09.TypeRef("System.Security.Permissions.ReflectionPermission"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "NewObjectId", $.String, function ($pi) {
        return $asm09.System.String.Empty;
      }); 
    $.Property({Static:true , Public:false}, "IdQualifiedName", $asm13.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "RefQualifiedName", $asm13.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "TypeOfObject", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfValueType", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfArray", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfString", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfInt", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfULong", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfVoid", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfByteArray", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfTimeSpan", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfGuid", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfDateTimeOffset", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfDateTimeOffsetAdapter", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfUri", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfTypeEnumerable", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfStreamingContext", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfISerializable", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIDeserializationCallback", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIObjectReference", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlFormatClassWriterDelegate", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlFormatCollectionWriterDelegate", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlFormatClassReaderDelegate", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlFormatCollectionReaderDelegate", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlFormatGetOnlyCollectionReaderDelegate", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfKnownTypeAttribute", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfDataContractAttribute", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfContractNamespaceAttribute", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfDataMemberAttribute", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfEnumMemberAttribute", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfCollectionDataContractAttribute", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfOptionalFieldAttribute", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfObjectArray", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfOnSerializingAttribute", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfOnSerializedAttribute", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfOnDeserializingAttribute", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfOnDeserializedAttribute", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfFlagsAttribute", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfSerializableAttribute", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfNonSerializedAttribute", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfSerializationInfo", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfSerializationInfoEnumerator", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfSerializationEntry", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIXmlSerializable", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlSchemaProviderAttribute", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlRootAttribute", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlQualifiedName", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlSchemaType", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlSerializableServices", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlNodeArray", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlSchemaSet", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "EmptyObjectArray", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Property({Static:true , Public:false}, "EmptyTypeArray", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]));

    $.Property({Static:true , Public:false}, "TypeOfIPropertyChange", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIExtensibleDataObject", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfExtensionDataObject", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfISerializableDataNode", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfClassDataNode", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfCollectionDataNode", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlDataNode", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfNullable", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfReflectionPointer", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIDictionaryGeneric", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIDictionary", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIListGeneric", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIList", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfICollectionGeneric", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfICollection", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIEnumerableGeneric", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIEnumerable", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIEnumeratorGeneric", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIEnumerator", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfKeyValuePair", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfKeyValue", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfIDictionaryEnumerator", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfDictionaryEnumerator", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfGenericDictionaryEnumerator", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfDictionaryGeneric", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfHashtable", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfListGeneric", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfXmlElement", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfDBNull", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "TypeOfSafeSerializationManager", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:false}, "DataContractXsdBaseNamespaceUri", $asm0B.TypeRef("System.Uri"));

    $.Property({Static:true , Public:true }, "SerializationFormatterPermission", $asm09.TypeRef("System.Security.Permissions.SecurityPermission"));

    $.Property({Static:true , Public:true }, "MemberAccessPermission", $asm09.TypeRef("System.Security.Permissions.ReflectionPermission"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.HybridObjectCache */ 

(function HybridObjectCache$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.HybridObjectCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsObjectReferenced", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "objectDictionary", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object])); 
    $.Field({Static:false, Public:false}, "referencedObjectDictionary", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.KnownTypeDataContractResolver */ 

(function KnownTypeDataContractResolver$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver"), 
      Name: "System.Runtime.Serialization.KnownTypeDataContractResolver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveName", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [
          $.String, $.String, 
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryResolveType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])
        ], [])
    );

    $.Field({Static:false, Public:false}, "context", $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerContext")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.Serialization.ObjectReferenceStack */ 

(function ObjectReferenceStack$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Serialization.ObjectReferenceStack", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureSetAsIsReference", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.Field({Static:false, Public:false}, "count", $.Int32); 
    $.Field({Static:false, Public:false}, "objectArray", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:false}, "isReferenceArray", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Field({Static:false, Public:false}, "objectDictionary", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $.Object])); 
    $.Constant({Static:true , Public:false}, "MaximumArraySize", 16); 
    $.Constant({Static:true , Public:false}, "InitialArraySize", 4); 
    $.Property({Static:false, Public:false}, "Count", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ObjectToIdCache */ 

(function ObjectToIdCache$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ObjectToIdCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindElement", 
      new JSIL.MethodSignature($.Int32, [$.Object, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetId", 
      new JSIL.MethodSignature($.Int32, [$.Object, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPrime", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPrime", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReassignId", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Rehash", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveAt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "m_currentCount", $.Int32); 
    $.Field({Static:false, Public:false}, "m_ids", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "m_objs", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "primes", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.Serialization.ScopedKnownTypes */ 

(function ScopedKnownTypes$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Serialization.ScopedKnownTypes", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])], [])
    );

    $.Field({Static:false, Public:false}, "dataContractDictionaries", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])])); 
    $.Field({Static:false, Public:false}, "count", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.Serialization.SerializationMode */ 

JSIL.MakeEnum(
  "System.Runtime.Serialization.SerializationMode", false, {
    SharedContract: 0, 
    SharedType: 1
  }, false
);

/* class System.Runtime.Serialization.SerializationTrace */ 

(function SerializationTrace$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Serialization.SerializationTrace", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "get_CodeGenerationSwitch", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Diagnostics.SourceSwitch"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CodeGenerationTraceSource", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Diagnostics.TraceSource"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TraceInstruction", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteInstruction", 
      new JSIL.MethodSignature(null, [$.Int32, $.String], [])
    );

    $.Field({Static:true , Public:false}, "codeGen", $asm0B.TypeRef("System.Diagnostics.TraceSource"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:true , Public:false}, "CodeGenerationSwitch", $asm0B.TypeRef("System.Diagnostics.SourceSwitch"));

    $.Property({Static:true , Public:false}, "CodeGenerationTraceSource", $asm0B.TypeRef("System.Diagnostics.TraceSource"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SurrogateDataContract */ 

(function SurrogateDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
      Name: "System.Runtime.Serialization.SurrogateDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Runtime.Serialization.ISerializationSurrogate")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_SerializationSurrogate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.Serialization.ISerializationSurrogate"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetRealObject", 
      new JSIL.MethodSignature($.Object, [$asm09.TypeRef("System.Runtime.Serialization.IObjectReference"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetUninitializedObject", 
      new JSIL.MethodSignature($.Object, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadXmlValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializationSurrogateGetObjectData", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), 
          $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SerializationSurrogateSetObjectData", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), 
          $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext")
        ], [])
    );

    $.Field({Static:false, Public:false}, "helper", $asm11.TypeRef("System.Runtime.Serialization.SurrogateDataContract/SurrogateDataContractCriticalHelper"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:false, Public:false}, "SerializationSurrogate", $asm09.TypeRef("System.Runtime.Serialization.ISerializationSurrogate"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SurrogateDataContract/SurrogateDataContractCriticalHelper */ 

(function SurrogateDataContractCriticalHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.DataContract/DataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.SurrogateDataContract/SurrogateDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Runtime.Serialization.ISerializationSurrogate")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializationSurrogate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.Serialization.ISerializationSurrogate"), [], [])
    );

    $.Field({Static:false, Public:false}, "serializationSurrogate", $asm09.TypeRef("System.Runtime.Serialization.ISerializationSurrogate")); 
    $.Property({Static:false, Public:false}, "SerializationSurrogate", $asm09.TypeRef("System.Runtime.Serialization.ISerializationSurrogate"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.ExtensionDataReader */ 

(function ExtensionDataReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Xml.XmlReader"), 
      Name: "System.Runtime.Serialization.ExtensionDataReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDeserializedDataNode", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.IDataNode")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddPrefix", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckIfNodeHandled", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.IDataNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsXmlDataNode", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.ReadState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCurrentNode", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IDataNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextElement", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.ElementData"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GrowElementsIfNeeded", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsElementNode", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.ExtensionDataReader/ExtensionDataNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.IDataNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNextInClass", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNextInCollection", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNextInISerializable", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ISerializableDataNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNextInXml", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlDataNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToDeserializedObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.IDataNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToText", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Runtime.Serialization.IDataNode"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDataNode", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.IDataNode"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDeserializedValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNextElement", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.IDataNode"), $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "cache", $asm09.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "elements", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Runtime.Serialization.ElementData")])); 
    $.Field({Static:false, Public:false}, "element", $asm11.TypeRef("System.Runtime.Serialization.ElementData")); 
    $.Field({Static:false, Public:false}, "nextElement", $asm11.TypeRef("System.Runtime.Serialization.ElementData")); 
    $.Field({Static:false, Public:false}, "readState", $asm13.TypeRef("System.Xml.ReadState")); 
    $.Field({Static:false, Public:false}, "internalNodeType", $asm11.TypeRef("System.Runtime.Serialization.ExtensionDataReader/ExtensionDataNodeType")); 
    $.Field({Static:false, Public:false}, "nodeType", $asm13.TypeRef("System.Xml.XmlNodeType")); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Field({Static:false, Public:false}, "localName", $.String); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "value", $.String); 
    $.Field({Static:false, Public:false}, "attributeCount", $.Int32); 
    $.Field({Static:false, Public:false}, "attributeIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "xmlNodeReader", $asm13.TypeRef("System.Xml.XmlNodeReader")); 
    $.Field({Static:false, Public:false}, "deserializedDataNodes", $asm0B.TypeRef("System.Collections.Generic.Queue`1", [$asm11.TypeRef("System.Runtime.Serialization.IDataNode")])); 
    $.Field({Static:false, Public:false}, "context", $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")); 
    $.Field({Static:true , Public:false}, "nsToPrefixTable", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "prefixToNsTable", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:false, Public:false}, "IsXmlDataNode", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm13.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm13.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm13.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm13.TypeRef("System.Xml.XmlNameTable"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Runtime.Serialization.ExtensionDataReader/ExtensionDataNodeType */ 

JSIL.MakeEnum(
  "System.Runtime.Serialization.ExtensionDataReader/ExtensionDataNodeType", false, {
    None: 0, 
    Element: 1, 
    EndElement: 2, 
    Text: 3, 
    Xml: 4, 
    ReferencedElement: 5, 
    NullElement: 6
  }, false
);

/* class System.Runtime.Serialization.AttributeData */ 

(function AttributeData$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.AttributeData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:true }, "prefix", $.String); 
    $.Field({Static:false, Public:true }, "ns", $.String); 
    $.Field({Static:false, Public:true }, "localName", $.String); 
    $.Field({Static:false, Public:true }, "value", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ElementData */ 

(function ElementData$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ElementData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "AddAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GrowAttributesIfNeeded", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "localName", $.String); 
    $.Field({Static:false, Public:true }, "ns", $.String); 
    $.Field({Static:false, Public:true }, "prefix", $.String); 
    $.Field({Static:false, Public:true }, "attributeCount", $.Int32); 
    $.Field({Static:false, Public:true }, "attributes", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Runtime.Serialization.AttributeData")])); 
    $.Field({Static:false, Public:true }, "dataNode", $asm11.TypeRef("System.Runtime.Serialization.IDataNode")); 
    $.Field({Static:false, Public:true }, "childElementIndex", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlFormatGeneratorStatics */ 

(function XmlFormatGeneratorStatics$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Serialization.XmlFormatGeneratorStatics", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "get_AddNewObjectMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_AddNewObjectWithIdMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_BoxPointer", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_CheckEndOfArrayMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ChildElementNamespaceProperty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.PropertyInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ChildElementNamespacesProperty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.PropertyInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_CollectionItemNameProperty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.PropertyInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ContractNamespacesField", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.FieldInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_CreateUnexpectedStateExceptionMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_DemandMemberAccessPermissionMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_DemandSerializationFormatterPermissionMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_DictionaryEnumeratorCtor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.ConstructorInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_EnsureArraySizeMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ExtensionDataObjectCtor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.ConstructorInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ExtensionDataProperty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.PropertyInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ExtensionDataSetExplicitMethodInfo", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetArrayLengthMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetArraySizeMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetCollectionMemberMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetCurrentMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetDateTimeOffsetAdapterMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetDateTimeOffsetMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetDefaultValueMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetExistingObjectMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetHasValueMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetItemContractMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetMemberIndexMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetMemberIndexWithRequiredMembersMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetNullableValueMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetObjectIdMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetRealObjectMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetStreamingContextMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_GetUninitializedObjectMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_HashtableCtor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.ConstructorInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_IncrementArrayCountMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_IncrementCollectionCountGenericMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_IncrementCollectionCountMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_IncrementItemCountMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_InternalDeserializeMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSerializeMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSerializeReferenceMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_IsStartElementMethod0", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_IsStartElementMethod2", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_MemberNamesField", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.FieldInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_MoveNextMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_MoveToNextElementMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_NamespaceProperty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.PropertyInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_NodeTypeProperty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.PropertyInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_OnDeserializationMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ReadAttributesMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ReadIfNullOrRefMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ReadMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ReadSerializationInfoMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ReadXmlValueMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ReplaceDeserializedObjectMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ResetAttributesMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_SerializationExceptionCtor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.ConstructorInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_SkipUnknownElementMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_StoreCollectionMemberInfoMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_StoreIsGetOnlyCollectionMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ThrowArrayExceededSizeExceptionMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ThrowNullValueReturnedForGetOnlyCollectionExceptionMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ThrowRequiredMemberMissingExceptionMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ThrowRequiredMemberMustBeEmittedMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ThrowTypeNotSerializableMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TraceInstructionMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_TrimArraySizeMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_UnboxPointer", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_WriteEndElementMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_WriteExtensionDataMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_WriteISerializableMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_WriteNamespaceDeclMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_WriteNullMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_WriteStartElementMethod2", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_WriteStartElementMethod3", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_WriteXmlValueMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false}, "writeStartElementMethod2", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "writeStartElementMethod3", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "writeEndElementMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "writeNamespaceDeclMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "extensionDataProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "boxPointer", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "dictionaryEnumeratorCtor", $asm09.TypeRef("System.Reflection.ConstructorInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "ienumeratorMoveNextMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "ienumeratorGetCurrentMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getItemContractMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "isStartElementMethod2", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "isStartElementMethod0", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getUninitializedObjectMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "onDeserializationMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "unboxPointer", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "nodeTypeProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "serializationExceptionCtor", $asm09.TypeRef("System.Reflection.ConstructorInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "extensionDataObjectCtor", $asm09.TypeRef("System.Reflection.ConstructorInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "hashtableCtor", $asm09.TypeRef("System.Reflection.ConstructorInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getStreamingContextMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getCollectionMemberMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "storeCollectionMemberInfoMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "storeIsGetOnlyCollectionMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "throwNullValueReturnedForGetOnlyCollectionExceptionMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "throwArrayExceededSizeExceptionMethod", $asm09.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:true , Public:false}, "incrementItemCountMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "demandSerializationFormatterPermissionMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "demandMemberAccessPermissionMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "internalDeserializeMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "moveToNextElementMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getMemberIndexMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getMemberIndexWithRequiredMembersMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "throwRequiredMemberMissingExceptionMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "skipUnknownElementMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "readIfNullOrRefMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "readAttributesMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "resetAttributesMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getObjectIdMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getArraySizeMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "addNewObjectMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "addNewObjectWithIdMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "replaceDeserializedObjectMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getExistingObjectMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getRealObjectMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "readMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "ensureArraySizeMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "trimArraySizeMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "checkEndOfArrayMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getArrayLengthMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "readSerializationInfoMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "createUnexpectedStateExceptionMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "internalSerializeReferenceMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "internalSerializeMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "writeNullMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "incrementArrayCountMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "incrementCollectionCountMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "incrementCollectionCountGenericMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getDefaultValueMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getNullableValueMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "throwRequiredMemberMustBeEmittedMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getHasValueMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "writeISerializableMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "writeExtensionDataMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "writeXmlValueMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "readXmlValueMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "throwTypeNotSerializableMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "namespaceProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "contractNamespacesField", $asm09.TypeRef("System.Reflection.FieldInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "memberNamesField", $asm09.TypeRef("System.Reflection.FieldInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "extensionDataSetExplicitMethodInfo", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "childElementNamespacesProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "collectionItemNameProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "childElementNamespaceProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getDateTimeOffsetMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getDateTimeOffsetAdapterMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "traceInstructionMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:true , Public:false}, "WriteStartElementMethod2", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "WriteStartElementMethod3", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "WriteEndElementMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "WriteNamespaceDeclMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ExtensionDataProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:false}, "BoxPointer", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "DictionaryEnumeratorCtor", $asm09.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "MoveNextMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetCurrentMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetItemContractMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "IsStartElementMethod2", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "IsStartElementMethod0", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetUninitializedObjectMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "OnDeserializationMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "UnboxPointer", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "NodeTypeProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:false}, "SerializationExceptionCtor", $asm09.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "ExtensionDataObjectCtor", $asm09.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "HashtableCtor", $asm09.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:false}, "GetStreamingContextMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetCollectionMemberMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "StoreCollectionMemberInfoMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "StoreIsGetOnlyCollectionMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ThrowNullValueReturnedForGetOnlyCollectionExceptionMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ThrowArrayExceededSizeExceptionMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "IncrementItemCountMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "DemandSerializationFormatterPermissionMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "DemandMemberAccessPermissionMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "InternalDeserializeMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "MoveToNextElementMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetMemberIndexMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetMemberIndexWithRequiredMembersMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ThrowRequiredMemberMissingExceptionMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "SkipUnknownElementMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ReadIfNullOrRefMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ReadAttributesMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ResetAttributesMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetObjectIdMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetArraySizeMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "AddNewObjectMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "AddNewObjectWithIdMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ReplaceDeserializedObjectMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetExistingObjectMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetRealObjectMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ReadMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "EnsureArraySizeMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "TrimArraySizeMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "CheckEndOfArrayMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetArrayLengthMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ReadSerializationInfoMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "CreateUnexpectedStateExceptionMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "InternalSerializeReferenceMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "InternalSerializeMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "WriteNullMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "IncrementArrayCountMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "IncrementCollectionCountMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "IncrementCollectionCountGenericMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetDefaultValueMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetNullableValueMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ThrowRequiredMemberMustBeEmittedMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetHasValueMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "WriteISerializableMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "WriteExtensionDataMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "WriteXmlValueMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ReadXmlValueMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ThrowTypeNotSerializableMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "NamespaceProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:false}, "ContractNamespacesField", $asm09.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:true , Public:false}, "MemberNamesField", $asm09.TypeRef("System.Reflection.FieldInfo"));

    $.Property({Static:true , Public:false}, "ExtensionDataSetExplicitMethodInfo", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "ChildElementNamespacesProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:false}, "CollectionItemNameProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:false}, "ChildElementNamespaceProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:false}, "GetDateTimeOffsetMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "GetDateTimeOffsetAdapterMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:false}, "TraceInstructionMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Runtime.Serialization.XmlFormatClassReaderDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.XmlFormatClassReaderDelegate", false, []);

/* delegate System.Runtime.Serialization.XmlFormatCollectionReaderDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.XmlFormatCollectionReaderDelegate", false, []);

/* delegate System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate", false, []);

/* class System.Runtime.Serialization.XmlFormatReaderGenerator */ 

(function XmlFormatReaderGenerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlFormatReaderGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GenerateClassReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatClassReaderDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GenerateCollectionReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatCollectionReaderDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GenerateGetOnlyCollectionReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UnsafeGetUninitializedObject", 
      new JSIL.MethodSignature($.Object, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "helper", $asm11.TypeRef("System.Runtime.Serialization.XmlFormatReaderGenerator/CriticalHelper"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlFormatReaderGenerator/CriticalHelper */ 

(function CriticalHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlFormatReaderGenerator/CriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandMemberAccessPermission", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandSerializationFormatterPermission", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GenerateClassReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatClassReaderDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GenerateCollectionReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatCollectionReaderDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCollectionReaderHelper", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.CodeGenerator"), [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GenerateGetOnlyCollectionReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRequiredMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Boolean]), [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRequiredMembers", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), $jsilcore.TypeRef("System.Array", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleUnexpectedItemInCollection", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.LocalBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasFactoryMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitArgs", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalDeserialize", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm09.TypeRef("System.Type"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeFactoryMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeOnDeserialized", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeOnDeserializing", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsStartElement", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ArgBuilder"), $asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsStartElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadClass", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCollection", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCollectionItem", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), [
          $asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract"), $asm09.TypeRef("System.Type"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadGetOnlyCollection", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadISerializable", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadMembers", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadMembers", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.Emit.Label")]), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadValue", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), [
          $asm09.TypeRef("System.Type"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StoreCollectionValue", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedStateException", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowValidationException", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowValidationException", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadPrimitiveArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapNullableObject", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "ilg", $asm11.TypeRef("System.Runtime.Serialization.CodeGenerator")); 
    $.Field({Static:false, Public:false}, "objectLocal", $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")); 
    $.Field({Static:false, Public:false}, "objectType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "xmlReaderArg", $asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")); 
    $.Field({Static:false, Public:false}, "contextArg", $asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")); 
    $.Field({Static:false, Public:false}, "memberNamesArg", $asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")); 
    $.Field({Static:false, Public:false}, "memberNamespacesArg", $asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")); 
    $.Field({Static:false, Public:false}, "collectionContractArg", $asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlObjectSerializerContext */ 

(function XmlObjectSerializerContext$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlObjectSerializerContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), $.Int32, 
          $asm09.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Boolean, 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), $.Int32, 
          $asm09.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContractSerializer"), $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.NetDataContractSerializer")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckIfTypeSerializable", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "DemandMemberAccessPermission", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "DemandSerializationFormatterPermission", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_DataContractResolver", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContractResolver"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_IgnoreExtensionDataObject", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "get_IncrementItemCountMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsGetOnlyCollection", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KnownTypeResolver", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.KnownTypeDataContractResolver"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Mode", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.SerializationMode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RemainingItemCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializerKnownDataContracts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm09.TypeRef("System.RuntimeTypeHandle"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$.Int32, $asm09.TypeRef("System.RuntimeTypeHandle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataContractFromSerializerKnownTypes", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContractsForKnownTypes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContractSkipValidation", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.Int32, $asm09.TypeRef("System.RuntimeTypeHandle"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetStreamingContext", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.Serialization.StreamingContext"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSurrogatedType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IncrementItemCount", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsKnownType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsKnownType", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveDataContractFromDataContractResolver", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveDataContractFromKnownTypes", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.String, $.String, 
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveDataContractFromKnownTypes", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveNameFromKnownTypes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsGetOnlyCollection", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "serializer", $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializer")); 
    $.Field({Static:false, Public:false}, "rootTypeDataContract", $asm11.TypeRef("System.Runtime.Serialization.DataContract")); 
    $.Field({Static:false, Public:false}, "scopedKnownTypes", $asm11.TypeRef("System.Runtime.Serialization.ScopedKnownTypes")); 
    $.Field({Static:false, Public:false}, "serializerKnownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])); 
    $.Field({Static:false, Public:false}, "isSerializerKnownDataContractsSetExplicit", $.Boolean); 
    $.Field({Static:false, Public:false}, "serializerKnownTypeList", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:false}, "demandedSerializationFormatterPermission", $.Boolean)
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "demandedMemberAccessPermission", $.Boolean)
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "itemCount", $.Int32); 
    $.Field({Static:false, Public:false}, "maxItemsInObjectGraph", $.Int32); 
    $.Field({Static:false, Public:false}, "streamingContext", $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")); 
    $.Field({Static:false, Public:false}, "ignoreExtensionDataObject", $.Boolean); 
    $.Field({Static:false, Public:false}, "dataContractResolver", $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")); 
    $.Field({Static:false, Public:false}, "knownTypeResolver", $asm11.TypeRef("System.Runtime.Serialization.KnownTypeDataContractResolver")); 
    $.Field({Static:true , Public:false}, "incrementItemCountMethod", $asm09.TypeRef("System.Reflection.MethodInfo")); 
    $.Property({Static:false, Public:false, Virtual:true }, "Mode", $asm11.TypeRef("System.Runtime.Serialization.SerializationMode"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsGetOnlyCollection", $.Boolean);

    $.Property({Static:true , Public:false}, "IncrementItemCountMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "RemainingItemCount", $.Int32);

    $.Property({Static:false, Public:false}, "IgnoreExtensionDataObject", $.Boolean);

    $.Property({Static:false, Public:false}, "DataContractResolver", $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver"));

    $.Property({Static:false, Public:false}, "KnownTypeResolver", $asm11.TypeRef("System.Runtime.Serialization.KnownTypeDataContractResolver"));

    $.Property({Static:false, Public:false}, "SerializerKnownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlObjectSerializerReadContext */ 

(function XmlObjectSerializerReadContext$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerContext"), 
      Name: "System.Runtime.Serialization.XmlObjectSerializerReadContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), $.Int32, 
          $asm09.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContractSerializer"), $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.NetDataContractSerializer")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNamespaceDeclaration", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddNewObject", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddNewObjectWithId", 
      new JSIL.MethodSignature(null, [$.String, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckEndOfArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Int32, 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateContext", 
      new JSIL.MethodSignature($.Type, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContractSerializer"), $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateContext", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Runtime.Serialization.NetDataContractSerializer")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateReaderDelegatorForReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), [$asm13.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateReaderOverChildNodes", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm13.TypeRef("System.Xml.XmlAttribute")]), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm13.TypeRef("System.Xml.XmlNode")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateUnexpectedStateException", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$asm13.TypeRef("System.Xml.XmlNodeType"), $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateWrapperXmlElement", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlNode"), [
          $asm13.TypeRef("System.Xml.XmlDocument"), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm13.TypeRef("System.Xml.XmlAttribute")]), 
          $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm13.TypeRef("System.Xml.XmlNode")]), $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeserializeFromExtensionData", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.IDataNode"), $asm09.TypeRef("System.Type"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "EnsureArraySize", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DeserializedObjects", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.HybridObjectCache"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Document", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlDocument"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsGetOnlyCollection", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetArraySize", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCollectionMember", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetExistingObject", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm09.TypeRef("System.Type"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExistingObjectOrExtensionData", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetMemberIndex", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), $.Int32, 
          $asm11.TypeRef("System.Runtime.Serialization.ExtensionDataObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetMemberIndexWithRequiredMembers", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), 
          $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), $.Int32, 
          $.Int32, $asm11.TypeRef("System.Runtime.Serialization.ExtensionDataObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetObjectId", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRealObject", 
      new JSIL.MethodSignature($.Object, [$asm09.TypeRef("System.Runtime.Serialization.IObjectReference"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleMemberNotFound", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.ExtensionDataObject"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleUnknownElement", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.ExtensionDataObject"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeExtensionDataNode", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.IDataNode"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InternalDeserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Int32, 
          $asm09.TypeRef("System.RuntimeTypeHandle"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalDeserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm09.TypeRef("System.Type"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalDeserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm09.TypeRef("System.Type"), 
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalDeserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String, 
          $.String, $asm09.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Runtime.Serialization.DataContract")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsContentNode", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsReadingClassExtensionData", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsReadingCollectionExtensionData", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MoveToNextElement", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseQualifiedName", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAndResolveUnknownXmlData", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IDataNode"), [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm09.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAttributes", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadDataContractValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadExtensionDataMember", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.ExtensionDataMember"), [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadExtensionDataValue", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IDataNode"), [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadExtensionDataValue", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IDataNode"), [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadIfNullOrRef", 
      new JSIL.MethodSignature($.String, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm09.TypeRef("System.Type"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadIXmlSerializable", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlDataContract"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadIXmlSerializable", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlSerializableReader"), $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), 
          $asm11.TypeRef("System.Runtime.Serialization.XmlDataContract"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadPrimitiveExtensionDataValue", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IDataNode"), [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadRootIXmlSerializable", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlDataContract"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadSerializationInfo", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUnknownClassData", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.ClassDataNode"), [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUnknownCollectionData", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.CollectionDataNode"), [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUnknownISerializableData", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.ISerializableDataNode"), [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUnknownPrimitiveData", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IDataNode"), [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm09.TypeRef("System.Type"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUnknownXmlData", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IDataNode"), [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReplaceDeserializedObject", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceScopedKnownTypesTop", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetAttributes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResolveDataContractFromTypeName", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsGetOnlyCollection", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SkipUnknownElement", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartReadExtensionDataValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StoreCollectionMemberInfo", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowArrayExceededSizeException", 
      new JSIL.MethodSignature(null, [$.Int32, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowNullValueReturnedForGetOnlyCollectionException", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowRequiredMemberMissingException", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TrimArraySize", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"]), $.Int32], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryHandleNullOrRef", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm09.TypeRef("System.Type"), 
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.Field({Static:false, Public:false}, "attributes", $asm11.TypeRef("System.Runtime.Serialization.Attributes")); 
    $.Field({Static:false, Public:false}, "deserializedObjects", $asm11.TypeRef("System.Runtime.Serialization.HybridObjectCache")); 
    $.Field({Static:false, Public:false}, "xmlSerializableReader", $asm11.TypeRef("System.Runtime.Serialization.XmlSerializableReader")); 
    $.Field({Static:false, Public:false}, "xmlDocument", $asm13.TypeRef("System.Xml.XmlDocument")); 
    $.Field({Static:false, Public:false}, "attributesInXmlData", $asm11.TypeRef("System.Runtime.Serialization.Attributes")); 
    $.Field({Static:false, Public:false}, "extensionDataReader", $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")); 
    $.Field({Static:false, Public:false}, "getOnlyCollectionValue", $.Object); 
    $.Field({Static:false, Public:false}, "isGetOnlyCollection", $.Boolean); 
    $.Property({Static:false, Public:false}, "DeserializedObjects", $asm11.TypeRef("System.Runtime.Serialization.HybridObjectCache"));

    $.Property({Static:false, Public:false}, "Document", $asm13.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsGetOnlyCollection", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlObjectSerializerWriteContext */ 

(function XmlObjectSerializerWriteContext$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerContext"), 
      Name: "System.Runtime.Serialization.XmlObjectSerializerWriteContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContractSerializer"), $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.NetDataContractSerializer")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), $.Int32, 
          $asm09.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateContext", 
      new JSIL.MethodSignature($.Type, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContractSerializer"), $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateContext", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Runtime.Serialization.NetDataContractSerializer"), $asm09.TypeRef("System.Collections.Hashtable")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsGetOnlyCollection", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_SerializedObjects", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.ObjectToIdCache"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDefaultValue", 
      new JSIL.MethodSignature("!!0", [], ["T"])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetHasValue", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetNullableValue", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Nullable`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetObjectData", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Runtime.Serialization.ISerializable"), $asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), 
          $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "HandleGraphAtTopLevel", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.DataContract")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IncrementArrayCount", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm09.TypeRef("System.Array")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IncrementCollectionCount", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm09.TypeRef("System.Collections.ICollection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementCollectionCount", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IncrementCollectionCountGeneric", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm09.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InternalSerialize", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $.Boolean, $.Boolean, 
          $.Int32, $asm09.TypeRef("System.RuntimeTypeHandle")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "InternalSerializeReference", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $.Boolean, $.Boolean, 
          $.Int32, $asm09.TypeRef("System.RuntimeTypeHandle")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnEndHandleReference", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnHandleIsReference", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnHandleReference", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeAndVerifyType", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), 
          $.Object, $.Boolean, 
          $asm09.TypeRef("System.RuntimeTypeHandle"), $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializeWithoutXsiType", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), 
          $.Object, $asm09.TypeRef("System.RuntimeTypeHandle")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeWithXsiType", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm09.TypeRef("System.RuntimeTypeHandle"), $asm09.TypeRef("System.Type"), 
          $.Int32, $asm09.TypeRef("System.RuntimeTypeHandle"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeWithXsiTypeAtTopLevel", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), 
          $.Object, $asm09.TypeRef("System.RuntimeTypeHandle"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsGetOnlyCollection", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "StoreIsGetOnlyCollection", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowRequiredMemberMustBeEmitted", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryWriteDeserializedExtensionData", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Runtime.Serialization.IDataNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAnyType", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArraySize", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteClrTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteClrTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm09.TypeRef("System.Type"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteClrTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Runtime.Serialization.SerializationInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteDataContractValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), 
          $.Object, $asm09.TypeRef("System.RuntimeTypeHandle")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteExtensionClassData", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Runtime.Serialization.ClassDataNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteExtensionCollectionData", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Runtime.Serialization.CollectionDataNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteExtensionData", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Runtime.Serialization.ExtensionDataObject"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteExtensionDataMember", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Runtime.Serialization.ExtensionDataMember")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteExtensionDataTypeInfo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Runtime.Serialization.IDataNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteExtensionDataValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Runtime.Serialization.IDataNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteExtensionISerializableData", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Runtime.Serialization.ISerializableDataNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteExtensionXmlData", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Runtime.Serialization.XmlDataNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteISerializable", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm09.TypeRef("System.Runtime.Serialization.ISerializable")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIXmlSerializable", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteIXmlSerializable", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.XmlSerializableWriter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteNull", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm09.TypeRef("System.Type"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNull", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm09.TypeRef("System.Type"), 
          $.Boolean, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNull", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQName", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQName", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm13.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteResolvedTypeInfo", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteRootIXmlSerializable", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSerializationInfo", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Runtime.Serialization.SerializationInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.String, 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm11.TypeRef("System.Runtime.Serialization.DataContract")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTypeInfo", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTypeInfo", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUri", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm0B.TypeRef("System.Uri")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUri", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm0B.TypeRef("System.Uri"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.Field({Static:false, Public:false}, "byValObjectsInScope", $asm11.TypeRef("System.Runtime.Serialization.ObjectReferenceStack")); 
    $.Field({Static:false, Public:false}, "xmlSerializableWriter", $asm11.TypeRef("System.Runtime.Serialization.XmlSerializableWriter")); 
    $.Field({Static:false, Public:false}, "preserveObjectReferences", $.Boolean); 
    $.Field({Static:false, Public:false}, "serializedObjects", $asm11.TypeRef("System.Runtime.Serialization.ObjectToIdCache")); 
    $.Field({Static:false, Public:false}, "isGetOnlyCollection", $.Boolean); 
    $.Constant({Static:true , Public:false}, "depthToCheckCyclicReference", 512); 
    $.Property({Static:false, Public:false}, "SerializedObjects", $asm11.TypeRef("System.Runtime.Serialization.ObjectToIdCache"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsGetOnlyCollection", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Runtime.Serialization.XmlFormatClassWriterDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.XmlFormatClassWriterDelegate", false, []);

/* delegate System.Runtime.Serialization.XmlFormatCollectionWriterDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.XmlFormatCollectionWriterDelegate", false, []);

/* class System.Runtime.Serialization.XmlFormatWriterGenerator */ 

(function XmlFormatWriterGenerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlFormatWriterGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GenerateClassWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatClassWriterDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GenerateCollectionWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatCollectionWriterDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "helper", $asm11.TypeRef("System.Runtime.Serialization.XmlFormatWriterGenerator/CriticalHelper"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlFormatWriterGenerator/CriticalHelper */ 

(function CriticalHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlFormatWriterGenerator/CriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfConflictingMembersHaveDifferentTypes", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.DataMember")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfMemberHasConflict", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.DataMember"), $asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), 
          $asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandMemberAccessPermission", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandSerializationFormatterPermission", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateClassWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatClassWriterDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCollectionWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlFormatCollectionWriterDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitArgs", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalSerialize", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm09.TypeRef("System.Type"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeOnSerialized", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeOnSerializing", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadMemberValue", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm11.TypeRef("System.Runtime.Serialization.DataMember")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NeedsPrefix", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryWritePrimitive", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm09.TypeRef("System.Reflection.MemberInfo"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryWritePrimitiveArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnwrapNullableObject", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm09.TypeRef("System.Reflection.Emit.LocalBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteClass", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCollection", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMembers", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), $.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "ilg", $asm11.TypeRef("System.Runtime.Serialization.CodeGenerator")); 
    $.Field({Static:false, Public:false}, "xmlWriterArg", $asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")); 
    $.Field({Static:false, Public:false}, "contextArg", $asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")); 
    $.Field({Static:false, Public:false}, "dataContractArg", $asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")); 
    $.Field({Static:false, Public:false}, "objectLocal", $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")); 
    $.Field({Static:false, Public:false}, "contractNamespacesLocal", $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")); 
    $.Field({Static:false, Public:false}, "memberNamesLocal", $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")); 
    $.Field({Static:false, Public:false}, "childElementNamespacesLocal", $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")); 
    $.Field({Static:false, Public:false}, "typeIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "childElementIndex", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlObjectSerializerReadContextComplex */ 

(function XmlObjectSerializerReadContextComplex$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), 
      Name: "System.Runtime.Serialization.XmlObjectSerializerReadContextComplex", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContractSerializer"), $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.NetDataContractSerializer")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), $.Int32, 
          $asm09.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckIfTypeSerializable", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfTypeSerializableForSharedTypeMode", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Mode", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.SerializationMode"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetArraySize", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$.Int32, $asm09.TypeRef("System.RuntimeTypeHandle")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm09.TypeRef("System.RuntimeTypeHandle"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSurrogatedType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InternalDeserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Int32, 
          $asm09.TypeRef("System.RuntimeTypeHandle"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalDeserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm09.TypeRef("System.Type"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalDeserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm09.TypeRef("System.Type"), 
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalDeserializeInSharedTypeMode", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Int32, 
          $asm09.TypeRef("System.Type"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalDeserializeWithSurrogate", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm09.TypeRef("System.Type"), 
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ResolveDataContractFromTypeName", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveDataContractInSharedTypeMode", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Reflection.Assembly")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Type")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveDataContractTypeInSharedTypeMode", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Reflection.Assembly")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveSimpleAssemblyName", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Assembly"), [$asm09.TypeRef("System.Reflection.AssemblyName")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveSimpleAssemblyName", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Assembly"), [$.String], [])
    );

    $.Field({Static:true , Public:false}, "dataContractTypeCache", $asm09.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "preserveObjectReferences", $.Boolean); 
    $.Field({Static:false, Public:false}, "dataContractSurrogate", $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")); 
    $.Field({Static:false, Public:false}, "mode", $asm11.TypeRef("System.Runtime.Serialization.SerializationMode")); 
    $.Field({Static:false, Public:false}, "binder", $asm09.TypeRef("System.Runtime.Serialization.SerializationBinder")); 
    $.Field({Static:false, Public:false}, "surrogateSelector", $asm09.TypeRef("System.Runtime.Serialization.ISurrogateSelector")); 
    $.Field({Static:false, Public:false}, "assemblyFormat", $asm09.TypeRef("System.Runtime.Serialization.Formatters.FormatterAssemblyStyle")); 
    $.Field({Static:false, Public:false}, "surrogateDataContracts", $asm09.TypeRef("System.Collections.Hashtable")); 
    $.Property({Static:false, Public:false, Virtual:true }, "Mode", $asm11.TypeRef("System.Runtime.Serialization.SerializationMode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlObjectSerializerReadContextComplex/TopLevelAssemblyTypeResolver */ 

(function TopLevelAssemblyTypeResolver$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlObjectSerializerReadContextComplex/TopLevelAssemblyTypeResolver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Assembly")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResolveType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [
          $asm09.TypeRef("System.Reflection.Assembly"), $.String, 
          $.Boolean
        ], [])
    );

    $.Field({Static:false, Public:false}, "topLevelAssembly", $asm09.TypeRef("System.Reflection.Assembly")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlObjectSerializerReadContextComplex/XmlObjectDataContractTypeInfo */ 

(function XmlObjectDataContractTypeInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlObjectSerializerReadContextComplex/XmlObjectDataContractTypeInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Assembly"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Assembly", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Assembly"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false}, "assembly", $asm09.TypeRef("System.Reflection.Assembly")); 
    $.Field({Static:false, Public:false}, "type", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "Assembly", $asm09.TypeRef("System.Reflection.Assembly"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlObjectSerializerReadContextComplex/XmlObjectDataContractTypeKey */ 

(function XmlObjectDataContractTypeKey$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlObjectSerializerReadContextComplex/XmlObjectDataContractTypeKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false}, "assemblyName", $.String); 
    $.Field({Static:false, Public:false}, "typeName", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlObjectSerializerWriteContextComplex */ 

(function XmlObjectSerializerWriteContextComplex$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContext"), 
      Name: "System.Runtime.Serialization.XmlObjectSerializerWriteContextComplex", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContractSerializer"), $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractResolver")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.NetDataContractSerializer"), $asm09.TypeRef("System.Collections.Hashtable")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), $.Int32, 
          $asm09.TypeRef("System.Runtime.Serialization.StreamingContext"), $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckIfTypeSerializable", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfTypeSerializableForSharedTypeMode", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Mode", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.SerializationMode"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm09.TypeRef("System.RuntimeTypeHandle"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$.Int32, $asm09.TypeRef("System.RuntimeTypeHandle")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContractSkipValidation", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.Int32, $asm09.TypeRef("System.RuntimeTypeHandle"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSurrogatedType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InternalSerialize", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $.Boolean, $.Boolean, 
          $.Int32, $asm09.TypeRef("System.RuntimeTypeHandle")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalSerializeWithSurrogate", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $.Boolean, $.Boolean, 
          $.Int32, $asm09.TypeRef("System.RuntimeTypeHandle")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnEndHandleReference", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnHandleReference", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAnyType", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArraySize", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteClrTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteClrTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm09.TypeRef("System.Type"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteClrTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Runtime.Serialization.SerializationInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQName", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQName", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm13.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.String, 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUri", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm0B.TypeRef("System.Uri")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUri", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm0B.TypeRef("System.Uri"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.Field({Static:false, Public:false}, "dataContractSurrogate", $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")); 
    $.Field({Static:false, Public:false}, "mode", $asm11.TypeRef("System.Runtime.Serialization.SerializationMode")); 
    $.Field({Static:false, Public:false}, "binder", $asm09.TypeRef("System.Runtime.Serialization.SerializationBinder")); 
    $.Field({Static:false, Public:false}, "surrogateSelector", $asm09.TypeRef("System.Runtime.Serialization.ISurrogateSelector")); 
    $.Field({Static:false, Public:false}, "streamingContext", $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")); 
    $.Field({Static:false, Public:false}, "surrogateDataContracts", $asm09.TypeRef("System.Collections.Hashtable")); 
    $.Property({Static:false, Public:false, Virtual:true }, "Mode", $asm11.TypeRef("System.Runtime.Serialization.SerializationMode"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlReaderDelegator */ 

(function XmlReaderDelegator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlReaderDelegator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckActualArrayLength", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckExpectedArrayLength", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidPrimitiveTypeException", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Normalized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnderlyingExtensionDataReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.ExtensionDataReader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnderlyingReader", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlReader"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WhitespaceHandling", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.WhitespaceHandling"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetArrayLengthQuota", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm13.TypeRef("System.Xml.XmlNamespaceScope")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasLineInfo", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexOfLocalName", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNamespaceURI", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToContent", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseQualifiedName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsAnyType", 
      new JSIL.MethodSignature($.Object, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsDateTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsDecimal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsGuid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsQName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsShort", 
      new JSIL.MethodSignature($.Int16, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsSignedByte", 
      new JSIL.MethodSignature($.SByte, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsSingle", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsTimeSpan", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsUnsignedByte", 
      new JSIL.MethodSignature($.Byte, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsUnsignedInt", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsUnsignedLong", 
      new JSIL.MethodSignature($.UInt64, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsUnsignedShort", 
      new JSIL.MethodSignature($.UInt16, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsUri", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Uri"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsAnyType", 
      new JSIL.MethodSignature($.Object, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadElementContentAsChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadElementContentAsDateTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsDecimal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsFloat", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsGuid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsQName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsShort", 
      new JSIL.MethodSignature($.Int16, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsSignedByte", 
      new JSIL.MethodSignature($.SByte, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsTimeSpan", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsUnsignedByte", 
      new JSIL.MethodSignature($.Byte, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsUnsignedInt", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadElementContentAsUnsignedLong", 
      new JSIL.MethodSignature($.UInt64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsUnsignedShort", 
      new JSIL.MethodSignature($.UInt16, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadElementContentAsUri", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Uri"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadExtensionData", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IDataNode"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Normalized", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_WhitespaceHandling", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.WhitespaceHandling")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Skip", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowConversionException", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowNotAtElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToSByte", 
      new JSIL.MethodSignature($.SByte, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToShort", 
      new JSIL.MethodSignature($.Int16, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadBooleanArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Boolean])])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadDateTimeArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")])])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadDecimalArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")])])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadDoubleArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Double])])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadInt32Array", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Int32])])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadInt64Array", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Int64])])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadSingleArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Single])])
        ], [])
    );

    $.Field({Static:false, Public:false}, "reader", $asm13.TypeRef("System.Xml.XmlReader")); 
    $.Field({Static:false, Public:false}, "dictionaryReader", $asm11.TypeRef("System.Xml.XmlDictionaryReader")); 
    $.Field({Static:false, Public:false}, "isEndOfEmptyElement", $.Boolean); 
    $.Property({Static:false, Public:false}, "UnderlyingReader", $asm13.TypeRef("System.Xml.XmlReader"));

    $.Property({Static:false, Public:false}, "UnderlyingExtensionDataReader", $asm11.TypeRef("System.Runtime.Serialization.ExtensionDataReader"));

    $.Property({Static:false, Public:false}, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:false}, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true }, "NodeType", $asm13.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:false}, "LineNumber", $.Int32);

    $.Property({Static:false, Public:false}, "LinePosition", $.Int32);

    $.Property({Static:false, Public:false}, "Normalized", $.Boolean);

    $.Property({Static:false, Public:false}, "WhitespaceHandling", $asm13.TypeRef("System.Xml.WhitespaceHandling"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "LocalName", $.String);

    $.Property({Static:false, Public:false}, "NamespaceURI", $.String);

    $.Property({Static:false, Public:false}, "Value", $.String);

    $.Property({Static:false, Public:false}, "ValueType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Depth", $.Int32);

    $.Property({Static:false, Public:false}, "EOF", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlSerializableReader */ 

(function XmlSerializableReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Xml.XmlReader"), 
      Name: "System.Runtime.Serialization.XmlSerializableReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "BeginRead", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndRead", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerReader", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlReader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.ReadState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlReaderSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToContent", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm09.TypeRef("System.Type"), $asm13.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(1, "get_LineNumber");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(1, "get_LinePosition");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.HasLineInfo", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "HasLineInfo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.get_Normalized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(2, "get_Normalized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.get_WhitespaceHandling", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.WhitespaceHandling"), [], [])
    )
      .Overrides(2, "get_WhitespaceHandling");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.set_Normalized", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Overrides(2, "set_Normalized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.set_WhitespaceHandling", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.WhitespaceHandling")], [])
    )
      .Overrides(2, "set_WhitespaceHandling");

    $.Field({Static:false, Public:false}, "xmlReader", $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")); 
    $.Field({Static:false, Public:false}, "startDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "isRootEmptyElement", $.Boolean); 
    $.Field({Static:false, Public:false}, "innerReader", $asm13.TypeRef("System.Xml.XmlReader")); 
    $.Property({Static:false, Public:false}, "InnerReader", $asm13.TypeRef("System.Xml.XmlReader"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm13.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm13.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm13.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm13.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm13.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm13.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.Normalized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.WhitespaceHandling", $asm13.TypeRef("System.Xml.WhitespaceHandling"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm13.TypeRef("System.Xml.IXmlLineInfo"), 
      /* 2 */ $asm13.TypeRef("System.Xml.Serialization.IXmlTextParser")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Runtime.Serialization.XmlSerializableServices */ 

(function XmlSerializableServices$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Serialization.XmlSerializableServices", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "AddDefaultSchema", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidAttribute", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadNodes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm13.TypeRef("System.Xml.XmlNode")]), [$asm13.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "WriteNodes", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter"), $jsilcore.TypeRef("System.Array", [$asm13.TypeRef("System.Xml.XmlNode")])], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ReadNodesMethodName", $.String, "ReadNodes"); 
    $.Field({Static:true , Public:false}, "WriteNodesMethodName", $.String, "WriteNodes"); 
    $.Field({Static:true , Public:false}, "AddDefaultSchemaMethodName", $.String, "AddDefaultSchema"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlSerializableWriter */ 

(function XmlSerializableWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Xml.XmlWriter"), 
      Name: "System.Runtime.Serialization.XmlSerializableWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "BeginWrite", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndWrite", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.WriteState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNmToken", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "xmlWriter", $asm13.TypeRef("System.Xml.XmlWriter")); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Field({Static:false, Public:false}, "obj", $.Object); 
    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm13.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm13.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.XmlWriterDelegator */ 

(function XmlWriterDelegator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.XmlWriterDelegator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidPrimitiveTypeException", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Writer", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlWriter"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_WriteState", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.WriteState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlSpace", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAnyType", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAnyType", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeBool", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeBoolValue", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeInt", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeIntValue", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeQualifiedName", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeQualifiedName", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeQualifiedNameValue", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeQualifiedNameValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeString", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeString", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeString", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeStringValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeStringValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteBoolean", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteBoolean", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteBooleanArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteChar", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteChar", 
      new JSIL.MethodSignature(null, [
          $.Char, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteDateTime", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteDateTime", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.DateTime"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteDateTimeArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteDecimal", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteDecimal", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Decimal"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteDecimalArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteDouble", 
      new JSIL.MethodSignature(null, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteDouble", 
      new JSIL.MethodSignature(null, [
          $.Double, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteDoubleArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Double]), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElementPrimitive", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteExtensionData", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.IDataNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFloat", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteFloat", 
      new JSIL.MethodSignature(null, [
          $.Single, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteGuid", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteGuid", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Guid"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteInt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteInt", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteInt32Array", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteInt64Array", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Int64]), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteLong", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteLong", 
      new JSIL.MethodSignature(null, [
          $.Int64, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteNamespaceDecl", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteQName", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteShort", 
      new JSIL.MethodSignature(null, [$.Int16], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteShort", 
      new JSIL.MethodSignature(null, [
          $.Int16, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteSignedByte", 
      new JSIL.MethodSignature(null, [$.SByte], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteSignedByte", 
      new JSIL.MethodSignature(null, [
          $.SByte, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteSingleArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Single]), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElementPrimitive", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTimeSpan", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTimeSpan", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.TimeSpan"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteUnsignedByte", 
      new JSIL.MethodSignature(null, [$.Byte], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteUnsignedByte", 
      new JSIL.MethodSignature(null, [
          $.Byte, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteUnsignedInt", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteUnsignedInt", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteUnsignedLong", 
      new JSIL.MethodSignature(null, [$.UInt64], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteUnsignedLong", 
      new JSIL.MethodSignature(null, [
          $.UInt64, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteUnsignedShort", 
      new JSIL.MethodSignature(null, [$.UInt16], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteUnsignedShort", 
      new JSIL.MethodSignature(null, [
          $.UInt16, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUri", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Uri")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.Field({Static:false, Public:false}, "writer", $asm13.TypeRef("System.Xml.XmlWriter")); 
    $.Field({Static:false, Public:false}, "dictionaryWriter", $asm11.TypeRef("System.Xml.XmlDictionaryWriter")); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Field({Static:false, Public:false}, "prefixes", $.Int32); 
    $.Constant({Static:true , Public:false}, "CharChunkSize", 76); 
    $.Constant({Static:true , Public:false}, "ByteChunkSize", 57); 
    $.Property({Static:false, Public:false}, "Writer", $asm13.TypeRef("System.Xml.XmlWriter"));

    $.Property({Static:false, Public:false}, "WriteState", $asm13.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:false}, "XmlLang", $.String);

    $.Property({Static:false, Public:false}, "XmlSpace", $asm13.TypeRef("System.Xml.XmlSpace"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Runtime.Serialization.Diagnostics");
/* class System.Runtime.Serialization.Diagnostics.TraceCode */ 

(function TraceCode$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Serialization.Diagnostics.TraceCode", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "Serialization", 196608); 
    $.Constant({Static:true , Public:true }, "WriteObjectBegin", 196609); 
    $.Constant({Static:true , Public:true }, "WriteObjectEnd", 196610); 
    $.Constant({Static:true , Public:true }, "WriteObjectContentBegin", 196611); 
    $.Constant({Static:true , Public:true }, "WriteObjectContentEnd", 196612); 
    $.Constant({Static:true , Public:true }, "ReadObjectBegin", 196613); 
    $.Constant({Static:true , Public:true }, "ReadObjectEnd", 196614); 
    $.Constant({Static:true , Public:true }, "ElementIgnored", 196615); 
    $.Constant({Static:true , Public:true }, "XsdExportBegin", 196616); 
    $.Constant({Static:true , Public:true }, "XsdExportEnd", 196617); 
    $.Constant({Static:true , Public:true }, "XsdImportBegin", 196618); 
    $.Constant({Static:true , Public:true }, "XsdImportEnd", 196619); 
    $.Constant({Static:true , Public:true }, "XsdExportError", 196620); 
    $.Constant({Static:true , Public:true }, "XsdImportError", 196621); 
    $.Constant({Static:true , Public:true }, "XsdExportAnnotationFailed", 196622); 
    $.Constant({Static:true , Public:true }, "XsdImportAnnotationFailed", 196623); 
    $.Constant({Static:true , Public:true }, "XsdExportDupItems", 196624); 
    $.Constant({Static:true , Public:true }, "FactoryTypeNotFound", 196625); 
    $.Constant({Static:true , Public:true }, "ObjectWithLargeDepth", 196626); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Diagnostics.TraceUtility */ 

(function TraceUtility$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Serialization.Diagnostics.TraceUtility", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $asm18.TypeRef("System.Runtime.Diagnostics.TraceRecord")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "Trace", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $asm18.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
          $asm09.TypeRef("System.Exception")
        ], [])
    );

    $.Field({Static:true , Public:false}, "traceCodes", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $.String])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.CodeExporter */ 

(function CodeExporter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.CodeExporter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContractSet"), $asm11.TypeRef("System.Runtime.Serialization.ImportOptions"), 
          $asm0B.TypeRef("System.CodeDom.CodeCompileUnit")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddBaseMemberNames", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo"), $asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddExtensionData", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddGlobalTypeName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddImportStatement", 
      new JSIL.MethodSignature(null, [$.String, $asm0B.TypeRef("System.CodeDom.CodeNamespace")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddKnownTypeContracts", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AddKnownTypes", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddNamespaceFragment", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNamespacePair", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPropertyChangedNotifier", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReferencedAssembly", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Assembly")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSerializableAttribute", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm0B.TypeRef("System.CodeDom.CodeTypeDeclaration"), 
          $asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddToNamespace", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Text.StringBuilder"), $.String, 
          $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AppendToValidClrIdentifier", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanDeclareAssemblyAttribute", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateProperty", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeMemberProperty"), [
          $asm0B.TypeRef("System.CodeDom.CodeTypeReference"), $.String, 
          $.String, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateTypeDeclaration", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$.String, $asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Export", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportClassDataContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportClassDataContractHierarchy", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), 
          $asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo"), $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportCollectionDataContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract"), $asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportEnumDataContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.EnumDataContract"), $asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportISerializableDataContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportXmlDataContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlDataContract"), $asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateKeyValueType", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateType", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ClrNamespaces", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CodeProvider", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CodeTypeIPropertyChange", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeTypeReference"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnableDataBinding", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExtensionDataObjectField", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeMemberField"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExtensionDataObjectProperty", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeMemberProperty"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FileExtension", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GenerateInternalTypes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GenerateSerializableTypes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GenericDictionaryContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GenericDictionaryName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GenericListContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GenericListName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GetObjectDataMethod", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeMemberMethod"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GetSchemaMethod", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeMemberMethod"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GetSchemaStaticMethod", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeMemberMethod"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ISerializableBaseConstructor", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeConstructor"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ISerializableDerivedConstructor", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeConstructor"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespaces", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NodeArrayField", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeMemberField"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NodeArrayProperty", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeMemberProperty"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NullReference", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodePrimitiveExpression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PropertyChangedEvent", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeMemberEvent"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RaisePropertyChangedEventMethod", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeMemberMethod"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReadXmlMethod", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeMemberMethod"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializableAttribute", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeAttributeDeclaration"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializationInfoField", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeMemberField"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializationInfoParameter", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeParameterDeclarationExpression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializationInfoProperty", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeMemberProperty"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StreamingContextParameter", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeParameterDeclarationExpression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SupportsAssemblyAttributes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SupportsDeclareEvents", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SupportsDeclareValueTypes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SupportsGenericTypeReference", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SupportsNestedTypes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SupportsPartialTypes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ThisReference", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeThisReferenceExpression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WriteXmlMethod", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeMemberMethod"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClrIdentifier", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetClrNamespace", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetClrNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCodeNamespace", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeNamespace"), [
          $.String, $.String, 
          $asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCodeTypeReference", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeTypeReference"), [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCodeTypeReference", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeTypeReference"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetContractCodeDomInfo", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo"), [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetElementTypeReference", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeTypeReference"), [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKnownTypeContracts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKnownTypeContracts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKnownTypeReferences", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm0B.TypeRef("System.CodeDom.CodeTypeReference")]), [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemberName", 
      new JSIL.MethodSignature($.String, [$.String, $asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNameForAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNestedType", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReferencedCollectionType", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeTypeReference"), [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReferencedGenericType", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeTypeReference"), [$asm11.TypeRef("System.Runtime.Serialization.GenericInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Runtime.Serialization.DataContract")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReferencedType", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeTypeReference"), [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetSurrogatedTypeReference", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeTypeReference"), [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GlobalTypeNameConflicts", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasDefaultCollectionNames", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeProcessImportedType", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.CollectionBase")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValid", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidStart", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NamespaceContainsType", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.CodeDom.CodeNamespace"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NeedsExplicitNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfReferencedBaseTypeSealed", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetReferencedDictionaryType", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract"), $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.CodeDom.CodeTypeReference")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetReferencedListType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0B.TypeRef("System.CodeDom.CodeTypeReference")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetReferencedType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Type")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TypeContainsNestedType", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.CodeDom.CodeTypeDeclaration"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapNullable", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.CodeTypeReference"), [$asm0B.TypeRef("System.CodeDom.CodeTypeReference")], [])
    );

    $.Field({Static:false, Public:false}, "dataContractSet", $asm11.TypeRef("System.Runtime.Serialization.DataContractSet")); 
    $.Field({Static:false, Public:false}, "codeCompileUnit", $asm0B.TypeRef("System.CodeDom.CodeCompileUnit")); 
    $.Field({Static:false, Public:false}, "options", $asm11.TypeRef("System.Runtime.Serialization.ImportOptions")); 
    $.Field({Static:false, Public:false}, "namespaces", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])); 
    $.Field({Static:false, Public:false}, "clrNamespaces", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "wildcardNamespaceMapping", $.String, "*"); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "typeNameFieldName", $.String, "typeName"); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "codeUserDataActualTypeKey", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "surrogateDataKey", $.Object, $asm11.System.Runtime.Serialization.IDataContractSurrogate.__Type__); 
    $.Constant({Static:true , Public:false}, "MaxIdentifierLength", 511); 
    $.Property({Static:false, Public:false}, "GenerateSerializableTypes", $.Boolean);

    $.Property({Static:false, Public:false}, "GenerateInternalTypes", $.Boolean);

    $.Property({Static:false, Public:false}, "EnableDataBinding", $.Boolean);

    $.Property({Static:false, Public:false}, "CodeProvider", $asm0B.TypeRef("System.CodeDom.Compiler.CodeDomProvider"));

    $.Property({Static:false, Public:false}, "SupportsDeclareEvents", $.Boolean);

    $.Property({Static:false, Public:false}, "SupportsDeclareValueTypes", $.Boolean);

    $.Property({Static:false, Public:false}, "SupportsGenericTypeReference", $.Boolean);

    $.Property({Static:false, Public:false}, "SupportsAssemblyAttributes", $.Boolean);

    $.Property({Static:false, Public:false}, "SupportsPartialTypes", $.Boolean);

    $.Property({Static:false, Public:false}, "SupportsNestedTypes", $.Boolean);

    $.Property({Static:false, Public:false}, "FileExtension", $.String);

    $.Property({Static:false, Public:false}, "Namespaces", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Property({Static:false, Public:false}, "ClrNamespaces", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    $.Property({Static:false, Public:false}, "GenericListName", $asm13.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "GenericListContract", $asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract"));

    $.Property({Static:false, Public:false}, "GenericDictionaryName", $asm13.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "GenericDictionaryContract", $asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract"));

    $.Property({Static:false, Public:false}, "CodeTypeIPropertyChange", $asm0B.TypeRef("System.CodeDom.CodeTypeReference"));

    $.Property({Static:false, Public:false}, "ThisReference", $asm0B.TypeRef("System.CodeDom.CodeThisReferenceExpression"));

    $.Property({Static:false, Public:false}, "NullReference", $asm0B.TypeRef("System.CodeDom.CodePrimitiveExpression"));

    $.Property({Static:false, Public:false}, "SerializationInfoParameter", $asm0B.TypeRef("System.CodeDom.CodeParameterDeclarationExpression"));

    $.Property({Static:false, Public:false}, "StreamingContextParameter", $asm0B.TypeRef("System.CodeDom.CodeParameterDeclarationExpression"));

    $.Property({Static:false, Public:false}, "SerializableAttribute", $asm0B.TypeRef("System.CodeDom.CodeAttributeDeclaration"));

    $.Property({Static:false, Public:false}, "NodeArrayProperty", $asm0B.TypeRef("System.CodeDom.CodeMemberProperty"));

    $.Property({Static:false, Public:false}, "NodeArrayField", $asm0B.TypeRef("System.CodeDom.CodeMemberField"));

    $.Property({Static:false, Public:false}, "ReadXmlMethod", $asm0B.TypeRef("System.CodeDom.CodeMemberMethod"));

    $.Property({Static:false, Public:false}, "WriteXmlMethod", $asm0B.TypeRef("System.CodeDom.CodeMemberMethod"));

    $.Property({Static:false, Public:false}, "GetSchemaMethod", $asm0B.TypeRef("System.CodeDom.CodeMemberMethod"));

    $.Property({Static:false, Public:false}, "GetSchemaStaticMethod", $asm0B.TypeRef("System.CodeDom.CodeMemberMethod"));

    $.Property({Static:false, Public:false}, "ISerializableBaseConstructor", $asm0B.TypeRef("System.CodeDom.CodeConstructor"));

    $.Property({Static:false, Public:false}, "ISerializableDerivedConstructor", $asm0B.TypeRef("System.CodeDom.CodeConstructor"));

    $.Property({Static:false, Public:false}, "SerializationInfoField", $asm0B.TypeRef("System.CodeDom.CodeMemberField"));

    $.Property({Static:false, Public:false}, "SerializationInfoProperty", $asm0B.TypeRef("System.CodeDom.CodeMemberProperty"));

    $.Property({Static:false, Public:false}, "GetObjectDataMethod", $asm0B.TypeRef("System.CodeDom.CodeMemberMethod"));

    $.Property({Static:false, Public:false}, "ExtensionDataObjectField", $asm0B.TypeRef("System.CodeDom.CodeMemberField"));

    $.Property({Static:false, Public:false}, "ExtensionDataObjectProperty", $asm0B.TypeRef("System.CodeDom.CodeMemberProperty"));

    $.Property({Static:false, Public:false}, "RaisePropertyChangedEventMethod", $asm0B.TypeRef("System.CodeDom.CodeMemberMethod"));

    $.Property({Static:false, Public:false}, "PropertyChangedEvent", $asm0B.TypeRef("System.CodeDom.CodeMemberEvent"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ContractCodeDomInfo */ 

(function ContractCodeDomInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ContractCodeDomInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_ClrNamespace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemberNames", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ClrNamespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "IsProcessed", $.Boolean); 
    $.Field({Static:false, Public:false}, "TypeDeclaration", $asm0B.TypeRef("System.CodeDom.CodeTypeDeclaration")); 
    $.Field({Static:false, Public:false}, "TypeReference", $asm0B.TypeRef("System.CodeDom.CodeTypeReference")); 
    $.Field({Static:false, Public:false}, "CodeNamespace", $asm0B.TypeRef("System.CodeDom.CodeNamespace")); 
    $.Field({Static:false, Public:false}, "ReferencedTypeExists", $.Boolean); 
    $.Field({Static:false, Public:false}, "UsesWildcardNamespace", $.Boolean); 
    $.Field({Static:false, Public:false}, "clrNamespace", $.String); 
    $.Field({Static:false, Public:false}, "memberNames", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object])); 
    $.Property({Static:false, Public:false}, "ClrNamespace", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.DataContractSet */ 

(function DataContractSet$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.DataContractSet", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Type")]), 
          $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Type")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddClassDataContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCollectionDataContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddKnownDataContracts", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReferencedType", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $.Object]), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddXmlDataContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlDataContract")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureTypeNotGeneric", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Contracts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataContractSurrogate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KnownTypesForObject", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_ProcessedContracts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $.Object]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SurrogateDataTable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Hashtable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetContractCodeDomInfo", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo"), [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetItemTypeDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemberTypeDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm11.TypeRef("System.Runtime.Serialization.DataMember")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReferencedCollectionTypes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $.Object]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReferencedTypes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $.Object]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStableName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSurrogateData", 
      new JSIL.MethodSignature($.Object, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalAdd", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsContractProcessed", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeReferenceable", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_KnownTypesForObject", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "SetContractCodeDomInfo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.ContractCodeDomInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetContractProcessed", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSurrogateData", 
      new JSIL.MethodSignature(null, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetReferencedCollectionType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Type")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "TryGetReferencedType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Type")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "TryGetReferencedType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Type")])
        ], [])
    );

    $.Field({Static:false, Public:false}, "contracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])); 
    $.Field({Static:false, Public:false}, "processedContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $.Object])); 
    $.Field({Static:false, Public:false}, "dataContractSurrogate", $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")); 
    $.Field({Static:false, Public:false}, "surrogateDataTable", $asm09.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "knownTypesForObject", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])); 
    $.Field({Static:false, Public:false}, "referencedTypes", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:false}, "referencedCollectionTypes", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:false}, "referencedTypesDictionary", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $.Object])); 
    $.Field({Static:false, Public:false}, "referencedCollectionTypesDictionary", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $.Object])); 
    $.Property({Static:false, Public:false}, "Contracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:false}, "ProcessedContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $.Object]));

    $.Property({Static:false, Public:false}, "SurrogateDataTable", $asm09.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "KnownTypesForObject", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:true }, "DataContractSurrogate", $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Runtime.Serialization.ExportOptions */ 

(function ExportOptions$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ExportOptions", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_DataContractSurrogate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_KnownTypes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm09.TypeRef("System.Type")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSurrogate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataContractSurrogate", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "knownTypes", $asm09.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm09.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:false}, "dataContractSurrogate", $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")); 
    $.Property({Static:false, Public:true }, "DataContractSurrogate", $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"));

    $.Property({Static:false, Public:true }, "KnownTypes", $asm09.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm09.TypeRef("System.Type")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.ImportOptions */ 

(function ImportOptions$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.ImportOptions", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_CodeProvider", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_DataContractSurrogate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_EnableDataBinding", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_GenerateInternal", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_GenerateSerializable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ImportXmlType", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferencedCollectionTypes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Type")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReferencedTypes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Type")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CodeProvider", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.CodeDom.Compiler.CodeDomProvider")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_DataContractSurrogate", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_EnableDataBinding", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_GenerateInternal", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_GenerateSerializable", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_ImportXmlType", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "generateSerializable", $.Boolean); 
    $.Field({Static:false, Public:false}, "generateInternal", $.Boolean); 
    $.Field({Static:false, Public:false}, "enableDataBinding", $.Boolean); 
    $.Field({Static:false, Public:false}, "codeProvider", $asm0B.TypeRef("System.CodeDom.Compiler.CodeDomProvider")); 
    $.Field({Static:false, Public:false}, "referencedTypes", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:false}, "referencedCollectionTypes", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:false}, "namespaces", $asm09.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String])); 
    $.Field({Static:false, Public:false}, "importXmlType", $.Boolean); 
    $.Field({Static:false, Public:false}, "dataContractSurrogate", $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")); 
    $.Property({Static:false, Public:true }, "GenerateSerializable", $.Boolean);

    $.Property({Static:false, Public:true }, "GenerateInternal", $.Boolean);

    $.Property({Static:false, Public:true }, "EnableDataBinding", $.Boolean);

    $.Property({Static:false, Public:true }, "CodeProvider", $asm0B.TypeRef("System.CodeDom.Compiler.CodeDomProvider"));

    $.Property({Static:false, Public:true }, "ReferencedTypes", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Type")]));

    $.Property({Static:false, Public:true }, "ReferencedCollectionTypes", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Type")]));

    $.Property({Static:false, Public:true }, "Namespaces", $asm09.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]));

    $.Property({Static:false, Public:true }, "ImportXmlType", $.Boolean);

    $.Property({Static:false, Public:true }, "DataContractSurrogate", $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SchemaExporter */ 

(function SchemaExporter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.SchemaExporter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm11.TypeRef("System.Runtime.Serialization.DataContractSet")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "AddDefaultDatasetType", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddDefaultTypedDatasetType", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm13.TypeRef("System.Xml.Schema.XmlSchema"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddDefaultXmlType", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReferenceAttributes", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm13.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfMemberHasConflict", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.DataMember")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateAnyElementType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateAnyType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTypeContent", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaComplexContentExtension"), [
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm13.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm13.TypeRef("System.Xml.Schema.XmlSchema")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Export", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportActualType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlElement"), [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExportActualType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlElement"), [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.XmlDocument")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportClassDataContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm13.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportCollectionDataContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract"), $asm13.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportDataContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportEmitDefaultValue", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlElement"), [$asm11.TypeRef("System.Runtime.Serialization.DataMember")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportEnumDataContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.EnumDataContract"), $asm13.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportGenericInfo", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlElement"), [
          $asm09.TypeRef("System.Type"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportIsDictionary", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportISerializableDataContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm13.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportSerializationSchema", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportSurrogateData", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlElement"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportTopLevelElement", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm13.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportXmlDataContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlDataContract")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ActualTypeAnnotationName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_AnytypeQualifiedName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultEnumBaseTypeName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultValueAnnotation", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_EnumerationValueAnnotationName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_IdAttribute", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IsDictionaryAnnotationName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ISerializableFactoryTypeAttribute", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ISerializableSequence", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaSequence"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ISerializableWildcardElement", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaAny"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IsValueTypeName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_RefAttribute", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Schemas", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_StringQualifiedName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_SurrogateDataAnnotationName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_XmlDoc", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlDocument"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAnnotationMarkup", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlElement"), [
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $.String, 
          $asm13.TypeRef("System.Xml.Schema.XmlSchema")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultEnumValue", 
      new JSIL.MethodSignature($.Int64, [$.Boolean, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchema", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchema"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaAnnotation", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), [
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $.String, 
          $asm13.TypeRef("System.Xml.Schema.XmlSchema")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaAnnotation", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), [$jsilcore.TypeRef("System.Array", [$asm13.TypeRef("System.Xml.XmlNode")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXmlTypeInfo", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm13.TypeRef("System.Xml.XmlQualifiedName")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm13.TypeRef("System.Xml.Schema.XmlSchemaType")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvokeGetSchemaMethod", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), 
          $asm13.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvokeSchemaProviderMethod", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Type"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm13.TypeRef("System.Xml.XmlQualifiedName")]), $jsilcore.TypeRef("JSIL.Reference", [$asm13.TypeRef("System.Xml.Schema.XmlSchemaType")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSpecialXmlType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm13.TypeRef("System.Xml.XmlQualifiedName")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm13.TypeRef("System.Xml.Schema.XmlSchemaType")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReprocessAll", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetElementType", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm13.TypeRef("System.Xml.Schema.XmlSchema")
        ], [])
    );

    $.Field({Static:false, Public:false}, "schemas", $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet")); 
    $.Field({Static:false, Public:false}, "xmlDoc", $asm13.TypeRef("System.Xml.XmlDocument")); 
    $.Field({Static:false, Public:false}, "dataContractSet", $asm11.TypeRef("System.Runtime.Serialization.DataContractSet")); 
    $.Field({Static:true , Public:false}, "anytypeQualifiedName", $asm13.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "stringQualifiedName", $asm13.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "defaultEnumBaseTypeName", $asm13.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "enumerationValueAnnotationName", $asm13.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "surrogateDataAnnotationName", $asm13.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "defaultValueAnnotation", $asm13.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "actualTypeAnnotationName", $asm13.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "isDictionaryAnnotationName", $asm13.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "isValueTypeName", $asm13.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:false, Public:false}, "Schemas", $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Property({Static:false, Public:false}, "XmlDoc", $asm13.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:true , Public:false}, "ISerializableSequence", $asm13.TypeRef("System.Xml.Schema.XmlSchemaSequence"));

    $.Property({Static:true , Public:false}, "ISerializableWildcardElement", $asm13.TypeRef("System.Xml.Schema.XmlSchemaAny"));

    $.Property({Static:true , Public:false}, "AnytypeQualifiedName", $asm13.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "StringQualifiedName", $asm13.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "DefaultEnumBaseTypeName", $asm13.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "EnumerationValueAnnotationName", $asm13.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "SurrogateDataAnnotationName", $asm13.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "DefaultValueAnnotation", $asm13.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "ActualTypeAnnotationName", $asm13.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "IsDictionaryAnnotationName", $asm13.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "IsValueTypeName", $asm13.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:true , Public:false}, "ISerializableFactoryTypeAttribute", $asm13.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.Property({Static:true , Public:false}, "RefAttribute", $asm13.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.Property({Static:true , Public:false}, "IdAttribute", $asm13.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SchemaObjectInfo */ 

(function SchemaObjectInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.SchemaObjectInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaElement"), 
          $asm13.TypeRef("System.Xml.Schema.XmlSchema"), $asm09.TypeRef("System.Collections.Generic.List`1", [$asm13.TypeRef("System.Xml.Schema.XmlSchemaType")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "type", $asm13.TypeRef("System.Xml.Schema.XmlSchemaType")); 
    $.Field({Static:false, Public:false}, "element", $asm13.TypeRef("System.Xml.Schema.XmlSchemaElement")); 
    $.Field({Static:false, Public:false}, "schema", $asm13.TypeRef("System.Xml.Schema.XmlSchema")); 
    $.Field({Static:false, Public:false}, "knownTypes", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm13.TypeRef("System.Xml.Schema.XmlSchemaType")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SchemaHelper */ 

(function SchemaHelper$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Serialization.SchemaHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "AddElementForm", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm13.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddSchemaImport", 
      new JSIL.MethodSignature(null, [$.String, $asm13.TypeRef("System.Xml.Schema.XmlSchema")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSchema", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetGlobalElementDeclaration", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm13.TypeRef("System.Xml.XmlQualifiedName"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchema", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaElement", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaElement"), [
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm13.TypeRef("System.Xml.XmlQualifiedName"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm13.TypeRef("System.Xml.Schema.XmlSchema")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaElement", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.SchemaObjectInfo")]), $asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaType"), [
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm13.TypeRef("System.Xml.XmlQualifiedName"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm13.TypeRef("System.Xml.Schema.XmlSchema")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.SchemaObjectInfo")]), $asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaWithGlobalElementDeclaration", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchema"), [$asm13.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaWithType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.Schema.XmlSchema"), [
          $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.SchemaObjectInfo")]), $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), 
          $asm13.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NamespacesEqual", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.SchemaImporter */ 

(function SchemaImporter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.SchemaImporter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm13.TypeRef("System.Xml.XmlQualifiedName")]), 
          $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm13.TypeRef("System.Xml.Schema.XmlSchemaElement")]), $jsilcore.TypeRef("System.Array", [$asm13.TypeRef("System.Xml.XmlQualifiedName")]), 
          $asm11.TypeRef("System.Runtime.Serialization.DataContractSet"), $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "AddDataContract", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckComplexType", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfCollection", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaSequence")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfElementUsesUnsupportedConstructs", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfEnum", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeRestriction")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfISerializable", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckISerializableBase", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaSequence"), 
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompileSchemaSet", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaSet")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateRedefineList", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm13.TypeRef("System.Xml.Schema.XmlSchemaRedefine")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateSchemaObjects", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.SchemaObjectInfo")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RedefineList", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm13.TypeRef("System.Xml.Schema.XmlSchemaRedefine")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaObjects", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.SchemaObjectInfo")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBaseTypeName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [$asm13.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetGenericInfoForDataMember", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.GenericInfo"), [$asm11.TypeRef("System.Runtime.Serialization.DataMember")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInnerText", 
      new JSIL.MethodSignature($.String, [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.XmlElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Import", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ImportActualType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), $asm13.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm13.TypeRef("System.Xml.XmlQualifiedName")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ImportAnnotation", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlElement"), [$asm13.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), $asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAnonymousElement", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm13.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAnonymousGlobalElement", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm13.TypeRef("System.Xml.XmlQualifiedName"), 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ImportAttributes", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), 
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportBaseContract", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ImportClass", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), [
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaSequence"), 
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), 
          $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ImportClassMember", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportCollection", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract"), [
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaSequence"), 
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), 
          $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ImportDataContractExtension", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportEmitDefaultValue", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Boolean]), [$asm13.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"), $asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportEnum", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.EnumDataContract"), [
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeRestriction"), 
          $.Boolean, $asm13.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ImportFlagsEnum", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.EnumDataContract"), [
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeList"), 
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportGenericInfo", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ImportGenericInfo", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.GenericInfo"), [$asm13.TypeRef("System.Xml.XmlElement"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportISerializable", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), [
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaSequence"), 
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), 
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ImportKnownTypes", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportKnownTypesForObject", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportSimpleTypeRestriction", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeRestriction")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportSpecialXmlDataType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlDataContract"), [$asm13.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportSurrogateData", 
      new JSIL.MethodSignature($.Object, [
          $asm13.TypeRef("System.Xml.XmlElement"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportTopLevelElement", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm13.TypeRef("System.Xml.Schema.XmlSchemaType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm13.TypeRef("System.Xml.XmlQualifiedName"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaParticle"), 
          $asm13.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), 
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportXmlDataType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaType"), 
          $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IsDictionary", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsISerializableDerived", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaSequence")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsObjectContract", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValueType", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaAnnotation")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsXmlAnyElementType", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsXmlAnyType", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaComplexType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveFailedContract", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveOptionalUnknownSerializationElements", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ThrowArrayTypeCannotBeImportedException", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowEnumTypeCannotBeImportedException", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowISerializableTypeCannotBeImportedException", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowTypeCannotBeImportedException", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowTypeCannotBeImportedException", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryCheckIfAttribute", 
      new JSIL.MethodSignature($.Boolean, [
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm13.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), 
          $asm13.TypeRef("System.Xml.XmlQualifiedName"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.Field({Static:false, Public:false}, "dataContractSet", $asm11.TypeRef("System.Runtime.Serialization.DataContractSet")); 
    $.Field({Static:false, Public:false}, "schemaSet", $asm13.TypeRef("System.Xml.Schema.XmlSchemaSet")); 
    $.Field({Static:false, Public:false}, "typeNames", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm13.TypeRef("System.Xml.XmlQualifiedName")])); 
    $.Field({Static:false, Public:false}, "elements", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm13.TypeRef("System.Xml.Schema.XmlSchemaElement")])); 
    $.Field({Static:false, Public:false}, "elementTypeNames", $jsilcore.TypeRef("System.Array", [$asm13.TypeRef("System.Xml.XmlQualifiedName")])); 
    $.Field({Static:false, Public:false}, "importXmlDataType", $.Boolean); 
    $.Field({Static:false, Public:false}, "schemaObjects", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.SchemaObjectInfo")])); 
    $.Field({Static:false, Public:false}, "redefineList", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm13.TypeRef("System.Xml.Schema.XmlSchemaRedefine")])); 
    $.Field({Static:false, Public:false}, "needToImportKnownTypesForObject", $.Boolean); 
    $.Field({Static:true , Public:false}, "serializationSchemaElements", $asm09.TypeRef("System.Collections.Hashtable"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:false, Public:false}, "SchemaObjects", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.SchemaObjectInfo")]));

    $.Property({Static:false, Public:false}, "RedefineList", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm13.TypeRef("System.Xml.Schema.XmlSchemaRedefine")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.TypeInformation */ 

(function TypeInformation$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.TypeInformation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_AssemblyString", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_FullTypeName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "fullTypeName", $.String); 
    $.Field({Static:false, Public:false}, "assemblyString", $.String); 
    $.Property({Static:false, Public:false}, "FullTypeName", $.String);

    $.Property({Static:false, Public:false}, "AssemblyString", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Runtime.Serialization.Configuration");
/* class System.Runtime.Serialization.Configuration.ConfigurationStrings */ 

(function ConfigurationStrings$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Serialization.Configuration.ConfigurationStrings", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "get_DataContractSerializerSectionPath", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "GetSectionPath", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "SectionGroupName", "system.runtime.serialization"); 
    $.Constant({Static:true , Public:false}, "DefaultCollectionName", ""); 
    $.Constant({Static:true , Public:false}, "DeclaredTypes", "declaredTypes"); 
    $.Constant({Static:true , Public:false}, "Index", "index"); 
    $.Constant({Static:true , Public:false}, "Parameter", "parameter"); 
    $.Constant({Static:true , Public:false}, "Type", "type"); 
    $.Constant({Static:true , Public:false}, "DataContractSerializerSectionName", "dataContractSerializer"); 
    $.Property({Static:true , Public:false}, "DataContractSerializerSectionPath", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Configuration.DeclaredTypeElement */ 

(function DeclaredTypeElement$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0C.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Runtime.Serialization.Configuration.DeclaredTypeElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KnownTypes", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Configuration.TypeElementCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm0C.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PostDeserialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "properties", $asm0C.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Property({Static:false, Public:true }, "KnownTypes", $asm11.TypeRef("System.Runtime.Serialization.Configuration.TypeElementCollection"))
      .Attribute($asm0C.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:true }, "Type", $.String)
      .Attribute($asm0C.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; })
      .Attribute($asm11.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeValidatorAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0C.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection */ 

(function DeclaredTypeElementCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0C.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      new JSIL.MethodSignature($asm0C.TypeRef("System.Configuration.ConfigurationElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElement"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElement"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm0C.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElement")], [])
    );

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElement"));

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElement"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0C.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm11.System.Runtime.Serialization.Configuration.DeclaredTypeElement.__Type__]; });

})();

/* class System.Runtime.Serialization.Configuration.DeclaredTypeValidator */ 

(function DeclaredTypeValidator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0C.TypeRef("System.Configuration.ConfigurationValidatorBase"), 
      Name: "System.Runtime.Serialization.Configuration.DeclaredTypeValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Configuration.DeclaredTypeValidatorAttribute */ 

(function DeclaredTypeValidatorAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0C.TypeRef("System.Configuration.ConfigurationValidatorAttribute"), 
      Name: "System.Runtime.Serialization.Configuration.DeclaredTypeValidatorAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValidatorInstance", 
      new JSIL.MethodSignature($asm0C.TypeRef("System.Configuration.ConfigurationValidatorBase"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ValidatorInstance", $asm0C.TypeRef("System.Configuration.ConfigurationValidatorBase"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.Property]; });

})();

/* class System.Runtime.Serialization.Configuration.ParameterElement */ 

(function ParameterElement$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0C.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Runtime.Serialization.Configuration.ParameterElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Index", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Configuration.ParameterElementCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm0C.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PostDeserialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "PreSerialize", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Index", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "identity", $asm09.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false}, "properties", $asm0C.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Property({Static:false, Public:true }, "Index", $.Int32)
      .Attribute($asm0C.TypeRef("System.Configuration.IntegerValidatorAttribute"))
      .Attribute($asm0C.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["index"]; });

    $.Property({Static:false, Public:true }, "Parameters", $asm11.TypeRef("System.Runtime.Serialization.Configuration.ParameterElementCollection"))
      .Attribute($asm0C.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:true }, "Type", $.String)
      .Attribute($asm0C.TypeRef("System.Configuration.StringValidatorAttribute"))
      .Attribute($asm0C.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0C.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Configuration.ParameterElementCollection */ 

(function ParameterElementCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0C.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Runtime.Serialization.Configuration.ParameterElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.Configuration.ParameterElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      new JSIL.MethodSignature($asm0C.TypeRef("System.Configuration.ConfigurationElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CollectionType", 
      new JSIL.MethodSignature($asm0C.TypeRef("System.Configuration.ConfigurationElementCollectionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Configuration.ParameterElement"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm0C.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Runtime.Serialization.Configuration.ParameterElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.Configuration.ParameterElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Runtime.Serialization.Configuration.ParameterElement")], [])
    );

    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Runtime.Serialization.Configuration.ParameterElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "CollectionType", $asm0C.TypeRef("System.Configuration.ConfigurationElementCollectionType"));

    $.Property({Static:false, Public:false, Virtual:true }, "ElementName", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm0C.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm11.System.Runtime.Serialization.Configuration.ParameterElement.__Type__]; });

})();

/* class System.Runtime.Serialization.Configuration.DataContractSerializerSection */ 

(function DataContractSerializerSection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0C.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Runtime.Serialization.Configuration.DataContractSerializerSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_DeclaredTypes", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm0C.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsafeGetSection", 
      new JSIL.MethodSignature($.Type, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "properties", $asm0C.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0C.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "DeclaredTypes", $asm11.TypeRef("System.Runtime.Serialization.Configuration.DeclaredTypeElementCollection"))
      .Attribute($asm0C.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["declaredTypes"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Configuration.TypeElement */ 

(function TypeElement$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0C.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Runtime.Serialization.Configuration.TypeElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Index", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Configuration.ParameterElementCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm0C.TypeRef("System.Configuration.ConfigurationPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [
          $.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]), 
          $.String, $.Int32, 
          $asm11.TypeRef("System.Runtime.Serialization.Configuration.ParameterElementCollection")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [$asm0C.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Index", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "properties", $asm0C.TypeRef("System.Configuration.ConfigurationPropertyCollection")); 
    $.Field({Static:false, Public:false}, "key", $.String); 
    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm0C.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:false}, "Key", $.String);

    $.Property({Static:false, Public:true }, "Parameters", $asm11.TypeRef("System.Runtime.Serialization.Configuration.ParameterElementCollection"))
      .Attribute($asm0C.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:true }, "Type", $.String)
      .Attribute($asm0C.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; })
      .Attribute($asm0C.TypeRef("System.Configuration.StringValidatorAttribute"));

    $.Property({Static:false, Public:true }, "Index", $.Int32)
      .Attribute($asm0C.TypeRef("System.Configuration.IntegerValidatorAttribute"))
      .Attribute($asm0C.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["index"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Configuration.SerializationSectionGroup */ 

(function SerializationSectionGroup$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0C.TypeRef("System.Configuration.ConfigurationSectionGroup"), 
      Name: "System.Runtime.Serialization.Configuration.SerializationSectionGroup", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_DataContractSerializer", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Configuration.DataContractSerializerSection"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSectionGroup", 
      new JSIL.MethodSignature($.Type, [$asm0C.TypeRef("System.Configuration.Configuration")], [])
    );

    $.Property({Static:false, Public:true }, "DataContractSerializer", $asm11.TypeRef("System.Runtime.Serialization.Configuration.DataContractSerializerSection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Configuration.TypeElementCollection */ 

(function TypeElementCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0C.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Runtime.Serialization.Configuration.TypeElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.Configuration.TypeElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      new JSIL.MethodSignature($asm0C.TypeRef("System.Configuration.ConfigurationElement"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CollectionType", 
      new JSIL.MethodSignature($asm0C.TypeRef("System.Configuration.ConfigurationElementCollectionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Configuration.TypeElement"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm0C.TypeRef("System.Configuration.ConfigurationElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Runtime.Serialization.Configuration.TypeElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.Configuration.TypeElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm11.TypeRef("System.Runtime.Serialization.Configuration.TypeElement")], [])
    );

    $.Constant({Static:true , Public:false}, "KnownTypeConfig", "knownType"); 
    $.Property({Static:false, Public:true }, "Item", $asm11.TypeRef("System.Runtime.Serialization.Configuration.TypeElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "CollectionType", $asm0C.TypeRef("System.Configuration.ConfigurationElementCollectionType"));

    $.Property({Static:false, Public:false, Virtual:true }, "ElementName", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0C.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm11.System.Runtime.Serialization.Configuration.TypeElement.__Type__]; })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

JSIL.DeclareNamespace("System.Text");
/* class System.Text.Base64Encoding */ 

(function Base64Encoding$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Text.Encoding"), 
      Name: "System.Text.Base64Encoding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByteCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMaxByteCount", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMaxCharCount", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidLeadBytes", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidTailBytes", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32], [])
    );

    $.Field({Static:true , Public:false}, "char2val", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false}, "val2char", $.String, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"); 
    $.Field({Static:true , Public:false}, "val2byte", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Text.BinHexEncoding */ 

(function BinHexEncoding$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Text.Encoding"), 
      Name: "System.Text.BinHexEncoding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByteCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMaxByteCount", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMaxCharCount", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.Field({Static:true , Public:false}, "char2val", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false}, "val2char", $.String, "0123456789ABCDEF"); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Text.SurrogateChar */ 

(function SurrogateChar$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Text.SurrogateChar", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Char", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HighChar", 
      new JSIL.MethodSignature($.Char, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_LowChar", 
      new JSIL.MethodSignature($.Char, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Constant({Static:true , Public:true }, "MinValue", 65536); 
    $.Constant({Static:true , Public:true }, "MaxValue", 1114111); 
    $.Field({Static:false, Public:false}, "lowChar", $.Char); 
    $.Field({Static:false, Public:false}, "highChar", $.Char); 
    $.Constant({Static:true , Public:false}, "surHighMin", "\ud800"); 
    $.Constant({Static:true , Public:false}, "surHighMax", "\udbff"); 
    $.Constant({Static:true , Public:false}, "surLowMin", "\udc00"); 
    $.Constant({Static:true , Public:false}, "surLowMax", "\udfff"); 
    $.Property({Static:false, Public:true }, "LowChar", $.Char);

    $.Property({Static:false, Public:true }, "HighChar", $.Char);

    $.Property({Static:false, Public:true }, "Char", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Xml");
/* class System.Xml.ArrayHelper`2 */ 

(function ArrayHelper$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.ArrayHelper`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TArgument", "TArray"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ReadArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TArray", "System.Xml.ArrayHelper`2")]), [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), new JSIL.GenericParameter("TArgument", "System.Xml.ArrayHelper`2"), 
          new JSIL.GenericParameter("TArgument", "System.Xml.ArrayHelper`2"), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), new JSIL.GenericParameter("TArgument", "System.Xml.ArrayHelper`2"), 
          new JSIL.GenericParameter("TArgument", "System.Xml.ArrayHelper`2"), $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TArray", "System.Xml.ArrayHelper`2")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          new JSIL.GenericParameter("TArgument", "System.Xml.ArrayHelper`2"), new JSIL.GenericParameter("TArgument", "System.Xml.ArrayHelper`2"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReader")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          new JSIL.GenericParameter("TArgument", "System.Xml.ArrayHelper`2"), new JSIL.GenericParameter("TArgument", "System.Xml.ArrayHelper`2"), 
          $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TArray", "System.Xml.ArrayHelper`2")]), $.Int32, 
          $.Int32
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.BooleanArrayHelperWithString */ 

(function BooleanArrayHelperWithString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.Boolean")]), 
      Name: "System.Xml.BooleanArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.BooleanArrayHelperWithDictionaryString */ 

(function BooleanArrayHelperWithDictionaryString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm09.TypeRef("System.Boolean")]), 
      Name: "System.Xml.BooleanArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Int16ArrayHelperWithString */ 

(function Int16ArrayHelperWithString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.Int16")]), 
      Name: "System.Xml.Int16ArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Int16ArrayHelperWithDictionaryString */ 

(function Int16ArrayHelperWithDictionaryString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm09.TypeRef("System.Int16")]), 
      Name: "System.Xml.Int16ArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Int32ArrayHelperWithString */ 

(function Int32ArrayHelperWithString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Xml.Int32ArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Int32ArrayHelperWithDictionaryString */ 

(function Int32ArrayHelperWithDictionaryString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Xml.Int32ArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Int64ArrayHelperWithString */ 

(function Int64ArrayHelperWithString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.Int64")]), 
      Name: "System.Xml.Int64ArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int64]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Int64]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Int64ArrayHelperWithDictionaryString */ 

(function Int64ArrayHelperWithDictionaryString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm09.TypeRef("System.Int64")]), 
      Name: "System.Xml.Int64ArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int64]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Int64]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.SingleArrayHelperWithString */ 

(function SingleArrayHelperWithString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.Single")]), 
      Name: "System.Xml.SingleArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Single]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.SingleArrayHelperWithDictionaryString */ 

(function SingleArrayHelperWithDictionaryString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm09.TypeRef("System.Single")]), 
      Name: "System.Xml.SingleArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Single]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DoubleArrayHelperWithString */ 

(function DoubleArrayHelperWithString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.Double")]), 
      Name: "System.Xml.DoubleArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Double]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Double]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DoubleArrayHelperWithDictionaryString */ 

(function DoubleArrayHelperWithDictionaryString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm09.TypeRef("System.Double")]), 
      Name: "System.Xml.DoubleArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Double]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Double]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DecimalArrayHelperWithString */ 

(function DecimalArrayHelperWithString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.Decimal")]), 
      Name: "System.Xml.DecimalArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DecimalArrayHelperWithDictionaryString */ 

(function DecimalArrayHelperWithDictionaryString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm09.TypeRef("System.Decimal")]), 
      Name: "System.Xml.DecimalArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DateTimeArrayHelperWithString */ 

(function DateTimeArrayHelperWithString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.DateTime")]), 
      Name: "System.Xml.DateTimeArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DateTimeArrayHelperWithDictionaryString */ 

(function DateTimeArrayHelperWithDictionaryString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm09.TypeRef("System.DateTime")]), 
      Name: "System.Xml.DateTimeArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.GuidArrayHelperWithString */ 

(function GuidArrayHelperWithString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.Guid")]), 
      Name: "System.Xml.GuidArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.GuidArrayHelperWithDictionaryString */ 

(function GuidArrayHelperWithDictionaryString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm09.TypeRef("System.Guid")]), 
      Name: "System.Xml.GuidArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.TimeSpanArrayHelperWithString */ 

(function TimeSpanArrayHelperWithString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.TimeSpan")]), 
      Name: "System.Xml.TimeSpanArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.TimeSpanArrayHelperWithDictionaryString */ 

(function TimeSpanArrayHelperWithDictionaryString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm09.TypeRef("System.TimeSpan")]), 
      Name: "System.Xml.TimeSpanArrayHelperWithDictionaryString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xml.IFragmentCapableXmlDictionaryWriter */ 

JSIL.MakeInterface(
  "System.Xml.IFragmentCapableXmlDictionaryWriter", true, [], function ($) {
    $.Method({}, "get_CanFragment", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "StartFragment", new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $.Boolean], []));
    $.Method({}, "EndFragment", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "WriteFragment", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], []));
    $.Property({}, "CanFragment");
  }, []);

/* interface System.Xml.IStreamProvider */ 

JSIL.MakeInterface(
  "System.Xml.IStreamProvider", true, [], function ($) {
    $.Method({}, "GetStream", new JSIL.MethodSignature($asm09.TypeRef("System.IO.Stream"), [], []));
    $.Method({}, "ReleaseStream", new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream")], []));
  }, []);

/* interface System.Xml.IXmlDictionary */ 

JSIL.MakeInterface(
  "System.Xml.IXmlDictionary", true, [], function ($) {
    $.Method({}, "TryLookup", new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], []));
    $.Method({}, "TryLookup", new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], []));
    $.Method({}, "TryLookup", new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], []));
  }, []);

/* enum System.Xml.XmlBinaryNodeType */ 

JSIL.MakeEnum(
  "System.Xml.XmlBinaryNodeType", false, {
    EndElement: 1, 
    Comment: 2, 
    Array: 3, 
    ShortAttribute: 4, 
    MinAttribute: 4, 
    Attribute: 5, 
    ShortDictionaryAttribute: 6, 
    DictionaryAttribute: 7, 
    ShortXmlnsAttribute: 8, 
    XmlnsAttribute: 9, 
    ShortDictionaryXmlnsAttribute: 10, 
    DictionaryXmlnsAttribute: 11, 
    PrefixDictionaryAttributeA: 12, 
    PrefixDictionaryAttributeB: 13, 
    PrefixDictionaryAttributeC: 14, 
    PrefixDictionaryAttributeD: 15, 
    PrefixDictionaryAttributeE: 16, 
    PrefixDictionaryAttributeF: 17, 
    PrefixDictionaryAttributeG: 18, 
    PrefixDictionaryAttributeH: 19, 
    PrefixDictionaryAttributeI: 20, 
    PrefixDictionaryAttributeJ: 21, 
    PrefixDictionaryAttributeK: 22, 
    PrefixDictionaryAttributeL: 23, 
    PrefixDictionaryAttributeM: 24, 
    PrefixDictionaryAttributeN: 25, 
    PrefixDictionaryAttributeO: 26, 
    PrefixDictionaryAttributeP: 27, 
    PrefixDictionaryAttributeQ: 28, 
    PrefixDictionaryAttributeR: 29, 
    PrefixDictionaryAttributeS: 30, 
    PrefixDictionaryAttributeT: 31, 
    PrefixDictionaryAttributeU: 32, 
    PrefixDictionaryAttributeV: 33, 
    PrefixDictionaryAttributeW: 34, 
    PrefixDictionaryAttributeX: 35, 
    PrefixDictionaryAttributeY: 36, 
    PrefixDictionaryAttributeZ: 37, 
    PrefixAttributeA: 38, 
    PrefixAttributeB: 39, 
    PrefixAttributeC: 40, 
    PrefixAttributeD: 41, 
    PrefixAttributeE: 42, 
    PrefixAttributeF: 43, 
    PrefixAttributeG: 44, 
    PrefixAttributeH: 45, 
    PrefixAttributeI: 46, 
    PrefixAttributeJ: 47, 
    PrefixAttributeK: 48, 
    PrefixAttributeL: 49, 
    PrefixAttributeM: 50, 
    PrefixAttributeN: 51, 
    PrefixAttributeO: 52, 
    PrefixAttributeP: 53, 
    PrefixAttributeQ: 54, 
    PrefixAttributeR: 55, 
    PrefixAttributeS: 56, 
    PrefixAttributeT: 57, 
    PrefixAttributeU: 58, 
    PrefixAttributeV: 59, 
    PrefixAttributeW: 60, 
    PrefixAttributeX: 61, 
    PrefixAttributeY: 62, 
    MaxAttribute: 63, 
    PrefixAttributeZ: 63, 
    MinElement: 64, 
    ShortElement: 64, 
    Element: 65, 
    ShortDictionaryElement: 66, 
    DictionaryElement: 67, 
    PrefixDictionaryElementA: 68, 
    PrefixDictionaryElementB: 69, 
    PrefixDictionaryElementC: 70, 
    PrefixDictionaryElementD: 71, 
    PrefixDictionaryElementE: 72, 
    PrefixDictionaryElementF: 73, 
    PrefixDictionaryElementG: 74, 
    PrefixDictionaryElementH: 75, 
    PrefixDictionaryElementI: 76, 
    PrefixDictionaryElementJ: 77, 
    PrefixDictionaryElementK: 78, 
    PrefixDictionaryElementL: 79, 
    PrefixDictionaryElementM: 80, 
    PrefixDictionaryElementN: 81, 
    PrefixDictionaryElementO: 82, 
    PrefixDictionaryElementP: 83, 
    PrefixDictionaryElementQ: 84, 
    PrefixDictionaryElementR: 85, 
    PrefixDictionaryElementS: 86, 
    PrefixDictionaryElementT: 87, 
    PrefixDictionaryElementU: 88, 
    PrefixDictionaryElementV: 89, 
    PrefixDictionaryElementW: 90, 
    PrefixDictionaryElementX: 91, 
    PrefixDictionaryElementY: 92, 
    PrefixDictionaryElementZ: 93, 
    PrefixElementA: 94, 
    PrefixElementB: 95, 
    PrefixElementC: 96, 
    PrefixElementD: 97, 
    PrefixElementE: 98, 
    PrefixElementF: 99, 
    PrefixElementG: 100, 
    PrefixElementH: 101, 
    PrefixElementI: 102, 
    PrefixElementJ: 103, 
    PrefixElementK: 104, 
    PrefixElementL: 105, 
    PrefixElementM: 106, 
    PrefixElementN: 107, 
    PrefixElementO: 108, 
    PrefixElementP: 109, 
    PrefixElementQ: 110, 
    PrefixElementR: 111, 
    PrefixElementS: 112, 
    PrefixElementT: 113, 
    PrefixElementU: 114, 
    PrefixElementV: 115, 
    PrefixElementW: 116, 
    PrefixElementX: 117, 
    PrefixElementY: 118, 
    MaxElement: 119, 
    PrefixElementZ: 119, 
    MinText: 128, 
    ZeroText: 128, 
    ZeroTextWithEndElement: 129, 
    OneText: 130, 
    OneTextWithEndElement: 131, 
    FalseText: 132, 
    FalseTextWithEndElement: 133, 
    TrueText: 134, 
    TrueTextWithEndElement: 135, 
    Int8Text: 136, 
    Int8TextWithEndElement: 137, 
    Int16Text: 138, 
    Int16TextWithEndElement: 139, 
    Int32Text: 140, 
    Int32TextWithEndElement: 141, 
    Int64Text: 142, 
    Int64TextWithEndElement: 143, 
    FloatText: 144, 
    FloatTextWithEndElement: 145, 
    DoubleText: 146, 
    DoubleTextWithEndElement: 147, 
    DecimalText: 148, 
    DecimalTextWithEndElement: 149, 
    DateTimeText: 150, 
    DateTimeTextWithEndElement: 151, 
    Chars8Text: 152, 
    Chars8TextWithEndElement: 153, 
    Chars16Text: 154, 
    Chars16TextWithEndElement: 155, 
    Chars32Text: 156, 
    Chars32TextWithEndElement: 157, 
    Bytes8Text: 158, 
    Bytes8TextWithEndElement: 159, 
    Bytes16Text: 160, 
    Bytes16TextWithEndElement: 161, 
    Bytes32Text: 162, 
    Bytes32TextWithEndElement: 163, 
    StartListText: 164, 
    StartListTextWithEndElement: 165, 
    EndListText: 166, 
    EndListTextWithEndElement: 167, 
    EmptyText: 168, 
    EmptyTextWithEndElement: 169, 
    DictionaryText: 170, 
    DictionaryTextWithEndElement: 171, 
    UniqueIdText: 172, 
    UniqueIdTextWithEndElement: 173, 
    TimeSpanText: 174, 
    TimeSpanTextWithEndElement: 175, 
    GuidText: 176, 
    GuidTextWithEndElement: 177, 
    UInt64Text: 178, 
    UInt64TextWithEndElement: 179, 
    BoolText: 180, 
    BoolTextWithEndElement: 181, 
    UnicodeChars8Text: 182, 
    UnicodeChars8TextWithEndElement: 183, 
    UnicodeChars16Text: 184, 
    UnicodeChars16TextWithEndElement: 185, 
    UnicodeChars32Text: 186, 
    UnicodeChars32TextWithEndElement: 187, 
    QNameDictionaryText: 188, 
    QNameDictionaryTextWithEndElement: 189, 
    MaxText: 189
  }, false
);

/* class System.Xml.XmlBinaryReaderSession */ 

(function XmlBinaryReaderSession$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBinaryReaderSession", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [$.Int32, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.Field({Static:false, Public:false}, "strings", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])); 
    $.Field({Static:false, Public:false}, "stringDict", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm11.TypeRef("System.Xml.XmlDictionaryString")])); 
    $.Constant({Static:true , Public:false}, "MaxArrayEntries", 2048); 
    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Xml.IXmlDictionary")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xml.IXmlBinaryWriterInitializer */ 

JSIL.MakeInterface(
  "System.Xml.IXmlBinaryWriterInitializer", true, [], function ($) {
    $.Method({}, "SetOutput", new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Xml.IXmlDictionary"), 
          $asm11.TypeRef("System.Xml.XmlBinaryWriterSession"), $.Boolean
        ], []));
  }, []);

/* class System.Xml.XmlNodeWriter */ 

(function XmlNodeWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlNodeWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Null", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64Text", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBoolText", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDateTimeText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDecimalText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDeclaration", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDoubleText", 
      new JSIL.MethodSignature(null, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndListText", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndStartElement", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFloatText", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteGuidText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt32Text", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt64Text", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteListSeparator", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartListText", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTimeSpanText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUInt64Text", 
      new JSIL.MethodSignature(null, [$.UInt64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUniqueIdText", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.UniqueId")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.Field({Static:true , Public:false}, "nullNodeWriter", $.Type); 
    $.Property({Static:true , Public:true }, "Null", $.Type);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlNodeWriter/XmlNullNodeWriter */ 

(function XmlNullNodeWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlNodeWriter"), 
      Name: "System.Xml.XmlNodeWriter/XmlNullNodeWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64Text", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBoolText", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDateTimeText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDecimalText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDeclaration", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDoubleText", 
      new JSIL.MethodSignature(null, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndListText", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndStartElement", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFloatText", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteGuidText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt32Text", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt64Text", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteListSeparator", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartListText", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTimeSpanText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUInt64Text", 
      new JSIL.MethodSignature(null, [$.UInt64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUniqueIdText", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.UniqueId")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlStreamNodeWriter */ 

(function XmlStreamNodeWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlNodeWriter"), 
      Name: "System.Xml.XmlStreamNodeWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Advance", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureByte", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FlushBuffer", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BufferOffset", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Position", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Stream", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IO.Stream"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_StreamBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "GetBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Stream", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "SetOutput", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $.Boolean, 
          $asm09.TypeRef("System.Text.Encoding")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnsafeGetUnicodeChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeGetUTF8Chars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeGetUTF8Length", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeWriteBytes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeWriteUnicodeChars", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeWriteUTF8Chars", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteByte", 
      new JSIL.MethodSignature(null, [$.Byte], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteByte", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBytes", 
      new JSIL.MethodSignature(null, [$.Byte, $.Byte], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBytes", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteBytes", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUTF8Char", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteUTF8Chars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUTF8Chars", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "stream", $asm09.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "offset", $.Int32); 
    $.Field({Static:false, Public:false}, "ownsStream", $.Boolean); 
    $.Field({Static:false, Public:false}, "encoding", $asm09.TypeRef("System.Text.Encoding")); 
    $.Field({Static:true , Public:false}, "UTF8Encoding", $asm09.TypeRef("System.Text.UTF8Encoding")); 
    $.Constant({Static:true , Public:false}, "bufferLength", 512); 
    $.Constant({Static:true , Public:false}, "maxEntityLength", 32); 
    $.Constant({Static:true , Public:false}, "maxBytesPerChar", 3); 
    $.Property({Static:false, Public:true }, "Stream", $asm09.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:true }, "StreamBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "BufferOffset", $.Int32);

    $.Property({Static:false, Public:true }, "Position", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBinaryNodeWriter */ 

(function XmlBinaryNodeWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlStreamNodeWriter"), 
      Name: "System.Xml.XmlBinaryNodeWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FlushBuffer", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTextNodeBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOutput", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Xml.IXmlDictionary"), 
          $asm11.TypeRef("System.Xml.XmlBinaryWriterSession"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetKey", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "UnsafeWriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlBinaryNodeType"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeWriteArray", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeWriteName", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeWriteText", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayInfo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBinaryNodeType"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteArrayNode", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64Text", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBoolText", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteDateTimeArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDateTimeText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDecimalText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Decimal")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDeclaration", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDictionaryString", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDoubleText", 
      new JSIL.MethodSignature(null, [$.Double], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEmptyText", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndListText", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndStartElement", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFloatText", 
      new JSIL.MethodSignature(null, [$.Single], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteGuidArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteGuidText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt32Text", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteInt64", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt64Text", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteListSeparator", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMultiByteInt32", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteName", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBinaryNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePrefixNode", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBinaryNodeType"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartListText", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTextNode", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBinaryNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTextNodeWithInt64", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBinaryNodeType"), $.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTextNodeWithLength", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBinaryNodeType"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTimeSpanArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTimeSpanText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUInt64Text", 
      new JSIL.MethodSignature(null, [$.UInt64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUniqueIdText", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.UniqueId")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WroteAttributeValue", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "dictionary", $asm11.TypeRef("System.Xml.IXmlDictionary")); 
    $.Field({Static:false, Public:false}, "session", $asm11.TypeRef("System.Xml.XmlBinaryWriterSession")); 
    $.Field({Static:false, Public:false}, "inAttribute", $.Boolean); 
    $.Field({Static:false, Public:false}, "inList", $.Boolean); 
    $.Field({Static:false, Public:false}, "wroteAttributeValue", $.Boolean); 
    $.Field({Static:false, Public:false}, "attributeValue", $asm11.TypeRef("System.Xml.XmlBinaryNodeWriter/AttributeValue")); 
    $.Field({Static:false, Public:false}, "textNodeOffset", $.Int32); 
    $.Constant({Static:true , Public:false}, "maxBytesPerChar", 3); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlBinaryNodeWriter/AttributeValue */ 

(function AttributeValue$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlBinaryNodeWriter/AttributeValue", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteBase64Text", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteText", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBinaryNodeWriter")], [])
    );

    $.Field({Static:false, Public:false}, "captureText", $.String); 
    $.Field({Static:false, Public:false}, "captureXText", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:false, Public:false}, "captureStream", $asm09.TypeRef("System.IO.MemoryStream")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlDictionaryWriter */ 

(function XmlDictionaryWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Xml.XmlWriter"), 
      Name: "System.Xml.XmlDictionaryWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "CheckArray", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryWriter", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.IO.Stream")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryWriter", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Xml.IXmlDictionary")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryWriter", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Xml.IXmlDictionary"), 
          $asm11.TypeRef("System.Xml.XmlBinaryWriterSession")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryWriter", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Xml.IXmlDictionary"), 
          $asm11.TypeRef("System.Xml.XmlBinaryWriterSession"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateDictionaryWriter", 
      new JSIL.MethodSignature($.Type, [$asm13.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomWriter", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding"), 
          $.Int32, $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomWriter", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding"), 
          $.Int32, $.String, 
          $.String, $.String, 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateTextWriter", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateTextWriter", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateTextWriter", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndCanonicalization", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanCanonicalize", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "StartCanonicalization", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int64]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int64]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Double]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Double]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayNode", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $.String, 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayNode", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayNode", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteAttributeString", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "WriteAttributeString", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementNode", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteElementString", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "WriteElementString", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTextNode", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.IStreamProvider")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.UniqueId")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlAttribute", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CanCanonicalize", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlDictionaryWriter/XmlWrappedWriter */ 

(function XmlWrappedWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), 
      Name: "System.Xml.XmlDictionaryWriter/XmlWrappedWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.WriteState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAttributes", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNmToken", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.Field({Static:false, Public:false}, "writer", $asm13.TypeRef("System.Xml.XmlWriter")); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Field({Static:false, Public:false}, "prefix", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm13.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm13.TypeRef("System.Xml.XmlSpace"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseWriter */ 

(function XmlBaseWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), 
      Name: "System.Xml.XmlBaseWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AutoComplete", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.WriteState")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSigningNodeWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlSigningNodeWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndArray", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndCanonicalization", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndComment", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndFragment", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndStartElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterScope", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseWriter/Element"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitScope", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushBase64", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushTrailBytes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GeneratePrefix", 
      new JSIL.MethodSignature($.String, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BinHexEncoding", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Text.BinHexEncoding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanCanonicalize", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanFragment", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsClosed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceBoundary", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Signing", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.WriteState"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetQualifiedNamePrefix", 
      new JSIL.MethodSignature($.String, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NamespaceBoundary", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetOutput", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlStreamNodeWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SignScope", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlCanonicalWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartArray", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $.String, 
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "StartCanonicalization", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartComment", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "StartContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartContent", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartContent", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartContent", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartElement", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $.String, 
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "StartFragment", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowClosed", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyWhitespace", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyWhitespace", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFragment", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNmToken", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePrimitiveValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.UniqueId")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      new JSIL.MethodSignature(null, [$.UInt64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Array")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.Field({Static:false, Public:false}, "writer", $asm11.TypeRef("System.Xml.XmlNodeWriter")); 
    $.Field({Static:false, Public:false}, "nsMgr", $asm11.TypeRef("System.Xml.XmlBaseWriter/NamespaceManager")); 
    $.Field({Static:false, Public:false}, "elements", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlBaseWriter/Element")])); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Field({Static:false, Public:false}, "attributeLocalName", $.String); 
    $.Field({Static:false, Public:false}, "attributeValue", $.String); 
    $.Field({Static:false, Public:false}, "isXmlAttribute", $.Boolean); 
    $.Field({Static:false, Public:false}, "isXmlnsAttribute", $.Boolean); 
    $.Field({Static:false, Public:false}, "writeState", $asm13.TypeRef("System.Xml.WriteState")); 
    $.Field({Static:false, Public:false}, "documentState", $asm11.TypeRef("System.Xml.XmlBaseWriter/DocumentState")); 
    $.Field({Static:false, Public:false}, "trailBytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "trailByteCount", $.Int32); 
    $.Field({Static:false, Public:false}, "nodeWriter", $asm11.TypeRef("System.Xml.XmlStreamNodeWriter")); 
    $.Field({Static:false, Public:false}, "signingWriter", $asm11.TypeRef("System.Xml.XmlSigningNodeWriter")); 
    $.Field({Static:false, Public:false}, "textFragmentWriter", $asm11.TypeRef("System.Xml.XmlUTF8NodeWriter")); 
    $.Field({Static:false, Public:false}, "oldWriter", $asm11.TypeRef("System.Xml.XmlNodeWriter")); 
    $.Field({Static:false, Public:false}, "oldStream", $asm09.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "oldNamespaceBoundary", $.Int32); 
    $.Field({Static:false, Public:false}, "inList", $.Boolean); 
    $.Field({Static:true , Public:false}, "binhexEncoding", $asm11.TypeRef("System.Text.BinHexEncoding")); 
    $.Field({Static:true , Public:false}, "prefixes", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Constant({Static:true , Public:false}, "xmlnsNamespace", "http://www.w3.org/2000/xmlns/"); 
    $.Constant({Static:true , Public:false}, "xmlNamespace", "http://www.w3.org/XML/1998/namespace"); 
    $.Property({Static:false, Public:false}, "IsClosed", $.Boolean);

    $.Property({Static:true , Public:false}, "BinHexEncoding", $asm11.TypeRef("System.Text.BinHexEncoding"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm13.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm13.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:false}, "NamespaceBoundary", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CanCanonicalize", $.Boolean);

    $.Property({Static:false, Public:false}, "Signing", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanFragment", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm11.TypeRef("System.Xml.IFragmentCapableXmlDictionaryWriter")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseWriter/Element */ 

(function Element$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBaseWriter/Element", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_PrefixId", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_LocalName", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Prefix", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_PrefixId", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "localName", $.String); 
    $.Field({Static:false, Public:false}, "prefixId", $.Int32); 
    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true }, "PrefixId", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlBaseWriter/DocumentState */ 

JSIL.MakeEnum(
  "System.Xml.XmlBaseWriter/DocumentState", false, {
    None: 0, 
    Document: 1, 
    Epilog: 2, 
    End: 3
  }, false
);

/* class System.Xml.XmlBaseWriter/NamespaceManager */ 

(function NamespaceManager$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBaseWriter/NamespaceManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddLangAttribute", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddNamespace", 
      new JSIL.MethodSignature($.String, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddNamespace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddNamespaceIfNotDeclared", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddSpaceAttribute", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlSpace")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeclareNamespaces", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlNodeWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnterScope", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExitScope", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceBoundary", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlSpace"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "LookupAttributePrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NamespaceBoundary", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Sign", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlCanonicalWriter")], [])
    );

    $.Field({Static:false, Public:false}, "namespaces", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlBaseWriter/NamespaceManager/Namespace")])); 
    $.Field({Static:false, Public:false}, "lastNameSpace", $asm11.TypeRef("System.Xml.XmlBaseWriter/NamespaceManager/Namespace")); 
    $.Field({Static:false, Public:false}, "nsCount", $.Int32); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Field({Static:false, Public:false}, "attributes", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlBaseWriter/NamespaceManager/XmlAttribute")])); 
    $.Field({Static:false, Public:false}, "attributeCount", $.Int32); 
    $.Field({Static:false, Public:false}, "space", $asm13.TypeRef("System.Xml.XmlSpace")); 
    $.Field({Static:false, Public:false}, "lang", $.String); 
    $.Field({Static:false, Public:false}, "namespaceBoundary", $.Int32); 
    $.Field({Static:false, Public:false}, "nsTop", $.Int32); 
    $.Field({Static:false, Public:false}, "defaultNamespace", $asm11.TypeRef("System.Xml.XmlBaseWriter/NamespaceManager/Namespace")); 
    $.Property({Static:false, Public:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true }, "XmlSpace", $asm13.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true }, "NamespaceBoundary", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseWriter/NamespaceManager/XmlAttribute */ 

(function XmlAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBaseWriter/NamespaceManager/XmlAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlSpace"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Depth", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_XmlLang", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_XmlSpace", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlSpace")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "space", $asm13.TypeRef("System.Xml.XmlSpace")); 
    $.Field({Static:false, Public:false}, "lang", $.String); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Property({Static:false, Public:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true }, "XmlSpace", $asm13.TypeRef("System.Xml.XmlSpace"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseWriter/NamespaceManager/Namespace */ 

(function Namespace$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBaseWriter/NamespaceManager/Namespace", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_PrefixChar", 
      new JSIL.MethodSignature($.Char, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Uri", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_UriDictionaryString", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Depth", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Prefix", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Uri", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_UriDictionaryString", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "xNs", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Field({Static:false, Public:false}, "prefixChar", $.Char); 
    $.Property({Static:false, Public:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true }, "PrefixChar", $.Char);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "Uri", $.String);

    $.Property({Static:false, Public:true }, "UriDictionaryString", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBinaryWriter */ 

(function XmlBinaryWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlBaseWriter"), 
      Name: "System.Xml.XmlBinaryWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "CheckArray", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSigningNodeWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlSigningNodeWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetOutput", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Xml.IXmlDictionary"), 
          $asm11.TypeRef("System.Xml.XmlBinaryWriterSession"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnsafeWriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm11.TypeRef("System.Xml.XmlBinaryNodeType"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeWriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlBinaryNodeType"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int64]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int64]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Double]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Double]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndArray", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTextNode", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "writer", $asm11.TypeRef("System.Xml.XmlBinaryNodeWriter")); 
    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:false, Public:false}, "bytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.ImplementInterfaces(
      /* 2 */ $asm11.TypeRef("System.Xml.IXmlBinaryWriterInitializer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBinaryWriterSession */ 

(function XmlBinaryWriterSession$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBinaryWriterSession", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddKeys", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBinaryWriterSession/IntArray"), [$asm11.TypeRef("System.Xml.IXmlDictionary"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryAdd", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false}, "strings", $asm11.TypeRef("System.Xml.XmlBinaryWriterSession/PriorityDictionary`2", [$.String, $.Int32])); 
    $.Field({Static:false, Public:false}, "maps", $asm11.TypeRef("System.Xml.XmlBinaryWriterSession/PriorityDictionary`2", [$asm11.TypeRef("System.Xml.IXmlDictionary"), $asm11.TypeRef("System.Xml.XmlBinaryWriterSession/IntArray")])); 
    $.Field({Static:false, Public:false}, "nextKey", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBinaryWriterSession/PriorityDictionary`2 */ 

(function PriorityDictionary$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBinaryWriterSession/PriorityDictionary`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K", "V"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("K", "System.Xml.XmlBinaryWriterSession/PriorityDictionary`2"), new JSIL.GenericParameter("V", "System.Xml.XmlBinaryWriterSession/PriorityDictionary`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DecreaseAll", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Now", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("K", "System.Xml.XmlBinaryWriterSession/PriorityDictionary`2"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("V", "System.Xml.XmlBinaryWriterSession/PriorityDictionary`2")])], [])
    );

    $.Field({Static:false, Public:false}, "dictionary", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")])); 
    $.Field({Static:false, Public:false}, "list", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlBinaryWriterSession/PriorityDictionary`2/Entry", [$.GenericParameter("K"), $.GenericParameter("V")])])); 
    $.Field({Static:false, Public:false}, "listCount", $.Int32); 
    $.Field({Static:false, Public:false}, "now", $.Int32); 
    $.Property({Static:false, Public:false}, "Now", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlBinaryWriterSession/PriorityDictionary`2/Entry */ 

(function Entry$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlBinaryWriterSession/PriorityDictionary`2/Entry", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["K", "V"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "Key", $.GenericParameter("K")); 
    $.Field({Static:false, Public:true }, "Value", $.GenericParameter("V")); 
    $.Field({Static:false, Public:true }, "Time", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBinaryWriterSession/IntArray */ 

(function IntArray$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBinaryWriterSession/IntArray", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.Field({Static:false, Public:false}, "array", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Property({Static:false, Public:true }, "Item", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.XmlDictionary */ 

(function XmlDictionary$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlDictionary", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Empty", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.IXmlDictionary"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.Field({Static:true , Public:false}, "empty", $asm11.TypeRef("System.Xml.IXmlDictionary")); 
    $.Field({Static:false, Public:false}, "lookup", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")])); 
    $.Field({Static:false, Public:false}, "strings", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])); 
    $.Field({Static:false, Public:false}, "nextId", $.Int32); 
    $.Property({Static:true , Public:true }, "Empty", $asm11.TypeRef("System.Xml.IXmlDictionary"));

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Xml.IXmlDictionary")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlDictionary/EmptyDictionary */ 

(function EmptyDictionary$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlDictionary/EmptyDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Xml.IXmlDictionary")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Xml.OnXmlDictionaryReaderClose */ 

JSIL.MakeDelegate("System.Xml.OnXmlDictionaryReaderClose", true, []);

/* class System.Xml.XmlDictionaryReader */ 

(function XmlDictionaryReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Xml.XmlReader"), 
      Name: "System.Xml.XmlDictionaryReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "CheckArray", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryReader", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm11.TypeRef("System.Xml.IXmlDictionary"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm11.TypeRef("System.Xml.IXmlDictionary"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.XmlBinaryReaderSession")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm11.TypeRef("System.Xml.IXmlDictionary"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.XmlBinaryReaderSession"), 
          $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryReader", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryReader", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Xml.IXmlDictionary"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryReader", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Xml.IXmlDictionary"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.XmlBinaryReaderSession")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateBinaryReader", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Xml.IXmlDictionary"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.XmlBinaryReaderSession"), 
          $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateDictionaryReader", 
      new JSIL.MethodSignature($.Type, [$asm13.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomReader", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomReader", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Text.Encoding")]), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomReader", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Text.Encoding")]), 
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomReader", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Text.Encoding")]), 
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), 
          $.Int32, $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Text.Encoding"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Text.Encoding")]), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Text.Encoding")]), 
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateMtomReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Text.Encoding")]), 
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), 
          $.Int32, $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateTextReader", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateTextReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateTextReader", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Text.Encoding"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateTextReader", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateTextReader", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndCanonicalization", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanCanonicalize", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Quotas", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNonAtomizedNames", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOfLocalName", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.String]), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOfLocalName", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartArray", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsTextNode", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToStartElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToStartElement", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToStartElement", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Int64]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Int64]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Single]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Single]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Double]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Double]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadBooleanArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Boolean]), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadBooleanArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Boolean]), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm09.TypeRef("System.Type"), $asm13.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Boolean, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsFloat", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsGuid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsQualifiedName", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsString", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsTimeSpan", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsUniqueId", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.UniqueId"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDateTimeArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDateTimeArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDecimalArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDecimalArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDoubleArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Double]), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDoubleArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Double]), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDateTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDecimal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsFloat", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsGuid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsTimeSpan", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsUniqueId", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.UniqueId"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadFullStartElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadFullStartElement", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadFullStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadFullStartElement", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadGuidArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadGuidArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt16Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int16]), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt16Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int16]), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt32Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt32Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt64Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int64]), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt64Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int64]), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadSingleArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Single]), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadSingleArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Single]), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadString", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadTimeSpanArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadTimeSpanArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "StartCanonicalization", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetArrayLength", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetBase64ContentLength", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetLocalNameAsDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetNamespaceUriAsDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValueAsDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.Constant({Static:true , Public:false}, "MaxInitialArrayLength", 65535); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanCanonicalize", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Quotas", $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlDictionaryReader/XmlWrappedReader */ 

(function XmlWrappedReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlDictionaryReader"), 
      Name: "System.Xml.XmlDictionaryReader/XmlWrappedReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlReader"), $asm13.TypeRef("System.Xml.XmlNamespaceManager")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.ReadState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm09.TypeRef("System.Type"), $asm13.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsFloat", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInnerXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadOuterXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "reader", $asm13.TypeRef("System.Xml.XmlReader")); 
    $.Field({Static:false, Public:false}, "nsMgr", $asm13.TypeRef("System.Xml.XmlNamespaceManager")); 
    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm13.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm13.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm13.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm13.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm13.TypeRef("System.Xml.IXmlLineInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.XmlDictionaryReaderQuotas */ 

(function XmlDictionaryReaderQuotas$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlDictionaryReaderQuotas", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Max", 
      new JSIL.MethodSignature($.Type, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_MaxArrayLength", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_MaxBytesPerRead", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_MaxDepth", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_MaxNameTableCharCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_MaxStringContentLength", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "InternalCopyTo", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeReadOnly", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxArrayLength", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxBytesPerRead", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxDepth", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxNameTableCharCount", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxStringContentLength", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "readOnly", $.Boolean); 
    $.Field({Static:false, Public:false}, "maxStringContentLength", $.Int32); 
    $.Field({Static:false, Public:false}, "maxArrayLength", $.Int32); 
    $.Field({Static:false, Public:false}, "maxDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "maxNameTableCharCount", $.Int32); 
    $.Field({Static:false, Public:false}, "maxBytesPerRead", $.Int32); 
    $.Field({Static:true , Public:false}, "defaultQuota", $.Type); 
    $.Field({Static:true , Public:false}, "maxQuota", $.Type); 
    $.Constant({Static:true , Public:false}, "DefaultMaxDepth", 32); 
    $.Constant({Static:true , Public:false}, "DefaultMaxStringContentLength", 8192); 
    $.Constant({Static:true , Public:false}, "DefaultMaxArrayLength", 16384); 
    $.Constant({Static:true , Public:false}, "DefaultMaxBytesPerRead", 4096); 
    $.Constant({Static:true , Public:false}, "DefaultMaxNameTableCharCount", 16384); 
    $.Property({Static:true , Public:true }, "Max", $.Type);

    $.Property({Static:false, Public:true }, "MaxStringContentLength", $.Int32)
      .Attribute($asm0B.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [8192]; });

    $.Property({Static:false, Public:true }, "MaxArrayLength", $.Int32)
      .Attribute($asm0B.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [16384]; });

    $.Property({Static:false, Public:true }, "MaxBytesPerRead", $.Int32)
      .Attribute($asm0B.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [4096]; });

    $.Property({Static:false, Public:true }, "MaxDepth", $.Int32)
      .Attribute($asm0B.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [32]; });

    $.Property({Static:false, Public:true }, "MaxNameTableCharCount", $.Int32)
      .Attribute($asm0B.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [16384]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlDictionaryString */ 

(function XmlDictionaryString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlDictionaryString", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.IXmlDictionary"), $.String, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Dictionary", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.IXmlDictionary"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_Empty", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "GetString", 
      new JSIL.MethodSignature($.String, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToUTF8", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.Constant({Static:true , Public:false}, "MinKey", 0); 
    $.Constant({Static:true , Public:false}, "MaxKey", 536870911); 
    $.Field({Static:false, Public:false}, "dictionary", $asm11.TypeRef("System.Xml.IXmlDictionary")); 
    $.Field({Static:false, Public:false}, "value", $.String); 
    $.Field({Static:false, Public:false}, "key", $.Int32); 
    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false}, "emptyStringDictionary", $asm11.TypeRef("System.Xml.XmlDictionaryString/EmptyStringDictionary")); 
    $.Property({Static:true , Public:true }, "Empty", $.Type);

    $.Property({Static:false, Public:true }, "Dictionary", $asm11.TypeRef("System.Xml.IXmlDictionary"));

    $.Property({Static:false, Public:true }, "Key", $.Int32);

    $.Property({Static:false, Public:true }, "Value", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlDictionaryString/EmptyStringDictionary */ 

(function EmptyStringDictionary$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlDictionaryString/EmptyStringDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EmptyString", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryLookup", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.Field({Static:false, Public:false}, "empty", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Property({Static:false, Public:true }, "EmptyString", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    $.ImplementInterfaces(
      /* 0 */ $asm11.TypeRef("System.Xml.IXmlDictionary")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xml.IXmlTextWriterInitializer */ 

JSIL.MakeInterface(
  "System.Xml.IXmlTextWriterInitializer", true, [], function ($) {
    $.Method({}, "SetOutput", new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ], []));
  }, []);

/* class System.Xml.XmlUTF8TextWriter */ 

(function XmlUTF8TextWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlBaseWriter"), 
      Name: "System.Xml.XmlUTF8TextWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSigningNodeWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlSigningNodeWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanFragment", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetOutput", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ], [])
    );

    $.Field({Static:false, Public:false}, "writer", $asm11.TypeRef("System.Xml.XmlUTF8NodeWriter")); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanFragment", $.Boolean);

    $.ImplementInterfaces(
      /* 2 */ $asm11.TypeRef("System.Xml.IXmlTextWriterInitializer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlUTF8NodeWriter */ 

(function XmlUTF8NodeWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlStreamNodeWriter"), 
      Name: "System.Xml.XmlUTF8NodeWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Boolean]), $jsilcore.TypeRef("System.Array", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Text.Encoding"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "GetCharBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCharEntityBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOutput", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $.Boolean, 
          $asm09.TypeRef("System.Text.Encoding")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToBase16", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.UInt32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnsafeWriteEscapedText", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteAmpersandCharEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteApostropheCharEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64Text", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBase64Text", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBoolText", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDateTimeText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDecimalText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDeclaration", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDoubleText", 
      new JSIL.MethodSignature(null, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndComment", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndListText", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndStartElement", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFloatText", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteGreaterThanCharEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteGuidText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHexCharEntity", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt32Text", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt64Text", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteLessThanCharEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteListSeparator", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLocalName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLocalName", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePrefix", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePrefix", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteQuoteCharEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartComment", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartListText", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartXmlnsAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteText", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTimeSpanText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUInt64Text", 
      new JSIL.MethodSignature(null, [$.UInt64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUniqueIdText", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.UniqueId")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "entityChars", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "isEscapedAttributeChar", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Field({Static:false, Public:false}, "isEscapedElementChar", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Field({Static:false, Public:false}, "inAttribute", $.Boolean); 
    $.Field({Static:false, Public:false}, "encoding", $asm09.TypeRef("System.Text.Encoding")); 
    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "startDecl", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "endDecl", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "utf8Decl", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "digits", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "defaultIsEscapedAttributeChar", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "defaultIsEscapedElementChar", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Constant({Static:true , Public:false}, "bufferLength", 512); 
    $.Constant({Static:true , Public:false}, "maxEntityLength", 32); 
    $.Constant({Static:true , Public:false}, "maxBytesPerChar", 3); 
    $.Property({Static:false, Public:true }, "Encoding", $asm09.TypeRef("System.Text.Encoding"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.UniqueId */ 

(function UniqueId$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.UniqueId", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CharArrayLength", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsGuid", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToCharArray", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Char]), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "TryGetGuid", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Guid")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetGuid", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeDecode", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Int16]), $.Char, 
          $.Char
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeEncode", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Byte, 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeGetInt32", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeGetInt64", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeParse", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeSetInt32", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeSetInt64", 
      new JSIL.MethodSignature(null, [$.Int64, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "idLow", $.Int64); 
    $.Field({Static:false, Public:false}, "idHigh", $.Int64); 
    $.Field({Static:false, Public:false}, "s", $.String)
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "char2val", $jsilcore.TypeRef("System.Array", [$.Int16])); 
    $.Constant({Static:true , Public:false}, "guidLength", 16); 
    $.Constant({Static:true , Public:false}, "uuidLength", 45); 
    $.Constant({Static:true , Public:false}, "val2char", "0123456789abcdef"); 
    $.Property({Static:false, Public:true }, "CharArrayLength", $.Int32);

    $.Property({Static:false, Public:true }, "IsGuid", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xml.IXmlMtomReaderInitializer */ 

JSIL.MakeInterface(
  "System.Xml.IXmlMtomReaderInitializer", true, [], function ($) {
    $.Method({}, "SetInput", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Text.Encoding")]), 
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), 
          $.Int32, $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], []));
    $.Method({}, "SetInput", new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Text.Encoding")]), 
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), 
          $.Int32, $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], []));
  }, []);

/* class System.Xml.XmlMtomReader */ 

(function XmlMtomReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlDictionaryReader"), 
      Name: "System.Xml.XmlMtomReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "AdvanceToContentOnElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckContentTransferEncodingOnBinaryPart", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.ContentTransferEncodingHeader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckContentTransferEncodingOnRoot", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.ContentTransferEncodingHeader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckContentType", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DecrementBufferQuota", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Quotas", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.ReadState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlReaderSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStartUri", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $.String, 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm09.TypeRef("System.Type"), $asm13.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsFloat", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInnerXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadMessageContentTypeHeader", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.ContentTypeHeader"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadMessageMimeVersionHeader", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.MimeVersionHeader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadMimePart", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlMtomReader/MimePart"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadOuterXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadRootContentTypeHeader", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Text.Encoding"), [
          $asm11.TypeRef("System.Xml.ContentTypeHeader"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Text.Encoding")]), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadRootMimePart", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlMtomReader/MimePart"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInput", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Text.Encoding")]), 
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), 
          $.Int32, $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInput", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Text.Encoding")]), 
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), 
          $.Int32, $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetReadEncodings", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Text.Encoding")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "encodings", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Text.Encoding")])); 
    $.Field({Static:false, Public:false}, "xmlReader", $asm11.TypeRef("System.Xml.XmlDictionaryReader")); 
    $.Field({Static:false, Public:false}, "infosetReader", $asm11.TypeRef("System.Xml.XmlDictionaryReader")); 
    $.Field({Static:false, Public:false}, "mimeReader", $asm11.TypeRef("System.Xml.MimeReader")); 
    $.Field({Static:false, Public:false}, "mimeParts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Xml.XmlMtomReader/MimePart")])); 
    $.Field({Static:false, Public:false}, "onClose", $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")); 
    $.Field({Static:false, Public:false}, "readingBinaryElement", $.Boolean); 
    $.Field({Static:false, Public:false}, "maxBufferSize", $.Int32); 
    $.Field({Static:false, Public:false}, "bufferRemaining", $.Int32); 
    $.Field({Static:false, Public:false}, "part", $asm11.TypeRef("System.Xml.XmlMtomReader/MimePart")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Quotas", $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm13.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm13.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm13.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm13.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm13.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm13.TypeRef("System.Xml.IXmlLineInfo"), 
      /* 2 */ $asm11.TypeRef("System.Xml.IXmlMtomReaderInitializer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.XmlMtomReader/MimePart */ 

(function MimePart$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlMtomReader/MimePart", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Xml.MimeHeaders")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Headers", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.MimeHeaders"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReferencedFromInfoset", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Stream", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IO.Stream"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "GetBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Release", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ReferencedFromInfoset", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "stream", $asm09.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "headers", $asm11.TypeRef("System.Xml.MimeHeaders")); 
    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "isReferencedFromInfoset", $.Boolean); 
    $.Property({Static:false, Public:false}, "Stream", $asm09.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:false}, "Headers", $asm11.TypeRef("System.Xml.MimeHeaders"));

    $.Property({Static:false, Public:false}, "ReferencedFromInfoset", $.Boolean);

    $.Property({Static:false, Public:false}, "Length", $.Int64);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlMtomReader/XopIncludeReader */ 

(function XopIncludeReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlDictionaryReader"), 
      Name: "System.Xml.XmlMtomReader/XopIncludeReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlMtomReader/MimePart"), $asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseStreams", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Quotas", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.ReadState"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlReaderSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInnerXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadOuterXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(1, "get_LineNumber");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(1, "get_LinePosition");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.HasLineInfo", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "HasLineInfo");

    $.Field({Static:false, Public:false}, "chunkSize", $.Int32); 
    $.Field({Static:false, Public:false}, "bytesRemaining", $.Int32); 
    $.Field({Static:false, Public:false}, "part", $asm11.TypeRef("System.Xml.XmlMtomReader/MimePart")); 
    $.Field({Static:false, Public:false}, "readState", $asm13.TypeRef("System.Xml.ReadState")); 
    $.Field({Static:false, Public:false}, "parentReader", $asm11.TypeRef("System.Xml.XmlDictionaryReader")); 
    $.Field({Static:false, Public:false}, "stringValue", $.String); 
    $.Field({Static:false, Public:false}, "stringOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "nodeType", $asm13.TypeRef("System.Xml.XmlNodeType")); 
    $.Field({Static:false, Public:false}, "binHexStream", $asm09.TypeRef("System.IO.MemoryStream")); 
    $.Field({Static:false, Public:false}, "valueBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "valueOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "valueCount", $.Int32); 
    $.Field({Static:false, Public:false}, "finishedStream", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Quotas", $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm13.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm13.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm13.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm13.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm13.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm13.TypeRef("System.Xml.IXmlLineInfo")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.MimeMessageReader */ 

(function MimeMessageReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.MimeMessageReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetContentStream", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IO.Stream"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadHeaders", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.MimeHeaders"), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:true , Public:false}, "CRLFCRLF", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "getContentStreamCalled", $.Boolean); 
    $.Field({Static:false, Public:false}, "mimeHeaderReader", $asm11.TypeRef("System.Xml.MimeHeaderReader")); 
    $.Field({Static:false, Public:false}, "reader", $asm11.TypeRef("System.Xml.DelimittedStreamReader")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.MimeReader */ 

(function MimeReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.MimeReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BlockRead", 
      new JSIL.MethodSignature($.Int32, [
          $asm09.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Preface", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetContentStream", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IO.Stream"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadHeaders", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.MimeHeaders"), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadNextPart", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:true , Public:false}, "CRLFCRLF", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "boundaryBytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "content", $.String); 
    $.Field({Static:false, Public:false}, "currentStream", $asm09.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "mimeHeaderReader", $asm11.TypeRef("System.Xml.MimeHeaderReader")); 
    $.Field({Static:false, Public:false}, "reader", $asm11.TypeRef("System.Xml.DelimittedStreamReader")); 
    $.Field({Static:false, Public:false}, "scratch", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Property({Static:false, Public:true }, "Preface", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DelimittedStreamReader */ 

(function DelimittedStreamReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.DelimittedStreamReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.DelimittedStreamReader/DelimittedReadStream")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNextStream", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IO.Stream"), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchDelimitter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.DelimittedStreamReader/MatchState"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchRemainder", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessRead", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.DelimittedStreamReader/DelimittedReadStream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "canGetNextStream", $.Boolean); 
    $.Field({Static:false, Public:false}, "currentStream", $asm11.TypeRef("System.Xml.DelimittedStreamReader/DelimittedReadStream")); 
    $.Field({Static:false, Public:false}, "delimitter", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "matchBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "scratch", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "stream", $asm11.TypeRef("System.Xml.BufferedReadStream")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DelimittedStreamReader/DelimittedReadStream */ 

(function DelimittedReadStream$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.IO.Stream"), 
      Name: "System.Xml.DelimittedStreamReader/DelimittedReadStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.DelimittedStreamReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IAsyncResult")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm09.TypeRef("System.IO.SeekOrigin")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "reader", $asm11.TypeRef("System.Xml.DelimittedStreamReader")); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.DelimittedStreamReader/MatchState */ 

JSIL.MakeEnum(
  "System.Xml.DelimittedStreamReader/MatchState", false, {
    True: 0, 
    False: 1, 
    InsufficientData: 2
  }, false
);

/* class System.Xml.MimeHeaders */ 

(function MimeHeaders$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.MimeHeaders", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.MimeHeader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentID", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.ContentIDHeader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentTransferEncoding", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.ContentTransferEncodingHeader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.ContentTypeHeader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MimeVersion", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.MimeVersionHeader"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Release", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false}, "headers", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm11.TypeRef("System.Xml.MimeHeader")])); 
    $.Property({Static:false, Public:true }, "ContentType", $asm11.TypeRef("System.Xml.ContentTypeHeader"));

    $.Property({Static:false, Public:true }, "ContentID", $asm11.TypeRef("System.Xml.ContentIDHeader"));

    $.Property({Static:false, Public:true }, "ContentTransferEncoding", $asm11.TypeRef("System.Xml.ContentTransferEncodingHeader"));

    $.Property({Static:false, Public:true }, "MimeVersion", $asm11.TypeRef("System.Xml.MimeVersionHeader"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.MimeHeaders/Constants */ 

(function Constants$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Xml.MimeHeaders/Constants", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "ContentTransferEncoding", "content-transfer-encoding"); 
    $.Constant({Static:true , Public:true }, "ContentID", "content-id"); 
    $.Constant({Static:true , Public:true }, "ContentType", "content-type"); 
    $.Constant({Static:true , Public:true }, "MimeVersion", "mime-version"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.MimeHeader */ 

(function MimeHeader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.MimeHeader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "value", $.String); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.ContentTypeHeader */ 

(function ContentTypeHeader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.MimeHeader"), 
      Name: "System.Xml.ContentTypeHeader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MediaSubtype", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MediaType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseValue", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type); 
    $.Field({Static:false, Public:false}, "mediaType", $.String); 
    $.Field({Static:false, Public:false}, "subType", $.String); 
    $.Field({Static:false, Public:false}, "parameters", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])); 
    $.Property({Static:false, Public:true }, "MediaType", $.String);

    $.Property({Static:false, Public:true }, "MediaSubtype", $.String);

    $.Property({Static:false, Public:true }, "Parameters", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.ContentTransferEncoding */ 

JSIL.MakeEnum(
  "System.Xml.ContentTransferEncoding", false, {
    SevenBit: 0, 
    EightBit: 1, 
    Binary: 2, 
    Other: 3, 
    Unspecified: 4
  }, false
);

/* class System.Xml.ContentTransferEncodingHeader */ 

(function ContentTransferEncodingHeader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.MimeHeader"), 
      Name: "System.Xml.ContentTransferEncodingHeader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.ContentTransferEncoding"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentTransferEncoding", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.ContentTransferEncoding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentTransferEncodingValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseValue", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "contentTransferEncoding", $asm11.TypeRef("System.Xml.ContentTransferEncoding")); 
    $.Field({Static:false, Public:false}, "contentTransferEncodingValue", $.String); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Binary", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "EightBit", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SevenBit", $.Type); 
    $.Property({Static:false, Public:true }, "ContentTransferEncoding", $asm11.TypeRef("System.Xml.ContentTransferEncoding"));

    $.Property({Static:false, Public:true }, "ContentTransferEncodingValue", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.ContentIDHeader */ 

(function ContentIDHeader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.MimeHeader"), 
      Name: "System.Xml.ContentIDHeader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.MimeVersionHeader */ 

(function MimeVersionHeader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.MimeHeader"), 
      Name: "System.Xml.MimeVersionHeader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseValue", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type); 
    $.Field({Static:false, Public:false}, "version", $.String); 
    $.Property({Static:false, Public:true }, "Version", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.MimeHeaderReader */ 

(function MimeHeaderReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.MimeHeaderReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendName", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendValue", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BufferEnd", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "ProcessBuffer", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream")], [])
    );

    $.Field({Static:false, Public:false}, "value", $.String); 
    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "maxOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "offset", $.Int32); 
    $.Field({Static:false, Public:false}, "readState", $asm11.TypeRef("System.Xml.MimeHeaderReader/ReadState")); 
    $.Field({Static:false, Public:false}, "stream", $asm09.TypeRef("System.IO.Stream")); 
    $.Property({Static:false, Public:true }, "Value", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.MimeHeaderReader/ReadState */ 

JSIL.MakeEnum(
  "System.Xml.MimeHeaderReader/ReadState", false, {
    ReadName: 0, 
    SkipWS: 1, 
    ReadValue: 2, 
    ReadLF: 3, 
    ReadWS: 4, 
    EOF: 5
  }, false
);

/* class System.Xml.BufferedReadStream */ 

(function BufferedReadStream$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.IO.Stream"), 
      Name: "System.Xml.BufferedReadStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.IAsyncResult")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IAsyncResult")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Push", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadBlock", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm09.TypeRef("System.IO.SeekOrigin")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "stream", $asm09.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "storedBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "storedLength", $.Int32); 
    $.Field({Static:false, Public:false}, "storedOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "readMore", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.MailBnfHelper */ 

(function MailBnfHelper$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Xml.MailBnfHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "IsValidMimeBoundary", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadDigits", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm09.TypeRef("System.Text.StringBuilder")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadParameterAttribute", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm09.TypeRef("System.Text.StringBuilder")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadParameterValue", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm09.TypeRef("System.Text.StringBuilder")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadQuotedString", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm09.TypeRef("System.Text.StringBuilder")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadToken", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm09.TypeRef("System.Text.StringBuilder")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SkipCFWS", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:true , Public:false}, "s_fqtext", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
        return JSIL.Array.New($asm09.System.Boolean, 128);
      }); 
    $.Field({Static:true , Public:false}, "s_ttext", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
        return JSIL.Array.New($asm09.System.Boolean, 128);
      }); 
    $.Field({Static:true , Public:false}, "s_digits", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
        return JSIL.Array.New($asm09.System.Boolean, 128);
      }); 
    $.Field({Static:true , Public:false}, "s_boundary", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
        return JSIL.Array.New($asm09.System.Boolean, 128);
      }); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xml.IXmlMtomWriterInitializer */ 

JSIL.MakeInterface(
  "System.Xml.IXmlMtomWriterInitializer", true, [], function ($) {
    $.Method({}, "SetOutput", new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding"), 
          $.Int32, $.String, 
          $.String, $.String, 
          $.Boolean, $.Boolean
        ], []));
  }, []);

/* class System.Xml.XmlMtomWriter */ 

(function XmlMtomWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), 
      Name: "System.Xml.XmlMtomWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "CharSet", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfEndContentTypeAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIfStartContentTypeAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GenerateUriForMimePart", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsInitialized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlWriterSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Writer", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.WriteState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBoundaryString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetContentTypeForMimeMessage", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetContentTypeForRootMimePart", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Text.Encoding"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $.String, 
          $.String, $.String, 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUTF8Encoding", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetOutput", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding"), 
          $.Int32, $.String, 
          $.String, $.String, 
          $.Boolean, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfElementIsXOPInclude", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSizeOfMessage", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAttributes", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBase64Inline", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBase64InlineIfPresent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMimeHeaders", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNmToken", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XPath.XPathNavigator"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTextNode", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.IStreamProvider")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXOPBinaryParts", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXOPInclude", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "maxSizeInBytes", $.Int32); 
    $.Field({Static:false, Public:false}, "writer", $asm11.TypeRef("System.Xml.XmlDictionaryWriter")); 
    $.Field({Static:false, Public:false}, "infosetWriter", $asm11.TypeRef("System.Xml.XmlDictionaryWriter")); 
    $.Field({Static:false, Public:false}, "mimeWriter", $asm11.TypeRef("System.Xml.MimeWriter")); 
    $.Field({Static:false, Public:false}, "encoding", $asm09.TypeRef("System.Text.Encoding")); 
    $.Field({Static:false, Public:false}, "isUTF8", $.Boolean); 
    $.Field({Static:false, Public:false}, "contentID", $.String); 
    $.Field({Static:false, Public:false}, "contentType", $.String); 
    $.Field({Static:false, Public:false}, "initialContentTypeForRootPart", $.String); 
    $.Field({Static:false, Public:false}, "initialContentTypeForMimeMessage", $.String); 
    $.Field({Static:false, Public:false}, "contentTypeStream", $asm09.TypeRef("System.IO.MemoryStream")); 
    $.Field({Static:false, Public:false}, "mimeParts", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm11.TypeRef("System.Xml.XmlMtomWriter/MimePart")])); 
    $.Field({Static:false, Public:false}, "binaryDataChunks", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("System.Xml.MtomBinaryData")])); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Field({Static:false, Public:false}, "totalSizeOfMimeParts", $.Int32); 
    $.Field({Static:false, Public:false}, "sizeOfBufferedBinaryData", $.Int32); 
    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:false, Public:false}, "bytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "isClosed", $.Boolean); 
    $.Field({Static:false, Public:false}, "ownsStream", $.Boolean); 
    $.Constant({Static:true , Public:false}, "MaxInlinedBytes", 767); 
    $.Property({Static:false, Public:false}, "Writer", $asm11.TypeRef("System.Xml.XmlDictionaryWriter"));

    $.Property({Static:false, Public:false}, "IsInitialized", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm13.TypeRef("System.Xml.XmlWriterSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm13.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm13.TypeRef("System.Xml.XmlSpace"));

    $.ImplementInterfaces(
      /* 1 */ $asm11.TypeRef("System.Xml.IXmlMtomWriterInitializer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlMtomWriter/MimePart */ 

(function MimePart$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlMtomWriter/MimePart", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("System.Xml.MtomBinaryData")]), $.String, 
          $.String, $.String, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSize", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "binaryData", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm11.TypeRef("System.Xml.MtomBinaryData")])); 
    $.Field({Static:false, Public:false}, "contentID", $.String); 
    $.Field({Static:false, Public:false}, "contentType", $.String); 
    $.Field({Static:false, Public:false}, "contentTransferEncoding", $.String); 
    $.Field({Static:false, Public:false}, "sizeInBytes", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlMtomWriter/MimeBoundaryGenerator */ 

(function MimeBoundaryGenerator$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Xml.XmlMtomWriter/MimeBoundaryGenerator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "Next", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:true , Public:false}, "id", $.Int64); 
    $.Field({Static:true , Public:false}, "prefix", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.MtomGlobals */ 

(function MtomGlobals$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Xml.MtomGlobals", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:true , Public:false}, "XopIncludeLocalName", $.String, "Include"); 
    $.Field({Static:true , Public:false}, "XopIncludeNamespace", $.String, "http://www.w3.org/2004/08/xop/include"); 
    $.Field({Static:true , Public:false}, "XopIncludePrefix", $.String, "xop"); 
    $.Field({Static:true , Public:false}, "XopIncludeHrefLocalName", $.String, "href"); 
    $.Field({Static:true , Public:false}, "XopIncludeHrefNamespace", $.String, function ($pi) {
        return $asm09.System.String.Empty;
      }); 
    $.Field({Static:true , Public:false}, "MediaType", $.String, "multipart"); 
    $.Field({Static:true , Public:false}, "MediaSubtype", $.String, "related"); 
    $.Field({Static:true , Public:false}, "BoundaryParam", $.String, "boundary"); 
    $.Field({Static:true , Public:false}, "TypeParam", $.String, "type"); 
    $.Field({Static:true , Public:false}, "XopMediaType", $.String, "application"); 
    $.Field({Static:true , Public:false}, "XopMediaSubtype", $.String, "xop+xml"); 
    $.Field({Static:true , Public:false}, "XopType", $.String, "application/xop+xml"); 
    $.Field({Static:true , Public:false}, "StartParam", $.String, "start"); 
    $.Field({Static:true , Public:false}, "StartInfoParam", $.String, "start-info"); 
    $.Field({Static:true , Public:false}, "ActionParam", $.String, "action"); 
    $.Field({Static:true , Public:false}, "CharsetParam", $.String, "charset"); 
    $.Field({Static:true , Public:false}, "MimeContentTypeLocalName", $.String, "contentType"); 
    $.Field({Static:true , Public:false}, "MimeContentTypeNamespace200406", $.String, "http://www.w3.org/2004/06/xmlmime"); 
    $.Field({Static:true , Public:false}, "MimeContentTypeNamespace200505", $.String, "http://www.w3.org/2005/05/xmlmime"); 
    $.Field({Static:true , Public:false}, "DefaultContentTypeForBinary", $.String, "application/octet-stream"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.MimeGlobals */ 

(function MimeGlobals$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Xml.MimeGlobals", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:true , Public:false}, "MimeVersionHeader", $.String, "MIME-Version"); 
    $.Field({Static:true , Public:false}, "DefaultVersion", $.String, "1.0"); 
    $.Field({Static:true , Public:false}, "ContentIDScheme", $.String, "cid:"); 
    $.Field({Static:true , Public:false}, "ContentIDHeader", $.String, "Content-ID"); 
    $.Field({Static:true , Public:false}, "ContentTypeHeader", $.String, "Content-Type"); 
    $.Field({Static:true , Public:false}, "ContentTransferEncodingHeader", $.String, "Content-Transfer-Encoding"); 
    $.Field({Static:true , Public:false}, "EncodingBinary", $.String, "binary"); 
    $.Field({Static:true , Public:false}, "Encoding8bit", $.String, "8bit"); 
    $.Field({Static:true , Public:false}, "COLONSPACE", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false}, "DASHDASH", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false}, "CRLF", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false}, "BoundaryPrefix", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.MimeWriterState */ 

JSIL.MakeEnum(
  "System.Xml.MimeWriterState", false, {
    Start: 0, 
    StartPreface: 1, 
    StartPart: 2, 
    Header: 3, 
    Content: 4, 
    Closed: 5
  }, false
);

/* class System.Xml.MimeWriter */ 

(function MimeWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.MimeWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WriteState", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.MimeWriterState"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "GetBoundaryBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBoundarySize", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetContentStream", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IO.Stream"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHeaderSize", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartPart", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartPreface", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHeader", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.Field({Static:false, Public:false}, "stream", $asm09.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "boundaryBytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "state", $asm11.TypeRef("System.Xml.MimeWriterState")); 
    $.Field({Static:false, Public:false}, "bufferedWrite", $asm11.TypeRef("System.Xml.BufferedWrite")); 
    $.Field({Static:false, Public:false}, "contentStream", $asm09.TypeRef("System.IO.Stream")); 
    $.Property({Static:false, Public:false}, "WriteState", $asm11.TypeRef("System.Xml.MimeWriterState"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.BufferedWrite */ 

(function BufferedWrite$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.BufferedWrite", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureBuffer", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "GetBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "offset", $.Int32); 
    $.Property({Static:false, Public:false}, "Length", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.MtomBinaryDataType */ 

JSIL.MakeEnum(
  "System.Xml.MtomBinaryDataType", false, {
    Provider: 0, 
    Segment: 1
  }, false
);

/* class System.Xml.MtomBinaryData */ 

(function MtomBinaryData$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.MtomBinaryData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.IStreamProvider")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.Field({Static:false, Public:false}, "type", $asm11.TypeRef("System.Xml.MtomBinaryDataType")); 
    $.Field({Static:false, Public:false}, "provider", $asm11.TypeRef("System.Xml.IStreamProvider")); 
    $.Field({Static:false, Public:false}, "chunk", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Property({Static:false, Public:false}, "Length", $.Int64);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlCanonicalWriter */ 

(function XmlCanonicalWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlCanonicalWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlCanonicalWriter/Attribute")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlCanonicalWriter/XmlnsAttribute")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlCanonicalWriter/XmlnsAttribute")]), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlCanonicalWriter/XmlnsAttribute")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlCanonicalWriter/Attribute")]), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlCanonicalWriter/Attribute")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureXmlnsBuffer", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsInclusivePrefix", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlCanonicalWriter/XmlnsAttribute")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolvePrefix", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolvePrefix", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlCanonicalWriter/Attribute")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolvePrefixes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetOutput", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SortAttributes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowClosed", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfClosed", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteDeclaration", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEndStartElement", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteText", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlCanonicalWriter/XmlnsAttribute")])], [])
    );

    $.Field({Static:false, Public:false}, "writer", $asm11.TypeRef("System.Xml.XmlUTF8NodeWriter")); 
    $.Field({Static:false, Public:false}, "elementStream", $asm09.TypeRef("System.IO.MemoryStream")); 
    $.Field({Static:false, Public:false}, "elementBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "elementWriter", $asm11.TypeRef("System.Xml.XmlUTF8NodeWriter")); 
    $.Field({Static:false, Public:false}, "inStartElement", $.Boolean); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Field({Static:false, Public:false}, "scopes", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlCanonicalWriter/Scope")])); 
    $.Field({Static:false, Public:false}, "xmlnsAttributeCount", $.Int32); 
    $.Field({Static:false, Public:false}, "xmlnsAttributes", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlCanonicalWriter/XmlnsAttribute")])); 
    $.Field({Static:false, Public:false}, "attributeCount", $.Int32); 
    $.Field({Static:false, Public:false}, "attributes", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlCanonicalWriter/Attribute")])); 
    $.Field({Static:false, Public:false}, "attribute", $asm11.TypeRef("System.Xml.XmlCanonicalWriter/Attribute")); 
    $.Field({Static:false, Public:false}, "element", $asm11.TypeRef("System.Xml.XmlCanonicalWriter/Element")); 
    $.Field({Static:false, Public:false}, "xmlnsBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "xmlnsOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "xmlnsStartOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "includeComments", $.Boolean); 
    $.Field({Static:false, Public:false}, "inclusivePrefixes", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "isEscapedAttributeChar", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "isEscapedElementChar", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Constant({Static:true , Public:false}, "maxBytesPerChar", 3); 
    $.Constant({Static:true , Public:false}, "xmlnsNamespace", "http://www.w3.org/2000/xmlns/"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlCanonicalWriter/Scope */ 

(function Scope$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlCanonicalWriter/Scope", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "xmlnsAttributeCount", $.Int32); 
    $.Field({Static:false, Public:true }, "xmlnsOffset", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlCanonicalWriter/Element */ 

(function Element$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlCanonicalWriter/Element", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "prefixOffset", $.Int32); 
    $.Field({Static:false, Public:true }, "prefixLength", $.Int32); 
    $.Field({Static:false, Public:true }, "localNameOffset", $.Int32); 
    $.Field({Static:false, Public:true }, "localNameLength", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlCanonicalWriter/Attribute */ 

(function Attribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlCanonicalWriter/Attribute", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "prefixOffset", $.Int32); 
    $.Field({Static:false, Public:true }, "prefixLength", $.Int32); 
    $.Field({Static:false, Public:true }, "localNameOffset", $.Int32); 
    $.Field({Static:false, Public:true }, "localNameLength", $.Int32); 
    $.Field({Static:false, Public:true }, "nsOffset", $.Int32); 
    $.Field({Static:false, Public:true }, "nsLength", $.Int32); 
    $.Field({Static:false, Public:true }, "offset", $.Int32); 
    $.Field({Static:false, Public:true }, "$length", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlCanonicalWriter/XmlnsAttribute */ 

(function XmlnsAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlCanonicalWriter/XmlnsAttribute", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "prefixOffset", $.Int32); 
    $.Field({Static:false, Public:true }, "prefixLength", $.Int32); 
    $.Field({Static:false, Public:true }, "nsOffset", $.Int32); 
    $.Field({Static:false, Public:true }, "nsLength", $.Int32); 
    $.Field({Static:false, Public:true }, "referred", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlCanonicalWriter/AttributeSorter */ 

(function AttributeSorter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlCanonicalWriter/AttributeSorter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlCanonicalWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Sort", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "writer", $asm11.TypeRef("System.Xml.XmlCanonicalWriter")); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.IComparer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlSigningNodeWriter */ 

(function XmlSigningNodeWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlNodeWriter"), 
      Name: "System.Xml.XmlSigningNodeWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanonicalWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlCanonicalWriter"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_NodeWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlNodeWriter"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_NodeWriter", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlNodeWriter")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetOutput", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlNodeWriter"), $asm09.TypeRef("System.IO.Stream"), 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64Text", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBase64Text", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBoolText", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDateTimeText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDecimalText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDeclaration", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDoubleText", 
      new JSIL.MethodSignature(null, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndListText", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndStartElement", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEscapedText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFloatText", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteGuidText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt32Text", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteInt64Text", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteListSeparator", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartListText", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteText", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTimeSpanText", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUInt64Text", 
      new JSIL.MethodSignature(null, [$.UInt64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteUniqueIdText", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.UniqueId")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.Field({Static:false, Public:false}, "writer", $asm11.TypeRef("System.Xml.XmlNodeWriter")); 
    $.Field({Static:false, Public:false}, "signingWriter", $asm11.TypeRef("System.Xml.XmlCanonicalWriter")); 
    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "base64Chars", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "text", $.Boolean); 
    $.Property({Static:false, Public:true }, "NodeWriter", $asm11.TypeRef("System.Xml.XmlNodeWriter"));

    $.Property({Static:false, Public:true }, "CanonicalWriter", $asm11.TypeRef("System.Xml.XmlCanonicalWriter"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader */ 

(function XmlBaseReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlDictionaryReader"), 
      Name: "System.Xml.XmlBaseReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeNode"), [$asm11.TypeRef("System.Xml.XmlBaseReader/QNameType"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeNode"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "AddNamespace", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/Namespace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddXmlAttribute", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeNode"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "AddXmlnsAttribute", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeNode"), [$asm11.TypeRef("System.Xml.XmlBaseReader/Namespace")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAttributes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeNode")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDeclAttribute", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.String, 
          $.String, $.Boolean, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckStandalone", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSigningNodeWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlSigningNodeWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndCanonicalization", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterScope", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlElementNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitScope", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixXmlAttribute", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Base64Encoding", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Text.Base64Encoding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "get_BinHexEncoding", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Text.BinHexEncoding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BufferReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBufferReader"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanCanonicalize", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElementNode", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlElementNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlNameTable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Node", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlNode"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OutsideRootElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Quotas", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.ReadState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Signing", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributeNode", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeNode"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributeNode", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeNode"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributeNode", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeNode"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributeNode", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeNode"), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCharBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLocalName", 
      new JSIL.MethodSignature($.String, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamespaceUri", 
      new JSIL.MethodSignature($.String, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNonAtomizedNames", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetOpenElements", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOfLocalName", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.String]), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOfLocalName", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespace", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/Namespace"), [$asm11.TypeRef("System.Xml.PrefixHandleType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespace", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/Namespace"), [$asm11.TypeRef("System.Xml.PrefixHandle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToAtomicText", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlAtomicTextNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToCData", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlCDataNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToComment", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlCommentNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToComplexText", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlComplexTextNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToContent", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToDeclaration", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlDeclarationNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToEndOfFile", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToInitial", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNode", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBaseReader/XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToWhitespaceText", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlTextNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAttributes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAttributes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeNode")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadBytes", 
      new JSIL.MethodSignature($.Int32, [
          $asm09.TypeRef("System.Text.Encoding"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm09.TypeRef("System.Type"), $asm13.TypeRef("System.Xml.IXmlNamespaceResolver")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsFloat", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsGuid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsTimeSpan", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsUniqueId", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.UniqueId"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDateTimeArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDateTimeArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDecimalArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDecimalArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDoubleArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Double]), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDoubleArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Double]), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadGuidArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadGuidArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt16Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int16]), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt16Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int16]), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt32Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt32Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt64Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int64]), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInt64Array", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int64]), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadSingleArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Single]), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadSingleArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Single]), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadTimeSpanArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadTimeSpanArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SignAttribute", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlSigningNodeWriter"), $asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SignEndElement", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlSigningNodeWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SignNode", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SignNode", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlSigningNodeWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SignStartElement", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlSigningNodeWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBaseReader/XmlNode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "StartCanonicalization", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetBase64ContentLength", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetLocalNameAsDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetNamespaceUriAsDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValueAsDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.Field({Static:false, Public:false}, "bufferReader", $asm11.TypeRef("System.Xml.XmlBufferReader")); 
    $.Field({Static:false, Public:false}, "node", $asm11.TypeRef("System.Xml.XmlBaseReader/XmlNode")); 
    $.Field({Static:false, Public:false}, "nsMgr", $asm11.TypeRef("System.Xml.XmlBaseReader/NamespaceManager")); 
    $.Field({Static:false, Public:false}, "elementNodes", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlBaseReader/XmlElementNode")])); 
    $.Field({Static:false, Public:false}, "attributeNodes", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeNode")])); 
    $.Field({Static:false, Public:false}, "atomicTextNode", $asm11.TypeRef("System.Xml.XmlBaseReader/XmlAtomicTextNode")); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Field({Static:false, Public:false}, "attributeCount", $.Int32); 
    $.Field({Static:false, Public:false}, "attributeStart", $.Int32); 
    $.Field({Static:false, Public:false}, "quotas", $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas")); 
    $.Field({Static:false, Public:false}, "nameTable", $asm13.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "declarationNode", $asm11.TypeRef("System.Xml.XmlBaseReader/XmlDeclarationNode")); 
    $.Field({Static:false, Public:false}, "complexTextNode", $asm11.TypeRef("System.Xml.XmlBaseReader/XmlComplexTextNode")); 
    $.Field({Static:false, Public:false}, "whitespaceTextNode", $asm11.TypeRef("System.Xml.XmlBaseReader/XmlWhitespaceTextNode")); 
    $.Field({Static:false, Public:false}, "cdataNode", $asm11.TypeRef("System.Xml.XmlBaseReader/XmlCDataNode")); 
    $.Field({Static:false, Public:false}, "commentNode", $asm11.TypeRef("System.Xml.XmlBaseReader/XmlCommentNode")); 
    $.Field({Static:false, Public:false}, "rootElementNode", $asm11.TypeRef("System.Xml.XmlBaseReader/XmlElementNode")); 
    $.Field({Static:false, Public:false}, "attributeIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:false, Public:false}, "prefix", $.String); 
    $.Field({Static:false, Public:false}, "localName", $.String); 
    $.Field({Static:false, Public:false}, "ns", $.String); 
    $.Field({Static:false, Public:false}, "value", $.String); 
    $.Field({Static:false, Public:false}, "trailCharCount", $.Int32); 
    $.Field({Static:false, Public:false}, "trailByteCount", $.Int32); 
    $.Field({Static:false, Public:false}, "trailChars", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:false, Public:false}, "trailBytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "rootElement", $.Boolean); 
    $.Field({Static:false, Public:false}, "readingElement", $.Boolean); 
    $.Field({Static:false, Public:false}, "signingWriter", $asm11.TypeRef("System.Xml.XmlSigningNodeWriter")); 
    $.Field({Static:false, Public:false}, "signing", $.Boolean); 
    $.Field({Static:false, Public:false}, "attributeSorter", $asm11.TypeRef("System.Xml.XmlBaseReader/AttributeSorter")); 
    $.Field({Static:true , Public:false}, "initialNode", $asm11.TypeRef("System.Xml.XmlBaseReader/XmlInitialNode")); 
    $.Field({Static:true , Public:false}, "endOfFileNode", $asm11.TypeRef("System.Xml.XmlBaseReader/XmlEndOfFileNode")); 
    $.Field({Static:true , Public:false}, "closedNode", $asm11.TypeRef("System.Xml.XmlBaseReader/XmlClosedNode")); 
    $.Field({Static:true , Public:false}, "binhexEncoding", $asm11.TypeRef("System.Text.BinHexEncoding")); 
    $.Field({Static:true , Public:false}, "base64Encoding", $asm11.TypeRef("System.Text.Base64Encoding")); 
    $.Constant({Static:true , Public:false}, "xmlns", "xmlns"); 
    $.Constant({Static:true , Public:false}, "xml", "xml"); 
    $.Constant({Static:true , Public:false}, "xmlnsNamespace", "http://www.w3.org/2000/xmlns/"); 
    $.Constant({Static:true , Public:false}, "xmlNamespace", "http://www.w3.org/XML/1998/namespace"); 
    $.Property({Static:true , Public:false}, "BinHexEncoding", $asm11.TypeRef("System.Text.BinHexEncoding"));

    $.Property({Static:true , Public:false}, "Base64Encoding", $asm11.TypeRef("System.Text.Base64Encoding"));

    $.Property({Static:false, Public:false}, "BufferReader", $asm11.TypeRef("System.Xml.XmlBufferReader"));

    $.Property({Static:false, Public:true , Virtual:true }, "Quotas", $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"));

    $.Property({Static:false, Public:false}, "Node", $asm11.TypeRef("System.Xml.XmlBaseReader/XmlNode"));

    $.Property({Static:false, Public:false}, "ElementNode", $asm11.TypeRef("System.Xml.XmlBaseReader/XmlElementNode"));

    $.Property({Static:false, Public:false}, "OutsideRootElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm13.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm13.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm13.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm13.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanCanonicalize", $.Boolean);

    $.Property({Static:false, Public:false}, "Signing", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Xml.XmlBaseReader/QNameType */ 

JSIL.MakeEnum(
  "System.Xml.XmlBaseReader/QNameType", false, {
    Normal: 0, 
    Xmlns: 1
  }, false
);

/* class System.Xml.XmlBaseReader/XmlNode */ 

(function XmlNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBaseReader/XmlNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Xml.XmlNodeType"), $asm11.TypeRef("System.Xml.PrefixHandle"), 
          $asm11.TypeRef("System.Xml.StringHandle"), $asm11.TypeRef("System.Xml.ValueHandle"), 
          $asm11.TypeRef("System.Xml.XmlBaseReader/XmlNode/XmlNodeFlags"), $asm13.TypeRef("System.Xml.ReadState"), 
          $asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeTextNode"), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeText", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeTextNode"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_CanGetAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_CanMoveToElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_DepthDelta", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ExitScope", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_HasContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IsAtomicValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.StringHandle"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/Namespace"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlNodeType"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.PrefixHandle"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_QNameType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/QNameType"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_QuoteChar", 
      new JSIL.MethodSignature($.Char, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ReadState", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.ReadState"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_SkipValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.ValueHandle"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ValueAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsLocalName", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsLocalNameAndNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsLocalNameAndNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNamespaceUri", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsPrefixAndLocalName", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExitScope", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_IsAtomicValue", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_IsEmptyElement", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBaseReader/Namespace")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_NodeType", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlNodeType")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_QNameType", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBaseReader/QNameType")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_QuoteChar", 
      new JSIL.MethodSignature(null, [$.Char], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "TryGetLocalNameAsDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetNamespaceUriAsDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetValueAsDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.Field({Static:false, Public:false}, "nodeType", $asm13.TypeRef("System.Xml.XmlNodeType")); 
    $.Field({Static:false, Public:false}, "prefix", $asm11.TypeRef("System.Xml.PrefixHandle")); 
    $.Field({Static:false, Public:false}, "localName", $asm11.TypeRef("System.Xml.StringHandle")); 
    $.Field({Static:false, Public:false}, "value", $asm11.TypeRef("System.Xml.ValueHandle")); 
    $.Field({Static:false, Public:false}, "ns", $asm11.TypeRef("System.Xml.XmlBaseReader/Namespace")); 
    $.Field({Static:false, Public:false}, "hasValue", $.Boolean); 
    $.Field({Static:false, Public:false}, "canGetAttribute", $.Boolean); 
    $.Field({Static:false, Public:false}, "canMoveToElement", $.Boolean); 
    $.Field({Static:false, Public:false}, "readState", $asm13.TypeRef("System.Xml.ReadState")); 
    $.Field({Static:false, Public:false}, "attributeTextNode", $asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeTextNode")); 
    $.Field({Static:false, Public:false}, "exitScope", $.Boolean); 
    $.Field({Static:false, Public:false}, "depthDelta", $.Int32); 
    $.Field({Static:false, Public:false}, "isAtomicValue", $.Boolean); 
    $.Field({Static:false, Public:false}, "skipValue", $.Boolean); 
    $.Field({Static:false, Public:false}, "qnameType", $asm11.TypeRef("System.Xml.XmlBaseReader/QNameType")); 
    $.Field({Static:false, Public:false}, "hasContent", $.Boolean); 
    $.Field({Static:false, Public:false}, "isEmptyElement", $.Boolean); 
    $.Field({Static:false, Public:false}, "quoteChar", $.Char); 
    $.Property({Static:false, Public:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true }, "ReadState", $asm13.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true }, "LocalName", $asm11.TypeRef("System.Xml.StringHandle"));

    $.Property({Static:false, Public:true }, "Prefix", $asm11.TypeRef("System.Xml.PrefixHandle"));

    $.Property({Static:false, Public:true }, "CanGetAttribute", $.Boolean);

    $.Property({Static:false, Public:true }, "CanMoveToElement", $.Boolean);

    $.Property({Static:false, Public:true }, "AttributeText", $asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeTextNode"));

    $.Property({Static:false, Public:true }, "SkipValue", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $asm11.TypeRef("System.Xml.ValueHandle"));

    $.Property({Static:false, Public:true }, "DepthDelta", $.Int32);

    $.Property({Static:false, Public:true }, "HasContent", $.Boolean);

    $.Property({Static:false, Public:true }, "NodeType", $asm13.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true }, "QNameType", $asm11.TypeRef("System.Xml.XmlBaseReader/QNameType"));

    $.Property({Static:false, Public:true }, "Namespace", $asm11.TypeRef("System.Xml.XmlBaseReader/Namespace"));

    $.Property({Static:false, Public:true }, "IsAtomicValue", $.Boolean);

    $.Property({Static:false, Public:true }, "ExitScope", $.Boolean);

    $.Property({Static:false, Public:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true }, "ValueAsString", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlBaseReader/XmlNode/XmlNodeFlags */ 

JSIL.MakeEnum(
  "System.Xml.XmlBaseReader/XmlNode/XmlNodeFlags", false, {
    None: 0, 
    CanGetAttribute: 1, 
    CanMoveToElement: 2, 
    HasValue: 4, 
    AtomicValue: 8, 
    SkipValue: 16, 
    HasContent: 32
  }, false
);

/* class System.Xml.XmlBaseReader/XmlElementNode */ 

(function XmlElementNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlBaseReader/XmlNode"), 
      Name: "System.Xml.XmlBaseReader/XmlElementNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBufferReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.PrefixHandle"), $asm11.TypeRef("System.Xml.StringHandle"), 
          $asm11.TypeRef("System.Xml.ValueHandle")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BufferOffset", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_EndElement", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlEndElementNode"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_BufferOffset", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "endElementNode", $asm11.TypeRef("System.Xml.XmlBaseReader/XmlEndElementNode")); 
    $.Field({Static:false, Public:false}, "bufferOffset", $.Int32); 
    $.Field({Static:false, Public:true }, "NameOffset", $.Int32); 
    $.Field({Static:false, Public:true }, "NameLength", $.Int32); 
    $.Property({Static:false, Public:true }, "EndElement", $asm11.TypeRef("System.Xml.XmlBaseReader/XmlEndElementNode"));

    $.Property({Static:false, Public:true }, "BufferOffset", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader/XmlAttributeNode */ 

(function XmlAttributeNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlBaseReader/XmlNode"), 
      Name: "System.Xml.XmlBaseReader/XmlAttributeNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBufferReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.PrefixHandle"), $asm11.TypeRef("System.Xml.StringHandle"), 
          $asm11.TypeRef("System.Xml.ValueHandle")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader/XmlEndElementNode */ 

(function XmlEndElementNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlBaseReader/XmlNode"), 
      Name: "System.Xml.XmlBaseReader/XmlEndElementNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.PrefixHandle"), $asm11.TypeRef("System.Xml.StringHandle"), 
          $asm11.TypeRef("System.Xml.ValueHandle")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader/XmlTextNode */ 

(function XmlTextNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlBaseReader/XmlNode"), 
      Name: "System.Xml.XmlBaseReader/XmlTextNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Xml.XmlNodeType"), $asm11.TypeRef("System.Xml.PrefixHandle"), 
          $asm11.TypeRef("System.Xml.StringHandle"), $asm11.TypeRef("System.Xml.ValueHandle"), 
          $asm11.TypeRef("System.Xml.XmlBaseReader/XmlNode/XmlNodeFlags"), $asm13.TypeRef("System.Xml.ReadState"), 
          $asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeTextNode"), $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader/XmlAtomicTextNode */ 

(function XmlAtomicTextNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlBaseReader/XmlTextNode"), 
      Name: "System.Xml.XmlBaseReader/XmlAtomicTextNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBufferReader")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader/XmlComplexTextNode */ 

(function XmlComplexTextNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlBaseReader/XmlTextNode"), 
      Name: "System.Xml.XmlBaseReader/XmlComplexTextNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBufferReader")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader/XmlWhitespaceTextNode */ 

(function XmlWhitespaceTextNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlBaseReader/XmlTextNode"), 
      Name: "System.Xml.XmlBaseReader/XmlWhitespaceTextNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBufferReader")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader/XmlCDataNode */ 

(function XmlCDataNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlBaseReader/XmlTextNode"), 
      Name: "System.Xml.XmlBaseReader/XmlCDataNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBufferReader")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader/XmlAttributeTextNode */ 

(function XmlAttributeTextNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlBaseReader/XmlTextNode"), 
      Name: "System.Xml.XmlBaseReader/XmlAttributeTextNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.PrefixHandle"), $asm11.TypeRef("System.Xml.StringHandle"), 
          $asm11.TypeRef("System.Xml.ValueHandle")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader/XmlInitialNode */ 

(function XmlInitialNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlBaseReader/XmlNode"), 
      Name: "System.Xml.XmlBaseReader/XmlInitialNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBufferReader")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader/XmlDeclarationNode */ 

(function XmlDeclarationNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlBaseReader/XmlNode"), 
      Name: "System.Xml.XmlBaseReader/XmlDeclarationNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBufferReader")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader/XmlCommentNode */ 

(function XmlCommentNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlBaseReader/XmlNode"), 
      Name: "System.Xml.XmlBaseReader/XmlCommentNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBufferReader")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader/XmlEndOfFileNode */ 

(function XmlEndOfFileNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlBaseReader/XmlNode"), 
      Name: "System.Xml.XmlBaseReader/XmlEndOfFileNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBufferReader")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader/XmlClosedNode */ 

(function XmlClosedNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlBaseReader/XmlNode"), 
      Name: "System.Xml.XmlBaseReader/XmlClosedNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBufferReader")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader/AttributeSorter */ 

(function AttributeSorter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBaseReader/AttributeSorter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareQNameType", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Xml.XmlBaseReader/QNameType"), $asm11.TypeRef("System.Xml.XmlBaseReader/QNameType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetIndeces", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSorted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Sort", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeNode")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Sort", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "indeces", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:false}, "attributeNodes", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeNode")])); 
    $.Field({Static:false, Public:false}, "attributeCount", $.Int32); 
    $.Field({Static:false, Public:false}, "attributeIndex1", $.Int32); 
    $.Field({Static:false, Public:false}, "attributeIndex2", $.Int32); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.IComparer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader/NamespaceManager */ 

(function NamespaceManager$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBaseReader/NamespaceManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBufferReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddLangAttribute", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddNamespace", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/Namespace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddSpaceAttribute", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlSpace")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnterScope", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExitScope", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_EmptyNamespace", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/Namespace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_XmlNamespace", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/Namespace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlSpace"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/Namespace"), [$asm11.TypeRef("System.Xml.PrefixHandleType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/Namespace"), [$asm11.TypeRef("System.Xml.PrefixHandle")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/Namespace"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Register", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBaseReader/Namespace")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Sign", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlSigningNodeWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetShortPrefix", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.PrefixHandleType")])], [])
    );

    $.Field({Static:false, Public:false}, "bufferReader", $asm11.TypeRef("System.Xml.XmlBufferReader")); 
    $.Field({Static:false, Public:false}, "namespaces", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlBaseReader/Namespace")])); 
    $.Field({Static:false, Public:false}, "nsCount", $.Int32); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Field({Static:false, Public:false}, "shortPrefixUri", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlBaseReader/Namespace")])); 
    $.Field({Static:true , Public:false}, "emptyNamespace", $asm11.TypeRef("System.Xml.XmlBaseReader/Namespace")); 
    $.Field({Static:true , Public:false}, "xmlNamespace", $asm11.TypeRef("System.Xml.XmlBaseReader/Namespace")); 
    $.Field({Static:false, Public:false}, "attributes", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlBaseReader/NamespaceManager/XmlAttribute")])); 
    $.Field({Static:false, Public:false}, "attributeCount", $.Int32); 
    $.Field({Static:false, Public:false}, "space", $asm13.TypeRef("System.Xml.XmlSpace")); 
    $.Field({Static:false, Public:false}, "lang", $.String); 
    $.Property({Static:true , Public:true }, "XmlNamespace", $asm11.TypeRef("System.Xml.XmlBaseReader/Namespace"));

    $.Property({Static:true , Public:true }, "EmptyNamespace", $asm11.TypeRef("System.Xml.XmlBaseReader/Namespace"));

    $.Property({Static:false, Public:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true }, "XmlSpace", $asm13.TypeRef("System.Xml.XmlSpace"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader/NamespaceManager/XmlAttribute */ 

(function XmlAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBaseReader/NamespaceManager/XmlAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlSpace"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Depth", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_XmlLang", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_XmlSpace", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlSpace")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "space", $asm13.TypeRef("System.Xml.XmlSpace")); 
    $.Field({Static:false, Public:false}, "lang", $.String); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Property({Static:false, Public:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true }, "XmlSpace", $asm13.TypeRef("System.Xml.XmlSpace"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader/Namespace */ 

(function Namespace$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBaseReader/Namespace", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBufferReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_OuterUri", 
      new JSIL.MethodSignature($.Type, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.PrefixHandle"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Uri", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.StringHandle"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "IsUri", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsUri", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Depth", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_OuterUri", 
      new JSIL.MethodSignature(null, [$.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "prefix", $asm11.TypeRef("System.Xml.PrefixHandle")); 
    $.Field({Static:false, Public:false}, "uri", $asm11.TypeRef("System.Xml.StringHandle")); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Field({Static:false, Public:false}, "outerUri", $.Type); 
    $.Field({Static:false, Public:false}, "uriString", $.String); 
    $.Property({Static:false, Public:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true }, "Prefix", $asm11.TypeRef("System.Xml.PrefixHandle"));

    $.Property({Static:false, Public:true }, "Uri", $asm11.TypeRef("System.Xml.StringHandle"));

    $.Property({Static:false, Public:true }, "OuterUri", $.Type);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlBaseReader/QuotaNameTable */ 

(function QuotaNameTable$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm13.TypeRef("System.Xml.XmlNameTable"), 
      Name: "System.Xml.XmlBaseReader/QuotaNameTable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "reader", $asm11.TypeRef("System.Xml.XmlDictionaryReader")); 
    $.Field({Static:false, Public:false}, "nameTable", $asm13.TypeRef("System.Xml.XmlNameTable")); 
    $.Field({Static:false, Public:false}, "maxCharCount", $.Int32); 
    $.Field({Static:false, Public:false}, "charCount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xml.IXmlTextReaderInitializer */ 

JSIL.MakeInterface(
  "System.Xml.IXmlTextReaderInitializer", true, [], function ($) {
    $.Method({}, "SetInput", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Text.Encoding"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], []));
    $.Method({}, "SetInput", new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], []));
  }, []);

/* class System.Xml.XmlUTF8TextReader */ 

(function XmlUTF8TextReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlBaseReader"), 
      Name: "System.Xml.XmlUTF8TextReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BreakText", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BufferElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSigningNodeWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlSigningNodeWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPosition", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToInitial", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAttributes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAttributeText", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCData", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCharRef", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadComment", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadDeclaration", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadEscapedText", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNonFFFE", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadQualifiedName", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.PrefixHandle"), $asm11.TypeRef("System.Xml.StringHandle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadStartElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadText", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadText", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadWhitespace", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadWhitespace", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInput", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Text.Encoding"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInput", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipWhitespace", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyNCName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "prefix", $asm11.TypeRef("System.Xml.PrefixHandle")); 
    $.Field({Static:false, Public:false}, "localName", $asm11.TypeRef("System.Xml.StringHandle")); 
    $.Field({Static:false, Public:false}, "rowOffsets", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "onClose", $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")); 
    $.Field({Static:false, Public:false}, "buffered", $.Boolean); 
    $.Field({Static:false, Public:false}, "maxBytesPerRead", $.Int32); 
    $.Field({Static:true , Public:false}, "charType", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Constant({Static:true , Public:false}, "MaxTextChunk", 2048); 
    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm13.TypeRef("System.Xml.IXmlLineInfo"), 
      /* 2 */ $asm11.TypeRef("System.Xml.IXmlTextReaderInitializer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlUTF8TextReader/CharType */ 

(function CharType$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Xml.XmlUTF8TextReader/CharType", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "None", 0); 
    $.Constant({Static:true , Public:true }, "FirstName", 1); 
    $.Constant({Static:true , Public:true }, "Name", 2); 
    $.Constant({Static:true , Public:true }, "Whitespace", 4); 
    $.Constant({Static:true , Public:true }, "Text", 8); 
    $.Constant({Static:true , Public:true }, "AttributeText", 16); 
    $.Constant({Static:true , Public:true }, "SpecialWhitespace", 32); 
    $.Constant({Static:true , Public:true }, "Comment", 64); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xml.IXmlBinaryReaderInitializer */ 

JSIL.MakeInterface(
  "System.Xml.IXmlBinaryReaderInitializer", true, [], function ($) {
    $.Method({}, "SetInput", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm11.TypeRef("System.Xml.IXmlDictionary"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.XmlBinaryReaderSession"), 
          $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], []));
    $.Method({}, "SetInput", new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Xml.IXmlDictionary"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.XmlBinaryReaderSession"), 
          $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], []));
  }, []);

/* class System.Xml.XmlBinaryReader */ 

(function XmlBinaryReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlBaseReader"), 
      Name: "System.Xml.XmlBinaryReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "CanOptimizeReadElementContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckArray", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSigningNodeWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlSigningNodeWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNodeType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBinaryNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InsertNode", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBinaryNodeType"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartArray", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsStartArray", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $asm11.TypeRef("System.Xml.XmlBinaryNodeType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsStartArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlBinaryNodeType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidArrayType", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlBinaryNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToArrayElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToAtomicTextWithEndElement", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBaseReader/XmlAtomicTextNode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToInitial", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.XmlBinaryReaderSession"), 
          $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Int64]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Int64]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Single]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Single]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Double]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$.Double]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Int64]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Single]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Double]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAttributes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAttributes2", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAttributeText", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBaseReader/XmlAttributeTextNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadBinaryText", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBaseReader/XmlTextNode"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadDictionaryKey", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadDictionaryName", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.StringHandle")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDateTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDecimal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsFloat", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsGuid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsTimeSpan", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsUniqueId", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.UniqueId"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadMultiByteUInt31", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadName", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.ValueHandle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadName", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.StringHandle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadName", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.PrefixHandle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNode", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadPartialBinaryText", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadPartialUnicodeText", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadPartialUTF8Text", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadText", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlBaseReader/XmlTextNode"), $asm11.TypeRef("System.Xml.ValueHandleType"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadTextWithEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUInt16", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUInt31", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUInt8", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUnicodeText", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInput", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm11.TypeRef("System.Xml.IXmlDictionary"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.XmlBinaryReaderSession"), 
          $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInput", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Xml.IXmlDictionary"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.XmlBinaryReaderSession"), 
          $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipArrayElements", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipNodeType", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetArrayLength", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetBase64ContentLength", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyWhitespace", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "isTextWithEndElement", $.Boolean); 
    $.Field({Static:false, Public:false}, "buffered", $.Boolean); 
    $.Field({Static:false, Public:false}, "arrayState", $asm11.TypeRef("System.Xml.XmlBinaryReader/ArrayState")); 
    $.Field({Static:false, Public:false}, "arrayCount", $.Int32); 
    $.Field({Static:false, Public:false}, "maxBytesPerRead", $.Int32); 
    $.Field({Static:false, Public:false}, "arrayNodeType", $asm11.TypeRef("System.Xml.XmlBinaryNodeType")); 
    $.Field({Static:false, Public:false}, "onClose", $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")); 
    $.ImplementInterfaces(
      /* 1 */ $asm11.TypeRef("System.Xml.IXmlBinaryReaderInitializer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlBinaryReader/ArrayState */ 

JSIL.MakeEnum(
  "System.Xml.XmlBinaryReader/ArrayState", false, {
    None: 0, 
    Element: 1, 
    Content: 2
  }, false
);

/* class System.Xml.XmlBufferReader */ 

(function XmlBufferReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.XmlBufferReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Advance", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureByte", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureBytes", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Type, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Buffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_Empty", 
      new JSIL.MethodSignature($.Type, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_EndOfFile", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsStreamed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Offset", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "GetAmpersandCharEntity", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetApostropheCharEntity", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBase64", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBufferHard", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetByte", 
      new JSIL.MethodSignature($.Byte, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetByteHard", 
      new JSIL.MethodSignature($.Byte, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCharBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCharEntity", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Char])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDecimal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetDecimalCharEntity", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDictionaryString", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetEscapedChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Char])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEscapedString", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEscapedString", 
      new JSIL.MethodSignature($.String, [
          $.Int32, $.Int32, 
          $asm13.TypeRef("System.Xml.XmlNameTable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetGreaterThanCharEntity", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetGuid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHexCharEntity", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInt16", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInt8", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLessThanCharEntity", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetList", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNodeType", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlBinaryNodeType"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "GetQuoteCharEntity", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRows", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSingle", 
      new JSIL.MethodSignature($.Single, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [
          $.Int32, $.Int32, 
          $asm13.TypeRef("System.Xml.XmlNameTable")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "GetUnicodeString", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUniqueId", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.UniqueId"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertBytes", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAttrChar", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsWhitespaceKey", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsWhitespaceUnicode", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsWhitespaceUTF8", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadBytes", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadDateTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadDecimal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ReadDictionaryKey", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ReadGuid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadInt16", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadInt32", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadInt64", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadInt8", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadList", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.ValueHandle")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadMultiByteUInt31", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadQName", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.ValueHandle")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadSingle", 
      new JSIL.MethodSignature($.Single, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ReadTimeSpan", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadUInt16", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadUInt31", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadUInt8", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUnicodeValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.ValueHandle"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadUniqueId", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.UniqueId"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadUTF8String", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBinaryNodeType"), $asm11.TypeRef("System.Xml.ValueHandle")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.ValueHandle"), $asm11.TypeRef("System.Xml.ValueHandleType"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Offset", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetBuffer", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Xml.IXmlDictionary"), 
          $asm11.TypeRef("System.Xml.XmlBinaryReaderSession")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetBuffer", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm11.TypeRef("System.Xml.IXmlDictionary"), 
          $asm11.TypeRef("System.Xml.XmlBinaryReaderSession")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "SetBuffer", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $asm11.TypeRef("System.Xml.IXmlDictionary"), $asm11.TypeRef("System.Xml.XmlBinaryReaderSession")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetWindow", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SkipByte", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SkipNodeType", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "TryEnsureByte", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEnsureBytes", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "UnsafeReadArray", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeReadArray", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "reader", $asm11.TypeRef("System.Xml.XmlDictionaryReader")); 
    $.Field({Static:false, Public:false}, "stream", $asm09.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "streamBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "offsetMin", $.Int32); 
    $.Field({Static:false, Public:false}, "offsetMax", $.Int32); 
    $.Field({Static:false, Public:false}, "dictionary", $asm11.TypeRef("System.Xml.IXmlDictionary")); 
    $.Field({Static:false, Public:false}, "session", $asm11.TypeRef("System.Xml.XmlBinaryReaderSession")); 
    $.Field({Static:false, Public:false}, "guid", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "offset", $.Int32); 
    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:false, Public:false}, "windowOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "windowOffsetMax", $.Int32); 
    $.Field({Static:false, Public:false}, "listValue", $asm11.TypeRef("System.Xml.ValueHandle")); 
    $.Field({Static:true , Public:false}, "emptyByteArray", $jsilcore.TypeRef("System.Array", [$.Byte]), function ($pi) {
        return JSIL.Array.New($asm09.System.Byte, 0);
      }); 
    $.Field({Static:true , Public:false}, "empty", $.Type); 
    $.Constant({Static:true , Public:false}, "maxBytesPerChar", 3); 
    $.Property({Static:true , Public:true }, "Empty", $.Type);

    $.Property({Static:false, Public:true }, "Buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "IsStreamed", $.Boolean);

    $.Property({Static:false, Public:true }, "EndOfFile", $.Boolean);

    $.Property({Static:false, Public:true }, "Offset", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlConverter */ 

(function XmlConverter$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Xml.XmlConverter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "get_Base64Encoding", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Text.Base64Encoding"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnicodeEncoding", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Text.UnicodeEncoding"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UTF8Encoding", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Text.UTF8Encoding"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNegativeZero", 
      new JSIL.MethodSignature($.Boolean, [$.Single], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsNegativeZero", 
      new JSIL.MethodSignature($.Boolean, [$.Double], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "IsWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "StripWhitespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToAsciiChars", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Double, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChars", 
      new JSIL.MethodSignature($.Int32, [
          $.Single, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChars", 
      new JSIL.MethodSignature($.Int32, [
          $asm09.TypeRef("System.Decimal"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChars", 
      new JSIL.MethodSignature($.Int32, [
          $.UInt64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChars", 
      new JSIL.MethodSignature($.Int32, [
          $asm09.TypeRef("System.DateTime"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToCharsD2", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToCharsD4", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToCharsD7", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToCharsR", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToCharsR", 
      new JSIL.MethodSignature($.Int32, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [$.Int64], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToGuid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToGuid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToInfinity", 
      new JSIL.MethodSignature($.Int32, [
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToInt32D2", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToInt32D4", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToInt32D7", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToQualifiedName", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int64], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Double], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Xml.UniqueId")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Guid")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.UInt64], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToStringUnicode", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToTimeSpan", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToTimeSpan", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUniqueId", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.UniqueId"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUniqueId", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.UniqueId"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToZero", 
      new JSIL.MethodSignature($.Int32, [
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Trim", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseDateTime", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.DateTime")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseDouble", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Double])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseInt32", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseInt64", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseSingle", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ], [])
    );

    $.Constant({Static:true , Public:true }, "MaxDateTimeChars", 64); 
    $.Constant({Static:true , Public:true }, "MaxInt32Chars", 16); 
    $.Constant({Static:true , Public:true }, "MaxInt64Chars", 32); 
    $.Constant({Static:true , Public:true }, "MaxBoolChars", 5); 
    $.Constant({Static:true , Public:true }, "MaxFloatChars", 16); 
    $.Constant({Static:true , Public:true }, "MaxDoubleChars", 32); 
    $.Constant({Static:true , Public:true }, "MaxDecimalChars", 40); 
    $.Constant({Static:true , Public:true }, "MaxUInt64Chars", 32); 
    $.Constant({Static:true , Public:true }, "MaxPrimitiveChars", 64); 
    $.Field({Static:true , Public:false}, "whiteSpaceChars", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:true , Public:false}, "utf8Encoding", $asm09.TypeRef("System.Text.UTF8Encoding")); 
    $.Field({Static:true , Public:false}, "unicodeEncoding", $asm09.TypeRef("System.Text.UnicodeEncoding")); 
    $.Field({Static:true , Public:false}, "base64Encoding", $asm11.TypeRef("System.Text.Base64Encoding")); 
    $.Property({Static:true , Public:true }, "Base64Encoding", $asm11.TypeRef("System.Text.Base64Encoding"));

    $.Property({Static:true , Public:false}, "UTF8Encoding", $asm09.TypeRef("System.Text.UTF8Encoding"));

    $.Property({Static:true , Public:false}, "UnicodeEncoding", $asm09.TypeRef("System.Text.UnicodeEncoding"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlExceptionHelper */ 

(function XmlExceptionHelper$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Xml.XmlExceptionHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "CreateConversionException", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlException"), [
          $.String, $.String, 
          $asm09.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateEncodingException", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlException"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateEncodingException", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlException"), [$.String, $asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetName", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetWhatWasFound", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowBase64DataExpected", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowConversionOverflow", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ThrowDeclarationNotFirst", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ThrowDuplicateAttribute", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowDuplicateXmlnsAttribute", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowEmptyNamespace", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ThrowEndElementExpected", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowFullStartElementExpected", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowFullStartElementExpected", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowFullStartElementExpected", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowFullStartElementExpected", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowInvalidBinaryFormat", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ThrowInvalidCharRef", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ThrowInvalidRootData", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ThrowInvalidXml", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Byte], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowMaxArrayLengthExceeded", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowMaxArrayLengthOrMaxItemsQuotaExceeded", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowMaxBytesPerReadExceeded", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowMaxDepthExceeded", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowMaxNameTableCharCountExceeded", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowMaxStringContentLengthExceeded", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowMultipleRootElements", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ThrowProcessingInstructionNotSupported", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ThrowStartElementExpected", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowStartElementExpected", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowStartElementExpected", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowStartElementExpected", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowTagMismatch", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowTokenExpected", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.Char
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowTokenExpected", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ThrowUndefinedPrefix", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ThrowUnexpectedEndElement", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ThrowUnexpectedEndOfFile", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowXmlDictionaryStringIDOutOfRange", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowXmlDictionaryStringIDUndefinedSession", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowXmlDictionaryStringIDUndefinedStatic", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowXmlException", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "ThrowXmlException", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "ThrowXmlException", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "ThrowXmlException", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowXmlException", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $asm13.TypeRef("System.Xml.XmlException")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.PrefixHandleType */ 

JSIL.MakeEnum(
  "System.Xml.PrefixHandleType", false, {
    Empty: 0, 
    A: 1, 
    B: 2, 
    C: 3, 
    D: 4, 
    E: 5, 
    F: 6, 
    G: 7, 
    H: 8, 
    I: 9, 
    J: 10, 
    K: 11, 
    L: 12, 
    M: 13, 
    N: 14, 
    O: 15, 
    P: 16, 
    Q: 17, 
    R: 18, 
    S: 19, 
    T: 20, 
    U: 21, 
    V: 22, 
    W: 23, 
    X: 24, 
    Y: 25, 
    Z: 26, 
    Buffer: 27, 
    Max: 28
  }, false
);

/* class System.Xml.PrefixHandle */ 

(function PrefixHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.PrefixHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBufferReader")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsXml", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsXmlns", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetAlphaPrefix", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.PrefixHandleType"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Xml.PrefixHandleType")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm11.TypeRef("System.Xml.PrefixHandleType"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$asm13.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.PrefixHandleType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "TryGetShortPrefix", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.PrefixHandleType")])], [])
    );

    $.Field({Static:false, Public:false}, "bufferReader", $asm11.TypeRef("System.Xml.XmlBufferReader")); 
    $.Field({Static:false, Public:false}, "type", $asm11.TypeRef("System.Xml.PrefixHandleType")); 
    $.Field({Static:false, Public:false}, "offset", $.Int32); 
    $.Field({Static:false, Public:false}, "$length", $.Int32); 
    $.Field({Static:true , Public:false}, "prefixStrings", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:true , Public:false}, "prefixBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:true }, "IsXmlns", $.Boolean);

    $.Property({Static:false, Public:true }, "IsXml", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.StringHandleConstStringType */ 

JSIL.MakeEnum(
  "System.Xml.StringHandleConstStringType", false, {
    Type: 0, 
    Root: 1, 
    Item: 2
  }, false
);

/* class System.Xml.StringHandle */ 

(function StringHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.StringHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBufferReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $asm11.TypeRef("System.Xml.XmlBufferReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $asm11.TypeRef("System.Xml.XmlBufferReader")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsXmlns", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$asm13.TypeRef("System.Xml.XmlNameTable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetConstantValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.StringHandleConstStringType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToPrefixHandle", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.PrefixHandle")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "TryGetDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.Field({Static:false, Public:false}, "bufferReader", $asm11.TypeRef("System.Xml.XmlBufferReader")); 
    $.Field({Static:false, Public:false}, "type", $asm11.TypeRef("System.Xml.StringHandle/StringHandleType")); 
    $.Field({Static:false, Public:false}, "key", $.Int32); 
    $.Field({Static:false, Public:false}, "offset", $.Int32); 
    $.Field({Static:false, Public:false}, "$length", $.Int32); 
    $.Field({Static:true , Public:false}, "constStrings", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:true }, "IsXmlns", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.StringHandle/StringHandleType */ 

JSIL.MakeEnum(
  "System.Xml.StringHandle/StringHandleType", false, {
    Dictionary: 0, 
    UTF8: 1, 
    EscapedUTF8: 2, 
    ConstString: 3
  }, false
);

/* enum System.Xml.ValueHandleConstStringType */ 

JSIL.MakeEnum(
  "System.Xml.ValueHandleConstStringType", false, {
    String: 0, 
    Number: 1, 
    Array: 2, 
    Object: 3, 
    Boolean: 4, 
    Null: 5
  }, false
);

/* class System.Xml.ValueHandleLength */ 

(function ValueHandleLength$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Xml.ValueHandleLength", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "Int8", 1); 
    $.Constant({Static:true , Public:true }, "Int16", 2); 
    $.Constant({Static:true , Public:true }, "Int32", 4); 
    $.Constant({Static:true , Public:true }, "Int64", 8); 
    $.Constant({Static:true , Public:true }, "UInt64", 8); 
    $.Constant({Static:true , Public:true }, "Single", 4); 
    $.Constant({Static:true , Public:true }, "Double", 8); 
    $.Constant({Static:true , Public:true }, "Decimal", 16); 
    $.Constant({Static:true , Public:true }, "DateTime", 8); 
    $.Constant({Static:true , Public:true }, "TimeSpan", 8); 
    $.Constant({Static:true , Public:true }, "Guid", 16); 
    $.Constant({Static:true , Public:true }, "UniqueId", 16); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.ValueHandleType */ 

JSIL.MakeEnum(
  "System.Xml.ValueHandleType", false, {
    Empty: 0, 
    True: 1, 
    False: 2, 
    Zero: 3, 
    One: 4, 
    Int8: 5, 
    Int16: 6, 
    Int32: 7, 
    Int64: 8, 
    UInt64: 9, 
    Single: 10, 
    Double: 11, 
    Decimal: 12, 
    DateTime: 13, 
    TimeSpan: 14, 
    Guid: 15, 
    UniqueId: 16, 
    UTF8: 17, 
    EscapedUTF8: 18, 
    Base64: 19, 
    Dictionary: 20, 
    List: 21, 
    Char: 22, 
    Unicode: 23, 
    QName: 24, 
    ConstString: 25
  }, false
);

/* class System.Xml.ValueHandle */ 

(function ValueHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Xml.ValueHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBufferReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals2", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Base64Encoding", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Text.Base64Encoding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChar", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCharsText", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCharText", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDecimal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDictionaryString", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEscapedCharsText", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetGuid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInt16", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInt8", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetQNameDictionaryText", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSingle", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUInt64", 
      new JSIL.MethodSignature($.UInt64, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUnicodeCharsText", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUniqueId", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.UniqueId"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsWhitespace", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetCharValue", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetConstantValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.ValueHandleConstStringType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetDictionaryValue", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetQNameValue", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.ValueHandleType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.ValueHandleType"), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Sign", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlSigningNodeWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToByteArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToGuid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToList", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ToTimeSpan", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToULong", 
      new JSIL.MethodSignature($.UInt64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToUniqueId", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.UniqueId"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetByteArrayLength", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetDictionaryString", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryReadBase64", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryReadChars", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadUnicodeChars", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.Field({Static:false, Public:false}, "bufferReader", $asm11.TypeRef("System.Xml.XmlBufferReader")); 
    $.Field({Static:false, Public:false}, "type", $asm11.TypeRef("System.Xml.ValueHandleType")); 
    $.Field({Static:false, Public:false}, "offset", $.Int32); 
    $.Field({Static:false, Public:false}, "$length", $.Int32); 
    $.Field({Static:true , Public:false}, "base64Encoding", $asm11.TypeRef("System.Text.Base64Encoding")); 
    $.Field({Static:true , Public:false}, "constStrings", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Property({Static:true , Public:false}, "Base64Encoding", $asm11.TypeRef("System.Text.Base64Encoding"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.EncodingStreamWrapper */ 

(function EncodingStreamWrapper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.IO.Stream"), 
      Name: "System.Xml.EncodingStreamWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckUTF8DeclarationEncoding", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm11.TypeRef("System.Xml.EncodingStreamWrapper/SupportedEncoding"), 
          $asm11.TypeRef("System.Xml.EncodingStreamWrapper/SupportedEncoding")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupCharBreak", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Compare", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareCaseInsensitive", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureBuffers", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureByteBuffer", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillBuffer", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEncoding", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Text.Encoding"), [$asm11.TypeRef("System.Xml.EncodingStreamWrapper/SupportedEncoding")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEncodingName", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Xml.EncodingStreamWrapper/SupportedEncoding")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSafeEncoding", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Text.Encoding"), [$asm11.TypeRef("System.Xml.EncodingStreamWrapper/SupportedEncoding")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSupportedEncoding", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.EncodingStreamWrapper/SupportedEncoding"), [$asm09.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.Byte], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcessBuffer", 
      new JSIL.MethodSignature($asm09.TypeRef("System.ArraySegment`1", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Text.Encoding")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadBOMEncoding", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.EncodingStreamWrapper/SupportedEncoding"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadBOMEncoding", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.EncodingStreamWrapper/SupportedEncoding"), [
          $.Byte, $.Byte, 
          $.Byte, $.Byte, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm09.TypeRef("System.IO.SeekOrigin")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetReadDocumentEncoding", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.EncodingStreamWrapper/SupportedEncoding")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowEncodingMismatch", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.EncodingStreamWrapper/SupportedEncoding")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowEncodingMismatch", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowExpectedEncodingMismatch", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.EncodingStreamWrapper/SupportedEncoding"), $asm11.TypeRef("System.Xml.EncodingStreamWrapper/SupportedEncoding")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      new JSIL.MethodSignature(null, [$.Byte], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SafeUTF8", $asm09.TypeRef("System.Text.UTF8Encoding")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SafeUTF16", $asm09.TypeRef("System.Text.UnicodeEncoding")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SafeBEUTF16", $asm09.TypeRef("System.Text.UnicodeEncoding")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ValidatingUTF8", $asm09.TypeRef("System.Text.UTF8Encoding")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ValidatingUTF16", $asm09.TypeRef("System.Text.UnicodeEncoding")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ValidatingBEUTF16", $asm09.TypeRef("System.Text.UnicodeEncoding")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "encodingAttr", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "encodingUTF8", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "encodingUnicode", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "encodingUnicodeLE", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "encodingUnicodeBE", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "encodingCode", $asm11.TypeRef("System.Xml.EncodingStreamWrapper/SupportedEncoding")); 
    $.Field({Static:false, Public:false}, "encoding", $asm09.TypeRef("System.Text.Encoding")); 
    $.Field({Static:false, Public:false}, "enc", $asm09.TypeRef("System.Text.Encoder")); 
    $.Field({Static:false, Public:false}, "dec", $asm09.TypeRef("System.Text.Decoder")); 
    $.Field({Static:false, Public:false}, "isReading", $.Boolean); 
    $.Field({Static:false, Public:false}, "stream", $asm09.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:false, Public:false}, "bytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "byteOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "byteCount", $.Int32); 
    $.Field({Static:false, Public:false}, "byteBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Constant({Static:true , Public:false}, "BufferLength", 128); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.EncodingStreamWrapper/SupportedEncoding */ 

JSIL.MakeEnum(
  "System.Xml.EncodingStreamWrapper/SupportedEncoding", false, {
    UTF8: 0, 
    UTF16LE: 1, 
    UTF16BE: 2, 
    None: 3
  }, false
);

JSIL.DeclareNamespace("System.Runtime.Serialization.Json");
/* class System.Runtime.Serialization.Json.DataContractJsonSerializer */ 

(function DataContractJsonSerializer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), 
      Name: "System.Runtime.Serialization.Json.DataContractJsonSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $.String, 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $.String, 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")]), $.Int32, 
          $.Boolean, $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")]), $.Int32, 
          $.Boolean, $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCollectionItemTypeToKnownTypes", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckIfJsonNameRequiresMapping", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckIfJsonNameRequiresMapping", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckIfTypeIsReference", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckIfXmlNameRequiresMapping", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckIfXmlNameRequiresMapping", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertXmlNameToJsonName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertXmlNameToJsonName", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [$asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AlwaysEmitTypeInformation", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_DataContractSurrogate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreExtensionDataObject", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_KnownDataContracts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KnownTypes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Type")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxItemsInObjectGraph", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_RootContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RootName", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDeserializeType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSerializeType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")]), 
          $.Int32, $.Boolean, 
          $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")]), $.Int32, 
          $.Boolean, $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalIsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalReadObject", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteEndObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalWriteStartObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsJsonLocalName", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm13.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadJsonValue", 
      new JSIL.MethodSignature($.Object, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), 
          $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm09.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm13.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm13.TypeRef("System.Xml.XmlReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Xml.XmlDictionaryReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryWriter")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteJsonNull", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteJsonValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), 
          $.Object, $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson"), 
          $asm09.TypeRef("System.RuntimeTypeHandle")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object], [])
    );

    $.Field({Static:false, Public:false}, "knownTypeList", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:false}, "knownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])); 
    $.Field({Static:false, Public:false}, "alwaysEmitTypeInformation", $.Boolean); 
    $.Field({Static:false, Public:false}, "dataContractSurrogate", $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate")); 
    $.Field({Static:false, Public:false}, "ignoreExtensionDataObject", $.Boolean); 
    $.Field({Static:false, Public:false}, "knownTypeCollection", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:false}, "maxItemsInObjectGraph", $.Int32); 
    $.Field({Static:false, Public:false}, "rootContract", $asm11.TypeRef("System.Runtime.Serialization.DataContract")); 
    $.Field({Static:false, Public:false}, "rootName", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:false, Public:false}, "rootNameRequiresMapping", $.Boolean); 
    $.Field({Static:false, Public:false}, "rootType", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "DataContractSurrogate", $asm11.TypeRef("System.Runtime.Serialization.IDataContractSurrogate"));

    $.Property({Static:false, Public:true }, "IgnoreExtensionDataObject", $.Boolean);

    $.Property({Static:false, Public:true }, "KnownTypes", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Type")]));

    $.Property({Static:false, Public:false, Virtual:true }, "KnownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:true }, "MaxItemsInObjectGraph", $.Int32);

    $.Property({Static:false, Public:false}, "AlwaysEmitTypeInformation", $.Boolean);

    $.Property({Static:false, Public:false}, "RootContract", $asm11.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:false}, "RootName", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* class System.Runtime.Serialization.Json.JsonDataContract */ 

(function JsonDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.Json.JsonDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract/JsonDataContractCriticalHelper")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Helper", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract/JsonDataContractCriticalHelper"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_KnownDataContracts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_TraditionalDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TypeName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetJsonDataContract", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "HandleReadValue", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopKnownDataContracts", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushKnownDataContracts", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadJsonValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryReadNullAtTopLevel", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteJsonValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson"), $asm09.TypeRef("System.RuntimeTypeHandle")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteJsonValueCore", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson"), $asm09.TypeRef("System.RuntimeTypeHandle")
        ], [])
    );

    $.Field({Static:false, Public:false}, "helper", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract/JsonDataContractCriticalHelper"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:false, Public:false, Virtual:true }, "TypeName", $.String);

    $.Property({Static:false, Public:false}, "Helper", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract/JsonDataContractCriticalHelper"));

    $.Property({Static:false, Public:false}, "TraditionalDataContract", $asm11.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:false}, "KnownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonDataContract/JsonDataContractCriticalHelper */ 

(function JsonDataContractCriticalHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.Json.JsonDataContract/JsonDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCollectionItemContractsToKnownDataContracts", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateJsonDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), [$.Int32, $asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KnownDataContracts", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_TraditionalDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TypeName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "GetId", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.RuntimeTypeHandle")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetJsonDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.Field({Static:true , Public:false}, "cacheLock", $.Object); 
    $.Field({Static:true , Public:false}, "createDataContractLock", $.Object); 
    $.Field({Static:true , Public:false}, "dataContractCache", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract")]), function ($pi) {
        return JSIL.Array.New($asm11.System.Runtime.Serialization.Json.JsonDataContract, 32);
      }); 
    $.Field({Static:true , Public:false}, "dataContractID", $.Int32, 0); 
    $.Field({Static:true , Public:false}, "typeHandleRef", $asm11.TypeRef("System.Runtime.Serialization.TypeHandleRef")); 
    $.Field({Static:true , Public:false}, "typeToIDCache", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm11.TypeRef("System.Runtime.Serialization.TypeHandleRef"), $asm11.TypeRef("System.Runtime.Serialization.IntRef")])); 
    $.Field({Static:false, Public:false}, "knownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")])); 
    $.Field({Static:false, Public:false}, "traditionalDataContract", $asm11.TypeRef("System.Runtime.Serialization.DataContract")); 
    $.Field({Static:false, Public:false}, "typeName", $.String); 
    $.Property({Static:false, Public:false}, "KnownDataContracts", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm13.TypeRef("System.Xml.XmlQualifiedName"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")]));

    $.Property({Static:false, Public:false}, "TraditionalDataContract", $asm11.TypeRef("System.Runtime.Serialization.DataContract"));

    $.Property({Static:false, Public:false, Virtual:true }, "TypeName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.Json.JsonClassDataContract */ 

(function JsonClassDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), 
      Name: "System.Runtime.Serialization.Json.JsonClassDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatReaderDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatWriterDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_MemberNames", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_TraditionalClassDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_TypeName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteJsonValueCore", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson"), $asm09.TypeRef("System.RuntimeTypeHandle")
        ], [])
    );

    $.Field({Static:false, Public:false}, "helper", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonClassDataContract/JsonClassDataContractCriticalHelper"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:false, Public:false}, "JsonFormatReaderDelegate", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate"));

    $.Property({Static:false, Public:false}, "JsonFormatWriterDelegate", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate"));

    $.Property({Static:false, Public:false}, "MemberNames", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Property({Static:false, Public:false, Virtual:true }, "TypeName", $.String);

    $.Property({Static:false, Public:false}, "TraditionalClassDataContract", $asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonClassDataContract/JsonClassDataContractCriticalHelper */ 

(function JsonClassDataContractCriticalHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract/JsonDataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.Json.JsonClassDataContract/JsonClassDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyMembersAndCheckDuplicateNames", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatReaderDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatWriterDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MemberNames", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TraditionalClassDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_JsonFormatReaderDelegate", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_JsonFormatWriterDelegate", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate")], [])
    );

    $.Field({Static:false, Public:false}, "jsonFormatReaderDelegate", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate")); 
    $.Field({Static:false, Public:false}, "jsonFormatWriterDelegate", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate")); 
    $.Field({Static:false, Public:false}, "memberNames", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")])); 
    $.Field({Static:false, Public:false}, "traditionalClassDataContract", $asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")); 
    $.Field({Static:false, Public:false}, "typeName", $.String); 
    $.Property({Static:false, Public:false}, "JsonFormatReaderDelegate", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate"));

    $.Property({Static:false, Public:false}, "JsonFormatWriterDelegate", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate"));

    $.Property({Static:false, Public:false}, "MemberNames", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]));

    $.Property({Static:false, Public:false}, "TraditionalClassDataContract", $asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.Json.JsonStringDataContract */ 

(function JsonStringDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), 
      Name: "System.Runtime.Serialization.Json.JsonStringDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.StringDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonQNameDataContract */ 

(function JsonQNameDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), 
      Name: "System.Runtime.Serialization.Json.JsonQNameDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.QNameDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonUriDataContract */ 

(function JsonUriDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), 
      Name: "System.Runtime.Serialization.Json.JsonUriDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.UriDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonByteArrayDataContract */ 

(function JsonByteArrayDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), 
      Name: "System.Runtime.Serialization.Json.JsonByteArrayDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ByteArrayDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonCollectionDataContract */ 

(function JsonCollectionDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), 
      Name: "System.Runtime.Serialization.Json.JsonCollectionDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatGetOnlyReaderDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatReaderDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatWriterDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_TraditionalCollectionDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteJsonValueCore", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson"), $asm09.TypeRef("System.RuntimeTypeHandle")
        ], [])
    );

    $.Field({Static:false, Public:false}, "helper", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonCollectionDataContract/JsonCollectionDataContractCriticalHelper"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:false, Public:false}, "JsonFormatReaderDelegate", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate"));

    $.Property({Static:false, Public:false}, "JsonFormatGetOnlyReaderDelegate", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate"));

    $.Property({Static:false, Public:false}, "JsonFormatWriterDelegate", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate"));

    $.Property({Static:false, Public:false}, "TraditionalCollectionDataContract", $asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonCollectionDataContract/JsonCollectionDataContractCriticalHelper */ 

(function JsonCollectionDataContractCriticalHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract/JsonDataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.Json.JsonCollectionDataContract/JsonCollectionDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatGetOnlyReaderDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatReaderDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_JsonFormatWriterDelegate", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TraditionalCollectionDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_JsonFormatGetOnlyReaderDelegate", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_JsonFormatReaderDelegate", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_JsonFormatWriterDelegate", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate")], [])
    );

    $.Field({Static:false, Public:false}, "jsonFormatReaderDelegate", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate")); 
    $.Field({Static:false, Public:false}, "jsonFormatGetOnlyReaderDelegate", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate")); 
    $.Field({Static:false, Public:false}, "jsonFormatWriterDelegate", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate")); 
    $.Field({Static:false, Public:false}, "traditionalCollectionDataContract", $asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")); 
    $.Property({Static:false, Public:false}, "JsonFormatReaderDelegate", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate"));

    $.Property({Static:false, Public:false}, "JsonFormatGetOnlyReaderDelegate", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate"));

    $.Property({Static:false, Public:false}, "JsonFormatWriterDelegate", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate"));

    $.Property({Static:false, Public:false}, "TraditionalCollectionDataContract", $asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.Json.JsonEnumDataContract */ 

(function JsonEnumDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), 
      Name: "System.Runtime.Serialization.Json.JsonEnumDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.EnumDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsULong", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteJsonValueCore", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson"), $asm09.TypeRef("System.RuntimeTypeHandle")
        ], [])
    );

    $.Field({Static:false, Public:false}, "helper", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonEnumDataContract/JsonEnumDataContractCriticalHelper"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:false, Public:true }, "IsULong", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonEnumDataContract/JsonEnumDataContractCriticalHelper */ 

(function JsonEnumDataContractCriticalHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract/JsonDataContractCriticalHelper"), 
      Name: "System.Runtime.Serialization.Json.JsonEnumDataContract/JsonEnumDataContractCriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.EnumDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsULong", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "isULong", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsULong", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.Serialization.Json.JsonXmlDataContract */ 

(function JsonXmlDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), 
      Name: "System.Runtime.Serialization.Json.JsonXmlDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "GetKnownTypesFromContext", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Type")]), [$asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerContext"), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteJsonValueCore", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson"), $asm09.TypeRef("System.RuntimeTypeHandle")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonObjectDataContract */ 

(function JsonObjectDataContract$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.Json.JsonDataContract"), 
      Name: "System.Runtime.Serialization.Json.JsonObjectDataContract", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "ParseJsonNumber", 
      new JSIL.MethodSignature($.Object, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.TypeCode")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseJsonNumber", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadJsonValueCore", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteJsonValueCore", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm11.TypeRef("System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson"), $asm09.TypeRef("System.RuntimeTypeHandle")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.BitFlagsGenerator */ 

(function BitFlagsGenerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.BitFlagsGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm11.TypeRef("System.Runtime.Serialization.CodeGenerator"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetBitCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBitValue", 
      new JSIL.MethodSignature($.Byte, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetByteIndex", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLocal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLocalCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsBitSet", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "LoadArray", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetBit", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Store", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "bitCount", $.Int32); 
    $.Field({Static:false, Public:false}, "ilg", $asm11.TypeRef("System.Runtime.Serialization.CodeGenerator")); 
    $.Field({Static:false, Public:false}, "locals", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.Emit.LocalBuilder")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.ByteArrayHelperWithString */ 

(function ByteArrayHelperWithString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.Byte")]), 
      Name: "System.Runtime.Serialization.Json.ByteArrayHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowConversionException", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm13.TypeRef("System.Xml.XmlWriter"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonReaderDelegator */ 

(function JsonReaderDelegator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), 
      Name: "System.Runtime.Serialization.Json.JsonReaderDelegator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlReader")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_ReaderQuotas", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseJsonDate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseQualifiedName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsDateTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsQName", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlQualifiedName"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadContentAsUnsignedLong", 
      new JSIL.MethodSignature($.UInt64, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadElementContentAsChar", 
      new JSIL.MethodSignature($.Char, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadElementContentAsDateTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadElementContentAsUnsignedLong", 
      new JSIL.MethodSignature($.UInt64, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadJsonDateTimeArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContext"), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")])])
        ], [])
    );

    $.Property({Static:false, Public:false}, "ReaderQuotas", $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonReaderDelegator/DateTimeArrayJsonHelperWithString */ 

(function DateTimeArrayJsonHelperWithString$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.ArrayHelper`2", [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.DateTime")]), 
      Name: "System.Runtime.Serialization.Json.JsonReaderDelegator/DateTimeArrayJsonHelperWithString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadArray", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Xml.XmlDictionaryReader"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Instance", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonWriterDelegator */ 

(function JsonWriterDelegator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), 
      Name: "System.Runtime.Serialization.Json.JsonWriterDelegator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlWriter")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteBoolean", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteChar", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteDateTime", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteDecimal", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteDouble", 
      new JSIL.MethodSignature(null, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFloat", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteInt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonBooleanArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonDateTimeArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonDecimalArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonDoubleArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Double]), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonInt32Array", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonInt64Array", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Int64]), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonSingleArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Single]), $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteLong", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteQName", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlQualifiedName")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteShort", 
      new JSIL.MethodSignature(null, [$.Int16], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteSignedByte", 
      new JSIL.MethodSignature(null, [$.SByte], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteUnsignedByte", 
      new JSIL.MethodSignature(null, [$.Byte], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteUnsignedInt", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteUnsignedLong", 
      new JSIL.MethodSignature(null, [$.UInt64], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteUnsignedShort", 
      new JSIL.MethodSignature(null, [$.UInt16], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson */ 

(function XmlObjectSerializerReadContextComplexJson$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerReadContextComplex"), 
      Name: "System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.Json.DataContractJsonSerializer"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateContext", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Runtime.Serialization.Json.DataContractJsonSerializer"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateReaderDelegatorForReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), [$asm13.TypeRef("System.Xml.XmlReader")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SerializerKnownTypeList", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Type")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetArraySize", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm09.TypeRef("System.RuntimeTypeHandle"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$.Int32, $asm09.TypeRef("System.RuntimeTypeHandle")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContractSkipValidation", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.Int32, $asm09.TypeRef("System.RuntimeTypeHandle"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetJsonMemberIndex", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), 
          $.Int32, $asm11.TypeRef("System.Runtime.Serialization.ExtensionDataObject")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsBitSet", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsReadingClassExtensionData", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsReadingCollectionExtensionData", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadAttributes", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadDataContractValue", 
      new JSIL.MethodSignature($.Object, [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNumericalPrimitiveExtensionDataValue", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IDataNode"), [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReadPrimitiveExtensionDataValue", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.IDataNode"), [
          $asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartReadExtensionDataValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowDuplicateMemberException", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowMissingRequiredMembers", 
      new JSIL.MethodSignature(null, [
          $.Object, $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetJsonLocalName", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.XmlReaderDelegator"), $jsilcore.TypeRef("JSIL.Reference", [$.String])], [])
    );

    $.Field({Static:false, Public:false}, "extensionDataValueType", $.String); 
    $.Property({Static:false, Public:false}, "SerializerKnownTypeList", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Type")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson */ 

(function XmlObjectSerializerWriteContextComplexJson$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Runtime.Serialization.XmlObjectSerializerWriteContextComplex"), 
      Name: "System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.Json.DataContractJsonSerializer"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateContext", 
      new JSIL.MethodSignature($.Type, [$asm11.TypeRef("System.Runtime.Serialization.Json.DataContractJsonSerializer"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CollectionItemName", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryString"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_SerializerKnownTypeList", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Type")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm09.TypeRef("System.RuntimeTypeHandle"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$.Int32, $asm09.TypeRef("System.RuntimeTypeHandle")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetDataContractSkipValidation", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [
          $.Int32, $asm09.TypeRef("System.RuntimeTypeHandle"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetRevisedItemContract", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.DataContract"), [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleCollectionAssignedToObject", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm11.TypeRef("System.Runtime.Serialization.DataContract")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresJsonTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeWithXsiType", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Object, 
          $asm09.TypeRef("System.RuntimeTypeHandle"), $asm09.TypeRef("System.Type"), 
          $.Int32, $asm09.TypeRef("System.RuntimeTypeHandle"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SerializeWithXsiTypeAtTopLevel", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), 
          $.Object, $asm09.TypeRef("System.RuntimeTypeHandle"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TruncateDefaultDataContractNamespace", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyObjectCompatibilityWithInterface", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $.Object, 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyType", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteArraySize", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteClrTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm09.TypeRef("System.Type"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteClrTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Runtime.Serialization.DataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteDataContractValue", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.DataContract"), $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), 
          $.Object, $asm09.TypeRef("System.RuntimeTypeHandle")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteExtensionDataTypeInfo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Runtime.Serialization.IDataNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonISerializable", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm09.TypeRef("System.Runtime.Serialization.ISerializable")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteJsonNameWithMapping", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Xml.XmlDictionaryString")]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNull", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTypeInfo", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTypeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $asm11.TypeRef("System.Runtime.Serialization.DataContract"), 
          $asm11.TypeRef("System.Runtime.Serialization.DataContract")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTypeInfo", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.XmlWriterDelegator"), $.String], [])
    );

    $.Field({Static:false, Public:false}, "alwaysEmitXsiType", $.Boolean); 
    $.Field({Static:false, Public:false}, "perCallXsiTypeAlreadyEmitted", $.Boolean); 
    $.Property({Static:false, Public:false}, "SerializerKnownTypeList", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm09.TypeRef("System.Type")]));

    $.Property({Static:false, Public:false}, "CollectionItemName", $asm11.TypeRef("System.Xml.XmlDictionaryString"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.JsonFormatGeneratorStatics */ 

(function JsonFormatGeneratorStatics$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Serialization.JsonFormatGeneratorStatics", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "get_BoxPointer", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_CollectionItemNameProperty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.PropertyInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_ExtensionDataObjectCtor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.ConstructorInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_ExtensionDataProperty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.PropertyInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_GetCurrentMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_GetItemContractMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_GetJsonDataContractMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_GetJsonMemberIndexMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_GetRevisedItemContractMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_GetUninitializedObjectMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_IsStartElementMethod0", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_IsStartElementMethod2", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_MoveNextMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_NodeTypeProperty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.PropertyInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_OnDeserializationMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_ReadJsonValueMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_SerializationExceptionCtor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.ConstructorInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_SerInfoCtorArgs", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_ThrowDuplicateMemberExceptionMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_ThrowMissingRequiredMembersMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_TypeHandleProperty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.PropertyInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_UnboxPointer", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_WriteAttributeStringMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_WriteEndElementMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_WriteJsonISerializableMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_WriteJsonNameWithMappingMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_WriteJsonValueMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_WriteStartElementMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false}, "boxPointer", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "collectionItemNameProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "extensionDataObjectCtor", $asm09.TypeRef("System.Reflection.ConstructorInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "extensionDataProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getItemContractMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getJsonDataContractMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getJsonMemberIndexMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getRevisedItemContractMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "getUninitializedObjectMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "ienumeratorGetCurrentMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "ienumeratorMoveNextMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "isStartElementMethod0", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "isStartElementMethod2", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "nodeTypeProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "onDeserializationMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "readJsonValueMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "serializationExceptionCtor", $asm09.TypeRef("System.Reflection.ConstructorInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "serInfoCtorArgs", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "throwDuplicateMemberExceptionMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "throwMissingRequiredMembersMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "typeHandleProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "unboxPointer", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "writeAttributeStringMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "writeEndElementMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "writeJsonISerializableMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "writeJsonNameWithMappingMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "writeJsonValueMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "writeStartElementMethod", $asm09.TypeRef("System.Reflection.MethodInfo"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:true , Public:true }, "BoxPointer", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "CollectionItemNameProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:true }, "ExtensionDataObjectCtor", $asm09.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:true }, "ExtensionDataProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:true }, "GetCurrentMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "GetItemContractMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "GetJsonDataContractMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "GetJsonMemberIndexMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "GetRevisedItemContractMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "GetUninitializedObjectMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "IsStartElementMethod0", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "IsStartElementMethod2", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "MoveNextMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "NodeTypeProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:true }, "OnDeserializationMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "ReadJsonValueMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "SerializationExceptionCtor", $asm09.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:true , Public:true }, "SerInfoCtorArgs", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]));

    $.Property({Static:true , Public:true }, "ThrowDuplicateMemberExceptionMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "ThrowMissingRequiredMembersMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "TypeHandleProperty", $asm09.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:true , Public:true }, "UnboxPointer", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "WriteAttributeStringMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "WriteEndElementMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "WriteJsonISerializableMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "WriteJsonNameWithMappingMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "WriteJsonValueMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:true , Public:true }, "WriteStartElementMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate", false, []);

/* delegate System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate", false, []);

/* class System.Runtime.Serialization.Json.JsonFormatWriterGenerator */ 

(function JsonFormatWriterGenerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.Json.JsonFormatWriterGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GenerateClassWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GenerateCollectionWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "helper", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatWriterGenerator/CriticalHelper"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonFormatWriterGenerator/CriticalHelper */ 

(function CriticalHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.Json.JsonFormatWriterGenerator/CriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginMethod", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.CodeGenerator"), $.String, 
          $asm09.TypeRef("System.Type"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandMemberAccessPermission", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandSerializationFormatterPermission", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateClassWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassWriterDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCollectionWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionWriterDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitArgs", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalSerialize", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm09.TypeRef("System.Type"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeOnSerialized", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeOnSerializing", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadMemberValue", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm11.TypeRef("System.Runtime.Serialization.DataMember")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryWritePrimitive", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm09.TypeRef("System.Reflection.MemberInfo"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryWritePrimitiveArray", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnwrapNullableObject", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm09.TypeRef("System.Reflection.Emit.LocalBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteClass", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCollection", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMembers", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.LocalBuilder")], [])
    );

    $.Field({Static:false, Public:false}, "ilg", $asm11.TypeRef("System.Runtime.Serialization.CodeGenerator")); 
    $.Field({Static:false, Public:false}, "xmlWriterArg", $asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")); 
    $.Field({Static:false, Public:false}, "contextArg", $asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")); 
    $.Field({Static:false, Public:false}, "dataContractArg", $asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")); 
    $.Field({Static:false, Public:false}, "objectLocal", $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")); 
    $.Field({Static:false, Public:false}, "memberNamesArg", $asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")); 
    $.Field({Static:false, Public:false}, "typeIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "childElementIndex", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate", false, []);

/* delegate System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate", false, []);

/* delegate System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate */ 

JSIL.MakeDelegate("System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate", false, []);

/* class System.Runtime.Serialization.Json.JsonFormatReaderGenerator */ 

(function JsonFormatReaderGenerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.Json.JsonFormatReaderGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GenerateClassReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GenerateCollectionReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GenerateGetOnlyCollectionReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "helper", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatReaderGenerator/CriticalHelper"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonFormatReaderGenerator/CriticalHelper */ 

(function CriticalHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Serialization.Json.JsonFormatReaderGenerator/CriticalHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BeginMethod", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.CodeGenerator"), $.String, 
          $asm09.TypeRef("System.Type"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRequiredElements", 
      new JSIL.MethodSignature(null, [
          $asm11.TypeRef("System.Runtime.Serialization.BitFlagsGenerator"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm09.TypeRef("System.Reflection.Emit.Label")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateObject", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandMemberAccessPermission", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandSerializationFormatterPermission", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GenerateClassReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatClassReaderDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GenerateCollectionReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatCollectionReaderDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCollectionReaderHelper", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.CodeGenerator"), [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GenerateGetOnlyCollectionReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonFormatGetOnlyCollectionReaderDelegate"), [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleUnexpectedItemInCollection", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.LocalBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasFactoryMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitArgs", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalDeserialize", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm09.TypeRef("System.Type"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeFactoryMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeOnDeserialized", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeOnDeserializing", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsStartElement", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ArgBuilder"), $asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsStartElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadArray", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadClass", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCollection", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCollectionItem", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadGetOnlyCollection", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadISerializable", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadMembers", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadMembers", 
      new JSIL.MethodSignature($.Int32, [
          $asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), $asm11.TypeRef("System.Runtime.Serialization.BitFlagsGenerator"), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.Emit.Label")]), $asm09.TypeRef("System.Reflection.Emit.Label"), 
          $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadValue", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm09.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetExpectedElements", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.BitFlagsGenerator"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetExpectedElements", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.BitFlagsGenerator"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRequiredElements", 
      new JSIL.MethodSignature($.Int32, [$asm11.TypeRef("System.Runtime.Serialization.ClassDataContract"), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StoreCollectionValue", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm11.TypeRef("System.Runtime.Serialization.CollectionDataContract")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedStateException", 
      new JSIL.MethodSignature(null, [$asm13.TypeRef("System.Xml.XmlNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowValidationException", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowValidationException", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryReadPrimitiveArray", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapNullableObject", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "ilg", $asm11.TypeRef("System.Runtime.Serialization.CodeGenerator")); 
    $.Field({Static:false, Public:false}, "objectLocal", $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")); 
    $.Field({Static:false, Public:false}, "objectType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "xmlReaderArg", $asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")); 
    $.Field({Static:false, Public:false}, "contextArg", $asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")); 
    $.Field({Static:false, Public:false}, "memberNamesArg", $asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")); 
    $.Field({Static:false, Public:false}, "collectionContractArg", $asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")); 
    $.Field({Static:false, Public:false}, "emptyDictionaryStringArg", $asm11.TypeRef("System.Runtime.Serialization.ArgBuilder")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonGlobals */ 

(function JsonGlobals$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Serialization.Json.JsonGlobals", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "applicationJsonMediaType", "application/json"); 
    $.Constant({Static:true , Public:true }, "arrayString", "array"); 
    $.Constant({Static:true , Public:true }, "booleanString", "boolean"); 
    $.Constant({Static:true , Public:true }, "CacheControlString", "Cache-Control"); 
    $.Constant({Static:true , Public:true }, "CollectionByte", 91); 
    $.Constant({Static:true , Public:true }, "CollectionChar", "["); 
    $.Constant({Static:true , Public:true }, "DateTimeEndGuardReader", ")/"); 
    $.Constant({Static:true , Public:true }, "DateTimeEndGuardWriter", ")\\/"); 
    $.Constant({Static:true , Public:true }, "DateTimeStartGuardReader", "/Date("); 
    $.Constant({Static:true , Public:true }, "DateTimeStartGuardWriter", "\\/Date("); 
    $.Constant({Static:true , Public:true }, "dString", "d"); 
    $.Constant({Static:true , Public:true }, "EndCollectionByte", 93); 
    $.Constant({Static:true , Public:true }, "EndCollectionChar", "]"); 
    $.Constant({Static:true , Public:true }, "EndObjectByte", 125); 
    $.Constant({Static:true , Public:true }, "EndObjectChar", "}"); 
    $.Constant({Static:true , Public:true }, "ExpiresString", "Expires"); 
    $.Constant({Static:true , Public:true }, "IfModifiedSinceString", "If-Modified-Since"); 
    $.Constant({Static:true , Public:true }, "itemString", "item"); 
    $.Constant({Static:true , Public:true }, "jsonerrorString", "jsonerror"); 
    $.Constant({Static:true , Public:true }, "KeyString", "Key"); 
    $.Constant({Static:true , Public:true }, "LastModifiedString", "Last-Modified"); 
    $.Constant({Static:true , Public:true }, "maxScopeSize", 25); 
    $.Constant({Static:true , Public:true }, "MemberSeparatorByte", 44); 
    $.Constant({Static:true , Public:true }, "MemberSeparatorChar", ","); 
    $.Constant({Static:true , Public:true }, "NameValueSeparatorByte", 58); 
    $.Constant({Static:true , Public:true }, "NameValueSeparatorChar", ":"); 
    $.Constant({Static:true , Public:true }, "NameValueSeparatorString", ":"); 
    $.Constant({Static:true , Public:true }, "nullString", "null"); 
    $.Constant({Static:true , Public:true }, "numberString", "number"); 
    $.Constant({Static:true , Public:true }, "ObjectByte", 123); 
    $.Constant({Static:true , Public:true }, "ObjectChar", "{"); 
    $.Constant({Static:true , Public:true }, "objectString", "object"); 
    $.Constant({Static:true , Public:true }, "publicString", "public"); 
    $.Constant({Static:true , Public:true }, "QuoteByte", 34); 
    $.Constant({Static:true , Public:true }, "QuoteChar", "\""); 
    $.Constant({Static:true , Public:true }, "rootString", "root"); 
    $.Constant({Static:true , Public:true }, "serverTypeString", "__type"); 
    $.Constant({Static:true , Public:true }, "stringString", "string"); 
    $.Constant({Static:true , Public:true }, "textJsonMediaType", "text/json"); 
    $.Constant({Static:true , Public:true }, "trueString", "true"); 
    $.Constant({Static:true , Public:true }, "typeString", "type"); 
    $.Constant({Static:true , Public:true }, "ValueString", "Value"); 
    $.Constant({Static:true , Public:true }, "WhitespaceChar", " "); 
    $.Constant({Static:true , Public:true }, "xmlnsPrefix", "xmlns"); 
    $.Constant({Static:true , Public:true }, "xmlPrefix", "xml"); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DataContractXsdBaseNamespaceLength", $.Int32); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "dDictionaryString", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "floatingPointCharacters", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "itemDictionaryString", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "rootDictionaryString", $asm11.TypeRef("System.Xml.XmlDictionaryString")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "unixEpochTicks", $.Int64); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Runtime.Serialization.Json.IXmlJsonReaderInitializer */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.Json.IXmlJsonReaderInitializer", true, [], function ($) {
    $.Method({}, "SetInput", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Text.Encoding"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], []));
    $.Method({}, "SetInput", new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], []));
  }, []);

/* interface System.Runtime.Serialization.Json.IXmlJsonWriterInitializer */ 

JSIL.MakeInterface(
  "System.Runtime.Serialization.Json.IXmlJsonWriterInitializer", true, [], function ($) {
    $.Method({}, "SetOutput", new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ], []));
  }, []);

/* class System.Runtime.Serialization.Json.JsonReaderWriterFactory */ 

(function JsonReaderWriterFactory$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Serialization.Json.JsonReaderWriterFactory", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "CreateJsonReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryReader"), [$asm09.TypeRef("System.IO.Stream"), $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateJsonReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryReader"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateJsonReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryReader"), [
          $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateJsonReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryReader"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateJsonReader", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryReader"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Text.Encoding"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateJsonWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryWriter"), [$asm09.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateJsonWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryWriter"), [$asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateJsonWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlDictionaryWriter"), [
          $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.TypeForwardedFromAttribute"), function () { return ["System.ServiceModel.Web, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"]; });

})();

/* class System.Runtime.Serialization.Json.XmlJsonWriter */ 

(function XmlJsonWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlDictionaryWriter"), 
      Name: "System.Runtime.Serialization.Json.XmlJsonWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CharacterNeedsEscaping", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckText", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.Json.JsonNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterScope", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.Json.JsonNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitScope", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BinHexEncoding", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Text.BinHexEncoding"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_HasOpenAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsClosed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsWritingCollection", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsWritingNameAttribute", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsWritingNameWithMapping", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlWriterSettings"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.WriteState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WrittenNameWithMapping", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      new JSIL.MethodSignature($asm13.TypeRef("System.Xml.XmlSpace"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeWriter", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetOutput", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartText", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowClosed", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfServerTypeWritten", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowInvalidAttributeContent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TrySetWritingNameWithMapping", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Int64]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Double]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Decimal")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Double]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Single]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int64]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$.Int16]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.DateTime")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Guid")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $asm11.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryString"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.TimeSpan")]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDataTypeServerType", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEscapedJsonString", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonElementName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteJsonQuote", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePrimitiveValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteServerTypeAttribute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Decimal")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Double], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.UniqueId")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      new JSIL.MethodSignature(null, [$.UInt64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Array")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlAttribute", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteXmlnsAttribute", 
      new JSIL.MethodSignature(null, [$.String, $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.Field({Static:true , Public:false}, "binHexEncoding", $asm11.TypeRef("System.Text.BinHexEncoding"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "attributeText", $.String); 
    $.Field({Static:false, Public:false}, "dataType", $asm11.TypeRef("System.Runtime.Serialization.Json.XmlJsonWriter/JsonDataType")); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Field({Static:false, Public:false}, "endElementBuffer", $.Boolean); 
    $.Field({Static:false, Public:false}, "isWritingDataTypeAttribute", $.Boolean); 
    $.Field({Static:false, Public:false}, "isWritingServerTypeAttribute", $.Boolean); 
    $.Field({Static:false, Public:false}, "isWritingXmlnsAttribute", $.Boolean); 
    $.Field({Static:false, Public:false}, "isWritingXmlnsAttributeDefaultNs", $.Boolean); 
    $.Field({Static:false, Public:false}, "nameState", $asm11.TypeRef("System.Runtime.Serialization.Json.XmlJsonWriter/NameState")); 
    $.Field({Static:false, Public:false}, "nodeType", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonNodeType")); 
    $.Field({Static:false, Public:false}, "nodeWriter", $asm11.TypeRef("System.Runtime.Serialization.Json.XmlJsonWriter/JsonNodeWriter")); 
    $.Field({Static:false, Public:false}, "scopes", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Runtime.Serialization.Json.JsonNodeType")])); 
    $.Field({Static:false, Public:false}, "serverTypeValue", $.String); 
    $.Field({Static:false, Public:false}, "writeState", $asm13.TypeRef("System.Xml.WriteState")); 
    $.Field({Static:false, Public:false}, "wroteServerTypeAttribute", $.Boolean); 
    $.Constant({Static:true , Public:false}, "BACK_SLASH", "\\"); 
    $.Constant({Static:true , Public:false}, "FORWARD_SLASH", "/"); 
    $.Constant({Static:true , Public:false}, "HIGH_SURROGATE_START", "\ud800"); 
    $.Constant({Static:true , Public:false}, "LOW_SURROGATE_END", "\udfff"); 
    $.Constant({Static:true , Public:false}, "MAX_CHAR", "\ufffe"); 
    $.Constant({Static:true , Public:false}, "WHITESPACE", " "); 
    $.Constant({Static:true , Public:false}, "xmlNamespace", "http://www.w3.org/XML/1998/namespace"); 
    $.Constant({Static:true , Public:false}, "xmlnsNamespace", "http://www.w3.org/2000/xmlns/"); 
    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm13.TypeRef("System.Xml.XmlWriterSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm13.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm13.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:true , Public:false}, "BinHexEncoding", $asm11.TypeRef("System.Text.BinHexEncoding"));

    $.Property({Static:false, Public:false}, "HasOpenAttribute", $.Boolean);

    $.Property({Static:false, Public:false}, "IsClosed", $.Boolean);

    $.Property({Static:false, Public:false}, "IsWritingCollection", $.Boolean);

    $.Property({Static:false, Public:false}, "IsWritingNameAttribute", $.Boolean);

    $.Property({Static:false, Public:false}, "IsWritingNameWithMapping", $.Boolean);

    $.Property({Static:false, Public:false}, "WrittenNameWithMapping", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm11.TypeRef("System.Runtime.Serialization.Json.IXmlJsonWriterInitializer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.Serialization.Json.XmlJsonWriter/JsonDataType */ 

JSIL.MakeEnum(
  "System.Runtime.Serialization.Json.XmlJsonWriter/JsonDataType", false, {
    None: 0, 
    Null: 1, 
    Boolean: 2, 
    Number: 3, 
    String: 4, 
    Object: 5, 
    Array: 6
  }, false
);

/* enum System.Runtime.Serialization.Json.XmlJsonWriter/NameState */ 

JSIL.MakeEnum(
  "System.Runtime.Serialization.Json.XmlJsonWriter/NameState", false, {
    None: 0, 
    IsWritingNameWithMapping: 1, 
    IsWritingNameAttribute: 2, 
    WrittenNameWithMapping: 4
  }, true
);

/* class System.Runtime.Serialization.Json.XmlJsonWriter/JsonNodeWriter */ 

(function JsonNodeWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlUTF8NodeWriter"), 
      Name: "System.Runtime.Serialization.Json.XmlJsonWriter/JsonNodeWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteChars", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Serialization.Json.JsonEncodingStreamWrapper */ 

(function JsonEncodingStreamWrapper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.IO.Stream"), 
      Name: "System.Runtime.Serialization.Json.JsonEncodingStreamWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupCharBreak", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureBuffers", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureByteBuffer", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillBuffer", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTimeout", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadTimeout", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteTimeout", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEncoding", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Text.Encoding"), [$asm11.TypeRef("System.Runtime.Serialization.Json.JsonEncodingStreamWrapper/SupportedEncoding")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEncodingName", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Runtime.Serialization.Json.JsonEncodingStreamWrapper/SupportedEncoding")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSupportedEncoding", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonEncodingStreamWrapper/SupportedEncoding"), [$asm09.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitForReading", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitForWriting", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ProcessBuffer", 
      new JSIL.MethodSignature($asm09.TypeRef("System.ArraySegment`1", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Text.Encoding")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadEncoding", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonEncodingStreamWrapper/SupportedEncoding"), [$.Byte, $.Byte], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadEncoding", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonEncodingStreamWrapper/SupportedEncoding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm09.TypeRef("System.IO.SeekOrigin")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadTimeout", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_WriteTimeout", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowExpectedEncodingMismatch", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.Json.JsonEncodingStreamWrapper/SupportedEncoding"), $asm11.TypeRef("System.Runtime.Serialization.Json.JsonEncodingStreamWrapper/SupportedEncoding")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      new JSIL.MethodSignature(null, [$.Byte], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "SafeBEUTF16", $asm09.TypeRef("System.Text.UnicodeEncoding")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SafeUTF16", $asm09.TypeRef("System.Text.UnicodeEncoding")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "SafeUTF8", $asm09.TypeRef("System.Text.UTF8Encoding")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ValidatingBEUTF16", $asm09.TypeRef("System.Text.UnicodeEncoding")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ValidatingUTF16", $asm09.TypeRef("System.Text.UnicodeEncoding")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ValidatingUTF8", $asm09.TypeRef("System.Text.UTF8Encoding")); 
    $.Field({Static:false, Public:false}, "byteBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "byteCount", $.Int32); 
    $.Field({Static:false, Public:false}, "byteOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "bytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:false, Public:false}, "dec", $asm09.TypeRef("System.Text.Decoder")); 
    $.Field({Static:false, Public:false}, "enc", $asm09.TypeRef("System.Text.Encoder")); 
    $.Field({Static:false, Public:false}, "encoding", $asm09.TypeRef("System.Text.Encoding")); 
    $.Field({Static:false, Public:false}, "encodingCode", $asm11.TypeRef("System.Runtime.Serialization.Json.JsonEncodingStreamWrapper/SupportedEncoding")); 
    $.Field({Static:false, Public:false}, "isReading", $.Boolean); 
    $.Field({Static:false, Public:false}, "stream", $asm09.TypeRef("System.IO.Stream")); 
    $.Constant({Static:true , Public:false}, "BufferLength", 128); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTimeout", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadTimeout", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteTimeout", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.Serialization.Json.JsonEncodingStreamWrapper/SupportedEncoding */ 

JSIL.MakeEnum(
  "System.Runtime.Serialization.Json.JsonEncodingStreamWrapper/SupportedEncoding", false, {
    UTF8: 0, 
    UTF16LE: 1, 
    UTF16BE: 2, 
    None: 3
  }, false
);

/* enum System.Runtime.Serialization.Json.JsonNodeType */ 

JSIL.MakeEnum(
  "System.Runtime.Serialization.Json.JsonNodeType", false, {
    None: 0, 
    Object: 1, 
    Element: 2, 
    EndElement: 3, 
    QuotedText: 4, 
    StandaloneText: 5, 
    Collection: 6
  }, false
);

/* class System.Runtime.Serialization.Json.XmlJsonReader */ 

(function XmlJsonReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm11.TypeRef("System.Xml.XmlBaseReader"), 
      Name: "System.Runtime.Serialization.Json.XmlJsonReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BreakText", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BufferElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckArray", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ComputeNumericalTextLength", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ComputeQuotedTextLengthUntilEndQuote", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateSigningNodeWriter", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Xml.XmlSigningNodeWriter"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndCanonicalization", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterJsonScope", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Runtime.Serialization.Json.JsonNodeType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitJsonScope", 
      new JSIL.MethodSignature($asm11.TypeRef("System.Runtime.Serialization.Json.JsonNodeType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanCanonicalize", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReadingCollection", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReadingComplexText", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$asm11.TypeRef("System.Xml.XmlDictionaryString"), $asm11.TypeRef("System.Xml.XmlDictionaryString")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.Byte], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToEndElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToInitial", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAndSetLocalName", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseChar", 
      new JSIL.MethodSignature($.Char, [$.String, $asm09.TypeRef("System.Globalization.NumberStyles")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseInt", 
      new JSIL.MethodSignature($.Int32, [$.String, $asm09.TypeRef("System.Globalization.NumberStyles")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseStartElement", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAttributes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadEscapedCharacter", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNonExistentElementName", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.StringHandleConstStringType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNonFFFE", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNumericalText", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadQuotedText", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadServerTypeAttribute", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetState", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInput", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Text.Encoding"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetInput", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding"), 
          $asm11.TypeRef("System.Xml.XmlDictionaryReaderQuotas"), $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetJsonNameWithMapping", 
      new JSIL.MethodSignature(null, [$asm11.TypeRef("System.Xml.XmlBaseReader/XmlElementNode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipExpectedByteInBufferReader", 
      new JSIL.MethodSignature(null, [$.Byte], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipWhitespaceInBufferReader", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "StartCanonicalization", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetByte", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnescapeJsonString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.Field({Static:true , Public:false}, "charType", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "buffered", $.Boolean); 
    $.Field({Static:false, Public:false}, "charactersToSkipOnNextRead", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "complexTextMode", $asm11.TypeRef("System.Runtime.Serialization.Json.XmlJsonReader/JsonComplexTextMode")); 
    $.Field({Static:false, Public:false}, "expectingFirstElementInNonPrimitiveChild", $.Boolean); 
    $.Field({Static:false, Public:false}, "maxBytesPerRead", $.Int32); 
    $.Field({Static:false, Public:false}, "onReaderClose", $asm11.TypeRef("System.Xml.OnXmlDictionaryReaderClose")); 
    $.Field({Static:false, Public:false}, "readServerTypeElement", $.Boolean); 
    $.Field({Static:false, Public:false}, "scopeDepth", $.Int32); 
    $.Field({Static:false, Public:false}, "scopes", $jsilcore.TypeRef("System.Array", [$asm11.TypeRef("System.Runtime.Serialization.Json.JsonNodeType")])); 
    $.Constant({Static:true , Public:false}, "MaxTextChunk", 2048); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanCanonicalize", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:false}, "IsAttributeValue", $.Boolean);

    $.Property({Static:false, Public:false}, "IsReadingCollection", $.Boolean);

    $.Property({Static:false, Public:false}, "IsReadingComplexText", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm11.TypeRef("System.Runtime.Serialization.Json.IXmlJsonReaderInitializer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.Serialization.Json.XmlJsonReader/JsonComplexTextMode */ 

JSIL.MakeEnum(
  "System.Runtime.Serialization.Json.XmlJsonReader/JsonComplexTextMode", false, {
    QuotedText: 0, 
    NumericalText: 1, 
    None: 2
  }, false
);

/* class System.Runtime.Serialization.Json.XmlJsonReader/CharType */ 

(function CharType$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Serialization.Json.XmlJsonReader/CharType", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "FirstName", 1); 
    $.Constant({Static:true , Public:true }, "Name", 2); 
    $.Constant({Static:true , Public:true }, "None", 0); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

