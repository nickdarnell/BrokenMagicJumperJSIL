/* Generated by JSIL v0.7.8 build 40775. See http://jsil.org/ for more information. */ 
/* Generating type stubs only */ 
var $asm12 = JSIL.DeclareAssembly("System.ServiceModel.Internals, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Runtime");
/* class System.Runtime.ActionItem */ 

(function ActionItem$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.ActionItem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "ExtractContext", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.SecurityContext"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_LowPriority", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Invoke", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Schedule", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action`1", [$.Object]), $.Object], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Schedule", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Action`1", [$.Object]), $.Object, 
          $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Schedule", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ScheduleCallback", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Action`1", [$.Object]), $.Object, 
          $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ScheduleCallback", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action`1", [$.Object])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ScheduleWithContext", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Security.SecurityContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ScheduleWithoutContext", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_LowPriority", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "context", $asm09.TypeRef("System.Security.SecurityContext"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "isScheduled", $.Boolean); 
    $.Field({Static:false, Public:false}, "lowPriority", $.Boolean); 
    $.Property({Static:false, Public:true }, "LowPriority", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.ActionItem/CallbackHelper */ 

(function CallbackHelper$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.ActionItem/CallbackHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "get_InvokeWithContextCallback", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Action`1", [$.Object]), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_InvokeWithoutContextCallback", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Action`1", [$.Object]), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OnContextAppliedCallback", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.ContextCallback"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvokeWithContext", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvokeWithoutContext", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnContextApplied", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.Field({Static:true , Public:false}, "invokeWithContextCallback", $asm09.TypeRef("System.Action`1", [$.Object])); 
    $.Field({Static:true , Public:false}, "invokeWithoutContextCallback", $asm09.TypeRef("System.Action`1", [$.Object])); 
    $.Field({Static:true , Public:false}, "onContextAppliedCallback", $asm09.TypeRef("System.Threading.ContextCallback")); 
    $.Property({Static:true , Public:true }, "InvokeWithContextCallback", $asm09.TypeRef("System.Action`1", [$.Object]));

    $.Property({Static:true , Public:true }, "InvokeWithoutContextCallback", $asm09.TypeRef("System.Action`1", [$.Object]));

    $.Property({Static:true , Public:true }, "OnContextAppliedCallback", $asm09.TypeRef("System.Threading.ContextCallback"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

})();

/* class System.Runtime.ActionItem/DefaultActionItem */ 

(function DefaultActionItem$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.ActionItem"), 
      Name: "System.Runtime.ActionItem/DefaultActionItem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Action`1", [$.Object]), $.Object, 
          $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Invoke", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "TraceAndInvoke", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "callback", $asm09.TypeRef("System.Action`1", [$.Object]))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "state", $.Object)
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "flowLegacyActivityId", $.Boolean); 
    $.Field({Static:false, Public:false}, "activityId", $asm09.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false}, "eventTraceActivity", $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.AssertHelper */ 

(function AssertHelper$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.AssertHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "FireAssert", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.AsyncCompletionResult */ 

JSIL.MakeEnum(
  "System.Runtime.AsyncCompletionResult", false, {
    Queued: 0, 
    Completed: 1
  }, false
);

/* interface System.Runtime.IAsyncEventArgs */ 

JSIL.MakeInterface(
  "System.Runtime.IAsyncEventArgs", false, [], function ($) {
    $.Method({}, "get_AsyncState", new JSIL.MethodSignature($.Object, [], []));
    $.Method({}, "get_Exception", new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], []));
    $.Property({}, "AsyncState");
    $.Property({}, "Exception");
  }, []);

/* class System.Runtime.AsyncEventArgs */ 

(function AsyncEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.AsyncEventArgs", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Complete", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Complete", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncState", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Exception", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_State", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.AsyncEventArgs/OperationState")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAsyncState", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.AsyncEventArgsCallback"), $.Object], [])
    );

    $.Field({Static:false, Public:false}, "state", $asm12.TypeRef("System.Runtime.AsyncEventArgs/OperationState")); 
    $.Field({Static:false, Public:false}, "asyncState", $.Object); 
    $.Field({Static:false, Public:false}, "callback", $asm12.TypeRef("System.Runtime.AsyncEventArgsCallback")); 
    $.Field({Static:false, Public:false}, "exception", $asm09.TypeRef("System.Exception")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Exception", $asm09.TypeRef("System.Exception"));

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncState", $.Object);

    $.Property({Static:false, Public:false}, "State", $asm12.TypeRef("System.Runtime.AsyncEventArgs/OperationState"));

    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Runtime.IAsyncEventArgs")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.AsyncEventArgs/OperationState */ 

JSIL.MakeEnum(
  "System.Runtime.AsyncEventArgs/OperationState", false, {
    Created: 0, 
    PendingCompletion: 1, 
    CompletedSynchronously: 2, 
    CompletedAsynchronously: 3
  }, false
);

/* class System.Runtime.AsyncEventArgs`1 */ 

(function AsyncEventArgs$b1$Members () {
  var $, $thisType;
  function AsyncEventArgs$b1_get_Arguments () {
    return this.AsyncEventArgs$b1$Arguments$value;
  };

  function AsyncEventArgs$b1_set_Arguments (value) {
    this.AsyncEventArgs$b1$Arguments$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.AsyncEventArgs"), 
      Name: "System.Runtime.AsyncEventArgs`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TArgument"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_Arguments", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TArgument", "System.Runtime.AsyncEventArgs`1"), [], []), 
      AsyncEventArgs$b1_get_Arguments
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Runtime.AsyncEventArgsCallback"), new JSIL.GenericParameter("TArgument", "System.Runtime.AsyncEventArgs`1"), 
          $.Object
        ], [])
    );

    $.Method({Static:false, Public:false}, "set_Arguments", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TArgument", "System.Runtime.AsyncEventArgs`1")], []), 
      AsyncEventArgs$b1_set_Arguments
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "AsyncEventArgs$b1$Arguments$value", $.GenericParameter("TArgument"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Arguments", new JSIL.GenericParameter("TArgument", "System.Runtime.AsyncEventArgs`1"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.AsyncEventArgs`2 */ 

(function AsyncEventArgs$b2$Members () {
  var $, $thisType;
  function AsyncEventArgs$b2_get_Result () {
    return this.AsyncEventArgs$b2$Result$value;
  };

  function AsyncEventArgs$b2_set_Result (value) {
    this.AsyncEventArgs$b2$Result$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.AsyncEventArgs`1", [new JSIL.GenericParameter("TArgument", "System.Runtime.AsyncEventArgs`2")]), 
      Name: "System.Runtime.AsyncEventArgs`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TArgument", "TResult"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_Result", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Runtime.AsyncEventArgs`2"), [], []), 
      AsyncEventArgs$b2_get_Result
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_Result", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TResult", "System.Runtime.AsyncEventArgs`2")], []), 
      AsyncEventArgs$b2_set_Result
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "AsyncEventArgs$b2$Result$value", $.GenericParameter("TResult"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Result", new JSIL.GenericParameter("TResult", "System.Runtime.AsyncEventArgs`2"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Runtime.AsyncEventArgsCallback */ 

JSIL.MakeDelegate("System.Runtime.AsyncEventArgsCallback", false, []);

/* class System.Runtime.AsyncResult */ 

(function AsyncResult$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Action$b2.Of($asm12.System.Runtime.AsyncResult, $asm09.System.Exception))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Action$b2.Of($asm09.System.AsyncCallback, $asm09.System.IAsyncResult))) ();
  };

  function AsyncResult_get_OnCompleting () {
    return this.AsyncResult$OnCompleting$value;
  };

  function AsyncResult_get_VirtualCallback () {
    return this.AsyncResult$VirtualCallback$value;
  };

  function AsyncResult_set_OnCompleting (value) {
    this.AsyncResult$OnCompleting$value = value;
  };

  function AsyncResult_set_VirtualCallback (value) {
    this.AsyncResult$VirtualCallback$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.AsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.AsyncCallback"), $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AsyncCompletionWrapperCallback", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IAsyncResult")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSyncContinue", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.IAsyncResult")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Complete", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Complete", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "End", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.IAsyncResult")], ["TAsyncResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncState", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncWaitHandle", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.WaitHandle"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletedSynchronously", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_HasCallback", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsCompleted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:false}, "get_OnCompleting", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Action`2", [$.Type, $asm09.TypeRef("System.Exception")]), [], []), 
      AsyncResult_get_OnCompleting
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_ThisLock", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.Method({Static:false, Public:false}, "get_VirtualCallback", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Action`2", [$asm09.TypeRef("System.AsyncCallback"), $asm09.TypeRef("System.IAsyncResult")]), [], []), 
      AsyncResult_get_VirtualCallback
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "GetNextCompletion", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.AsyncResult/AsyncCompletion"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnContinueAsyncCompletion", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.IAsyncResult")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareAsyncCompletion", 
      new JSIL.MethodSignature($asm09.TypeRef("System.AsyncCallback"), [$asm12.TypeRef("System.Runtime.AsyncResult/AsyncCompletion")], [])
    );

    $.Method({Static:false, Public:false}, "set_OnCompleting", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action`2", [$.Type, $asm09.TypeRef("System.Exception")])], []), 
      AsyncResult_set_OnCompleting
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:false}, "set_VirtualCallback", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action`2", [$asm09.TypeRef("System.AsyncCallback"), $asm09.TypeRef("System.IAsyncResult")])], []), 
      AsyncResult_set_VirtualCallback
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "SetBeforePrepareAsyncCompletionAction", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCheckSyncValidationFunc", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Func`2", [$asm09.TypeRef("System.IAsyncResult"), $.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SyncContinue", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.IAsyncResult")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowInvalidAsyncResult", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IAsyncResult")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowInvalidAsyncResult", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryContinueHelper", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.IAsyncResult"), $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.AsyncResult/AsyncCompletion")])], [])
    );

    $.Field({Static:true , Public:false}, "asyncCompletionWrapperCallback", $asm09.TypeRef("System.AsyncCallback")); 
    $.Field({Static:false, Public:false}, "callback", $asm09.TypeRef("System.AsyncCallback")); 
    $.Field({Static:false, Public:false}, "completedSynchronously", $.Boolean); 
    $.Field({Static:false, Public:false}, "endCalled", $.Boolean); 
    $.Field({Static:false, Public:false}, "exception", $asm09.TypeRef("System.Exception")); 
    $.Field({Static:false, Public:false}, "isCompleted", $.Boolean); 
    $.Field({Static:false, Public:false}, "nextAsyncCompletion", $asm12.TypeRef("System.Runtime.AsyncResult/AsyncCompletion")); 
    $.Field({Static:false, Public:false}, "state", $.Object); 
    $.Field({Static:false, Public:false}, "beforePrepareAsyncCompletionAction", $asm09.TypeRef("System.Action")); 
    $.Field({Static:false, Public:false}, "checkSyncValidationFunc", $asm09.TypeRef("System.Func`2", [$asm09.TypeRef("System.IAsyncResult"), $.Boolean])); 
    $.Field({Static:false, Public:false}, "manualResetEvent", $asm09.TypeRef("System.Threading.ManualResetEvent")); 
    $.Field({Static:false, Public:false}, "thisLock", $.Object); 
    $.Field({Static:false, Public:false}, "AsyncResult$OnCompleting$value", $asm09.TypeRef("System.Action`2", [$.Type, $asm09.TypeRef("System.Exception")]))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "AsyncResult$VirtualCallback$value", $asm09.TypeRef("System.Action`2", [$asm09.TypeRef("System.AsyncCallback"), $asm09.TypeRef("System.IAsyncResult")]))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true , Virtual:true }, "AsyncState", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncWaitHandle", $asm09.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletedSynchronously", $.Boolean);

    $.Property({Static:false, Public:true }, "HasCallback", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsCompleted", $.Boolean);

    $.Property({Static:false, Public:false}, "OnCompleting", $asm09.TypeRef("System.Action`2", [$.Type, $asm09.TypeRef("System.Exception")]));

    $.Property({Static:false, Public:false}, "ThisLock", $.Object);

    $.Property({Static:false, Public:false}, "VirtualCallback", $asm09.TypeRef("System.Action`2", [$asm09.TypeRef("System.AsyncCallback"), $asm09.TypeRef("System.IAsyncResult")]));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IAsyncResult")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Runtime.AsyncResult/AsyncCompletion */ 

JSIL.MakeDelegate("System.Runtime.AsyncResult/AsyncCompletion", false, []);

/* class System.Runtime.AsyncWaitHandle */ 

(function AsyncWaitHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.AsyncWaitHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Threading.EventResetMode")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnTimerComplete", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Wait", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WaitAsync", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Action`2", [$.Object, $asm09.TypeRef("System.TimeoutException")]), $.Object, 
          $asm09.TypeRef("System.TimeSpan")
        ], [])
    );

    $.Field({Static:true , Public:false}, "timerCompleteCallback", $asm09.TypeRef("System.Action`1", [$.Object])); 
    $.Field({Static:false, Public:false}, "asyncWaiters", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm12.TypeRef("System.Runtime.AsyncWaitHandle/AsyncWaiter")])); 
    $.Field({Static:false, Public:false}, "isSignaled", $.Boolean); 
    $.Field({Static:false, Public:false}, "resetMode", $asm09.TypeRef("System.Threading.EventResetMode")); 
    $.Field({Static:false, Public:false}, "syncObject", $.Object); 
    $.Field({Static:false, Public:false}, "syncWaiterCount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.AsyncWaitHandle/AsyncWaiter */ 

(function AsyncWaiter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm12.System.Runtime.AsyncWaitHandle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Boolean)) ();
  };

  function AsyncWaiter_get_Parent () {
    return this.AsyncWaiter$Parent$value;
  };

  function AsyncWaiter_get_TimedOut () {
    return this.AsyncWaiter$TimedOut$value;
  };

  function AsyncWaiter_set_Parent (value) {
    this.AsyncWaiter$Parent$value = value;
  };

  function AsyncWaiter_set_TimedOut (value) {
    this.AsyncWaiter$TimedOut$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.ActionItem"), 
      Name: "System.Runtime.AsyncWaitHandle/AsyncWaiter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Runtime.AsyncWaitHandle"), $asm09.TypeRef("System.Action`2", [$.Object, $asm09.TypeRef("System.TimeoutException")]), 
          $.Object
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Call", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CancelTimer", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Method({Static:false, Public:true }, "get_Parent", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.AsyncWaitHandle"), [], []), 
      AsyncWaiter_get_Parent
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_TimedOut", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      AsyncWaiter_get_TimedOut
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Invoke", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Method({Static:false, Public:false}, "set_Parent", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.AsyncWaitHandle")], []), 
      AsyncWaiter_set_Parent
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_TimedOut", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      AsyncWaiter_set_TimedOut
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "SetTimer", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Action`1", [$.Object]), $.Object, 
          $asm09.TypeRef("System.TimeSpan")
        ], [])
    );

    $.Field({Static:false, Public:false}, "callback", $asm09.TypeRef("System.Action`2", [$.Object, $asm09.TypeRef("System.TimeoutException")]))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "state", $.Object)
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "timer", $asm12.TypeRef("System.Runtime.IOThreadTimer")); 
    $.Field({Static:false, Public:false}, "originalTimeout", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "AsyncWaiter$Parent$value", $asm12.TypeRef("System.Runtime.AsyncWaitHandle"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "AsyncWaiter$TimedOut$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Parent", $asm12.TypeRef("System.Runtime.AsyncWaitHandle"));

    $.Property({Static:false, Public:true }, "TimedOut", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.BackoffTimeoutHelper */ 

(function BackoffTimeoutHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.BackoffTimeoutHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan"), $asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.TimeSpan"), $asm09.TypeRef("System.TimeSpan"), 
          $asm09.TypeRef("System.TimeSpan")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Backoff", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OriginalTimeout", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "IsExpired", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan"), $asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WaitAndBackoff", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action`1", [$.Object]), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WaitAndBackoff", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WaitTimeWithDrift", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "maxSkewMilliseconds", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "maxDriftTicks", $.Int64); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "defaultInitialWaitTime", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "defaultMaxWaitTime", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "deadline", $asm09.TypeRef("System.DateTime")); 
    $.Field({Static:false, Public:false}, "maxWaitTime", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "waitTime", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "backoffTimer", $asm12.TypeRef("System.Runtime.IOThreadTimer")); 
    $.Field({Static:false, Public:false}, "backoffCallback", $asm09.TypeRef("System.Action`1", [$.Object])); 
    $.Field({Static:false, Public:false}, "backoffState", $.Object); 
    $.Field({Static:false, Public:false}, "random", $asm09.TypeRef("System.Random")); 
    $.Field({Static:false, Public:false}, "originalTimeout", $asm09.TypeRef("System.TimeSpan")); 
    function BackoffTimeoutHelper__cctor () {
      $thisType.defaultInitialWaitTime = new $asm09.System.TimeSpan();
      $thisType.defaultMaxWaitTime = new $asm09.System.TimeSpan();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      BackoffTimeoutHelper__cctor
    );

    $.Property({Static:false, Public:true }, "OriginalTimeout", $asm09.TypeRef("System.TimeSpan"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.BufferedOutputStream */ 

(function BufferedOutputStream$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.IO.Stream"), 
      Name: "System.Runtime.BufferedOutputStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm12.TypeRef("System.Runtime.InternalBufferManager")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AllocNextChunk", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateQuotaExceededException", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.IAsyncResult")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IAsyncResult")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reinitialize", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm12.TypeRef("System.Runtime.InternalBufferManager")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Reinitialize", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $asm12.TypeRef("System.Runtime.InternalBufferManager")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm09.TypeRef("System.IO.SeekOrigin")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Skip", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToMemoryStream", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IO.MemoryStream"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      new JSIL.MethodSignature(null, [$.Byte], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "bufferManager", $asm12.TypeRef("System.Runtime.InternalBufferManager")); 
    $.Field({Static:false, Public:false}, "chunks", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Byte])])); 
    $.Field({Static:false, Public:false}, "chunkCount", $.Int32); 
    $.Field({Static:false, Public:false}, "currentChunk", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "currentChunkSize", $.Int32); 
    $.Field({Static:false, Public:false}, "maxSize", $.Int32); 
    $.Field({Static:false, Public:false}, "maxSizeQuota", $.Int32); 
    $.Field({Static:false, Public:false}, "totalSize", $.Int32); 
    $.Field({Static:false, Public:false}, "callerReturnsBuffer", $.Boolean); 
    $.Field({Static:false, Public:false}, "bufferReturned", $.Boolean); 
    $.Field({Static:false, Public:false}, "initialized", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.FatalException */ 

(function FatalException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.SystemException"), 
      Name: "System.Runtime.FatalException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Exception")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CallbackException */ 

(function CallbackException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.FatalException"), 
      Name: "System.Runtime.CallbackException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Exception")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompletedAsyncResult */ 

(function CompletedAsyncResult$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.AsyncResult"), 
      Name: "System.Runtime.CompletedAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.AsyncCallback"), $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "End", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IAsyncResult")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompletedAsyncResult`1 */ 

(function CompletedAsyncResult$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.AsyncResult"), 
      Name: "System.Runtime.CompletedAsyncResult`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          new JSIL.GenericParameter("T", "System.Runtime.CompletedAsyncResult`1"), $asm09.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "End", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.CompletedAsyncResult`1"), [$asm09.TypeRef("System.IAsyncResult")], [])
    );

    $.Field({Static:false, Public:false}, "data", $.GenericParameter("T")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompletedAsyncResult`2 */ 

(function CompletedAsyncResult$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.AsyncResult"), 
      Name: "System.Runtime.CompletedAsyncResult`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult", "TParameter"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          new JSIL.GenericParameter("TResult", "System.Runtime.CompletedAsyncResult`2"), new JSIL.GenericParameter("TParameter", "System.Runtime.CompletedAsyncResult`2"), 
          $asm09.TypeRef("System.AsyncCallback"), $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "End", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Runtime.CompletedAsyncResult`2"), [$asm09.TypeRef("System.IAsyncResult"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TParameter", "System.Runtime.CompletedAsyncResult`2")])], [])
    );

    $.Field({Static:false, Public:false}, "resultData", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "parameter", $.GenericParameter("TParameter")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.ComputerNameFormat */ 

JSIL.MakeEnum(
  "System.Runtime.ComputerNameFormat", false, {
    NetBIOS: 0, 
    DnsHostName: 1, 
    Dns: 2, 
    DnsFullyQualified: 3, 
    PhysicalNetBIOS: 4, 
    PhysicalDnsHostName: 5, 
    PhysicalDnsDomain: 6, 
    PhysicalDnsFullyQualified: 7
  }, false
);

/* class System.Runtime.DiagnosticStrings */ 

(function DiagnosticStrings$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.DiagnosticStrings", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "AppDomain", "AppDomain"); 
    $.Constant({Static:true , Public:false}, "ChannelTag", "Channel"); 
    $.Constant({Static:true , Public:false}, "Description", "Description"); 
    $.Constant({Static:true , Public:false}, "DataTag", "Data"); 
    $.Constant({Static:true , Public:false}, "DataItemsTag", "DataItems"); 
    $.Constant({Static:true , Public:false}, "DescriptionTag", "Description"); 
    $.Constant({Static:true , Public:false}, "ExceptionTag", "Exception"); 
    $.Constant({Static:true , Public:false}, "ExceptionTypeTag", "ExceptionType"); 
    $.Constant({Static:true , Public:false}, "ExceptionStringTag", "ExceptionString"); 
    $.Constant({Static:true , Public:false}, "ExtendedDataTag", "ExtendedData"); 
    $.Constant({Static:true , Public:false}, "InnerExceptionTag", "InnerException"); 
    $.Constant({Static:true , Public:false}, "KeyTag", "Key"); 
    $.Constant({Static:true , Public:false}, "MessageTag", "Message"); 
    $.Constant({Static:true , Public:false}, "NamespaceTag", "xmlns"); 
    $.Constant({Static:true , Public:false}, "NativeErrorCodeTag", "NativeErrorCode"); 
    $.Constant({Static:true , Public:false}, "Separator", ":"); 
    $.Constant({Static:true , Public:false}, "SeverityTag", "Severity"); 
    $.Constant({Static:true , Public:false}, "SourceTag", "Source"); 
    $.Constant({Static:true , Public:false}, "StackTraceTag", "StackTrace"); 
    $.Constant({Static:true , Public:false}, "Task", "Task"); 
    $.Constant({Static:true , Public:false}, "TraceCodeTag", "TraceIdentifier"); 
    $.Constant({Static:true , Public:false}, "TraceRecordTag", "TraceRecord"); 
    $.Constant({Static:true , Public:false}, "ValueTag", "Value"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.DuplicateDetector`1 */ 

(function DuplicateDetector$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.DuplicateDetector`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Runtime.DuplicateDetector`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddIfNotDuplicate", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Runtime.DuplicateDetector`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Runtime.DuplicateDetector`1")], [])
    );

    $.Field({Static:false, Public:false}, "fifoList", $asm0B.TypeRef("System.Collections.Generic.LinkedList`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "items", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("T"), $asm0B.TypeRef("System.Collections.Generic.LinkedListNode`1", [$.GenericParameter("T")])])); 
    $.Field({Static:false, Public:false}, "capacity", $.Int32); 
    $.Field({Static:false, Public:false}, "thisLock", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.ExceptionTrace */ 

(function ExceptionTrace$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.ExceptionTrace", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Argument", 
      new JSIL.MethodSignature($asm09.TypeRef("System.ArgumentException"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ArgumentNull", 
      new JSIL.MethodSignature($asm09.TypeRef("System.ArgumentNullException"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ArgumentNull", 
      new JSIL.MethodSignature($asm09.TypeRef("System.ArgumentNullException"), [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ArgumentNullOrEmpty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.ArgumentException"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ArgumentOutOfRange", 
      new JSIL.MethodSignature($asm09.TypeRef("System.ArgumentOutOfRangeException"), [
          $.String, $.Object, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AsError", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AsError", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$asm09.TypeRef("System.Exception"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AsError", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$asm09.TypeRef("System.Reflection.TargetInvocationException"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AsError", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$asm09.TypeRef("System.AggregateException")], ["TPreferredException"])
    );

    $.ExternalMethod({Static:false, Public:true }, "AsError", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$asm09.TypeRef("System.AggregateException"), $.String], ["TPreferredException"])
    );

    $.ExternalMethod({Static:false, Public:true }, "AsInformation", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AsWarning", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BreakOnException", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Exception")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ObjectDisposed", 
      new JSIL.MethodSignature($asm09.TypeRef("System.ObjectDisposedException"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TraceEtwException", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Exception"), $asm0B.TypeRef("System.Diagnostics.TraceEventType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceException", 
      new JSIL.MethodSignature("!!0", ["!!0"], ["TException"])
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceException", 
      new JSIL.MethodSignature("!!0", ["!!0", $.String], ["TException"])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "TraceFailFast", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TraceFailFast", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Runtime.Diagnostics.EventLogger")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TraceHandledException", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Exception"), $asm0B.TypeRef("System.Diagnostics.TraceEventType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TraceUnhandledException", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Exception")], [])
    );

    $.Field({Static:false, Public:false}, "eventSourceName", $.String); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "diagnosticTrace", $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")); 
    $.Constant({Static:true , Public:false}, "FailFastEventLogCategory", 6); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Runtime.FastAsyncCallback */ 

JSIL.MakeDelegate("System.Runtime.FastAsyncCallback", false, []);

/* class System.Runtime.Fx */ 

(function Fx$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Fx", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "AllocateByteArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "AllocateCharArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Assert", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "Assert", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "AssertAndFailFast", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "AssertAndFailFast", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AssertAndThrow", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "AssertAndThrow", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "AssertAndThrowFatal", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "AssertAndThrowFatal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateGuid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AssertsFailFast", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AsynchronousThreadExceptionHandler", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.Fx/ExceptionHandler"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "get_BreakOnExceptionTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Exception", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.ExceptionTrace"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FastDebug", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_StealthDebugger", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Trace", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleAtThreadBase", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Exception")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "InitializeTracing", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "IsFatal", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_AsynchronousThreadExceptionHandler", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.Fx/ExceptionHandler")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ThunkCallback", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Action`1", ["!!0"]), [$asm09.TypeRef("System.Action`1", ["!!0"])], ["T1"])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThunkCallback", 
      new JSIL.MethodSignature($asm09.TypeRef("System.AsyncCallback"), [$asm09.TypeRef("System.AsyncCallback")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThunkCallback", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.WaitCallback"), [$asm09.TypeRef("System.Threading.WaitCallback")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThunkCallback", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.TimerCallback"), [$asm09.TypeRef("System.Threading.TimerCallback")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThunkCallback", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.WaitOrTimerCallback"), [$asm09.TypeRef("System.Threading.WaitOrTimerCallback")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThunkCallback", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.SendOrPostCallback"), [$asm09.TypeRef("System.Threading.SendOrPostCallback")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThunkCallback", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.IOCompletionCallback"), [$asm09.TypeRef("System.Threading.IOCompletionCallback")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TraceExceptionNoThrow", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Exception")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "TryCreateGuid", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Guid")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateLevel", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateLevel", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false}, "exceptionTrace", $asm12.TypeRef("System.Runtime.ExceptionTrace")); 
    $.Field({Static:true , Public:false}, "diagnosticTrace", $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")); 
    $.Field({Static:true , Public:false}, "asynchronousThreadExceptionHandler", $asm12.TypeRef("System.Runtime.Fx/ExceptionHandler"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Constant({Static:true , Public:false}, "defaultEventSource", "System.Runtime"); 
    $.Property({Static:true , Public:true }, "Exception", $asm12.TypeRef("System.Runtime.ExceptionTrace"));

    $.Property({Static:true , Public:true }, "Trace", $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"));

    $.Property({Static:true , Public:true }, "AsynchronousThreadExceptionHandler", $asm12.TypeRef("System.Runtime.Fx/ExceptionHandler"));

    $.Property({Static:true , Public:false}, "AssertsFailFast", $.Boolean);

    $.Property({Static:true , Public:false}, "BreakOnExceptionTypes", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]));

    $.Property({Static:true , Public:false}, "FastDebug", $.Boolean);

    $.Property({Static:true , Public:false}, "StealthDebugger", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Fx/ExceptionHandler */ 

(function ExceptionHandler$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Fx/ExceptionHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HandleException", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Exception")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Fx/Tag */ 

(function Tag$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Fx/Tag", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.Fx/Tag/CacheAttrition */ 

JSIL.MakeEnum(
  "System.Runtime.Fx/Tag/CacheAttrition", false, {
    None: 0, 
    ElementOnTimer: 1, 
    ElementOnGC: 2, 
    ElementOnCallback: 3, 
    FullPurgeOnTimer: 4, 
    FullPurgeOnEachAccess: 5, 
    PartialPurgeOnTimer: 6, 
    PartialPurgeOnEachAccess: 7
  }, false
);

/* enum System.Runtime.Fx/Tag/ThrottleAction */ 

JSIL.MakeEnum(
  "System.Runtime.Fx/Tag/ThrottleAction", false, {
    Reject: 0, 
    Pause: 1
  }, false
);

/* enum System.Runtime.Fx/Tag/ThrottleMetric */ 

JSIL.MakeEnum(
  "System.Runtime.Fx/Tag/ThrottleMetric", false, {
    Count: 0, 
    Rate: 1, 
    Other: 2
  }, false
);

/* enum System.Runtime.Fx/Tag/Location */ 

JSIL.MakeEnum(
  "System.Runtime.Fx/Tag/Location", false, {
    InProcess: 0, 
    OutOfProcess: 1, 
    LocalSystem: 2, 
    LocalOrRemoteSystem: 3, 
    RemoteSystem: 4
  }, false
);

/* enum System.Runtime.Fx/Tag/SynchronizationKind */ 

JSIL.MakeEnum(
  "System.Runtime.Fx/Tag/SynchronizationKind", false, {
    LockStatement: 0, 
    MonitorWait: 1, 
    MonitorExplicit: 2, 
    InterlockedNoSpin: 3, 
    InterlockedWithSpin: 4, 
    FromFieldType: 5
  }, false
);

/* enum System.Runtime.Fx/Tag/BlocksUsing */ 

JSIL.MakeEnum(
  "System.Runtime.Fx/Tag/BlocksUsing", false, {
    MonitorEnter: 0, 
    MonitorWait: 1, 
    ManualResetEvent: 2, 
    AutoResetEvent: 3, 
    AsyncResult: 4, 
    IAsyncResult: 5, 
    PInvoke: 6, 
    InputQueue: 7, 
    ThreadNeutralSemaphore: 8, 
    PrivatePrimitive: 9, 
    OtherInternalPrimitive: 10, 
    OtherFrameworkPrimitive: 11, 
    OtherInterop: 12, 
    Other: 13, 
    NonBlocking: 14
  }, true
);

/* class System.Runtime.Fx/Tag/Strings */ 

(function Strings$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Fx/Tag/Strings", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "ExternallyManaged", "externally managed"); 
    $.Constant({Static:true , Public:false}, "AppDomain", "AppDomain"); 
    $.Constant({Static:true , Public:false}, "DeclaringInstance", "instance of declaring class"); 
    $.Constant({Static:true , Public:false}, "Unbounded", "unbounded"); 
    $.Constant({Static:true , Public:false}, "Infinite", "infinite"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Fx/Tag/FriendAccessAllowedAttribute */ 

(function FriendAccessAllowedAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };

  function FriendAccessAllowedAttribute_get_AssemblyName () {
    return this.FriendAccessAllowedAttribute$AssemblyName$value;
  };

  function FriendAccessAllowedAttribute_set_AssemblyName (value) {
    this.FriendAccessAllowedAttribute$AssemblyName$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Fx/Tag/FriendAccessAllowedAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Method({Static:false, Public:true }, "get_AssemblyName", 
      new JSIL.MethodSignature($.String, [], []), 
      FriendAccessAllowedAttribute_get_AssemblyName
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_AssemblyName", 
      new JSIL.MethodSignature(null, [$.String], []), 
      FriendAccessAllowedAttribute_set_AssemblyName
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "FriendAccessAllowedAttribute$AssemblyName$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "AssemblyName", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Class", "Constructor", "Method", "Property")]; })
    .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

})();

/* class System.Runtime.Fx/Tag/Throws */ 

(function Throws$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Fx/Tag/Throws", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Fx/Tag/ThrowsAttribute */ 

(function ThrowsAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Fx/Tag/ThrowsAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Diagnosis", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ExceptionType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "exceptionType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "diagnosis", $.String); 
    $.Property({Static:false, Public:true }, "ExceptionType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Diagnosis", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Constructor", "Method")]; })
    .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["CODE_ANALYSIS_CDF"]; });

})();

/* class System.Runtime.Fx/Tag/Throws/TimeoutAttribute */ 

(function TimeoutAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.Fx/Tag/ThrowsAttribute"), 
      Name: "System.Runtime.Fx/Tag/Throws/TimeoutAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["CODE_ANALYSIS_CDF"]; })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Constructor", "Method")]; });

})();

/* class System.Runtime.Fx/Tag/CacheAttribute */ 

(function CacheAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };

  function CacheAttribute_get_Scope () {
    return this.CacheAttribute$Scope$value;
  };

  function CacheAttribute_get_SizeLimit () {
    return this.CacheAttribute$SizeLimit$value;
  };

  function CacheAttribute_get_Timeout () {
    return this.CacheAttribute$Timeout$value;
  };

  function CacheAttribute_set_Scope (value) {
    this.CacheAttribute$Scope$value = value;
  };

  function CacheAttribute_set_SizeLimit (value) {
    this.CacheAttribute$SizeLimit$value = value;
  };

  function CacheAttribute_set_Timeout (value) {
    this.CacheAttribute$Timeout$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Fx/Tag/CacheAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm12.TypeRef("System.Runtime.Fx/Tag/CacheAttrition")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CacheAttrition", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.Fx/Tag/CacheAttrition"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ElementType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_Scope", 
      new JSIL.MethodSignature($.String, [], []), 
      CacheAttribute_get_Scope
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_SizeLimit", 
      new JSIL.MethodSignature($.String, [], []), 
      CacheAttribute_get_SizeLimit
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_Timeout", 
      new JSIL.MethodSignature($.String, [], []), 
      CacheAttribute_get_Timeout
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_Scope", 
      new JSIL.MethodSignature(null, [$.String], []), 
      CacheAttribute_set_Scope
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_SizeLimit", 
      new JSIL.MethodSignature(null, [$.String], []), 
      CacheAttribute_set_SizeLimit
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_Timeout", 
      new JSIL.MethodSignature(null, [$.String], []), 
      CacheAttribute_set_Timeout
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "elementType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "cacheAttrition", $asm12.TypeRef("System.Runtime.Fx/Tag/CacheAttrition")); 
    $.Field({Static:false, Public:false}, "CacheAttribute$Scope$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "CacheAttribute$SizeLimit$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "CacheAttribute$Timeout$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "ElementType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "CacheAttrition", $asm12.TypeRef("System.Runtime.Fx/Tag/CacheAttrition"));

    $.Property({Static:false, Public:true }, "Scope", $.String);

    $.Property({Static:false, Public:true }, "SizeLimit", $.String);

    $.Property({Static:false, Public:true }, "Timeout", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["CODE_ANALYSIS_CDF"]; })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.Field]; });

})();

/* class System.Runtime.Fx/Tag/QueueAttribute */ 

(function QueueAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.String)) ();
  };

  function QueueAttribute_get_EnqueueThrowsIfFull () {
    return this.QueueAttribute$EnqueueThrowsIfFull$value;
  };

  function QueueAttribute_get_Scope () {
    return this.QueueAttribute$Scope$value;
  };

  function QueueAttribute_get_SizeLimit () {
    return this.QueueAttribute$SizeLimit$value;
  };

  function QueueAttribute_get_StaleElementsRemovedImmediately () {
    return this.QueueAttribute$StaleElementsRemovedImmediately$value;
  };

  function QueueAttribute_set_EnqueueThrowsIfFull (value) {
    this.QueueAttribute$EnqueueThrowsIfFull$value = value;
  };

  function QueueAttribute_set_Scope (value) {
    this.QueueAttribute$Scope$value = value;
  };

  function QueueAttribute_set_SizeLimit (value) {
    this.QueueAttribute$SizeLimit$value = value;
  };

  function QueueAttribute_set_StaleElementsRemovedImmediately (value) {
    this.QueueAttribute$StaleElementsRemovedImmediately$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Fx/Tag/QueueAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_EnqueueThrowsIfFull", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      QueueAttribute_get_EnqueueThrowsIfFull
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_Scope", 
      new JSIL.MethodSignature($.String, [], []), 
      QueueAttribute_get_Scope
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_SizeLimit", 
      new JSIL.MethodSignature($.String, [], []), 
      QueueAttribute_get_SizeLimit
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_StaleElementsRemovedImmediately", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      QueueAttribute_get_StaleElementsRemovedImmediately
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_EnqueueThrowsIfFull", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      QueueAttribute_set_EnqueueThrowsIfFull
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_Scope", 
      new JSIL.MethodSignature(null, [$.String], []), 
      QueueAttribute_set_Scope
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_SizeLimit", 
      new JSIL.MethodSignature(null, [$.String], []), 
      QueueAttribute_set_SizeLimit
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_StaleElementsRemovedImmediately", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      QueueAttribute_set_StaleElementsRemovedImmediately
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "elementType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "QueueAttribute$Scope$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "QueueAttribute$SizeLimit$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "QueueAttribute$StaleElementsRemovedImmediately$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "QueueAttribute$EnqueueThrowsIfFull$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "ElementType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Scope", $.String);

    $.Property({Static:false, Public:true }, "SizeLimit", $.String);

    $.Property({Static:false, Public:true }, "StaleElementsRemovedImmediately", $.Boolean);

    $.Property({Static:false, Public:true }, "EnqueueThrowsIfFull", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.Field]; })
    .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["CODE_ANALYSIS_CDF"]; });

})();

/* class System.Runtime.Fx/Tag/ThrottleAttribute */ 

(function ThrottleAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };

  function ThrottleAttribute_get_Scope () {
    return this.ThrottleAttribute$Scope$value;
  };

  function ThrottleAttribute_set_Scope (value) {
    this.ThrottleAttribute$Scope$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Fx/Tag/ThrottleAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Runtime.Fx/Tag/ThrottleAction"), $asm12.TypeRef("System.Runtime.Fx/Tag/ThrottleMetric"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Limit", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_Scope", 
      new JSIL.MethodSignature($.String, [], []), 
      ThrottleAttribute_get_Scope
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ThrottleAction", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.Fx/Tag/ThrottleAction"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ThrottleMetric", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.Fx/Tag/ThrottleMetric"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_Scope", 
      new JSIL.MethodSignature(null, [$.String], []), 
      ThrottleAttribute_set_Scope
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "throttleAction", $asm12.TypeRef("System.Runtime.Fx/Tag/ThrottleAction")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "throttleMetric", $asm12.TypeRef("System.Runtime.Fx/Tag/ThrottleMetric")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "limit", $.String); 
    $.Field({Static:false, Public:false}, "ThrottleAttribute$Scope$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "ThrottleAction", $asm12.TypeRef("System.Runtime.Fx/Tag/ThrottleAction"));

    $.Property({Static:false, Public:true }, "ThrottleMetric", $asm12.TypeRef("System.Runtime.Fx/Tag/ThrottleMetric"));

    $.Property({Static:false, Public:true }, "Limit", $.String);

    $.Property({Static:false, Public:true }, "Scope", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["CODE_ANALYSIS_CDF"]; })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.Field]; });

})();

/* class System.Runtime.Fx/Tag/ExternalResourceAttribute */ 

(function ExternalResourceAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Fx/Tag/ExternalResourceAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.Fx/Tag/Location"), $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Location", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.Fx/Tag/Location"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "location", $asm12.TypeRef("System.Runtime.Fx/Tag/Location")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "description", $.String); 
    $.Property({Static:false, Public:true }, "Location", $asm12.TypeRef("System.Runtime.Fx/Tag/Location"));

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Constructor", "Field", "Method")]; })
    .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["CODE_ANALYSIS_CDF"]; });

})();

/* class System.Runtime.Fx/Tag/SynchronizationObjectAttribute */ 

(function SynchronizationObjectAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm12.System.Runtime.Fx_Tag_SynchronizationKind)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.String)) ();
  };

  function SynchronizationObjectAttribute_get_Blocking () {
    return this.SynchronizationObjectAttribute$Blocking$value;
  };

  function SynchronizationObjectAttribute_get_Kind () {
    return this.SynchronizationObjectAttribute$Kind$value;
  };

  function SynchronizationObjectAttribute_get_Scope () {
    return this.SynchronizationObjectAttribute$Scope$value;
  };

  function SynchronizationObjectAttribute_set_Blocking (value) {
    this.SynchronizationObjectAttribute$Blocking$value = value;
  };

  function SynchronizationObjectAttribute_set_Kind (value) {
    this.SynchronizationObjectAttribute$Kind$value = value;
  };

  function SynchronizationObjectAttribute_set_Scope (value) {
    this.SynchronizationObjectAttribute$Scope$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Fx/Tag/SynchronizationObjectAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Method({Static:false, Public:true }, "get_Blocking", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      SynchronizationObjectAttribute_get_Blocking
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_Kind", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.Fx/Tag/SynchronizationKind"), [], []), 
      SynchronizationObjectAttribute_get_Kind
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_Scope", 
      new JSIL.MethodSignature($.String, [], []), 
      SynchronizationObjectAttribute_get_Scope
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_Blocking", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      SynchronizationObjectAttribute_set_Blocking
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_Kind", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.Fx/Tag/SynchronizationKind")], []), 
      SynchronizationObjectAttribute_set_Kind
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_Scope", 
      new JSIL.MethodSignature(null, [$.String], []), 
      SynchronizationObjectAttribute_set_Scope
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "SynchronizationObjectAttribute$Blocking$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SynchronizationObjectAttribute$Scope$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SynchronizationObjectAttribute$Kind$value", $asm12.TypeRef("System.Runtime.Fx/Tag/SynchronizationKind"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Blocking", $.Boolean);

    $.Property({Static:false, Public:true }, "Scope", $.String);

    $.Property({Static:false, Public:true }, "Kind", $asm12.TypeRef("System.Runtime.Fx/Tag/SynchronizationKind"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["CODE_ANALYSIS_CDF"]; })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Class", "Field")]; });

})();

/* class System.Runtime.Fx/Tag/SynchronizationPrimitiveAttribute */ 

(function SynchronizationPrimitiveAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Boolean)) ();
  };

  function SynchronizationPrimitiveAttribute_get_ReleaseMethod () {
    return this.SynchronizationPrimitiveAttribute$ReleaseMethod$value;
  };

  function SynchronizationPrimitiveAttribute_get_Spins () {
    return this.SynchronizationPrimitiveAttribute$Spins$value;
  };

  function SynchronizationPrimitiveAttribute_get_SupportsAsync () {
    return this.SynchronizationPrimitiveAttribute$SupportsAsync$value;
  };

  function SynchronizationPrimitiveAttribute_set_ReleaseMethod (value) {
    this.SynchronizationPrimitiveAttribute$ReleaseMethod$value = value;
  };

  function SynchronizationPrimitiveAttribute_set_Spins (value) {
    this.SynchronizationPrimitiveAttribute$Spins$value = value;
  };

  function SynchronizationPrimitiveAttribute_set_SupportsAsync (value) {
    this.SynchronizationPrimitiveAttribute$SupportsAsync$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Fx/Tag/SynchronizationPrimitiveAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.Fx/Tag/BlocksUsing")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_BlocksUsing", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.Fx/Tag/BlocksUsing"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_ReleaseMethod", 
      new JSIL.MethodSignature($.String, [], []), 
      SynchronizationPrimitiveAttribute_get_ReleaseMethod
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_Spins", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      SynchronizationPrimitiveAttribute_get_Spins
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_SupportsAsync", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      SynchronizationPrimitiveAttribute_get_SupportsAsync
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_ReleaseMethod", 
      new JSIL.MethodSignature(null, [$.String], []), 
      SynchronizationPrimitiveAttribute_set_ReleaseMethod
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_Spins", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      SynchronizationPrimitiveAttribute_set_Spins
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_SupportsAsync", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      SynchronizationPrimitiveAttribute_set_SupportsAsync
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "blocksUsing", $asm12.TypeRef("System.Runtime.Fx/Tag/BlocksUsing")); 
    $.Field({Static:false, Public:false}, "SynchronizationPrimitiveAttribute$SupportsAsync$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SynchronizationPrimitiveAttribute$Spins$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SynchronizationPrimitiveAttribute$ReleaseMethod$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "BlocksUsing", $asm12.TypeRef("System.Runtime.Fx/Tag/BlocksUsing"));

    $.Property({Static:false, Public:true }, "SupportsAsync", $.Boolean);

    $.Property({Static:false, Public:true }, "Spins", $.Boolean);

    $.Property({Static:false, Public:true }, "ReleaseMethod", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["CODE_ANALYSIS_CDF"]; })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Class", "Struct")]; });

})();

/* class System.Runtime.Fx/Tag/BlockingAttribute */ 

(function BlockingAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.String)) ();
  };

  function BlockingAttribute_get_CancelDeclaringType () {
    return this.BlockingAttribute$CancelDeclaringType$value;
  };

  function BlockingAttribute_get_CancelMethod () {
    return this.BlockingAttribute$CancelMethod$value;
  };

  function BlockingAttribute_get_Conditional () {
    return this.BlockingAttribute$Conditional$value;
  };

  function BlockingAttribute_set_CancelDeclaringType (value) {
    this.BlockingAttribute$CancelDeclaringType$value = value;
  };

  function BlockingAttribute_set_CancelMethod (value) {
    this.BlockingAttribute$CancelMethod$value = value;
  };

  function BlockingAttribute_set_Conditional (value) {
    this.BlockingAttribute$Conditional$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Fx/Tag/BlockingAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_CancelDeclaringType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], []), 
      BlockingAttribute_get_CancelDeclaringType
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_CancelMethod", 
      new JSIL.MethodSignature($.String, [], []), 
      BlockingAttribute_get_CancelMethod
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_Conditional", 
      new JSIL.MethodSignature($.String, [], []), 
      BlockingAttribute_get_Conditional
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_CancelDeclaringType", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], []), 
      BlockingAttribute_set_CancelDeclaringType
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_CancelMethod", 
      new JSIL.MethodSignature(null, [$.String], []), 
      BlockingAttribute_set_CancelMethod
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_Conditional", 
      new JSIL.MethodSignature(null, [$.String], []), 
      BlockingAttribute_set_Conditional
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "BlockingAttribute$CancelMethod$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "BlockingAttribute$CancelDeclaringType$value", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "BlockingAttribute$Conditional$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "CancelMethod", $.String);

    $.Property({Static:false, Public:true }, "CancelDeclaringType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Conditional", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Constructor", "Method")]; })
    .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["CODE_ANALYSIS_CDF"]; });

})();

/* class System.Runtime.Fx/Tag/GuaranteeNonBlockingAttribute */ 

(function GuaranteeNonBlockingAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Fx/Tag/GuaranteeNonBlockingAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Constructor", "Method")]; })
    .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["CODE_ANALYSIS_CDF"]; });

})();

/* class System.Runtime.Fx/Tag/NonThrowingAttribute */ 

(function NonThrowingAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Fx/Tag/NonThrowingAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["CODE_ANALYSIS_CDF"]; })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Constructor", "Method")]; });

})();

/* class System.Runtime.Fx/Tag/InheritThrowsAttribute */ 

(function InheritThrowsAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Type)) ();
  };

  function InheritThrowsAttribute_get_From () {
    return this.InheritThrowsAttribute$From$value;
  };

  function InheritThrowsAttribute_get_FromDeclaringType () {
    return this.InheritThrowsAttribute$FromDeclaringType$value;
  };

  function InheritThrowsAttribute_set_From (value) {
    this.InheritThrowsAttribute$From$value = value;
  };

  function InheritThrowsAttribute_set_FromDeclaringType (value) {
    this.InheritThrowsAttribute$FromDeclaringType$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Fx/Tag/InheritThrowsAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_From", 
      new JSIL.MethodSignature($.String, [], []), 
      InheritThrowsAttribute_get_From
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_FromDeclaringType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], []), 
      InheritThrowsAttribute_get_FromDeclaringType
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_From", 
      new JSIL.MethodSignature(null, [$.String], []), 
      InheritThrowsAttribute_set_From
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_FromDeclaringType", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], []), 
      InheritThrowsAttribute_set_FromDeclaringType
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "InheritThrowsAttribute$FromDeclaringType$value", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "InheritThrowsAttribute$From$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "FromDeclaringType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "From", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Constructor", "Method")]; })
    .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["CODE_ANALYSIS_CDF"]; });

})();

/* class System.Runtime.Fx/Tag/KnownXamlExternalAttribute */ 

(function KnownXamlExternalAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Fx/Tag/KnownXamlExternalAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["CODE_ANALYSIS_CDF"]; })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.Property]; });

})();

/* class System.Runtime.Fx/Tag/XamlVisibleAttribute */ 

(function XamlVisibleAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Boolean)) ();
  };

  function XamlVisibleAttribute_get_Visible () {
    return this.XamlVisibleAttribute$Visible$value;
  };

  function XamlVisibleAttribute_set_Visible (value) {
    this.XamlVisibleAttribute$Visible$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Fx/Tag/XamlVisibleAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Method({Static:false, Public:true }, "get_Visible", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      XamlVisibleAttribute_get_Visible
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:false}, "set_Visible", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      XamlVisibleAttribute_set_Visible
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "XamlVisibleAttribute$Visible$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Visible", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Assembly", "Class", "Struct")]; })
    .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["CODE_ANALYSIS_CDF"]; });

})();

/* class System.Runtime.Fx/Tag/SecurityNoteAttribute */ 

(function SecurityNoteAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };

  function SecurityNoteAttribute_get_Critical () {
    return this.SecurityNoteAttribute$Critical$value;
  };

  function SecurityNoteAttribute_get_Miscellaneous () {
    return this.SecurityNoteAttribute$Miscellaneous$value;
  };

  function SecurityNoteAttribute_get_Safe () {
    return this.SecurityNoteAttribute$Safe$value;
  };

  function SecurityNoteAttribute_set_Critical (value) {
    this.SecurityNoteAttribute$Critical$value = value;
  };

  function SecurityNoteAttribute_set_Miscellaneous (value) {
    this.SecurityNoteAttribute$Miscellaneous$value = value;
  };

  function SecurityNoteAttribute_set_Safe (value) {
    this.SecurityNoteAttribute$Safe$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Fx/Tag/SecurityNoteAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_Critical", 
      new JSIL.MethodSignature($.String, [], []), 
      SecurityNoteAttribute_get_Critical
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_Miscellaneous", 
      new JSIL.MethodSignature($.String, [], []), 
      SecurityNoteAttribute_get_Miscellaneous
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_Safe", 
      new JSIL.MethodSignature($.String, [], []), 
      SecurityNoteAttribute_get_Safe
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_Critical", 
      new JSIL.MethodSignature(null, [$.String], []), 
      SecurityNoteAttribute_set_Critical
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_Miscellaneous", 
      new JSIL.MethodSignature(null, [$.String], []), 
      SecurityNoteAttribute_set_Miscellaneous
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_Safe", 
      new JSIL.MethodSignature(null, [$.String], []), 
      SecurityNoteAttribute_set_Safe
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "SecurityNoteAttribute$Critical$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SecurityNoteAttribute$Safe$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "SecurityNoteAttribute$Miscellaneous$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Critical", $.String);

    $.Property({Static:false, Public:true }, "Safe", $.String);

    $.Property({Static:false, Public:true }, "Miscellaneous", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags(
          "Assembly", "Class", "Constructor", "Delegate", 
          "Enum", "Event", "Field", "Interface", 
          "Method", "Module", "Property", "Struct"
      )]; })
    .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["CODE_ANALYSIS_CDF"]; });

})();

/* class System.Runtime.Fx/Thunk`1 */ 

(function Thunk$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Fx/Thunk`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Runtime.Fx/Thunk`1")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Callback", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.Fx/Thunk`1"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "callback", $.GenericParameter("T"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:false, Public:false}, "Callback", new JSIL.GenericParameter("T", "System.Runtime.Fx/Thunk`1"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Fx/ActionThunk`1 */ 

(function ActionThunk$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.Fx/Thunk`1", [$asm09.TypeRef("System.Action`1", [new JSIL.GenericParameter("T1", "System.Runtime.Fx/ActionThunk`1")])]), 
      Name: "System.Runtime.Fx/ActionThunk`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T1"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action`1", [new JSIL.GenericParameter("T1", "System.Runtime.Fx/ActionThunk`1")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ThunkFrame", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Action`1", [new JSIL.GenericParameter("T1", "System.Runtime.Fx/ActionThunk`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnhandledExceptionFrame", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T1", "System.Runtime.Fx/ActionThunk`1")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Property({Static:false, Public:true }, "ThunkFrame", $asm09.TypeRef("System.Action`1", [new JSIL.GenericParameter("T1", "System.Runtime.Fx/ActionThunk`1")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Fx/AsyncThunk */ 

(function AsyncThunk$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.Fx/Thunk`1", [$asm09.TypeRef("System.AsyncCallback")]), 
      Name: "System.Runtime.Fx/AsyncThunk", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.AsyncCallback")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ThunkFrame", 
      new JSIL.MethodSignature($asm09.TypeRef("System.AsyncCallback"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnhandledExceptionFrame", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IAsyncResult")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Property({Static:false, Public:true }, "ThunkFrame", $asm09.TypeRef("System.AsyncCallback"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Fx/WaitThunk */ 

(function WaitThunk$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.Fx/Thunk`1", [$asm09.TypeRef("System.Threading.WaitCallback")]), 
      Name: "System.Runtime.Fx/WaitThunk", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Threading.WaitCallback")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ThunkFrame", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.WaitCallback"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnhandledExceptionFrame", 
      new JSIL.MethodSignature(null, [$.Object], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Property({Static:false, Public:true }, "ThunkFrame", $asm09.TypeRef("System.Threading.WaitCallback"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Fx/TimerThunk */ 

(function TimerThunk$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.Fx/Thunk`1", [$asm09.TypeRef("System.Threading.TimerCallback")]), 
      Name: "System.Runtime.Fx/TimerThunk", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Threading.TimerCallback")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ThunkFrame", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.TimerCallback"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnhandledExceptionFrame", 
      new JSIL.MethodSignature(null, [$.Object], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Property({Static:false, Public:true }, "ThunkFrame", $asm09.TypeRef("System.Threading.TimerCallback"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Fx/WaitOrTimerThunk */ 

(function WaitOrTimerThunk$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.Fx/Thunk`1", [$asm09.TypeRef("System.Threading.WaitOrTimerCallback")]), 
      Name: "System.Runtime.Fx/WaitOrTimerThunk", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Threading.WaitOrTimerCallback")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ThunkFrame", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.WaitOrTimerCallback"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnhandledExceptionFrame", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Property({Static:false, Public:true }, "ThunkFrame", $asm09.TypeRef("System.Threading.WaitOrTimerCallback"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Fx/SendOrPostThunk */ 

(function SendOrPostThunk$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.Fx/Thunk`1", [$asm09.TypeRef("System.Threading.SendOrPostCallback")]), 
      Name: "System.Runtime.Fx/SendOrPostThunk", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Threading.SendOrPostCallback")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ThunkFrame", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.SendOrPostCallback"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnhandledExceptionFrame", 
      new JSIL.MethodSignature(null, [$.Object], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Property({Static:false, Public:true }, "ThunkFrame", $asm09.TypeRef("System.Threading.SendOrPostCallback"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Fx/IOCompletionThunk */ 

(function IOCompletionThunk$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Fx/IOCompletionThunk", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Threading.IOCompletionCallback")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ThunkFrame", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.IOCompletionCallback"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnhandledExceptionFrame", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Threading.NativeOverlapped")])
        ], [])
    );

    $.Field({Static:false, Public:false}, "callback", $asm09.TypeRef("System.Threading.IOCompletionCallback")); 
    $.Property({Static:false, Public:true }, "ThunkFrame", $asm09.TypeRef("System.Threading.IOCompletionCallback"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

})();

/* class System.Runtime.Fx/InternalException */ 

(function InternalException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.SystemException"), 
      Name: "System.Runtime.Fx/InternalException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Fx/FatalInternalException */ 

(function FatalInternalException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.Fx/InternalException"), 
      Name: "System.Runtime.Fx/FatalInternalException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.FxCop */ 

(function FxCop$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.FxCop", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.FxCop/Category */ 

(function Category$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.FxCop/Category", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "Design", "Microsoft.Design"); 
    $.Constant({Static:true , Public:true }, "Globalization", "Microsoft.Globalization"); 
    $.Constant({Static:true , Public:true }, "Maintainability", "Microsoft.Maintainability"); 
    $.Constant({Static:true , Public:true }, "MSInternal", "Microsoft.MSInternal"); 
    $.Constant({Static:true , Public:true }, "Naming", "Microsoft.Naming"); 
    $.Constant({Static:true , Public:true }, "Performance", "Microsoft.Performance"); 
    $.Constant({Static:true , Public:true }, "Reliability", "Microsoft.Reliability"); 
    $.Constant({Static:true , Public:true }, "Security", "Microsoft.Security"); 
    $.Constant({Static:true , Public:true }, "Usage", "Microsoft.Usage"); 
    $.Constant({Static:true , Public:true }, "Configuration", "Configuration"); 
    $.Constant({Static:true , Public:true }, "ReliabilityBasic", "Reliability"); 
    $.Constant({Static:true , Public:true }, "Xaml", "XAML"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.FxCop/Rule */ 

(function Rule$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.FxCop/Rule", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "AptcaMethodsShouldOnlyCallAptcaMethods", "CA2116:AptcaMethodsShouldOnlyCallAptcaMethods"); 
    $.Constant({Static:true , Public:true }, "AssembliesShouldHaveValidStrongNames", "CA2210:AssembliesShouldHaveValidStrongNames"); 
    $.Constant({Static:true , Public:true }, "AvoidCallingProblematicMethods", "CA2001:AvoidCallingProblematicMethods"); 
    $.Constant({Static:true , Public:true }, "AvoidExcessiveComplexity", "CA1502:AvoidExcessiveComplexity"); 
    $.Constant({Static:true , Public:true }, "AvoidNamespacesWithFewTypes", "CA1020:AvoidNamespacesWithFewTypes"); 
    $.Constant({Static:true , Public:true }, "AvoidOutParameters", "CA1021:AvoidOutParameters"); 
    $.Constant({Static:true , Public:true }, "AvoidUncalledPrivateCode", "CA1811:AvoidUncalledPrivateCode"); 
    $.Constant({Static:true , Public:true }, "AvoidUninstantiatedInternalClasses", "CA1812:AvoidUninstantiatedInternalClasses"); 
    $.Constant({Static:true , Public:true }, "AvoidUnsealedAttributes", "CA1813:AvoidUnsealedAttributes"); 
    $.Constant({Static:true , Public:true }, "CollectionPropertiesShouldBeReadOnly", "CA2227:CollectionPropertiesShouldBeReadOnly"); 
    $.Constant({Static:true , Public:true }, "CollectionsShouldImplementGenericInterface", "CA1010:CollectionsShouldImplementGenericInterface"); 
    $.Constant({Static:true , Public:true }, "ConfigurationPropertyAttributeRule", "Configuration102:ConfigurationPropertyAttributeRule"); 
    $.Constant({Static:true , Public:true }, "ConfigurationValidatorAttributeRule", "Configuration104:ConfigurationValidatorAttributeRule"); 
    $.Constant({Static:true , Public:true }, "ConsiderPassingBaseTypesAsParameters", "CA1011:ConsiderPassingBaseTypesAsParameters"); 
    $.Constant({Static:true , Public:true }, "CommunicationObjectThrowIf", "Reliability106"); 
    $.Constant({Static:true , Public:true }, "ConfigurationPropertyNameRule", "Configuration103:ConfigurationPropertyNameRule"); 
    $.Constant({Static:true , Public:true }, "DefaultParametersShouldNotBeUsed", "CA1026:DefaultParametersShouldNotBeUsed"); 
    $.Constant({Static:true , Public:true }, "DefineAccessorsForAttributeArguments", "CA1019:DefineAccessorsForAttributeArguments"); 
    $.Constant({Static:true , Public:true }, "DiagnosticsUtilityIsFatal", "Reliability108"); 
    $.Constant({Static:true , Public:true }, "DisposableFieldsShouldBeDisposed", "CA2213:DisposableFieldsShouldBeDisposed"); 
    $.Constant({Static:true , Public:true }, "DoNotCallOverridableMethodsInConstructors", "CA2214:DoNotCallOverridableMethodsInConstructors"); 
    $.Constant({Static:true , Public:true }, "DoNotCatchGeneralExceptionTypes", "CA1031:DoNotCatchGeneralExceptionTypes"); 
    $.Constant({Static:true , Public:true }, "DoNotDeclareReadOnlyMutableReferenceTypes", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes"); 
    $.Constant({Static:true , Public:true }, "DoNotDeclareVisibleInstanceFields", "CA1051:DoNotDeclareVisibleInstanceFields"); 
    $.Constant({Static:true , Public:true }, "DoNotLockOnObjectsWithWeakIdentity", "CA2002:DoNotLockOnObjectsWithWeakIdentity"); 
    $.Constant({Static:true , Public:true }, "DoNotIgnoreMethodResults", "CA1806:DoNotIgnoreMethodResults"); 
    $.Constant({Static:true , Public:true }, "DoNotIndirectlyExposeMethodsWithLinkDemands", "CA2122:DoNotIndirectlyExposeMethodsWithLinkDemands"); 
    $.Constant({Static:true , Public:true }, "DoNotPassLiteralsAsLocalizedParameters", "CA1303:DoNotPassLiteralsAsLocalizedParameters"); 
    $.Constant({Static:true , Public:true }, "DoNotRaiseReservedExceptionTypes", "CA2201:DoNotRaiseReservedExceptionTypes"); 
    $.Constant({Static:true , Public:true }, "EnumsShouldHaveZeroValue", "CA1008:EnumsShouldHaveZeroValue"); 
    $.Constant({Static:true , Public:true }, "FlagsEnumsShouldHavePluralNames", "CA1714:FlagsEnumsShouldHavePluralNames"); 
    $.Constant({Static:true , Public:true }, "GenericMethodsShouldProvideTypeParameter", "CA1004:GenericMethodsShouldProvideTypeParameter"); 
    $.Constant({Static:true , Public:true }, "IdentifiersShouldBeSpelledCorrectly", "CA1704:IdentifiersShouldBeSpelledCorrectly"); 
    $.Constant({Static:true , Public:true }, "IdentifiersShouldHaveCorrectSuffix", "CA1710:IdentifiersShouldHaveCorrectSuffix"); 
    $.Constant({Static:true , Public:true }, "IdentifiersShouldNotContainTypeNames", "CA1720:IdentifiersShouldNotContainTypeNames"); 
    $.Constant({Static:true , Public:true }, "IdentifiersShouldNotHaveIncorrectSuffix", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix"); 
    $.Constant({Static:true , Public:true }, "IdentifiersShouldNotMatchKeywords", "CA1716:IdentifiersShouldNotMatchKeywords"); 
    $.Constant({Static:true , Public:true }, "ImplementStandardExceptionConstructors", "CA1032:ImplementStandardExceptionConstructors"); 
    $.Constant({Static:true , Public:true }, "InstantiateArgumentExceptionsCorrectly", "CA2208:InstantiateArgumentExceptionsCorrectly"); 
    $.Constant({Static:true , Public:true }, "InitializeReferenceTypeStaticFieldsInline", "CA1810:InitializeReferenceTypeStaticFieldsInline"); 
    $.Constant({Static:true , Public:true }, "InterfaceMethodsShouldBeCallableByChildTypes", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes"); 
    $.Constant({Static:true , Public:true }, "MarkISerializableTypesWithSerializable", "CA2237:MarkISerializableTypesWithSerializable"); 
    $.Constant({Static:true , Public:true }, "InvariantAssertRule", "Reliability101:InvariantAssertRule"); 
    $.Constant({Static:true , Public:true }, "IsFatalRule", "Reliability108:IsFatalRule"); 
    $.Constant({Static:true , Public:true }, "MarkMembersAsStatic", "CA1822:MarkMembersAsStatic"); 
    $.Constant({Static:true , Public:true }, "NestedTypesShouldNotBeVisible", "CA1034:NestedTypesShouldNotBeVisible"); 
    $.Constant({Static:true , Public:true }, "NormalizeStringsToUppercase", "CA1308:NormalizeStringsToUppercase"); 
    $.Constant({Static:true , Public:true }, "OperatorOverloadsHaveNamedAlternates", "CA2225:OperatorOverloadsHaveNamedAlternates"); 
    $.Constant({Static:true , Public:true }, "PropertyNamesShouldNotMatchGetMethods", "CA1721:PropertyNamesShouldNotMatchGetMethods"); 
    $.Constant({Static:true , Public:true }, "PropertyTypesMustBeXamlVisible", "XAML1002:PropertyTypesMustBeXamlVisible"); 
    $.Constant({Static:true , Public:true }, "PropertyExternalTypesMustBeKnown", "XAML1010:PropertyExternalTypesMustBeKnown"); 
    $.Constant({Static:true , Public:true }, "ReplaceRepetitiveArgumentsWithParamsArray", "CA1025:ReplaceRepetitiveArgumentsWithParamsArray"); 
    $.Constant({Static:true , Public:true }, "ResourceStringsShouldBeSpelledCorrectly", "CA1703:ResourceStringsShouldBeSpelledCorrectly"); 
    $.Constant({Static:true , Public:true }, "ReviewSuppressUnmanagedCodeSecurityUsage", "CA2118:ReviewSuppressUnmanagedCodeSecurityUsage"); 
    $.Constant({Static:true , Public:true }, "ReviewUnusedParameters", "CA1801:ReviewUnusedParameters"); 
    $.Constant({Static:true , Public:true }, "SecureAsserts", "CA2106:SecureAsserts"); 
    $.Constant({Static:true , Public:true }, "SecureGetObjectDataOverrides", "CA2110:SecureGetObjectDataOverrides"); 
    $.Constant({Static:true , Public:true }, "ShortAcronymsShouldBeUppercase", "CA1706:ShortAcronymsShouldBeUppercase"); 
    $.Constant({Static:true , Public:true }, "SpecifyIFormatProvider", "CA1305:SpecifyIFormatProvider"); 
    $.Constant({Static:true , Public:true }, "SpecifyMarshalingForPInvokeStringArguments", "CA2101:SpecifyMarshalingForPInvokeStringArguments"); 
    $.Constant({Static:true , Public:true }, "StaticHolderTypesShouldNotHaveConstructors", "CA1053:StaticHolderTypesShouldNotHaveConstructors"); 
    $.Constant({Static:true , Public:true }, "SystemAndMicrosoftNamespacesRequireApproval", "CA:SystemAndMicrosoftNamespacesRequireApproval"); 
    $.Constant({Static:true , Public:true }, "UsePropertiesWhereAppropriate", "CA1024:UsePropertiesWhereAppropriate"); 
    $.Constant({Static:true , Public:true }, "UriPropertiesShouldNotBeStrings", "CA1056:UriPropertiesShouldNotBeStrings"); 
    $.Constant({Static:true , Public:true }, "VariableNamesShouldNotMatchFieldNames", "CA1500:VariableNamesShouldNotMatchFieldNames"); 
    $.Constant({Static:true , Public:true }, "ThunkCallbackRule", "Reliability109:ThunkCallbackRule"); 
    $.Constant({Static:true , Public:true }, "TransparentMethodsMustNotReferenceCriticalCode", "CA2140:TransparentMethodsMustNotReferenceCriticalCodeFxCopRule"); 
    $.Constant({Static:true , Public:true }, "TypeConvertersMustBePublic", "XAML1004:TypeConvertersMustBePublic"); 
    $.Constant({Static:true , Public:true }, "TypesMustHaveXamlCallableConstructors", "XAML1007:TypesMustHaveXamlCallableConstructors"); 
    $.Constant({Static:true , Public:true }, "TypeNamesShouldNotMatchNamespaces", "CA1724:TypeNamesShouldNotMatchNamespaces"); 
    $.Constant({Static:true , Public:true }, "TypesShouldHavePublicParameterlessConstructors", "XAML1009:TypesShouldHavePublicParameterlessConstructors"); 
    $.Constant({Static:true , Public:true }, "UseEventsWhereAppropriate", "CA1030:UseEventsWhereAppropriate"); 
    $.Constant({Static:true , Public:true }, "UseNewGuidHelperRule", "Reliability113:UseNewGuidHelperRule"); 
    $.Constant({Static:true , Public:true }, "WrapExceptionsRule", "Reliability102:WrapExceptionsRule"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.HashHelper */ 

(function HashHelper$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.HashHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "ComputeHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.InputQueue`1 */ 

(function InputQueue$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Func$b1.Of($asm09.System.Action$b2.Of($asm09.System.AsyncCallback, $asm09.System.IAsyncResult)))) ();
  };

  function InputQueue$b1_get_AsyncCallbackGenerator () {
    return this.InputQueue$b1$AsyncCallbackGenerator$value;
  };

  function InputQueue$b1_get_DisposeItemCallback () {
    return this.InputQueue$b1$DisposeItemCallback$value;
  };

  function InputQueue$b1_set_AsyncCallbackGenerator (value) {
    this.InputQueue$b1$AsyncCallbackGenerator$value = value;
  };

  function InputQueue$b1_set_DisposeItemCallback (value) {
    this.InputQueue$b1$DisposeItemCallback$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.InputQueue`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Func`1", [$asm09.TypeRef("System.Action`2", [$asm09.TypeRef("System.AsyncCallback"), $asm09.TypeRef("System.IAsyncResult")])])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginDequeue", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IAsyncResult"), [
          $asm09.TypeRef("System.TimeSpan"), $asm09.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "BeginWaitForItem", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IAsyncResult"), [
          $asm09.TypeRef("System.TimeSpan"), $asm09.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "CompleteOutstandingReadersCallback", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompleteWaiters", 
      new JSIL.MethodSignature(null, [$.Boolean, $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Runtime.InputQueue`1/IQueueWaiter", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1")])])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompleteWaitersFalseCallback", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompleteWaitersLater", 
      new JSIL.MethodSignature(null, [$.Boolean, $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Runtime.InputQueue`1/IQueueWaiter", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1")])])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompleteWaitersTrueCallback", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Dequeue", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1"), [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Dequeue", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.TimeSpan"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Dispatch", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DisposeItem", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.InputQueue`1/Item", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndDequeue", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.IAsyncResult"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndDequeue", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1"), [$asm09.TypeRef("System.IAsyncResult")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndWaitForItem", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.IAsyncResult")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnqueueAndDispatch", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "EnqueueAndDispatch", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1"), $asm09.TypeRef("System.Action")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "EnqueueAndDispatch", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Exception"), $asm09.TypeRef("System.Action"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnqueueAndDispatch", 
      new JSIL.MethodSignature(null, [
          new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1"), $asm09.TypeRef("System.Action"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnqueueAndDispatch", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.InputQueue`1/Item", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1")]), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnqueueWithoutDispatch", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1"), $asm09.TypeRef("System.Action")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnqueueWithoutDispatch", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Exception"), $asm09.TypeRef("System.Action")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnqueueWithoutDispatch", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.InputQueue`1/Item", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1")])], [])
    );

    $.Method({Static:false, Public:false}, "get_AsyncCallbackGenerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Func`1", [$asm09.TypeRef("System.Action`2", [$asm09.TypeRef("System.AsyncCallback"), $asm09.TypeRef("System.IAsyncResult")])]), [], []), 
      InputQueue$b1_get_AsyncCallbackGenerator
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_DisposeItemCallback", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Action`1", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1")]), [], []), 
      InputQueue$b1_get_DisposeItemCallback
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_PendingCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ThisLock", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "GetWaiters", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Runtime.InputQueue`1/IQueueWaiter", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1")])])])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvokeDequeuedCallback", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvokeDequeuedCallbackLater", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnDispatchCallback", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnInvokeDequeuedCallback", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveReader", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.InputQueue`1/IQueueReader", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1")])], [])
    );

    $.Method({Static:false, Public:false}, "set_AsyncCallbackGenerator", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Func`1", [$asm09.TypeRef("System.Action`2", [$asm09.TypeRef("System.AsyncCallback"), $asm09.TypeRef("System.IAsyncResult")])])], []), 
      InputQueue$b1_set_AsyncCallbackGenerator
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_DisposeItemCallback", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action`1", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1")])], []), 
      InputQueue$b1_set_DisposeItemCallback
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Shutdown", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Shutdown", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Func`1", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WaitForItem", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.Field({Static:true , Public:false}, "completeOutstandingReadersCallback", $asm09.TypeRef("System.Action`1", [$.Object])); 
    $.Field({Static:true , Public:false}, "completeWaitersFalseCallback", $asm09.TypeRef("System.Action`1", [$.Object])); 
    $.Field({Static:true , Public:false}, "completeWaitersTrueCallback", $asm09.TypeRef("System.Action`1", [$.Object])); 
    $.Field({Static:true , Public:false}, "onDispatchCallback", $asm09.TypeRef("System.Action`1", [$.Object])); 
    $.Field({Static:true , Public:false}, "onInvokeDequeuedCallback", $asm09.TypeRef("System.Action`1", [$.Object])); 
    $.Field({Static:false, Public:false}, "queueState", $asm12.TypeRef("System.Runtime.InputQueue`1/QueueState", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "itemQueue", $asm12.TypeRef("System.Runtime.InputQueue`1/ItemQueue", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "readerQueue", $asm0B.TypeRef("System.Collections.Generic.Queue`1", [$asm12.TypeRef("System.Runtime.InputQueue`1/IQueueReader", [$.GenericParameter("T")])])); 
    $.Field({Static:false, Public:false}, "waiterList", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm12.TypeRef("System.Runtime.InputQueue`1/IQueueWaiter", [$.GenericParameter("T")])])); 
    $.Field({Static:false, Public:false}, "InputQueue$b1$DisposeItemCallback$value", $asm09.TypeRef("System.Action`1", [$.GenericParameter("T")]))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "InputQueue$b1$AsyncCallbackGenerator$value", $asm09.TypeRef("System.Func`1", [$asm09.TypeRef("System.Action`2", [$asm09.TypeRef("System.AsyncCallback"), $asm09.TypeRef("System.IAsyncResult")])]))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "PendingCount", $.Int32);

    $.Property({Static:false, Public:true }, "DisposeItemCallback", $asm09.TypeRef("System.Action`1", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1")]));

    $.Property({Static:false, Public:false}, "AsyncCallbackGenerator", $asm09.TypeRef("System.Func`1", [$asm09.TypeRef("System.Action`2", [$asm09.TypeRef("System.AsyncCallback"), $asm09.TypeRef("System.IAsyncResult")])]));

    $.Property({Static:false, Public:false}, "ThisLock", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.InputQueue`1/QueueState */ 

JSIL.MakeEnum(
  "System.Runtime.InputQueue`1/QueueState", false, {
    Open: 0, 
    Shutdown: 1, 
    Closed: 2
  }, false
);

/* interface System.Runtime.InputQueue`1/IQueueReader */ 

JSIL.MakeInterface(
  "System.Runtime.InputQueue`1/IQueueReader", false, ["T"], function ($) {
    $.Method({}, "Set", new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.InputQueue`1/Item", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/IQueueReader")])], []));
  }, []);

/* interface System.Runtime.InputQueue`1/IQueueWaiter */ 

JSIL.MakeInterface(
  "System.Runtime.InputQueue`1/IQueueWaiter", false, ["T"], function ($) {
    $.Method({}, "Set", new JSIL.MethodSignature(null, [$.Boolean], []));
  }, []);

/* struct System.Runtime.InputQueue`1/Item */ 

(function Item$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Runtime.InputQueue`1/Item", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/Item"), $asm09.TypeRef("System.Action")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Exception"), $asm09.TypeRef("System.Action")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/Item"), $asm09.TypeRef("System.Exception"), 
          $asm09.TypeRef("System.Action")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_DequeuedCallback", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Action"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Exception", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/Item"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "GetValue", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/Item"), [], [])
    );

    $.Field({Static:false, Public:false}, "dequeuedCallback", $asm09.TypeRef("System.Action")); 
    $.Field({Static:false, Public:false}, "exception", $asm09.TypeRef("System.Exception")); 
    $.Field({Static:false, Public:false}, "value", $.GenericParameter("T")); 
    $.Property({Static:false, Public:true }, "DequeuedCallback", $asm09.TypeRef("System.Action"));

    $.Property({Static:false, Public:true }, "Exception", $asm09.TypeRef("System.Exception"));

    $.Property({Static:false, Public:true }, "Value", new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/Item"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.InputQueue`1/AsyncQueueReader */ 

(function AsyncQueueReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.AsyncResult"), 
      Name: "System.Runtime.InputQueue`1/AsyncQueueReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Runtime.InputQueue`1", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/AsyncQueueReader")]), $asm09.TypeRef("System.TimeSpan"), 
          $asm09.TypeRef("System.AsyncCallback"), $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "End", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.IAsyncResult"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/AsyncQueueReader")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.InputQueue`1/Item", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/AsyncQueueReader")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimerCallback", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.Field({Static:true , Public:false}, "timerCallback", $asm09.TypeRef("System.Action`1", [$.Object])); 
    $.Field({Static:false, Public:false}, "expired", $.Boolean); 
    $.Field({Static:false, Public:false}, "inputQueue", $asm12.TypeRef("System.Runtime.InputQueue`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "item", $.GenericParameter("T")); 
    $.Field({Static:false, Public:false}, "timer", $asm12.TypeRef("System.Runtime.IOThreadTimer")); 
    $.ImplementInterfaces(
      /* 1 */ $asm12.TypeRef("System.Runtime.InputQueue`1/IQueueReader", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/AsyncQueueReader")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.InputQueue`1/AsyncQueueWaiter */ 

(function AsyncQueueWaiter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.AsyncResult"), 
      Name: "System.Runtime.InputQueue`1/AsyncQueueWaiter", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.TimeSpan"), $asm09.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "End", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.IAsyncResult")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ThisLock", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimerCallback", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.Field({Static:true , Public:false}, "timerCallback", $asm09.TypeRef("System.Action`1", [$.Object])); 
    $.Field({Static:false, Public:false}, "itemAvailable", $.Boolean); 
    $.Field({Static:false, Public:false}, "thisLock", $.Object); 
    $.Field({Static:false, Public:false}, "timer", $asm12.TypeRef("System.Runtime.IOThreadTimer")); 
    $.Property({Static:false, Public:false}, "ThisLock", $.Object);

    $.ImplementInterfaces(
      /* 1 */ $asm12.TypeRef("System.Runtime.InputQueue`1/IQueueWaiter", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/AsyncQueueWaiter")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.InputQueue`1/ItemQueue */ 

(function ItemQueue$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.InputQueue`1/ItemQueue", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "DequeueAnyItem", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.InputQueue`1/Item", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/ItemQueue")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "DequeueAvailableItem", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.InputQueue`1/Item", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/ItemQueue")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DequeueItemCore", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.InputQueue`1/Item", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/ItemQueue")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnqueueAvailableItem", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.InputQueue`1/Item", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/ItemQueue")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnqueueItemCore", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.InputQueue`1/Item", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/ItemQueue")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnqueuePendingItem", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.InputQueue`1/Item", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/ItemQueue")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasAnyItem", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasAvailableItem", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ItemCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "MakePendingItemAvailable", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "head", $.Int32); 
    $.Field({Static:false, Public:false}, "items", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Runtime.InputQueue`1/Item", [$.GenericParameter("T")])])); 
    $.Field({Static:false, Public:false}, "pendingCount", $.Int32); 
    $.Field({Static:false, Public:false}, "totalCount", $.Int32); 
    $.Property({Static:false, Public:true }, "HasAnyItem", $.Boolean);

    $.Property({Static:false, Public:true }, "HasAvailableItem", $.Boolean);

    $.Property({Static:false, Public:true }, "ItemCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.InputQueue`1/WaitQueueReader */ 

(function WaitQueueReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.InputQueue`1/WaitQueueReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.InputQueue`1", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/WaitQueueReader")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.InputQueue`1/Item", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/WaitQueueReader")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Wait", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.TimeSpan"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/WaitQueueReader")])], [])
    );

    $.Field({Static:false, Public:false}, "exception", $asm09.TypeRef("System.Exception")); 
    $.Field({Static:false, Public:false}, "inputQueue", $asm12.TypeRef("System.Runtime.InputQueue`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "item", $.GenericParameter("T")); 
    $.Field({Static:false, Public:false}, "waitEvent", $asm09.TypeRef("System.Threading.ManualResetEvent")); 
    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Runtime.InputQueue`1/IQueueReader", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/WaitQueueReader")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.InputQueue`1/WaitQueueWaiter */ 

(function WaitQueueWaiter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.InputQueue`1/WaitQueueWaiter", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Wait", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.Field({Static:false, Public:false}, "itemAvailable", $.Boolean); 
    $.Field({Static:false, Public:false}, "waitEvent", $asm09.TypeRef("System.Threading.ManualResetEvent")); 
    $.ImplementInterfaces(
      /* 0 */ $asm12.TypeRef("System.Runtime.InputQueue`1/IQueueWaiter", [new JSIL.GenericParameter("T", "System.Runtime.InputQueue`1/WaitQueueWaiter")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.InternalBufferManager */ 

(function InternalBufferManager$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.InternalBufferManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.Int64, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReturnBuffer", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TakeBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.InternalBufferManager/PooledBufferManager */ 

(function PooledBufferManager$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.InternalBufferManager"), 
      Name: "System.Runtime.InternalBufferManager/PooledBufferManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int64, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeQuota", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.InternalBufferManager/PooledBufferManager/BufferPool")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DecreaseQuota", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.InternalBufferManager/PooledBufferManager/BufferPool")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindMostExcessivePool", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindMostStarvedPool", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindPool", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.InternalBufferManager/PooledBufferManager/BufferPool"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncreaseQuota", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.InternalBufferManager/PooledBufferManager/BufferPool")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReturnBuffer", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TakeBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TuneQuotas", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "minBufferSize", 128); 
    $.Constant({Static:true , Public:false}, "maxMissesBeforeTuning", 8); 
    $.Constant({Static:true , Public:false}, "initialBufferCount", 1); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "tuningLock", $.Object); 
    $.Field({Static:false, Public:false}, "bufferSizes", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "bufferPools", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Runtime.InternalBufferManager/PooledBufferManager/BufferPool")])); 
    $.Field({Static:false, Public:false}, "memoryLimit", $.Int64); 
    $.Field({Static:false, Public:false}, "remainingMemory", $.Int64); 
    $.Field({Static:false, Public:false}, "areQuotasBeingTuned", $.Boolean); 
    $.Field({Static:false, Public:false}, "totalMisses", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.InternalBufferManager/PooledBufferManager/BufferPool */ 

(function BufferPool$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.InternalBufferManager/PooledBufferManager/BufferPool", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreatePool", 
      new JSIL.MethodSignature($.Type, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "DecrementCount", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BufferSize", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Limit", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Misses", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Peak", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IncrementCount", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Return", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Misses", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Take", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.Field({Static:false, Public:false}, "bufferSize", $.Int32); 
    $.Field({Static:false, Public:false}, "count", $.Int32); 
    $.Field({Static:false, Public:false}, "limit", $.Int32); 
    $.Field({Static:false, Public:false}, "misses", $.Int32); 
    $.Field({Static:false, Public:false}, "peak", $.Int32); 
    $.Property({Static:false, Public:true }, "BufferSize", $.Int32);

    $.Property({Static:false, Public:true }, "Limit", $.Int32);

    $.Property({Static:false, Public:true }, "Misses", $.Int32);

    $.Property({Static:false, Public:true }, "Peak", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.InternalBufferManager/PooledBufferManager/BufferPool/SynchronizedBufferPool */ 

(function SynchronizedBufferPool$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.InternalBufferManager/PooledBufferManager/BufferPool"), 
      Name: "System.Runtime.InternalBufferManager/PooledBufferManager/BufferPool/SynchronizedBufferPool", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Return", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Take", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.Field({Static:false, Public:false}, "innerPool", $asm12.TypeRef("System.Runtime.SynchronizedPool`1", [$jsilcore.TypeRef("System.Array", [$.Byte])])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.InternalBufferManager/PooledBufferManager/BufferPool/LargeBufferPool */ 

(function LargeBufferPool$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.InternalBufferManager/PooledBufferManager/BufferPool"), 
      Name: "System.Runtime.InternalBufferManager/PooledBufferManager/BufferPool/LargeBufferPool", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ThisLock", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Return", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Take", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.Field({Static:false, Public:false}, "items", $asm0B.TypeRef("System.Collections.Generic.Stack`1", [$jsilcore.TypeRef("System.Array", [$.Byte])])); 
    $.Property({Static:false, Public:false}, "ThisLock", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.InternalBufferManager/GCBufferManager */ 

(function GCBufferManager$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.InternalBufferManager"), 
      Name: "System.Runtime.InternalBufferManager/GCBufferManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReturnBuffer", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TakeBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32], [])
    );

    $.Field({Static:true , Public:false}, "value", $.Type); 
    $.Property({Static:true , Public:true }, "Value", $.Type);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.IOThreadCancellationTokenSource */ 

(function IOThreadCancellationTokenSource$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.IOThreadCancellationTokenSource", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Cancel", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Token", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.CancellationToken"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnCancel", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "onCancel", $asm09.TypeRef("System.Action`1", [$.Object])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "timeout", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "source", $asm09.TypeRef("System.Threading.CancellationTokenSource")); 
    $.Field({Static:false, Public:false}, "token", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Threading.CancellationToken")])); 
    $.Field({Static:false, Public:false}, "timer", $asm12.TypeRef("System.Runtime.IOThreadTimer")); 
    $.Property({Static:false, Public:true }, "Token", $asm09.TypeRef("System.Threading.CancellationToken"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.IOThreadScheduler */ 

(function IOThreadScheduler$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.IOThreadScheduler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Cleanup", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CompletionCallback", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Action`1", [$.Object])]), $jsilcore.TypeRef("JSIL.Reference", [$.Object])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SlotMask", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_SlotMaskLowPri", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ScheduleCallbackHelper", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Action`1", [$.Object]), $.Object], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ScheduleCallbackLowPriHelper", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Action`1", [$.Object]), $.Object], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ScheduleCallbackLowPriNoFlow", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action`1", [$.Object]), $.Object], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ScheduleCallbackNoFlow", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action`1", [$.Object]), $.Object], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "TryCoalesce", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Action`1", [$.Object])]), $jsilcore.TypeRef("JSIL.Reference", [$.Object])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "current", $.Type); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "overlapped", $asm12.TypeRef("System.Runtime.IOThreadScheduler/ScheduledOverlapped")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "slots", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Runtime.IOThreadScheduler/Slot")]))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "slotsLowPri", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Runtime.IOThreadScheduler/Slot")]))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "headTail", $.Int32); 
    $.Field({Static:false, Public:false}, "headTailLowPri", $.Int32); 
    $.Constant({Static:true , Public:false}, "MaximumCapacity", 32768); 
    $.Property({Static:false, Public:false}, "SlotMask", $.Int32);

    $.Property({Static:false, Public:false}, "SlotMaskLowPri", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.IOThreadScheduler/Slot */ 

(function Slot$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Runtime.IOThreadScheduler/Slot", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, "DequeueWorkItem", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Action`1", [$.Object])]), $jsilcore.TypeRef("JSIL.Reference", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnqueueWorkItem", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Action`1", [$.Object]), $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.Field({Static:false, Public:false}, "gate", $.Int32); 
    $.Field({Static:false, Public:false}, "callback", $asm09.TypeRef("System.Action`1", [$.Object])); 
    $.Field({Static:false, Public:false}, "state", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.IOThreadScheduler/ScheduledOverlapped */ 

(function ScheduledOverlapped$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.IOThreadScheduler/ScheduledOverlapped", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Cleanup", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IOCallback", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Threading.NativeOverlapped")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Post", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.IOThreadScheduler")], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "nativeOverlapped", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Threading.NativeOverlapped")])); 
    $.Field({Static:false, Public:false}, "scheduler", $asm12.TypeRef("System.Runtime.IOThreadScheduler")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

})();

/* class System.Runtime.IOThreadScheduler/Bits */ 

(function Bits$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.IOThreadScheduler/Bits", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CountNoIdle", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "IncrementLo", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsComplete", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.Constant({Static:true , Public:true }, "HiShift", 16); 
    $.Constant({Static:true , Public:true }, "HiOne", 65536); 
    $.Constant({Static:true , Public:true }, "LoHiBit", 32768); 
    $.Constant({Static:true , Public:true }, "HiHiBit", -2147483648); 
    $.Constant({Static:true , Public:true }, "LoCountMask", 32767); 
    $.Constant({Static:true , Public:true }, "HiCountMask", 2147418112); 
    $.Constant({Static:true , Public:true }, "LoMask", 65535); 
    $.Constant({Static:true , Public:true }, "HiMask", -65536); 
    $.Constant({Static:true , Public:true }, "HiBits", -2147450880); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.IOThreadTimer */ 

(function IOThreadTimer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.IOThreadTimer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Action`1", [$.Object]), $.Object, 
          $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Action`1", [$.Object]), $.Object, 
          $.Boolean, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Cancel", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SystemTimeResolutionTicks", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSystemTimeResolution", 
      new JSIL.MethodSignature($.Int64, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAt", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.Field({Static:true , Public:false}, "systemTimeResolutionTicks", $.Int64, function ($pi) {
        return $asm09.System.Int64.FromNumber(-1);
      }); 
    $.Field({Static:false, Public:false}, "callback", $asm09.TypeRef("System.Action`1", [$.Object])); 
    $.Field({Static:false, Public:false}, "callbackState", $.Object); 
    $.Field({Static:false, Public:false}, "dueTime", $.Int64); 
    $.Field({Static:false, Public:false}, "index", $.Int32); 
    $.Field({Static:false, Public:false}, "maxSkew", $.Int64); 
    $.Field({Static:false, Public:false}, "timerGroup", $asm12.TypeRef("System.Runtime.IOThreadTimer/TimerGroup")); 
    $.Constant({Static:true , Public:false}, "maxSkewInMillisecondsDefault", 100); 
    $.Property({Static:true , Public:true }, "SystemTimeResolutionTicks", $.Int64);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.IOThreadTimer/TimerGroup */ 

(function TimerGroup$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.IOThreadTimer/TimerGroup", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TimerQueue", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.IOThreadTimer/TimerQueue"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_WaitableTimer", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.IOThreadTimer/WaitableTimer"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "timerQueue", $asm12.TypeRef("System.Runtime.IOThreadTimer/TimerQueue")); 
    $.Field({Static:false, Public:false}, "waitableTimer", $asm12.TypeRef("System.Runtime.IOThreadTimer/WaitableTimer")); 
    $.Property({Static:false, Public:true }, "TimerQueue", $asm12.TypeRef("System.Runtime.IOThreadTimer/TimerQueue"));

    $.Property({Static:false, Public:true }, "WaitableTimer", $asm12.TypeRef("System.Runtime.IOThreadTimer/WaitableTimer"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.IOThreadTimer/TimerQueue */ 

(function TimerQueue$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.IOThreadTimer/TimerQueue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeleteMinTimer", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeleteMinTimerCore", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeleteTimer", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.IOThreadTimer")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_MinTimer", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.IOThreadTimer"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertTimer", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.IOThreadTimer"), $.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "UpdateTimer", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.IOThreadTimer"), $.Int64], [])
    );

    $.Field({Static:false, Public:false}, "count", $.Int32); 
    $.Field({Static:false, Public:false}, "timers", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Runtime.IOThreadTimer")])); 
    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "MinTimer", $asm12.TypeRef("System.Runtime.IOThreadTimer"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.IOThreadTimer/WaitableTimer */ 

(function WaitableTimer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Threading.WaitHandle"), 
      Name: "System.Runtime.IOThreadTimer/WaitableTimer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_DueTime", 
      new JSIL.MethodSignature($.Int64, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "dueTime", $.Int64); 
    $.Property({Static:false, Public:true }, "DueTime", $.Int64);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.IOThreadTimer/WaitableTimer/TimerHelper */ 

(function TimerHelper$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.IOThreadTimer/WaitableTimer/TimerHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "CreateWaitableTimer", 
      new JSIL.MethodSignature($asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Set", 
      new JSIL.MethodSignature($.Int64, [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"), $.Int64], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

})();

/* class System.Runtime.IOThreadTimer/TimerManager */ 

(function TimerManager$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.IOThreadTimer/TimerManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Cancel", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.IOThreadTimer")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureWaitScheduled", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StableTimerGroup", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.IOThreadTimer/TimerGroup"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ThisLock", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VolatileTimerGroup", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.IOThreadTimer/TimerGroup"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOtherTimerGroup", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.IOThreadTimer/TimerGroup"), [$asm12.TypeRef("System.Runtime.IOThreadTimer/TimerGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnWaitCallback", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReactivateWaitableTimer", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.IOThreadTimer/TimerGroup")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReactivateWaitableTimers", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScheduleElapsedTimers", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScheduleElapsedTimers", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.IOThreadTimer/TimerGroup"), $.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScheduleWait", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScheduleWaitIfAnyTimersLeft", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.IOThreadTimer"), $.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateWaitableTimer", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.IOThreadTimer/TimerGroup")], [])
    );

    $.Constant({Static:true , Public:false}, "maxTimeToWaitForMoreTimers", 10000000); 
    $.Field({Static:true , Public:false}, "value", $.Type); 
    $.Field({Static:false, Public:false}, "onWaitCallback", $asm09.TypeRef("System.Action`1", [$.Object])); 
    $.Field({Static:false, Public:false}, "stableTimerGroup", $asm12.TypeRef("System.Runtime.IOThreadTimer/TimerGroup")); 
    $.Field({Static:false, Public:false}, "volatileTimerGroup", $asm12.TypeRef("System.Runtime.IOThreadTimer/TimerGroup")); 
    $.Field({Static:false, Public:false}, "waitableTimers", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Runtime.IOThreadTimer/WaitableTimer")])); 
    $.Field({Static:false, Public:false}, "waitScheduled", $.Boolean); 
    $.Property({Static:false, Public:false}, "ThisLock", $.Object);

    $.Property({Static:true , Public:true }, "Value", $.Type);

    $.Property({Static:false, Public:true }, "StableTimerGroup", $asm12.TypeRef("System.Runtime.IOThreadTimer/TimerGroup"));

    $.Property({Static:false, Public:true }, "VolatileTimerGroup", $asm12.TypeRef("System.Runtime.IOThreadTimer/TimerGroup"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.NameGenerator */ 

(function NameGenerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.NameGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Next", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:true , Public:false}, "nameGenerator", $.Type); 
    $.Field({Static:false, Public:false}, "id", $.Int64); 
    $.Field({Static:false, Public:false}, "prefix", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.PartialTrustHelpers */ 

(function PartialTrustHelpers$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.PartialTrustHelpers", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "CaptureSecurityContextNoIdentityFlow", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.SecurityContext"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CheckAppDomainPermissions", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Security.PermissionSet")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DemandForFullTrust", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_AppDomainFullyTrusted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ShouldFlowSecurityContext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "HasEtwPermissions", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsAssemblyAptca", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.Assembly")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsAssemblySigned", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.Assembly")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsInFullTrust", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsTypeAptca", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "aptca", $asm09.TypeRef("System.Type"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "checkedForFullTrust", $asm09.TypeRef("System.Boolean"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "inFullTrust", $.Boolean)
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Property({Static:true , Public:false}, "ShouldFlowSecurityContext", $.Boolean);

    $.Property({Static:true , Public:false}, "AppDomainFullyTrusted", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.MruCache`2 */ 

(function MruCache$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.MruCache`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Runtime.MruCache`2")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TKey", "System.Runtime.MruCache`2"), new JSIL.GenericParameter("TValue", "System.Runtime.MruCache`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnItemAgedOutOfCache", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TValue", "System.Runtime.MruCache`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSingleItemRemoved", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TValue", "System.Runtime.MruCache`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Runtime.MruCache`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Runtime.MruCache`2"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TValue", "System.Runtime.MruCache`2")])], [])
    );

    $.Field({Static:false, Public:false}, "mruList", $asm0B.TypeRef("System.Collections.Generic.LinkedList`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "items", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $asm12.TypeRef("System.Runtime.MruCache`2/CacheEntry", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])); 
    $.Field({Static:false, Public:false}, "lowWatermark", $.Int32); 
    $.Field({Static:false, Public:false}, "highWatermark", $.Int32); 
    $.Field({Static:false, Public:false}, "mruEntry", $asm12.TypeRef("System.Runtime.MruCache`2/CacheEntry", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
    $.Property({Static:false, Public:true }, "Count", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.MruCache`2/CacheEntry */ 

(function CacheEntry$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Runtime.MruCache`2/CacheEntry", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "value", $.GenericParameter("TValue")); 
    $.Field({Static:false, Public:false}, "node", $asm0B.TypeRef("System.Collections.Generic.LinkedListNode`1", [$.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.ReadOnlyDictionaryInternal`2 */ 

(function ReadOnlyDictionaryInternal$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.ReadOnlyDictionaryInternal`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IDictionary`2", [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyDictionaryInternal`2"), new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyDictionaryInternal`2")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyDictionaryInternal`2"), new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyDictionaryInternal`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyDictionaryInternal`2"), new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyDictionaryInternal`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyDictionaryInternal`2"), new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyDictionaryInternal`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyDictionaryInternal`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyDictionaryInternal`2"), new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyDictionaryInternal`2")])]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IDictionary`2", [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyDictionaryInternal`2"), new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyDictionaryInternal`2")]), [$asm09.TypeRef("System.Collections.Generic.IDictionary`2", [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyDictionaryInternal`2"), new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyDictionaryInternal`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateReadOnlyException", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyDictionaryInternal`2"), [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyDictionaryInternal`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyDictionaryInternal`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Values", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyDictionaryInternal`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyDictionaryInternal`2"), new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyDictionaryInternal`2")])]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyDictionaryInternal`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyDictionaryInternal`2"), new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyDictionaryInternal`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyDictionaryInternal`2"), new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyDictionaryInternal`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(3, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyDictionaryInternal`2"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyDictionaryInternal`2")])], [])
    );

    $.Field({Static:false, Public:false}, "dictionary", $asm09.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyDictionaryInternal`2")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyDictionaryInternal`2")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyDictionaryInternal`2"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IDictionary`2", [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyDictionaryInternal`2"), new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyDictionaryInternal`2")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyDictionaryInternal`2"), new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyDictionaryInternal`2")])]), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyDictionaryInternal`2"), new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyDictionaryInternal`2")])]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Runtime.ReadOnlyKeyedCollection`2 */ 

(function ReadOnlyKeyedCollection$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyKeyedCollection`2")]), 
      Name: "System.Runtime.ReadOnlyKeyedCollection`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.ObjectModel.KeyedCollection`2", [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyKeyedCollection`2"), new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyKeyedCollection`2")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyKeyedCollection`2"), [new JSIL.GenericParameter("TKey", "System.Runtime.ReadOnlyKeyedCollection`2")], [])
    );

    $.Field({Static:false, Public:false}, "innerCollection", $asm09.TypeRef("System.Collections.ObjectModel.KeyedCollection`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
    $.Property({Static:false, Public:true }, "Item", new JSIL.GenericParameter("TValue", "System.Runtime.ReadOnlyKeyedCollection`2"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Runtime.ScheduleActionItemAsyncResult */ 

(function ScheduleActionItemAsyncResult$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.AsyncResult"), 
      Name: "System.Runtime.ScheduleActionItemAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.AsyncCallback"), $.Object], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "DoWork", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "End", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IAsyncResult")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnDoWork", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Schedule", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false}, "doWork", $asm09.TypeRef("System.Action`1", [$.Object]), function ($pi) {
        return $asm09.System.Action$b1.Of($asm09.System.Object).New($pi, $pi.DoWork);
      }); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.SignalGate */ 

(function SignalGate$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.SignalGate", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_IsLocked", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSignalled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Signal", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowInvalidSignalGateState", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Unlock", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "state", $.Int32); 
    $.Property({Static:false, Public:false}, "IsLocked", $.Boolean);

    $.Property({Static:false, Public:false}, "IsSignalled", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.SignalGate/GateState */ 

(function GateState$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.SignalGate/GateState", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "Locked", 0); 
    $.Constant({Static:true , Public:true }, "SignalPending", 1); 
    $.Constant({Static:true , Public:true }, "Unlocked", 2); 
    $.Constant({Static:true , Public:true }, "Signalled", 3); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.SignalGate`1 */ 

(function SignalGate$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.SignalGate"), 
      Name: "System.Runtime.SignalGate`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Signal", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Runtime.SignalGate`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Unlock", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Runtime.SignalGate`1")])], [])
    );

    $.Field({Static:false, Public:false}, "result", $.GenericParameter("T")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.SynchronizedPool`1 */ 

(function SynchronizedPool$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.SynchronizedPool`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ThisLock", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandlePromotionFailure", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PromoteThread", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordReturnToGlobalPool", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordTakeFromGlobalPool", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Return", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Runtime.SynchronizedPool`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReturnToGlobalPool", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, new JSIL.GenericParameter("T", "System.Runtime.SynchronizedPool`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReturnToPerThreadPool", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, new JSIL.GenericParameter("T", "System.Runtime.SynchronizedPool`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Take", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.SynchronizedPool`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TakeFromGlobalPool", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.SynchronizedPool`1"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TakeFromPerThreadPool", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.SynchronizedPool`1"), [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "entries", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Runtime.SynchronizedPool`1/Entry", [$.GenericParameter("T")])])); 
    $.Field({Static:false, Public:false}, "globalPool", $asm12.TypeRef("System.Runtime.SynchronizedPool`1/GlobalPool", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "maxCount", $.Int32); 
    $.Field({Static:false, Public:false}, "pending", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Runtime.SynchronizedPool`1/PendingEntry", [$.GenericParameter("T")])])); 
    $.Field({Static:false, Public:false}, "promotionFailures", $.Int32); 
    $.Constant({Static:true , Public:false}, "maxPendingEntries", 128); 
    $.Constant({Static:true , Public:false}, "maxPromotionFailures", 64); 
    $.Constant({Static:true , Public:false}, "maxReturnsBeforePromotion", 64); 
    $.Constant({Static:true , Public:false}, "maxThreadItemsPerProcessor", 16); 
    $.Property({Static:false, Public:false}, "ThisLock", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.SynchronizedPool`1/Entry */ 

(function Entry$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Runtime.SynchronizedPool`1/Entry", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "threadID", $.Int32); 
    $.Field({Static:false, Public:true }, "value", $.GenericParameter("T")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.SynchronizedPool`1/PendingEntry */ 

(function PendingEntry$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Runtime.SynchronizedPool`1/PendingEntry", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "returnCount", $.Int32); 
    $.Field({Static:false, Public:true }, "threadID", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.SynchronizedPool`1/SynchronizedPoolHelper */ 

(function SynchronizedPoolHelper$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.SynchronizedPool`1/SynchronizedPoolHelper", false, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "GetProcessorCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "ProcessorCount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.SynchronizedPool`1/GlobalPool */ 

(function GlobalPool$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.SynchronizedPool`1/GlobalPool", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "DecrementMaxCount", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_ThisLock", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Return", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Runtime.SynchronizedPool`1/GlobalPool")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxCount", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Take", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.SynchronizedPool`1/GlobalPool"), [], [])
    );

    $.Field({Static:false, Public:false}, "items", $asm0B.TypeRef("System.Collections.Generic.Stack`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "maxCount", $.Int32); 
    $.Property({Static:false, Public:true }, "MaxCount", $.Int32);

    $.Property({Static:false, Public:false}, "ThisLock", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.TaskExtensions */ 

(function TaskExtensions$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.TaskExtensions", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "AsAsyncResult", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IAsyncResult"), [
          $asm09.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), $asm09.TypeRef("System.AsyncCallback"), 
          $.Object
        ], ["T"])
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsAsyncResult", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IAsyncResult"), [
          $asm09.TypeRef("System.Threading.Tasks.Task"), $asm09.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ContinueOnCapturedContextFlow", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.CompilerServices.ConfiguredTaskAwaitable"), [$asm09.TypeRef("System.Threading.Tasks.Task")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ContinueOnCapturedContextFlow", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1<T>", ["!!0"]), [$asm09.TypeRef("System.Threading.Tasks.Task`1", ["!!0"])], ["T"])
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SuppressContextFlow", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.CompilerServices.ConfiguredTaskAwaitable"), [$asm09.TypeRef("System.Threading.Tasks.Task")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SuppressContextFlow", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1<T>", ["!!0"]), [$asm09.TypeRef("System.Threading.Tasks.Task`1", ["!!0"])], ["T"])
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Upcast", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.Tasks.Task`1", ["!!1"]), [$asm09.TypeRef("System.Threading.Tasks.Task`1", ["!!0"])], ["TDerived", "TBase"])
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UpcastPrivate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.Tasks.Task`1", ["!!1"]), [$asm09.TypeRef("System.Threading.Tasks.Task`1", ["!!0"])], ["TDerived", "TBase"])
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.AsyncStateMachineAttribute"), function () { return [$asm12.System.Runtime.TaskExtensions_$lUpcastPrivate$gd__6$b2.__Type__]; });

    $.ExternalMethod({Static:true , Public:true }, "Wait", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Threading.Tasks.Task")], ["TException"])
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Wait", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Threading.Tasks.Task"), $.Int32], ["TException"])
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Wait", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Threading.Tasks.Task"), $asm09.TypeRef("System.TimeSpan")], ["TException"])
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Wait", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Threading.Tasks.Task"), $asm09.TypeRef("System.TimeSpan"), 
          $asm09.TypeRef("System.Action`3", [
              $asm09.TypeRef("System.Exception"), $asm09.TypeRef("System.TimeSpan"), 
              $.String
            ]), $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Runtime.TaskExtensions/<>c__DisplayClass1`1 */ 

(function $l$gc__DisplayClass1$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.TaskExtensions/<>c__DisplayClass1`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:true }, "tcs", $asm09.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "callback", $asm09.TypeRef("System.AsyncCallback")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* struct System.Runtime.TaskExtensions/<UpcastPrivate>d__6`2 */ 

(function $lUpcastPrivate$gd__6$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Runtime.TaskExtensions/<UpcastPrivate>d__6`2", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TDerived", "TBase"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(0, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetStateMachine", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.CompilerServices.IAsyncStateMachine")], [])
    )
      .Overrides(0, "SetStateMachine")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Field({Static:false, Public:true }, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$builder", $asm09.TypeRef("System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<TBase>", [$.GenericParameter("TBase")])); 
    $.Field({Static:false, Public:true }, "task", $asm09.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TDerived")])); 
    $.Field({Static:false, Public:false}, "$", $asm09.TypeRef("System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1/ConfiguredTaskAwaiter<TDerived>", [$.GenericParameter("TDerived")])); 
    $.Field({Static:false, Public:false}, "$stack", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Runtime.TaskExtensions/<>c__DisplayClass4 */ 

(function $l$gc__DisplayClass4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.TaskExtensions/<>c__DisplayClass4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "tcs", $asm09.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.Object])); 
    $.Field({Static:false, Public:true }, "callback", $asm09.TypeRef("System.AsyncCallback")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Runtime.ThreadNeutralSemaphore */ 

(function ThreadNeutralSemaphore$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.ThreadNeutralSemaphore", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm09.TypeRef("System.Func`1", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Abort", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateEnterTimedOutException", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeoutException"), [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateObjectAbortedException", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Enter", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnterAsync", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.TimeSpan"), $asm12.TypeRef("System.Runtime.FastAsyncCallback"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterCore", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.AsyncWaitHandle"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Exit", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EnteredAsyncCallback", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Action`2", [$.Object, $asm09.TypeRef("System.TimeoutException")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Waiters", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Collections.Generic.Queue`1", [$asm12.TypeRef("System.Runtime.AsyncWaitHandle")]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnEnteredAsync", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.TimeoutException")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveWaiter", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.AsyncWaitHandle")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnter", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnter", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.Field({Static:true , Public:false}, "enteredAsyncCallback", $asm09.TypeRef("System.Action`2", [$.Object, $asm09.TypeRef("System.TimeoutException")])); 
    $.Field({Static:false, Public:false}, "aborted", $.Boolean); 
    $.Field({Static:false, Public:false}, "abortedExceptionGenerator", $asm09.TypeRef("System.Func`1", [$asm09.TypeRef("System.Exception")])); 
    $.Field({Static:false, Public:false}, "count", $.Int32); 
    $.Field({Static:false, Public:false}, "maxCount", $.Int32); 
    $.Field({Static:false, Public:false}, "ThisLock", $.Object); 
    $.Field({Static:false, Public:false}, "waiters", $asm0B.TypeRef("System.Collections.Generic.Queue`1", [$asm12.TypeRef("System.Runtime.AsyncWaitHandle")])); 
    $.Property({Static:true , Public:false}, "EnteredAsyncCallback", $asm09.TypeRef("System.Action`2", [$.Object, $asm09.TypeRef("System.TimeoutException")]));

    $.Property({Static:false, Public:false}, "Waiters", $asm0B.TypeRef("System.Collections.Generic.Queue`1", [$asm12.TypeRef("System.Runtime.AsyncWaitHandle")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.ThreadNeutralSemaphore/EnterAsyncData */ 

(function EnterAsyncData$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm12.System.Runtime.FastAsyncCallback)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm12.System.Runtime.ThreadNeutralSemaphore)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm12.System.Runtime.AsyncWaitHandle)) ();
  };

  function EnterAsyncData_get_Callback () {
    return this.EnterAsyncData$Callback$value;
  };

  function EnterAsyncData_get_Semaphore () {
    return this.EnterAsyncData$Semaphore$value;
  };

  function EnterAsyncData_get_State () {
    return this.EnterAsyncData$State$value;
  };

  function EnterAsyncData_get_Waiter () {
    return this.EnterAsyncData$Waiter$value;
  };

  function EnterAsyncData_set_Callback (value) {
    this.EnterAsyncData$Callback$value = value;
  };

  function EnterAsyncData_set_Semaphore (value) {
    this.EnterAsyncData$Semaphore$value = value;
  };

  function EnterAsyncData_set_State (value) {
    this.EnterAsyncData$State$value = value;
  };

  function EnterAsyncData_set_Waiter (value) {
    this.EnterAsyncData$Waiter$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.ThreadNeutralSemaphore/EnterAsyncData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Runtime.ThreadNeutralSemaphore"), $asm12.TypeRef("System.Runtime.AsyncWaitHandle"), 
          $asm12.TypeRef("System.Runtime.FastAsyncCallback"), $.Object
        ], [])
    );

    $.Method({Static:false, Public:true }, "get_Callback", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.FastAsyncCallback"), [], []), 
      EnterAsyncData_get_Callback
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Semaphore", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.ThreadNeutralSemaphore"), [], []), 
      EnterAsyncData_get_Semaphore
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_State", 
      new JSIL.MethodSignature($.Object, [], []), 
      EnterAsyncData_get_State
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Waiter", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.AsyncWaitHandle"), [], []), 
      EnterAsyncData_get_Waiter
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Callback", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.FastAsyncCallback")], []), 
      EnterAsyncData_set_Callback
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Semaphore", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.ThreadNeutralSemaphore")], []), 
      EnterAsyncData_set_Semaphore
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_State", 
      new JSIL.MethodSignature(null, [$.Object], []), 
      EnterAsyncData_set_State
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Waiter", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.AsyncWaitHandle")], []), 
      EnterAsyncData_set_Waiter
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "EnterAsyncData$Semaphore$value", $asm12.TypeRef("System.Runtime.ThreadNeutralSemaphore"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EnterAsyncData$Waiter$value", $asm12.TypeRef("System.Runtime.AsyncWaitHandle"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EnterAsyncData$Callback$value", $asm12.TypeRef("System.Runtime.FastAsyncCallback"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EnterAsyncData$State$value", $.Object)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Semaphore", $asm12.TypeRef("System.Runtime.ThreadNeutralSemaphore"));

    $.Property({Static:false, Public:true }, "Waiter", $asm12.TypeRef("System.Runtime.AsyncWaitHandle"));

    $.Property({Static:false, Public:true }, "Callback", $asm12.TypeRef("System.Runtime.FastAsyncCallback"));

    $.Property({Static:false, Public:true }, "State", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Ticks */ 

(function Ticks$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Ticks", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $.Int64], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromMilliseconds", 
      new JSIL.MethodSignature($.Int64, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromTimeSpan", 
      new JSIL.MethodSignature($.Int64, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Now", 
      new JSIL.MethodSignature($.Int64, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToMilliseconds", 
      new JSIL.MethodSignature($.Int32, [$.Int64], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToTimeSpan", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [$.Int64], [])
    );

    $.Property({Static:true , Public:true }, "Now", $.Int64);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.TimeoutHelper */ 

(function TimeoutHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Runtime.TimeoutHelper", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [$asm09.TypeRef("System.TimeSpan"), $asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [$asm09.TypeRef("System.DateTime"), $asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [$asm09.TypeRef("System.TimeSpan"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ElapsedTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromMilliseconds", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OriginalTimeout", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "IsTooLarge", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [$asm09.TypeRef("System.TimeSpan"), $asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemainingTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDeadline", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [$asm09.TypeRef("System.DateTime"), $asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowIfNegativeArgument", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ThrowIfNegativeArgument", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowIfNonPositiveArgument", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ThrowIfNonPositiveArgument", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToMilliseconds", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "WaitOne", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Threading.WaitHandle"), $asm09.TypeRef("System.TimeSpan")], [])
    );

    $.Field({Static:false, Public:false}, "deadline", $asm09.TypeRef("System.DateTime")); 
    $.Field({Static:false, Public:false}, "deadlineSet", $.Boolean); 
    $.Field({Static:false, Public:false}, "originalTimeout", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "MaxWait", $asm09.TypeRef("System.TimeSpan")); 
    function TimeoutHelper__cctor () {
      $thisType.MaxWait = new $asm09.System.TimeSpan();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      TimeoutHelper__cctor
    );

    $.Property({Static:false, Public:true }, "OriginalTimeout", $asm09.TypeRef("System.TimeSpan"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.TraceChannel */ 

JSIL.MakeEnum(
  "System.Runtime.TraceChannel", false, {
    Application: 9, 
    Admin: 16, 
    Operational: 17, 
    Analytic: 18, 
    Debug: 19, 
    Perf: 20
  }, false
);

/* enum System.Runtime.TraceEventLevel */ 

JSIL.MakeEnum(
  "System.Runtime.TraceEventLevel", false, {
    LogAlways: 0, 
    Critical: 1, 
    Error: 2, 
    Warning: 3, 
    Informational: 4, 
    Verbose: 5
  }, false
);

/* enum System.Runtime.TraceEventOpcode */ 

JSIL.MakeEnum(
  "System.Runtime.TraceEventOpcode", false, {
    Info: 0, 
    Start: 1, 
    Stop: 2, 
    Reply: 6, 
    Resume: 7, 
    Suspend: 8, 
    Send: 9, 
    Receive: 240
  }, false
);

/* class System.Runtime.TraceLevelHelper */ 

(function TraceLevelHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.TraceLevelHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "GetTraceEventType", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Diagnostics.TraceEventType"), [$.Byte, $.Byte], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTraceEventType", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Diagnostics.TraceEventType"), [$asm12.TypeRef("System.Runtime.TraceEventLevel")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTraceEventType", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Diagnostics.TraceEventType"), [$.Byte], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LookupSeverity", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Runtime.TraceEventLevel"), $asm12.TypeRef("System.Runtime.TraceEventOpcode")], [])
    );

    $.Field({Static:true , Public:false}, "EtwLevelToTraceEventType", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Diagnostics.TraceEventType")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Runtime.TracePayload */ 

(function TracePayload$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Runtime.TracePayload", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_AppDomainFriendlyName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_EventSource", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ExtendedData", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_HostReference", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_SerializedException", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "serializedException", $.String); 
    $.Field({Static:false, Public:false}, "eventSource", $.String); 
    $.Field({Static:false, Public:false}, "appDomainFriendlyName", $.String); 
    $.Field({Static:false, Public:false}, "extendedData", $.String); 
    $.Field({Static:false, Public:false}, "hostReference", $.String); 
    $.Property({Static:false, Public:true }, "SerializedException", $.String);

    $.Property({Static:false, Public:true }, "EventSource", $.String);

    $.Property({Static:false, Public:true }, "AppDomainFriendlyName", $.String);

    $.Property({Static:false, Public:true }, "ExtendedData", $.String);

    $.Property({Static:false, Public:true }, "HostReference", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.TypedAsyncResult`1 */ 

(function TypedAsyncResult$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.AsyncResult"), 
      Name: "System.Runtime.TypedAsyncResult`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.AsyncCallback"), $.Object], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Complete", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Runtime.TypedAsyncResult`1"), $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "End", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.TypedAsyncResult`1"), [$asm09.TypeRef("System.IAsyncResult")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Data", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.TypedAsyncResult`1"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "data", $.GenericParameter("T")); 
    $.Property({Static:false, Public:true }, "Data", new JSIL.GenericParameter("T", "System.Runtime.TypedAsyncResult`1"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.TypeHelper */ 

(function TypeHelper$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.TypeHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "AreReferenceTypesCompatible", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "AreTypesCompatible", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "AreTypesCompatible", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ContainsCompatibleType", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")]), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Convert", 
      new JSIL.MethodSignature("!!0", [$.Object], ["T"])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetCompatibleTypes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")]), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDefaultValueForType", 
      new JSIL.MethodSignature($.Object, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetImplementedTypes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")]), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetImplementedTypesHelper", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Type"), $.Object])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitBoxingConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitNullableConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitNumericConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitReferenceConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsNonNullableValueType", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullableType", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsNullableValueType", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ShouldFilterProperty", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.ComponentModel.PropertyDescriptor"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Attribute")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryNumericConversion", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $jsilcore.TypeRef("JSIL.Reference", ["!!0"])], ["T"])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "ArrayType", $asm09.TypeRef("System.Type"), $asm09.System.Array.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "BoolType", $asm09.TypeRef("System.Type"), $asm09.System.Boolean.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "GenericCollectionType", $asm09.TypeRef("System.Type"), $asm09.System.Collections.Generic.ICollection$b1.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ByteType", $asm09.TypeRef("System.Type"), $asm09.System.Byte.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SByteType", $asm09.TypeRef("System.Type"), $asm09.System.SByte.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "CharType", $asm09.TypeRef("System.Type"), $asm09.System.Char.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ShortType", $asm09.TypeRef("System.Type"), $asm09.System.Int16.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "UShortType", $asm09.TypeRef("System.Type"), $asm09.System.UInt16.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "IntType", $asm09.TypeRef("System.Type"), $asm09.System.Int32.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "UIntType", $asm09.TypeRef("System.Type"), $asm09.System.UInt32.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LongType", $asm09.TypeRef("System.Type"), $asm09.System.Int64.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ULongType", $asm09.TypeRef("System.Type"), $asm09.System.UInt64.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "FloatType", $asm09.TypeRef("System.Type"), $asm09.System.Single.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DoubleType", $asm09.TypeRef("System.Type"), $asm09.System.Double.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DecimalType", $asm09.TypeRef("System.Type"), $asm09.System.Decimal.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ExceptionType", $asm09.TypeRef("System.Type"), $asm09.System.Exception.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "NullableType", $asm09.TypeRef("System.Type"), $asm09.System.Nullable$b1.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ObjectType", $asm09.TypeRef("System.Type"), $asm09.System.Object.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "StringType", $asm09.TypeRef("System.Type"), $asm09.System.String.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "TypeType", $asm09.TypeRef("System.Type"), $asm09.System.Type.__Type__); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "VoidType", $asm09.TypeRef("System.Type"), $asm09.System.Void.__Type__); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.TypeHelper/<GetCompatibleTypes>d__0 */ 

(function $lGetCompatibleTypes$gd__0$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.TypeHelper/<GetCompatibleTypes>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally3", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Type$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Type")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Type$g.get_Current", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "enumerable", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:true }, "$enumerable", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")])); 
    $.Field({Static:false, Public:true }, "targetType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$targetType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "sourceType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$wrap2", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Type")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Type$g.Current", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Type")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Type")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Runtime.UrlUtility */ 

(function UrlUtility$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.UrlUtility", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "HexToInt", 
      new JSIL.MethodSignature($.Int32, [$.Char], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IntToHex", 
      new JSIL.MethodSignature($.Char, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNonAsciiByte", 
      new JSIL.MethodSignature($.Boolean, [$.Byte], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSafe", 
      new JSIL.MethodSignature($.Boolean, [$.Char], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseQueryString", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Collections.Specialized.NameValueCollection"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseQueryString", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Collections.Specialized.NameValueCollection"), [$.String, $asm09.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "UrlDecode", 
      new JSIL.MethodSignature($.String, [$.String, $asm09.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UrlDecodeStringFromStringInternal", 
      new JSIL.MethodSignature($.String, [$.String, $asm09.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "UrlEncode", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "UrlEncode", 
      new JSIL.MethodSignature($.String, [$.String, $asm09.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UrlEncodeBytesToBytesInternal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UrlEncodeBytesToBytesInternalNonAscii", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UrlEncodeNonAscii", 
      new JSIL.MethodSignature($.String, [$.String, $asm09.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UrlEncodeSpaces", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "UrlEncodeToBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $asm09.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "UrlEncodeUnicode", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UrlEncodeUnicodeStringToStringInternal", 
      new JSIL.MethodSignature($.String, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "UrlPathEncode", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.UrlUtility/UrlDecoder */ 

(function UrlDecoder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.UrlUtility/UrlDecoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm09.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddByte", 
      new JSIL.MethodSignature(null, [$.Byte], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddChar", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushBytes", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "_bufferSize", $.Int32); 
    $.Field({Static:false, Public:false}, "_numChars", $.Int32); 
    $.Field({Static:false, Public:false}, "_charBuffer", $jsilcore.TypeRef("System.Array", [$.Char])); 
    $.Field({Static:false, Public:false}, "_numBytes", $.Int32); 
    $.Field({Static:false, Public:false}, "_byteBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "_encoding", $asm09.TypeRef("System.Text.Encoding")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.UrlUtility/HttpValueCollection */ 

(function HttpValueCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Collections.Specialized.NameValueCollection"), 
      Name: "System.Runtime.UrlUtility/HttpValueCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillFromString", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $asm09.TypeRef("System.Text.Encoding")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean, $asm09.TypeRef("System.Collections.IDictionary")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.WaitCallbackActionItem */ 

(function WaitCallbackActionItem$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Boolean)) ();
  };

  function WaitCallbackActionItem_get_ShouldUseActivity () {
    return $thisType.WaitCallbackActionItem$ShouldUseActivity$value;
  };

  function WaitCallbackActionItem_set_ShouldUseActivity (value) {
    $thisType.WaitCallbackActionItem$ShouldUseActivity$value = value;
  };

  JSIL.MakeStaticClass("System.Runtime.WaitCallbackActionItem", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "get_ShouldUseActivity", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      WaitCallbackActionItem_get_ShouldUseActivity
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:true , Public:false}, "set_ShouldUseActivity", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      WaitCallbackActionItem_set_ShouldUseActivity
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:true , Public:false}, "WaitCallbackActionItem$ShouldUseActivity$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:true , Public:false}, "ShouldUseActivity", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Runtime.Collections");
/* class System.Runtime.Collections.HopperCache */ 

(function HopperCache$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Collections.HopperCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object, $.Object], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "hopperSize", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "weak", $.Boolean); 
    $.Field({Static:false, Public:false}, "outstandingHopper", $asm09.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "strongHopper", $asm09.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "limitedHopper", $asm09.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:false, Public:false}, "promoting", $.Int32); 
    $.Field({Static:false, Public:false}, "mruEntry", $asm12.TypeRef("System.Runtime.Collections.HopperCache/LastHolder")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Collections.HopperCache/LastHolder */ 

(function LastHolder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Collections.HopperCache/LastHolder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "key", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "value", $.Object); 
    $.Property({Static:false, Public:false}, "Key", $.Object);

    $.Property({Static:false, Public:false}, "Value", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Collections.NullableKeyDictionary`2 */ 

(function NullableKeyDictionary$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Collections.NullableKeyDictionary`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.NullableKeyDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.NullableKeyDictionary`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.NullableKeyDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.NullableKeyDictionary`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.NullableKeyDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.NullableKeyDictionary`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.NullableKeyDictionary`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.NullableKeyDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.NullableKeyDictionary`2")])]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TValue", "System.Runtime.Collections.NullableKeyDictionary`2"), [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.NullableKeyDictionary`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.NullableKeyDictionary`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Values", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TValue", "System.Runtime.Collections.NullableKeyDictionary`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.NullableKeyDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.NullableKeyDictionary`2")])]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.NullableKeyDictionary`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.NullableKeyDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.NullableKeyDictionary`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.NullableKeyDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.NullableKeyDictionary`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(3, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.NullableKeyDictionary`2"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TValue", "System.Runtime.Collections.NullableKeyDictionary`2")])], [])
    );

    $.Field({Static:false, Public:false}, "isNullKeyPresent", $.Boolean); 
    $.Field({Static:false, Public:false}, "nullKeyValue", $.GenericParameter("TValue")); 
    $.Field({Static:false, Public:false}, "innerDictionary", $asm09.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.NullableKeyDictionary`2")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TValue", "System.Runtime.Collections.NullableKeyDictionary`2")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", new JSIL.GenericParameter("TValue", "System.Runtime.Collections.NullableKeyDictionary`2"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IDictionary`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.NullableKeyDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.NullableKeyDictionary`2")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.NullableKeyDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.NullableKeyDictionary`2")])]), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.NullableKeyDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.NullableKeyDictionary`2")])]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryKeyCollection`2 */ 

(function NullKeyDictionaryKeyCollection$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryKeyCollection`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue", "TypeKey", "TypeValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.Collections.NullableKeyDictionary`2", [new JSIL.GenericParameter("TypeKey", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryKeyCollection`2"), new JSIL.GenericParameter("TypeValue", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryKeyCollection`2")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TypeKey", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryKeyCollection`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TypeKey", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryKeyCollection`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TypeKey", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryKeyCollection`2")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TypeKey", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryKeyCollection`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TypeKey", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryKeyCollection`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(2, "GetEnumerator");

    $.Field({Static:false, Public:false}, "nullKeyDictionary", $asm12.TypeRef("System.Runtime.Collections.NullableKeyDictionary`2", [$.GenericParameter("TypeKey"), $.GenericParameter("TypeValue")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TypeKey", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryKeyCollection`2")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TypeKey", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryKeyCollection`2")]), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryKeyCollection`2/<GetEnumerator>d__3 */ 

(function $lGetEnumerator$gd__3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryKeyCollection`2/<GetEnumerator>d__3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue", "TypeKey", "TypeValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally6", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTypeKey$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TypeKey", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryKeyCollection`2/<GetEnumerator>d__3"), [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TypeKey")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm12.TypeRef("System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryKeyCollection`2", [
          $.GenericParameter("TKey"), $.GenericParameter("TValue"), 
          $.GenericParameter("TypeKey"), $.GenericParameter("TypeValue")
        ])); 
    $.Field({Static:false, Public:true }, "item", $.GenericParameter("TypeKey")); 
    $.Field({Static:false, Public:true }, "$wrap5", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TypeKey")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTypeKey$g.Current", new JSIL.GenericParameter("TypeKey", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryKeyCollection`2/<GetEnumerator>d__3"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TypeKey", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryKeyCollection`2/<GetEnumerator>d__3")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryValueCollection`2 */ 

(function NullKeyDictionaryValueCollection$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryValueCollection`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue", "TypeKey", "TypeValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.Collections.NullableKeyDictionary`2", [new JSIL.GenericParameter("TypeKey", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryValueCollection`2"), new JSIL.GenericParameter("TypeValue", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryValueCollection`2")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TypeValue", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryValueCollection`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TypeValue", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryValueCollection`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TypeValue", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryValueCollection`2")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TypeValue", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryValueCollection`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TypeValue", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryValueCollection`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(2, "GetEnumerator");

    $.Field({Static:false, Public:false}, "nullKeyDictionary", $asm12.TypeRef("System.Runtime.Collections.NullableKeyDictionary`2", [$.GenericParameter("TypeKey"), $.GenericParameter("TypeValue")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TypeValue", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryValueCollection`2")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TypeValue", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryValueCollection`2")]), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryValueCollection`2/<GetEnumerator>d__8 */ 

(function $lGetEnumerator$gd__8$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryValueCollection`2/<GetEnumerator>d__8", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue", "TypeKey", "TypeValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finallyb", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTypeValue$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TypeValue", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryValueCollection`2/<GetEnumerator>d__8"), [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TypeValue")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm12.TypeRef("System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryValueCollection`2", [
          $.GenericParameter("TKey"), $.GenericParameter("TValue"), 
          $.GenericParameter("TypeKey"), $.GenericParameter("TypeValue")
        ])); 
    $.Field({Static:false, Public:true }, "item", $.GenericParameter("TypeValue")); 
    $.Field({Static:false, Public:true }, "$wrapa", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TypeValue")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTypeValue$g.Current", new JSIL.GenericParameter("TypeValue", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryValueCollection`2/<GetEnumerator>d__8"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TypeValue", "System.Runtime.Collections.NullableKeyDictionary`2/NullKeyDictionaryValueCollection`2/<GetEnumerator>d__8")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Runtime.Collections.NullableKeyDictionary`2/<GetEnumerator>d__0 */ 

(function $lGetEnumerator$gd__0$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Collections.NullableKeyDictionary`2/<GetEnumerator>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lTKey$cmTValue$g$g.get_Current", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.NullableKeyDictionary`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.NullableKeyDictionary`2/<GetEnumerator>d__0")]), [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm12.TypeRef("System.Runtime.Collections.NullableKeyDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
    $.Field({Static:false, Public:true }, "innerEnumerator", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lTKey$cmTValue$g$g.Current", $asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.NullableKeyDictionary`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.NullableKeyDictionary`2/<GetEnumerator>d__0")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.NullableKeyDictionary`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.NullableKeyDictionary`2/<GetEnumerator>d__0")])]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Runtime.Collections.ObjectCache`2 */ 

(function ObjectCache$b2$Members () {
  var $, $thisType;
  function ObjectCache$b2_get_DisposeItemCallback () {
    return this.ObjectCache$b2$DisposeItemCallback$value;
  };

  function ObjectCache$b2_set_DisposeItemCallback (value) {
    this.ObjectCache$b2$DisposeItemCallback$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Collections.ObjectCache`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.Collections.ObjectCacheSettings")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.Collections.ObjectCacheSettings"), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.ObjectCache`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.Collections.ObjectCacheItem`1", [new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2")]), [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.ObjectCache`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Collections.Generic.List`1", ["!!0"])]), "!!0"], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GatherExpiredItems", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.ObjectCache`2"), $asm12.TypeRef("System.Runtime.Collections.ObjectCache`2/Item", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.ObjectCache`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2")])])])]), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Method({Static:false, Public:true }, "get_DisposeItemCallback", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Action`1", [new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2")]), [], []), 
      ObjectCache$b2_get_DisposeItemCallback
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_ThisLock", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalAdd", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.Collections.ObjectCache`2/Item", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.ObjectCache`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2")]), [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.ObjectCache`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnIdle", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PurgeCache", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Return", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.ObjectCache`2"), $asm12.TypeRef("System.Runtime.Collections.ObjectCache`2/Item", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.ObjectCache`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2")])], [])
    );

    $.Method({Static:false, Public:true }, "set_DisposeItemCallback", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action`1", [new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2")])], []), 
      ObjectCache$b2_set_DisposeItemCallback
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "ShouldPurgeItem", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Collections.ObjectCache`2/Item", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.ObjectCache`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2")]), $asm09.TypeRef("System.DateTime")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartTimerIfNecessary", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Take", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.Collections.ObjectCacheItem`1", [new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2")]), [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.ObjectCache`2")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Take", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.Collections.ObjectCacheItem`1", [new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2")]), [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.ObjectCache`2"), $asm09.TypeRef("System.Func`1", [new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2")])], [])
    );

    $.Field({Static:false, Public:false}, "settings", $asm12.TypeRef("System.Runtime.Collections.ObjectCacheSettings")); 
    $.Field({Static:false, Public:false}, "cacheItems", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $asm12.TypeRef("System.Runtime.Collections.ObjectCache`2/Item", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])); 
    $.Field({Static:false, Public:false}, "idleTimeoutEnabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "leaseTimeoutEnabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "idleTimer", $asm12.TypeRef("System.Runtime.IOThreadTimer")); 
    $.Field({Static:true , Public:false}, "onIdle", $asm09.TypeRef("System.Action`1", [$.Object])); 
    $.Field({Static:false, Public:false}, "disposed", $.Boolean); 
    $.Field({Static:false, Public:false}, "ObjectCache$b2$DisposeItemCallback$value", $asm09.TypeRef("System.Action`1", [$.GenericParameter("TValue")]))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Constant({Static:true , Public:false}, "timerThreshold", 1); 
    $.Property({Static:false, Public:false}, "ThisLock", $.Object);

    $.Property({Static:false, Public:true }, "DisposeItemCallback", $asm09.TypeRef("System.Action`1", [new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2")]));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Collections.ObjectCacheItem`1 */ 

(function ObjectCacheItem$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Collections.ObjectCacheItem`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.Collections.ObjectCacheItem`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReleaseReference", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryAddReference", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Value", new JSIL.GenericParameter("T", "System.Runtime.Collections.ObjectCacheItem`1"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Collections.ObjectCache`2/Item */ 

(function Item$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.DateTime)) ();
  };

  function Item_get_CreationTime () {
    return this.Item$CreationTime$value;
  };

  function Item_get_LastUsage () {
    return this.Item$LastUsage$value;
  };

  function Item_set_CreationTime (value) {
    this.Item$CreationTime$value = value;
  };

  function Item_set_LastUsage (value) {
    this.Item$LastUsage$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.Collections.ObjectCacheItem`1", [new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2/Item")]), 
      Name: "System.Runtime.Collections.ObjectCache`2/Item", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          new JSIL.GenericParameter("TKey", "System.Runtime.Collections.ObjectCache`2/Item"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2/Item"), 
          $asm09.TypeRef("System.Action`1", [new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2/Item")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          new JSIL.GenericParameter("TKey", "System.Runtime.Collections.ObjectCache`2/Item"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2/Item"), 
          $asm12.TypeRef("System.Runtime.Collections.ObjectCache`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.ObjectCache`2/Item"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2/Item")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.ObjectCache`2/Item"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2/Item")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Method({Static:false, Public:true }, "get_CreationTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [], []), 
      Item_get_CreationTime
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_LastUsage", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [], []), 
      Item_get_LastUsage
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ReferenceCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2/Item"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "InternalAddReference", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalReleaseReference", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "LocalDispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "LockedDispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReleaseReference", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Method({Static:false, Public:true }, "set_CreationTime", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.DateTime")], []), 
      Item_set_CreationTime
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_LastUsage", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.DateTime")], []), 
      Item_set_LastUsage
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryAddReference", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "parent", $asm12.TypeRef("System.Runtime.Collections.ObjectCache`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "key", $.GenericParameter("TKey")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "disposeItemCallback", $asm09.TypeRef("System.Action`1", [$.GenericParameter("TValue")])); 
    $.Field({Static:false, Public:false}, "value", $.GenericParameter("TValue")); 
    $.Field({Static:false, Public:false}, "referenceCount", $.Int32); 
    $.Field({Static:false, Public:false}, "Item$CreationTime$value", $asm09.TypeRef("System.DateTime"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "Item$LastUsage$value", $asm09.TypeRef("System.DateTime"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "ReferenceCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", new JSIL.GenericParameter("TValue", "System.Runtime.Collections.ObjectCache`2/Item"));

    $.Property({Static:false, Public:true }, "CreationTime", $asm09.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "LastUsage", $asm09.TypeRef("System.DateTime"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Collections.ObjectCacheSettings */ 

(function ObjectCacheSettings$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Collections.ObjectCacheSettings", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CacheLimit", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IdleTimeout", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_LeaseTimeout", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_PurgeFrequency", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_CacheLimit", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_IdleTimeout", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_LeaseTimeout", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_PurgeFrequency", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "cacheLimit", $.Int32); 
    $.Field({Static:false, Public:false}, "idleTimeout", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "leaseTimeout", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "purgeFrequency", $.Int32); 
    $.Field({Static:true , Public:false}, "DefaultIdleTimeout", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:true , Public:false}, "DefaultLeaseTimeout", $asm09.TypeRef("System.TimeSpan")); 
    $.Constant({Static:true , Public:false}, "DefaultCacheLimit", 64); 
    $.Constant({Static:true , Public:false}, "DefaultPurgeFrequency", 32); 
    function ObjectCacheSettings__cctor () {
      $thisType.DefaultIdleTimeout = new $asm09.System.TimeSpan();
      $thisType.DefaultLeaseTimeout = new $asm09.System.TimeSpan();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      ObjectCacheSettings__cctor
    );

    $.Property({Static:false, Public:true }, "CacheLimit", $.Int32);

    $.Property({Static:false, Public:true }, "IdleTimeout", $asm09.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "LeaseTimeout", $asm09.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "PurgeFrequency", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Collections.ValidatingCollection`1 */ 

(function ValidatingCollection$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Action)) ();
  };

  function ValidatingCollection$b1_get_OnAddValidationCallback () {
    return this.ValidatingCollection$b1$OnAddValidationCallback$value;
  };

  function ValidatingCollection$b1_get_OnMutateValidationCallback () {
    return this.ValidatingCollection$b1$OnMutateValidationCallback$value;
  };

  function ValidatingCollection$b1_set_OnAddValidationCallback (value) {
    this.ValidatingCollection$b1$OnAddValidationCallback$value = value;
  };

  function ValidatingCollection$b1_set_OnMutateValidationCallback (value) {
    this.ValidatingCollection$b1$OnMutateValidationCallback$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Collections.ObjectModel.Collection`1", [new JSIL.GenericParameter("T", "System.Runtime.Collections.ValidatingCollection`1")]), 
      Name: "System.Runtime.Collections.ValidatingCollection`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ClearItems", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Method({Static:false, Public:true }, "get_OnAddValidationCallback", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Action`1", [new JSIL.GenericParameter("T", "System.Runtime.Collections.ValidatingCollection`1")]), [], []), 
      ValidatingCollection$b1_get_OnAddValidationCallback
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "get_OnMutateValidationCallback", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Action"), [], []), 
      ValidatingCollection$b1_get_OnMutateValidationCallback
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InsertItem", 
      new JSIL.MethodSignature(null, [$.Int32, new JSIL.GenericParameter("T", "System.Runtime.Collections.ValidatingCollection`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnAdd", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Runtime.Collections.ValidatingCollection`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnMutate", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RemoveItem", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Method({Static:false, Public:true }, "set_OnAddValidationCallback", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action`1", [new JSIL.GenericParameter("T", "System.Runtime.Collections.ValidatingCollection`1")])], []), 
      ValidatingCollection$b1_set_OnAddValidationCallback
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_OnMutateValidationCallback", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action")], []), 
      ValidatingCollection$b1_set_OnMutateValidationCallback
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetItem", 
      new JSIL.MethodSignature(null, [$.Int32, new JSIL.GenericParameter("T", "System.Runtime.Collections.ValidatingCollection`1")], [])
    );

    $.Field({Static:false, Public:false}, "ValidatingCollection$b1$OnAddValidationCallback$value", $asm09.TypeRef("System.Action`1", [$.GenericParameter("T")]))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "ValidatingCollection$b1$OnMutateValidationCallback$value", $asm09.TypeRef("System.Action"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "OnAddValidationCallback", $asm09.TypeRef("System.Action`1", [new JSIL.GenericParameter("T", "System.Runtime.Collections.ValidatingCollection`1")]));

    $.Property({Static:false, Public:true }, "OnMutateValidationCallback", $asm09.TypeRef("System.Action"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Collections.OrderedDictionary`2 */ 

(function OrderedDictionary$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Collections.OrderedDictionary`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IDictionary`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.OrderedDictionary`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.OrderedDictionary`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.OrderedDictionary`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.OrderedDictionary`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.OrderedDictionary`2")])]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TValue", "System.Runtime.Collections.OrderedDictionary`2"), [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Values", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TValue", "System.Runtime.Collections.OrderedDictionary`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.OrderedDictionary`2")])]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.OrderedDictionary`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.OrderedDictionary`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Array"), $.Int32], [])
    )
      .Overrides(4, "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(4, "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(4, "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(4, "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Add", 
      new JSIL.MethodSignature(null, [$.Object, $.Object], [])
    )
      .Overrides(3, "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Clear", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    )
      .Overrides(3, "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_IsFixedSize", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "get_IsFixedSize");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Object], [])
    )
      .Overrides(3, "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Keys", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ICollection"), [], [])
    )
      .Overrides(3, "get_Keys");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.get_Values", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ICollection"), [], [])
    )
      .Overrides(3, "get_Values");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IDictionaryEnumerator"), [], [])
    )
      .Overrides(3, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Remove", 
      new JSIL.MethodSignature(null, [$.Object], [])
    )
      .Overrides(3, "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.set_Item", 
      new JSIL.MethodSignature(null, [$.Object, $.Object], [])
    )
      .Overrides(3, "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(5, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TValue", "System.Runtime.Collections.OrderedDictionary`2")])], [])
    );

    $.Field({Static:false, Public:false}, "privateDictionary", $asm0B.TypeRef("System.Collections.Specialized.OrderedDictionary")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", new JSIL.GenericParameter("TValue", "System.Runtime.Collections.OrderedDictionary`2"));

    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TValue", "System.Runtime.Collections.OrderedDictionary`2")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Keys", $asm09.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Values", $asm09.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IDictionary.Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IDictionary`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.OrderedDictionary`2")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.OrderedDictionary`2")])]), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.OrderedDictionary`2")])]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IDictionary"), 
      /* 4 */ $asm09.TypeRef("System.Collections.ICollection"), 
      /* 5 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Runtime.Collections.OrderedDictionary`2/<GetEnumerator>d__0 */ 

(function $lGetEnumerator$gd__0$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Collections.OrderedDictionary`2/<GetEnumerator>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally4", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lTKey$cmTValue$g$g.get_Current", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.OrderedDictionary`2/<GetEnumerator>d__0")]), [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm12.TypeRef("System.Runtime.Collections.OrderedDictionary`2", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])); 
    $.Field({Static:false, Public:true }, "entry", $asm09.TypeRef("System.Collections.DictionaryEntry")); 
    $.Field({Static:false, Public:true }, "$wrap2", $asm09.TypeRef("System.Collections.IDictionaryEnumerator")); 
    $.Field({Static:false, Public:true }, "$wrap3", $asm09.TypeRef("System.IDisposable")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lTKey$cmTValue$g$g.Current", $asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.OrderedDictionary`2/<GetEnumerator>d__0")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Runtime.Collections.OrderedDictionary`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TValue", "System.Runtime.Collections.OrderedDictionary`2/<GetEnumerator>d__0")])]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.DeclareNamespace("System.Runtime.Diagnostics");
/* enum System.Runtime.Diagnostics.ActivityControl */ 

JSIL.MakeEnum(
  "System.Runtime.Diagnostics.ActivityControl", false, {
    EVENT_ACTIVITY_CTRL_GET_ID: 1, 
    EVENT_ACTIVITY_CTRL_SET_ID: 2, 
    EVENT_ACTIVITY_CTRL_CREATE_ID: 3, 
    EVENT_ACTIVITY_CTRL_GET_SET_ID: 4, 
    EVENT_ACTIVITY_CTRL_CREATE_SET_ID: 5
  }, false
);

/* class System.Runtime.Diagnostics.DiagnosticTraceBase */ 

(function DiagnosticTraceBase$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.DateTime)) ();
  };

  function DiagnosticTraceBase_get_LastFailure () {
    return this.DiagnosticTraceBase$LastFailure$value;
  };

  function DiagnosticTraceBase_set_LastFailure (value) {
    this.DiagnosticTraceBase$LastFailure$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Diagnostics.DiagnosticTraceBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDomainEventHandlersForCleanup", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AddExceptionToTraceString", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.Xml.XmlWriter"), $asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSourceString", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitOrUnloadEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixLevel", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Diagnostics.SourceLevels"), [$asm0B.TypeRef("System.Diagnostics.SourceLevels")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ActivityId", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_CalledShutdown", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_EventSourceName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_HaveListeners", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:false}, "get_LastFailure", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [], []), 
      DiagnosticTraceBase_get_LastFailure
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Level", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Diagnostics.SourceLevels"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProcessId", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_ProcessName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_TraceSource", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Diagnostics.TraceSource"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_TracingEnabled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsEnabled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LogTraceFailure", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Exception")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "LookupSeverity", 
      new JSIL.MethodSignature($.String, [$asm0B.TypeRef("System.Diagnostics.TraceEventType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSetLevel", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Diagnostics.SourceLevels")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnShutdownTracing", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnUnhandledException", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_ActivityId", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_EventSourceName", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:false}, "set_LastFailure", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.DateTime")], []), 
      DiagnosticTraceBase_set_LastFailure
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Level", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Diagnostics.SourceLevels")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_TraceSource", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Diagnostics.TraceSource")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "SetLevel", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Diagnostics.SourceLevels")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetLevelThreadSafe", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Diagnostics.SourceLevels")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetTraceSource", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Diagnostics.TraceSource")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldTrace", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.TraceEventLevel")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ShouldTrace", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.Diagnostics.TraceEventType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ShouldTraceToTraceSource", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.TraceEventLevel")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShutdownTracing", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StackTraceString", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEventLogEvent", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Diagnostics.TraceEventType"), $asm12.TypeRef("System.Runtime.Diagnostics.TraceRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnhandledExceptionHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.UnhandledExceptionEventArgs")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsafeRemoveDefaultTraceListener", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Diagnostics.TraceSource")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "XmlEncode", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "DefaultTraceListenerName", "Default"); 
    $.Constant({Static:true , Public:false}, "TraceRecordVersion", "http://schemas.microsoft.com/2004/10/E2ETraceEvent/TraceRecord"); 
    $.Field({Static:true , Public:false}, "AppDomainFriendlyName", $.String); 
    $.Field({Static:false, Public:false}, "thisLock", $.Object); 
    $.Field({Static:false, Public:false}, "tracingEnabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "calledShutdown", $.Boolean); 
    $.Field({Static:false, Public:false}, "haveListeners", $.Boolean); 
    $.Field({Static:false, Public:false}, "level", $asm0B.TypeRef("System.Diagnostics.SourceLevels")); 
    $.Field({Static:false, Public:false}, "TraceSourceName", $.String); 
    $.Field({Static:false, Public:false}, "traceSource", $asm0B.TypeRef("System.Diagnostics.TraceSource")); 
    $.Field({Static:false, Public:false}, "eventSourceName", $.String)
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "DiagnosticTraceBase$LastFailure$value", $asm09.TypeRef("System.DateTime"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Constant({Static:true , Public:false}, "TracingEventLogCategory", 4); 
    $.Property({Static:false, Public:false}, "LastFailure", $asm09.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "TraceSource", $asm0B.TypeRef("System.Diagnostics.TraceSource"));

    $.Property({Static:false, Public:true }, "HaveListeners", $.Boolean);

    $.Property({Static:false, Public:true }, "Level", $asm0B.TypeRef("System.Diagnostics.SourceLevels"));

    $.Property({Static:false, Public:false}, "EventSourceName", $.String);

    $.Property({Static:false, Public:true }, "TracingEnabled", $.Boolean);

    $.Property({Static:true , Public:false}, "ProcessName", $.String);

    $.Property({Static:true , Public:false}, "ProcessId", $.Int32);

    $.Property({Static:false, Public:false}, "CalledShutdown", $.Boolean);

    $.Property({Static:true , Public:true }, "ActivityId", $asm09.TypeRef("System.Guid"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Diagnostics.EventTraceActivity */ 

(function EventTraceActivity$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Diagnostics.EventTraceActivity", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid"), $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Empty", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetActivityIdFromThread", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetFromThreadOrCreate", 
      new JSIL.MethodSignature($.Type, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SetActivityId", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetActivityIdOnThread", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:true }, "ActivityId", $asm09.TypeRef("System.Guid")); 
    $.Field({Static:true , Public:false}, "empty", $.Type); 
    $.Property({Static:true , Public:true }, "Empty", $.Type);

    $.Property({Static:true , Public:true }, "Name", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Diagnostics.EtwDiagnosticTrace */ 

(function EtwDiagnosticTrace$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.Diagnostics.DiagnosticTraceBase"), 
      Name: "System.Runtime.Diagnostics.EtwDiagnosticTrace", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Guid")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "BuildTrace", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $.String, 
          $asm12.TypeRef("System.Runtime.TracePayload"), $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CreateEtwProvider", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CreateTraceSource", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Event", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm12.TypeRef("System.Runtime.TraceEventLevel"), 
          $asm12.TypeRef("System.Runtime.TraceChannel"), $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Event", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ExceptionToTraceString", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Exception"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateLegacyTraceCode", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GenerateMsdnTraceCode", 
      new JSIL.MethodSignature($.String, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DefaultEtwProviderId", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_EtwProvider", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.Diagnostics.EtwProvider"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_EtwTracingEnabled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsEnd2EndActivityTracingEnabled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsEtwProviderEnabled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_RefreshState", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Action"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetEventDescriptor", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor"), [
          $.Int32, $asm12.TypeRef("System.Runtime.TraceChannel"), 
          $asm12.TypeRef("System.Runtime.TraceEventLevel")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetExceptionData", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInnerException", 
      new JSIL.MethodSignature($.String, [
          $asm09.TypeRef("System.Exception"), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSerializedPayload", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.TracePayload"), [
          $.Object, $asm12.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
          $asm09.TypeRef("System.Exception")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "GetSerializedPayload", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.TracePayload"), [
          $.Object, $asm12.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
          $asm09.TypeRef("System.Exception"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsEnabled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEtwEventEnabled", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "LookupChannel", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Runtime.TraceChannel")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnShutdownTracing", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnUnhandledException", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_DefaultEtwProviderId", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_RefreshState", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SetAndTraceTransfer", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAnnotation", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Func`1", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetEnd2EndActivityTracingEnabled", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldTrace", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.TraceEventLevel")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ShouldTraceToEtw", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.TraceEventLevel")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ShutdownEtwProvider", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ShutdownTraceSource", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEventLogEvent", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.Diagnostics.TraceEventType"), $asm12.TypeRef("System.Runtime.Diagnostics.TraceRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TraceTransfer", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteExceptionToTraceString", 
      new JSIL.MethodSignature(null, [
          $asm14.TypeRef("System.Xml.XmlTextWriter"), $asm09.TypeRef("System.Exception"), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature($.Boolean, [
          $asm14.TypeRef("System.Xml.XmlTextWriter"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTraceSource", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $.String, 
          $asm12.TypeRef("System.Runtime.TracePayload")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteXmlElementString", 
      new JSIL.MethodSignature($.Boolean, [
          $asm14.TypeRef("System.Xml.XmlTextWriter"), $.String, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "ImmutableDefaultEtwProviderId", $asm09.TypeRef("System.Guid")); 
    $.Field({Static:true , Public:false}, "defaultEtwProviderId", $asm09.TypeRef("System.Guid"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "etwProviderCache", $asm09.TypeRef("System.Collections.Hashtable")); 
    $.Field({Static:true , Public:false}, "isVistaOrGreater", $.Boolean); 
    $.Field({Static:true , Public:false}, "traceAnnotation", $asm09.TypeRef("System.Func`1", [$.String])); 
    $.Field({Static:false, Public:false}, "etwProvider", $asm12.TypeRef("System.Runtime.Diagnostics.EtwProvider"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "etwProviderId", $asm09.TypeRef("System.Guid")); 
    $.Field({Static:true , Public:false}, "transferEventDescriptor", $asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Constant({Static:true , Public:false}, "WindowsVistaMajorNumber", 6); 
    $.Constant({Static:true , Public:false}, "EventSourceVersion", "4.0.0.0"); 
    $.Constant({Static:true , Public:false}, "TracingEventLogCategory", 4); 
    $.Constant({Static:true , Public:false}, "MaxExceptionStringLength", 28672); 
    $.Constant({Static:true , Public:false}, "MaxExceptionDepth", 64); 
    $.Constant({Static:true , Public:false}, "DiagnosticTraceSource", "System.ServiceModel.Diagnostics"); 
    $.Constant({Static:true , Public:false}, "XmlBracketsLength", 5); 
    function EtwDiagnosticTrace__cctor () {
      $thisType.ImmutableDefaultEtwProviderId = new $asm09.System.Guid();
      $thisType.defaultEtwProviderId = new $asm09.System.Guid();
      $thisType.transferEventDescriptor = new $asm12.System.Runtime.Diagnostics.EventDescriptor();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      EtwDiagnosticTrace__cctor
    );

    $.Property({Static:true , Public:true }, "DefaultEtwProviderId", $asm09.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "EtwProvider", $asm12.TypeRef("System.Runtime.Diagnostics.EtwProvider"));

    $.Property({Static:false, Public:true }, "IsEtwProviderEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "RefreshState", $asm09.TypeRef("System.Action"));

    $.Property({Static:false, Public:true }, "IsEnd2EndActivityTracingEnabled", $.Boolean);

    $.Property({Static:false, Public:false}, "EtwTracingEnabled", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Diagnostics.EtwDiagnosticTrace/TraceCodes */ 

(function TraceCodes$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Diagnostics.EtwDiagnosticTrace/TraceCodes", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "AppDomainUnload", "AppDomainUnload"); 
    $.Constant({Static:true , Public:true }, "TraceHandledException", "TraceHandledException"); 
    $.Constant({Static:true , Public:true }, "ThrowingException", "ThrowingException"); 
    $.Constant({Static:true , Public:true }, "UnhandledException", "UnhandledException"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Diagnostics.EtwDiagnosticTrace/EventIdsWithMsdnTraceCode */ 

(function EventIdsWithMsdnTraceCode$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Diagnostics.EtwDiagnosticTrace/EventIdsWithMsdnTraceCode", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "AppDomainUnload", 57393); 
    $.Constant({Static:true , Public:true }, "ThrowingExceptionWarning", 57396); 
    $.Constant({Static:true , Public:true }, "ThrowingExceptionVerbose", 57407); 
    $.Constant({Static:true , Public:true }, "HandledExceptionInfo", 57394); 
    $.Constant({Static:true , Public:true }, "HandledExceptionWarning", 57404); 
    $.Constant({Static:true , Public:true }, "HandledExceptionError", 57405); 
    $.Constant({Static:true , Public:true }, "HandledExceptionVerbose", 57406); 
    $.Constant({Static:true , Public:true }, "UnhandledException", 57397); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Diagnostics.EtwDiagnosticTrace/LegacyTraceEventIds */ 

(function LegacyTraceEventIds$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Diagnostics.EtwDiagnosticTrace/LegacyTraceEventIds", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "Diagnostics", 131072); 
    $.Constant({Static:true , Public:true }, "AppDomainUnload", 131073); 
    $.Constant({Static:true , Public:true }, "EventLog", 131074); 
    $.Constant({Static:true , Public:true }, "ThrowingException", 131075); 
    $.Constant({Static:true , Public:true }, "TraceHandledException", 131076); 
    $.Constant({Static:true , Public:true }, "UnhandledException", 131077); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Diagnostics.EtwDiagnosticTrace/StringBuilderPool */ 

(function StringBuilderPool$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Diagnostics.EtwDiagnosticTrace/StringBuilderPool", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Return", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Text.StringBuilder")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Take", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Text.StringBuilder"), [], [])
    );

    $.Constant({Static:true , Public:false}, "maxPooledStringBuilders", 64); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "freeStringBuilders", $asm09.TypeRef("System.Collections.Concurrent.ConcurrentQueue`1", [$asm09.TypeRef("System.Text.StringBuilder")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Diagnostics.TraceRecord */ 

(function TraceRecord$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Diagnostics.TraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "BuildEventId", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "XmlEncode", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.Constant({Static:true , Public:false}, "EventIdBase", "http://schemas.microsoft.com/2006/08/ServiceModel/"); 
    $.Constant({Static:true , Public:false}, "NamespaceSuffix", "TraceRecord"); 
    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Diagnostics.StringTraceRecord */ 

(function StringTraceRecord$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "System.Runtime.Diagnostics.StringTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Field({Static:false, Public:false}, "elementName", $.String); 
    $.Field({Static:false, Public:false}, "content", $.String); 
    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Diagnostics.DictionaryTraceRecord */ 

(function DictionaryTraceRecord$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.Diagnostics.TraceRecord"), 
      Name: "System.Runtime.Diagnostics.DictionaryTraceRecord", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.IDictionary")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_EventId", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm14.TypeRef("System.Xml.XmlWriter")], [])
    );

    $.Field({Static:false, Public:false}, "dictionary", $asm09.TypeRef("System.Collections.IDictionary")); 
    $.Property({Static:false, Public:false, Virtual:true }, "EventId", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Diagnostics.DiagnosticsEventProvider */ 

(function DiagnosticsEventProvider$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Diagnostics.DiagnosticsEventProvider", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Deregister", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EncodeObject", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Runtime.Interop.UnsafeNativeMethods/EventData")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EtwEnableCallBack", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Guid")]), $.Int32, 
          $.Byte, $.Int64, 
          $.Int64, $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EtwRegister", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetLastWriteEventError", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.Diagnostics.DiagnosticsEventProvider/WriteEventErrorCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEnabled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.Byte, $.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnControllerCommand", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetActivityId", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Guid")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetLastError", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.Int32, $asm09.TypeRef("System.IntPtr")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteMessageEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), $.String, 
          $.Byte, $.Int64
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteMessageEvent", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteTransferEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $asm09.TypeRef("System.Guid"), $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteTransferEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $asm09.TypeRef("System.Guid"), $.Int32, 
          $asm09.TypeRef("System.IntPtr")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "etwCallback", $asm12.TypeRef("System.Runtime.Interop.UnsafeNativeMethods/EtwEnableCallback"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "traceRegistrationHandle", $.Int64); 
    $.Field({Static:false, Public:false}, "currentTraceLevel", $.Byte); 
    $.Field({Static:false, Public:false}, "anyKeywordMask", $.Int64); 
    $.Field({Static:false, Public:false}, "allKeywordMask", $.Int64); 
    $.Field({Static:false, Public:false}, "isProviderEnabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "providerId", $asm09.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false}, "isDisposed", $.Int32); 
    $.Field({Static:true , Public:false}, "errorCode", $asm12.TypeRef("System.Runtime.Diagnostics.DiagnosticsEventProvider/WriteEventErrorCode"))
      .Attribute($asm09.TypeRef("System.ThreadStaticAttribute")); 
    $.Constant({Static:true , Public:false}, "basicTypeAllocationBufferSize", 16); 
    $.Constant({Static:true , Public:false}, "etwMaxNumberArguments", 32); 
    $.Constant({Static:true , Public:false}, "etwAPIMaxStringCount", 8); 
    $.Constant({Static:true , Public:false}, "maxEventDataDescriptors", 128); 
    $.Constant({Static:true , Public:false}, "traceEventMaximumSize", 65482); 
    $.Constant({Static:true , Public:false}, "traceEventMaximumStringSize", 32724); 
    $.Constant({Static:true , Public:false}, "WindowsVistaMajorNumber", 6); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.Diagnostics.DiagnosticsEventProvider/WriteEventErrorCode */ 

JSIL.MakeEnum(
  "System.Runtime.Diagnostics.DiagnosticsEventProvider/WriteEventErrorCode", false, {
    NoError: 0, 
    NoFreeBuffers: 1, 
    EventTooBig: 2
  }, false
);

/* class System.Runtime.Diagnostics.DiagnosticTraceSource */ 

(function DiagnosticTraceSource$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Diagnostics.TraceSource"), 
      Name: "System.Runtime.Diagnostics.DiagnosticTraceSource", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_PropagateActivity", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSupportedAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_PropagateActivity", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Constant({Static:true , Public:false}, "PropagateActivityValue", "propagateActivity"); 
    $.Property({Static:false, Public:false}, "PropagateActivity", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Diagnostics.PerformanceCounterNameAttribute */ 

(function PerformanceCounterNameAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };

  function PerformanceCounterNameAttribute_get_Name () {
    return this.PerformanceCounterNameAttribute$Name$value;
  };

  function PerformanceCounterNameAttribute_set_Name (value) {
    this.PerformanceCounterNameAttribute$Name$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.Diagnostics.PerformanceCounterNameAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], []), 
      PerformanceCounterNameAttribute_get_Name
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Method({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], []), 
      PerformanceCounterNameAttribute_set_Name
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "PerformanceCounterNameAttribute$Name$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.Field]; });

})();

/* class System.Runtime.Diagnostics.EventLogger */ 

(function EventLogger$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.Diagnostics.EventLogger", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Runtime.Diagnostics.DiagnosticTraceBase")], [])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["For System.Runtime.dll use only. Call FxTrace.EventLog instead"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EventLogEntryTypeFromEventType", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Diagnostics.EventLogEntryType"), [$asm0B.TypeRef("System.Diagnostics.TraceEventType")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsInPartialTrust", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "LogEvent", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Diagnostics.TraceEventType"), $.UInt16, 
          $.UInt32, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "LogEvent", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Diagnostics.TraceEventType"), $.UInt16, 
          $.UInt32, $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "NormalizeEventLogParameter", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SafeLogEvent", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Diagnostics.TraceEventType"), $.UInt16, 
          $.UInt32, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SafeSetLogSourceName", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetLogSourceName", 
      new JSIL.MethodSignature(null, [$.String, $asm12.TypeRef("System.Runtime.Diagnostics.DiagnosticTraceBase")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "UnsafeCreateEventLogger", 
      new JSIL.MethodSignature($.Type, [$.String, $asm12.TypeRef("System.Runtime.Diagnostics.DiagnosticTraceBase")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeGetProcessId", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeGetProcessName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "UnsafeLogEvent", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Diagnostics.TraceEventType"), $.UInt16, 
          $.UInt32, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "UnsafeWriteEventLog", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Diagnostics.TraceEventType"), $.UInt16, 
          $.UInt32, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm09.TypeRef("System.Runtime.InteropServices.GCHandle")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "logCountForPT", $.Int32)
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "canLogEvent", $.Boolean, true); 
    $.Field({Static:false, Public:false}, "diagnosticTrace", $asm12.TypeRef("System.Runtime.Diagnostics.DiagnosticTraceBase")); 
    $.Field({Static:false, Public:false}, "eventLogSourceName", $.String)
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "isInPartialTrust", $.Boolean); 
    $.Constant({Static:true , Public:false}, "MaxEventLogsInPT", 5); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Runtime.Diagnostics.EventLogCategory */ 

JSIL.MakeEnum(
  "System.Runtime.Diagnostics.EventLogCategory", false, {
    ServiceAuthorization: 1, 
    MessageAuthentication: 2, 
    ObjectAccess: 3, 
    Tracing: 4, 
    WebHost: 5, 
    FailFast: 6, 
    MessageLogging: 7, 
    PerformanceCounter: 8, 
    Wmi: 9, 
    ComPlus: 10, 
    StateMachine: 11, 
    Wsat: 12, 
    SharingService: 13, 
    ListenerAdapter: 14
  }, false
);

/* enum System.Runtime.Diagnostics.EventLogEventId */ 

JSIL.MakeEnum(
  "System.Runtime.Diagnostics.EventLogEventId", false, {
    ServiceAuthorizationSuccess: 1074135041, 
    MessageAuthenticationSuccess: 1074135043, 
    SecurityNegotiationSuccess: 1074135045, 
    TransportAuthenticationSuccess: 1074135047, 
    ImpersonationSuccess: 1074135049, 
    WebHostNotLoggingInsufficientMemoryExceptionsOnActivationForNextTimeInterval: 2147614748, 
    FailedToSetupTracing: 3221291108, 
    FailedToInitializeTraceSource: 3221291109, 
    FailFast: 3221291110, 
    FailFastException: 3221291111, 
    FailedToTraceEvent: 3221291112, 
    FailedToTraceEventWithException: 3221291113, 
    InvariantAssertionFailed: 3221291114, 
    PiiLoggingOn: 3221291115, 
    PiiLoggingNotAllowed: 3221291116, 
    WebHostUnhandledException: 3221356545, 
    WebHostHttpError: 3221356546, 
    WebHostFailedToProcessRequest: 3221356547, 
    WebHostFailedToListen: 3221356548, 
    FailedToLogMessage: 3221356549, 
    RemovedBadFilter: 3221356550, 
    FailedToCreateMessageLoggingTraceSource: 3221356551, 
    MessageLoggingOn: 3221356552, 
    MessageLoggingOff: 3221356553, 
    FailedToLoadPerformanceCounter: 3221356554, 
    FailedToRemovePerformanceCounter: 3221356555, 
    WmiGetObjectFailed: 3221356556, 
    WmiPutInstanceFailed: 3221356557, 
    WmiDeleteInstanceFailed: 3221356558, 
    WmiCreateInstanceFailed: 3221356559, 
    WmiExecQueryFailed: 3221356560, 
    WmiExecMethodFailed: 3221356561, 
    WmiRegistrationFailed: 3221356562, 
    WmiUnregistrationFailed: 3221356563, 
    WmiAdminTypeMismatch: 3221356564, 
    WmiPropertyMissing: 3221356565, 
    ComPlusServiceHostStartingServiceError: 3221356566, 
    ComPlusDllHostInitializerStartingError: 3221356567, 
    ComPlusTLBImportError: 3221356568, 
    ComPlusInvokingMethodFailed: 3221356569, 
    ComPlusInstanceCreationError: 3221356570, 
    ComPlusInvokingMethodFailedMismatchedTransactions: 3221356571, 
    UnhandledStateMachineExceptionRecordDescription: 3221422081, 
    FatalUnexpectedStateMachineEvent: 3221422082, 
    ParticipantRecoveryLogEntryCorrupt: 3221422083, 
    CoordinatorRecoveryLogEntryCorrupt: 3221422084, 
    CoordinatorRecoveryLogEntryCreationFailure: 3221422085, 
    ParticipantRecoveryLogEntryCreationFailure: 3221422086, 
    ProtocolInitializationFailure: 3221422087, 
    ProtocolStartFailure: 3221422088, 
    ProtocolRecoveryBeginningFailure: 3221422089, 
    ProtocolRecoveryCompleteFailure: 3221422090, 
    TransactionBridgeRecoveryFailure: 3221422091, 
    ProtocolStopFailure: 3221422092, 
    NonFatalUnexpectedStateMachineEvent: 3221422093, 
    PerformanceCounterInitializationFailure: 3221422094, 
    ProtocolRecoveryComplete: 3221422095, 
    ProtocolStopped: 3221422096, 
    ThumbPrintNotFound: 3221422097, 
    ThumbPrintNotValidated: 3221422098, 
    SslNoPrivateKey: 3221422099, 
    SslNoAccessiblePrivateKey: 3221422100, 
    MissingNecessaryKeyUsage: 3221422101, 
    MissingNecessaryEnhancedKeyUsage: 3221422102, 
    StartErrorPublish: 3221487617, 
    BindingError: 3221487618, 
    LAFailedToListenForApp: 3221487619, 
    UnknownListenerAdapterError: 3221487620, 
    WasDisconnected: 3221487621, 
    WasConnectionTimedout: 3221487622, 
    ServiceStartFailed: 3221487623, 
    MessageQueueDuplicatedSocketLeak: 3221487624, 
    MessageQueueDuplicatedPipeLeak: 3221487625, 
    SharingUnhandledException: 3221487626, 
    ServiceAuthorizationFailure: 3221618690, 
    MessageAuthenticationFailure: 3221618692, 
    SecurityNegotiationFailure: 3221618694, 
    TransportAuthenticationFailure: 3221618696, 
    ImpersonationFailure: 3221618698
  }, false
);

/* enum System.Runtime.Diagnostics.EventSeverity */ 

JSIL.MakeEnum(
  "System.Runtime.Diagnostics.EventSeverity", false, {
    Success: 0, 
    Informational: 1073741824, 
    Warning: 2147483648, 
    Error: 3221225472
  }, false
);

/* enum System.Runtime.Diagnostics.EventFacility */ 

JSIL.MakeEnum(
  "System.Runtime.Diagnostics.EventFacility", false, {
    Tracing: 65536, 
    ServiceModel: 131072, 
    TransactionBridge: 196608, 
    SMSvcHost: 262144, 
    InfoCards: 327680, 
    SecurityAudit: 393216
  }, false
);

/* struct System.Runtime.Diagnostics.EventDescriptor */ 

(function EventDescriptor$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Diagnostics.EventDescriptor", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Byte, 
          $.Byte, $.Byte, 
          $.Byte, $.Int32, 
          $.Int64
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Channel", 
      new JSIL.MethodSignature($.Byte, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_EventId", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Keywords", 
      new JSIL.MethodSignature($.Int64, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Level", 
      new JSIL.MethodSignature($.Byte, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Opcode", 
      new JSIL.MethodSignature($.Byte, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Task", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      new JSIL.MethodSignature($.Byte, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.Field({Static:false, Public:false}, "m_id", $.UInt16); 
    $.Field({Static:false, Public:false}, "m_version", $.Byte); 
    $.Field({Static:false, Public:false}, "m_channel", $.Byte); 
    $.Field({Static:false, Public:false}, "m_level", $.Byte); 
    $.Field({Static:false, Public:false}, "m_opcode", $.Byte); 
    $.Field({Static:false, Public:false}, "m_task", $.UInt16); 
    $.Field({Static:false, Public:false}, "m_keywords", $.Int64); 
    $.Property({Static:false, Public:true }, "EventId", $.Int32);

    $.Property({Static:false, Public:true }, "Version", $.Byte);

    $.Property({Static:false, Public:true }, "Channel", $.Byte);

    $.Property({Static:false, Public:true }, "Level", $.Byte);

    $.Property({Static:false, Public:true }, "Opcode", $.Byte);

    $.Property({Static:false, Public:true }, "Task", $.Int32);

    $.Property({Static:false, Public:true }, "Keywords", $.Int64);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.Diagnostics.EtwProvider */ 

(function EtwProvider$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm12.TypeRef("System.Runtime.Diagnostics.DiagnosticsEventProvider"), 
      Name: "System.Runtime.Diagnostics.EtwProvider", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_ControllerCallBack", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Action"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_IsEnd2EndActivityTracingEnabled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnControllerCommand", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ControllerCallBack", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "SetEnd2EndActivityTracingEnabled", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $asm09.TypeRef("System.Guid"), $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String, 
          $.String, $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String, 
          $.String, $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.Int32, $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.Int64
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.Int64, $.Int64
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.Int64, $.Int64, 
          $.Int64
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $asm09.TypeRef("System.Guid"), $.Int64, 
          $.Int64, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $asm09.TypeRef("System.Guid"), $.Int64, 
          $.Int64, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean, $.String, 
          $.String, $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $asm09.TypeRef("System.Guid"), $.Int64, 
          $.Int64, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $asm09.TypeRef("System.Guid"), $.Int64, 
          $.Int64, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $asm09.TypeRef("System.Guid"), $.Int64, 
          $.Int64, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $asm09.TypeRef("System.Guid"), $.Int64, 
          $.Int64, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $asm09.TypeRef("System.Guid"), $.Int64, 
          $.Int64, $.String, 
          $asm09.TypeRef("System.Guid"), $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $.String, $.Int64, 
          $.String, $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteTransferEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), 
          $asm09.TypeRef("System.Guid"), $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "invokeControllerCallback", $asm09.TypeRef("System.Action")); 
    $.Field({Static:false, Public:false}, "end2EndActivityTracingEnabled", $.Boolean); 
    $.Property({Static:false, Public:false}, "ControllerCallBack", $asm09.TypeRef("System.Action"));

    $.Property({Static:false, Public:false}, "IsEnd2EndActivityTracingEnabled", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Runtime.Interop");
/* class System.Runtime.Interop.UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.Interop.UnsafeNativeMethods", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "CreateWaitableTimer", 
      new JSIL.MethodSignature($asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"), [
          $asm09.TypeRef("System.IntPtr"), $.Boolean, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DebugBreak", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EventActivityIdControl", 
      new JSIL.MethodSignature($.UInt32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Guid")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EventRegister", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Guid")]), $asm12.TypeRef("System.Runtime.Interop.UnsafeNativeMethods/EtwEnableCallback"), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EventUnregister", 
      new JSIL.MethodSignature($.UInt32, [$.Int64], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EventWrite", 
      new JSIL.MethodSignature($.UInt32, [
          $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Runtime.Interop.UnsafeNativeMethods/EventData")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EventWriteString", 
      new JSIL.MethodSignature($.UInt32, [
          $.Int64, $.Byte, 
          $.Int64, $jsilcore.TypeRef("JSIL.Pointer", [$.Char])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EventWriteTransfer", 
      new JSIL.MethodSignature($.UInt32, [
          $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Guid")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Guid")]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$asm12.TypeRef("System.Runtime.Interop.UnsafeNativeMethods/EventData")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetComputerName", 
      new JSIL.MethodSignature($.String, [$asm12.TypeRef("System.Runtime.ComputerNameFormat")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetComputerNameEx", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Runtime.ComputerNameFormat"), $asm09.TypeRef("System.Text.StringBuilder"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetSystemTimeAdjustment", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetSystemTimeAsFileTime", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsDebuggerPresent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OutputDebugString", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "QueryPerformanceCounter", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "RegisterEventSource", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Runtime.Interop.SafeEventLogWriteHandle"), [$.String, $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ReportEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Runtime.InteropServices.SafeHandle"), $.UInt16, 
          $.UInt16, $.UInt32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.UInt16, 
          $.UInt32, $asm09.TypeRef("System.Runtime.InteropServices.HandleRef"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SetWaitableTimer", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int64]), 
          $.Int32, $asm09.TypeRef("System.IntPtr"), 
          $asm09.TypeRef("System.IntPtr"), $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:true }, "KERNEL32", "kernel32.dll"); 
    $.Constant({Static:true , Public:true }, "ADVAPI32", "advapi32.dll"); 
    $.Constant({Static:true , Public:true }, "ERROR_INVALID_HANDLE", 6); 
    $.Constant({Static:true , Public:true }, "ERROR_MORE_DATA", 234); 
    $.Constant({Static:true , Public:true }, "ERROR_ARITHMETIC_OVERFLOW", 534); 
    $.Constant({Static:true , Public:true }, "ERROR_NOT_ENOUGH_MEMORY", 8); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* struct System.Runtime.Interop.UnsafeNativeMethods/EventData */ 

(function EventData$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Runtime.Interop.UnsafeNativeMethods/EventData", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "DataPointer", $.UInt64); 
    $.Field({Static:false, Public:false}, "Size", $.UInt32); 
    $.Field({Static:false, Public:false}, "Reserved", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Runtime.Interop.UnsafeNativeMethods/EtwEnableCallback */ 

JSIL.MakeDelegate("System.Runtime.Interop.UnsafeNativeMethods/EtwEnableCallback", false, []);

/* class System.Runtime.Interop.SafeEventLogWriteHandle */ 

(function SafeEventLogWriteHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "System.Runtime.Interop.SafeEventLogWriteHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeregisterEventSource", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.IntPtr")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "RegisterEventSource", 
      new JSIL.MethodSignature($.Type, [$.String, $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

})();

/* class System.Runtime.InternalSR */ 

(function InternalSR$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.InternalSR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNullOrEmpty", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AsyncEventArgsCompletedTwice", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AsyncEventArgsCompletionPending", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AsyncResultCompletedTwice", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BufferAllocationFailed", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BufferedOutputStreamQuotaExceeded", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotConvertObject", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EtwAPIMaxStringCountExceeded", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EtwMaxNumberArgumentsExceeded", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EtwRegistrationFailed", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FailFastMessage", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ActionItemIsAlreadyScheduled", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AsyncCallbackThrewException", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AsyncResultAlreadyEnded", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BadCopyToArray", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BufferIsNotRightSizeForBufferManager", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Globalization.CultureInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "get_DictionaryIsReadOnly", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidAsyncResult", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidAsyncResultImplementationGeneric", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidNullAsyncResult", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidSemaphoreExit", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_KeyCollectionUpdatesNotAllowed", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_KeyNotFoundInDictionary", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustCancelOldTimer", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NullKeyAlreadyPresent", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ReadNotSupported", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceManager", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Resources.ResourceManager"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SeekNotSupported", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SFxTaskNotStarted", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ThreadNeutralSemaphoreAborted", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ValueCollectionUpdatesNotAllowed", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ValueMustBeNonNegative", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncompatibleArgumentType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidAsyncResultImplementation", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LockTimeoutExceptionMessage", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "set_Culture", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Globalization.CultureInfo")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "ShipAssertExceptionMessage", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TaskTimedOutError", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimeoutInputQueueDequeue", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimeoutMustBeNonNegative", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimeoutMustBePositive", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimeoutOnOperation", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.Field({Static:true , Public:false}, "resourceManager", $asm09.TypeRef("System.Resources.ResourceManager")); 
    $.Field({Static:true , Public:false}, "resourceCulture", $asm09.TypeRef("System.Globalization.CultureInfo")); 
    $.Property({Static:true , Public:false}, "ResourceManager", $asm09.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm09.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:false}, "ActionItemIsAlreadyScheduled", $.String);

    $.Property({Static:true , Public:false}, "AsyncCallbackThrewException", $.String);

    $.Property({Static:true , Public:false}, "AsyncResultAlreadyEnded", $.String);

    $.Property({Static:true , Public:false}, "DictionaryIsReadOnly", $.String);

    $.Property({Static:true , Public:false}, "InvalidAsyncResult", $.String);

    $.Property({Static:true , Public:false}, "InvalidSemaphoreExit", $.String);

    $.Property({Static:true , Public:false}, "MustCancelOldTimer", $.String);

    $.Property({Static:true , Public:false}, "BufferIsNotRightSizeForBufferManager", $.String);

    $.Property({Static:true , Public:false}, "ReadNotSupported", $.String);

    $.Property({Static:true , Public:false}, "SeekNotSupported", $.String);

    $.Property({Static:true , Public:false}, "ThreadNeutralSemaphoreAborted", $.String);

    $.Property({Static:true , Public:false}, "ValueMustBeNonNegative", $.String);

    $.Property({Static:true , Public:false}, "BadCopyToArray", $.String);

    $.Property({Static:true , Public:false}, "KeyNotFoundInDictionary", $.String);

    $.Property({Static:true , Public:false}, "InvalidAsyncResultImplementationGeneric", $.String);

    $.Property({Static:true , Public:false}, "InvalidNullAsyncResult", $.String);

    $.Property({Static:true , Public:false}, "NullKeyAlreadyPresent", $.String);

    $.Property({Static:true , Public:false}, "KeyCollectionUpdatesNotAllowed", $.String);

    $.Property({Static:true , Public:false}, "ValueCollectionUpdatesNotAllowed", $.String);

    $.Property({Static:true , Public:false}, "SFxTaskNotStarted", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.TraceCore */ 

(function TraceCore$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.TraceCore", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ActionItemCallbackInvoked", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ActionItemCallbackInvokedIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "ActionItemScheduled", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ActionItemScheduledIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "AppDomainUnload", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.String, 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AppDomainUnloadIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BufferPoolAllocation", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BufferPoolAllocationIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "BufferPoolChangeQuota", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BufferPoolChangeQuotaIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "CreateEventDescriptors", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EnsureEventDescriptors", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EtwUnhandledException", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.String, 
          $asm09.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EtwUnhandledExceptionIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Globalization.CultureInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceManager", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Resources.ResourceManager"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandledException", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.String, 
          $asm09.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandledExceptionError", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.String, 
          $asm09.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandledExceptionErrorIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandledExceptionIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandledExceptionVerbose", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.String, 
          $asm09.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandledExceptionVerboseIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandledExceptionWarning", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.String, 
          $asm09.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandledExceptionWarningIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEtwEventEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "set_Culture", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Globalization.CultureInfo")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "ShipAssertExceptionMessage", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ShipAssertExceptionMessageIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowingEtwException", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.String, 
          $.String, $asm09.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowingEtwExceptionIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "ThrowingEtwExceptionVerbose", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.String, 
          $.String, $asm09.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowingEtwExceptionVerboseIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "ThrowingException", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.String, 
          $.String, $asm09.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowingExceptionIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowingExceptionVerbose", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.String, 
          $.String, $asm09.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowingExceptionVerboseIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceCodeEventLogCritical", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $asm12.TypeRef("System.Runtime.Diagnostics.TraceRecord")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceCodeEventLogCriticalIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceCodeEventLogError", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $asm12.TypeRef("System.Runtime.Diagnostics.TraceRecord")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceCodeEventLogErrorIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceCodeEventLogInfo", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $asm12.TypeRef("System.Runtime.Diagnostics.TraceRecord")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceCodeEventLogInfoIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceCodeEventLogVerbose", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $asm12.TypeRef("System.Runtime.Diagnostics.TraceRecord")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceCodeEventLogVerboseIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceCodeEventLogWarning", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $asm12.TypeRef("System.Runtime.Diagnostics.TraceRecord")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TraceCodeEventLogWarningIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledException", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.String, 
          $asm09.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledExceptionIsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.Int32, 
          $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), $.String, 
          $.String, $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.Int32, 
          $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), $.String, 
          $.String, $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.Int32, 
          $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.Int32, 
          $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), $.Int32, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.Int32, 
          $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), $.Int32, 
          $.Int32, $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteEtwEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.Int32, 
          $asm12.TypeRef("System.Runtime.Diagnostics.EventTraceActivity"), $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteTraceSource", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Runtime.Diagnostics.EtwDiagnosticTrace"), $.Int32, 
          $.String, $asm12.TypeRef("System.Runtime.TracePayload")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:true , Public:false}, "resourceManager", $asm09.TypeRef("System.Resources.ResourceManager")); 
    $.Field({Static:true , Public:false}, "resourceCulture", $asm09.TypeRef("System.Globalization.CultureInfo")); 
    $.Field({Static:true , Public:false}, "eventDescriptors", $jsilcore.TypeRef("System.Array", [$asm12.TypeRef("System.Runtime.Diagnostics.EventDescriptor")]))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute")); 
    $.Field({Static:true , Public:false}, "syncLock", $.Object); 
    $.Field({Static:true , Public:false}, "eventDescriptorsCreated", $asm09.TypeRef("System.Boolean")); 
    $.Property({Static:true , Public:false}, "ResourceManager", $asm09.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm09.TypeRef("System.Globalization.CultureInfo"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

