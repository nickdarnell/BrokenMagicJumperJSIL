/* Generated by JSIL v0.7.8 build 22841. See http://jsil.org/ for more information. */ 
/* Generating type stubs only */ 
var $asm01 = JSIL.DeclareAssembly("Microsoft.Xna.Framework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553");

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Xna");
JSIL.DeclareNamespace("Microsoft.Xna.Framework");
/* interface Microsoft.Xna.Framework.IProxyProcessHandler */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.IProxyProcessHandler", false, [], function ($) {
    $.Method({}, "get_ProxyProcessWantsToTalk", new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [], []));
    $.Method({}, "get_SharedAsyncDataSafeToWrite", new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [], []));
    $.Method({}, "get_AsyncHResult", new JSIL.MethodSignature($.UInt32, [], []));
    $.Method({}, "get_AsyncManagedCallType", new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType"), [], []));
    $.Method({}, "get_AsyncManagedCallArgument", new JSIL.MethodSignature($.UInt32, [], []));
    $.Property({}, "AsyncManagedCallArgument");
    $.Property({}, "AsyncManagedCallType");
    $.Property({}, "AsyncHResult");
    $.Property({}, "SharedAsyncDataSafeToWrite");
    $.Property({}, "ProxyProcessWantsToTalk");
  }, []);

/* struct NativeToManagedCallback */ 

(function NativeToManagedCallback$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "NativeToManagedCallback", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "originalWaitHandle", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])); 
    $.Field({Static:false, Public:true }, "dupedWaitHandle", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])); 
    $.Field({Static:false, Public:true }, "pContext", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.WindowsManagedCallbackHandler */ 

(function WindowsManagedCallbackHandler$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.WindowsManagedCallbackHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, "$exWindowsManagedCallbackHandler", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "$tWindowsManagedCallbackHandler", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CallManagedFunctionForMe", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType"), $asm09.TypeRef("System.UInt32")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallManagedFunctionForMeImpl", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType"), $asm09.TypeRef("System.UInt32")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasRoomForAnotherWaitHandle", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Initialize", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeInstance", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetProxyProcessHandler", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$asm01.TypeRef("Microsoft.Xna.Framework.IProxyProcessHandler")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WaitForAsyncOperationToFinish", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.UInt32")])], [])
    );

    $.Field({Static:false, Public:false}, "_parentExitEvent", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])); 
    $.Field({Static:false, Public:false}, "_callManagedPlease", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])); 
    $.Field({Static:false, Public:false}, "_managedFunctionDataCanBeWritten", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])); 
    $.Field({Static:false, Public:false}, "_proxyProcessNeedsToChange", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])); 
    $.Field({Static:false, Public:false}, "_newCallbackRegistered", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])); 
    $.Field({Static:false, Public:false}, "_proxyProcessHandler", $asm01.TypeRef("Microsoft.Xna.Framework.IProxyProcessHandler")); 
    $.Field({Static:false, Public:false}, "_proxyProcessHandlerSyncObject", $.Object); 
    $.Field({Static:true , Public:false}, "instance", $.Type); 
    $.Field({Static:false, Public:false}, "_managedCallType", $asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType")); 
    $.Field({Static:false, Public:false}, "_managedCallArgs", $asm09.TypeRef("System.UInt32")); 
    $.Field({Static:false, Public:false}, "nativeToManagedCallbacks", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("NativeToManagedCallback")])); 
    $.Property({Static:true , Public:true }, "Instance", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Audio");
/* class Microsoft.Xna.Framework.Audio.AudioRendererShutdownHandler */ 

(function AudioRendererShutdownHandler$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.AudioRendererShutdownHandler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, "$exAudioRendererShutdownHandler", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "$tAudioRendererShutdownHandler", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "AppExitingEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false}, "instance", $.Type); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.MicrophoneUnsafeNativeMethods */ 

(function MicrophoneUnsafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.MicrophoneUnsafeNativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMicrophone", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "DestroyMicrophone", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetCaptureBufferDuration", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetData", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [
          $.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetMicrophoneCount", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Pointer", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetName", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [
          $.UInt32, $asm09.TypeRef("System.Text.StringBuilder"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetName", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [
          $.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$.UInt16]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSampleRate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetState", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.MicrophoneCaptureState")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetState", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.MicrophoneCaptureState")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsDefault", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsHeadset", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetCaptureBufferDuration", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ShutdownCaptureEngine", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Start", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Stop", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Audio.VoiceState */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Audio.VoiceState", false, {
    Playing: 1, 
    Stopping: 2, 
    Stopped: 4, 
    Paused: 8
  }, true
);

/* enum Microsoft.Xna.Framework.Audio.MicrophoneCaptureState */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Audio.MicrophoneCaptureState", false, {
    MicStarted: 1, 
    MicStopped: 2
  }, true
);

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Media");
/* enum Microsoft.Xna.Framework.Media.MediaState */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Media.MediaState", true, {
    Stopped: 0, 
    Playing: 1, 
    Paused: 2
  }, false
);

/* class Microsoft.Xna.Framework.Media.ImagingUnsafeNativeMethods */ 

(function ImagingUnsafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.ImagingUnsafeNativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CloseKernelStream", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateKernelStream", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $asm09.TypeRef("System.UInt32"), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.UInt32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetStreamLength", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$.Int64])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReadFromStream", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [
          $.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $asm09.TypeRef("System.UInt32"), $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.UInt32")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SeekInStream", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [
          $.UInt32, $.Int64, 
          $asm09.TypeRef("System.UInt32"), $jsilcore.TypeRef("JSIL.Pointer", [$.Int64])
        ], [])
    );

    $.Field({Static:true , Public:true }, "ImagingSubsystemSyncObject", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.UniqueBSTRCollection */ 

(function UniqueBSTRCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.UniqueBSTRCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.UInt16])], [])
    );

    $.Field({Static:false, Public:false}, "seenStrings", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Boolean])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.WmpInterface */ 

(function WmpInterface$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Runtime.ConstrainedExecution.CriticalFinalizerObject"), 
      Name: "Microsoft.Xna.Framework.Media.WmpInterface", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, "$exWmpInterface", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "$tWmpInterface", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddTrackedMediaHandle", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CleanupAllTrackedMediaHandlesAndShutdownWmp", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnsureWMPInitialized", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaAlbum_GetArtist", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaAlbum_GetDuration", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaAlbum_GetGenre", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaAlbum_GetSongs", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaArtist_GetAlbums", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaArtist_GetSongs", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaGenre_GetAlbums", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaGenre_GetSongs", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaItem_GetName", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [
          $.UInt32, $asm09.TypeRef("System.Text.StringBuilder"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaItem_IsEqual", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaItem_Release", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaLibrary_GetAlbums", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaLibrary_GetArtists", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaLibrary_GetGenres", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaLibrary_GetPlaylists", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaLibrary_GetSongs", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaList_GetCount", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaList_GetItemAtIndex", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaList_Release", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaPlaylist_GetDuration", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaPlaylist_GetSongs", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_EnableVisualization", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_GetActiveSongIndex", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_GetPlayPosition", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_GetPlayState", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaState")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_GetRepeat", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_GetShuffle", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_GetSongAtIndex", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_GetSongCount", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_GetVisualizationData", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [
          $jsilcore.TypeRef("System.Array", [$.Single]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Single]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_GetVolume", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_IsMuted", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_IsVisualizationEnabled", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_MoveNext", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_MovePrev", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_MoveTo", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_Pause", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_PlaySong", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_PlaySongList", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_Resume", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_SetMute", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_SetRepeat", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_SetShuffle", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_SetVolume", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaQueue_Stop", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaSong_CreateHandle", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [
          $.Boolean, $.String, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaSong_GetAlbum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaSong_GetArtist", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaSong_GetDuration", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaSong_GetGenre", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaSong_GetPlayCount", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaSong_GetRating", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaSong_GetTrackNumber", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MediaSong_IsRestricted", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "RemoveTrackedMediaHandle", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_Create", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_GetPlayPosition", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_GetState", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaState")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_Pause", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_Play", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [
          $.UInt32, $.String, 
          $asm09.TypeRef("System.UInt32"), $asm09.TypeRef("System.UInt32"), 
          $asm09.TypeRef("System.UInt32"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_Release", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_Resume", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_SetLooping", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_SetMute", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_SetVolume", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_Start", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "VideoDecoder_Stop", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$.UInt32], [])
    );

    $.Constant({Static:true , Public:true }, "visualizationBufferSize", 256); 
    $.Field({Static:true , Public:false}, "shuffleStr", $jsilcore.TypeRef("JSIL.Pointer", [$.UInt16]), 0); 
    $.Field({Static:true , Public:false}, "loopStr", $jsilcore.TypeRef("JSIL.Pointer", [$.UInt16]), 0); 
    $.Field({Static:true , Public:false}, "instance", $.Type); 
    $.Field({Static:true , Public:false}, "allMediaHandles", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.UInt32, $.Object])); 
    $.Field({Static:true , Public:false}, "pSyncObject", $.Object); 
    $.Field({Static:true , Public:false}, "playingSongName", $.String, null); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Input");
/* class Microsoft.Xna.Framework.Input.Keyboard */ 

(function Keyboard$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Input.Keyboard", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "GetState", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetState", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"), [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")], [])
    );

    $.Field({Static:true , Public:false}, "DisableHomeKey", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Input.WindowMessageHooker */ 

(function WindowMessageHooker$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Input.WindowMessageHooker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectDeadHooks", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WindowHandle", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveCurrentHook", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WindowHandle", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IntPtr")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WndProc", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.IntPtr")]), [
          $asm09.TypeRef("System.IntPtr"), $.UInt32, 
          $asm09.TypeRef("System.IntPtr"), $asm09.TypeRef("System.IntPtr")
        ], [])
    );

    $.Constant({Static:true , Public:false}, "WM_ACTIVATE", 6); 
    $.Constant({Static:true , Public:false}, "WM_SETCURSOR", 32); 
    $.Constant({Static:true , Public:false}, "WM_INPUTLANGCHANGE", 81); 
    $.Constant({Static:true , Public:false}, "WM_NCACTIVATE", 134); 
    $.Constant({Static:true , Public:false}, "WM_KEYDOWN", 256); 
    $.Constant({Static:true , Public:false}, "WM_KEYUP", 257); 
    $.Constant({Static:true , Public:false}, "WM_CHAR", 258); 
    $.Constant({Static:true , Public:false}, "WM_IME_STARTCOMPOSITION", 269); 
    $.Constant({Static:true , Public:false}, "WM_IME_ENDCOMPOSITION", 270); 
    $.Constant({Static:true , Public:false}, "WM_IME_COMPOSITION", 271); 
    $.Constant({Static:true , Public:false}, "WM_IME_SETCONTEXT", 641); 
    $.Constant({Static:true , Public:false}, "WM_IME_NOTIFY", 642); 
    $.Constant({Static:true , Public:false}, "WM_IME_CHAR", 646); 
    $.Constant({Static:true , Public:false}, "WM_MOUSEMOVE", 512); 
    $.Constant({Static:true , Public:false}, "WM_LBUTTONDOWN", 513); 
    $.Constant({Static:true , Public:false}, "WM_LBUTTONUP", 514); 
    $.Constant({Static:true , Public:false}, "WM_LBUTTONDBLCLK", 515); 
    $.Constant({Static:true , Public:false}, "WM_RBUTTONDOWN", 516); 
    $.Constant({Static:true , Public:false}, "WM_RBUTTONUP", 517); 
    $.Constant({Static:true , Public:false}, "WM_RBUTTONDBLCLK", 518); 
    $.Constant({Static:true , Public:false}, "WM_MBUTTONDOWN", 519); 
    $.Constant({Static:true , Public:false}, "WM_MBUTTONUP", 520); 
    $.Constant({Static:true , Public:false}, "WM_MBUTTONDBLCLK", 521); 
    $.Constant({Static:true , Public:false}, "WM_MOUSEWHEEL", 522); 
    $.Constant({Static:true , Public:false}, "WM_XBUTTONDOWN", 523); 
    $.Constant({Static:true , Public:false}, "WM_XBUTTONUP", 524); 
    $.Constant({Static:true , Public:false}, "WM_XBUTTONDBLCLK", 525); 
    $.Constant({Static:true , Public:false}, "VK_HOME", 36); 
    $.Field({Static:false, Public:false}, "currentHook", $asm01.TypeRef("Microsoft.Xna.Framework.Input.WindowMessageHooker/Hook")); 
    $.Field({Static:true , Public:false}, "deadHooks", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.WindowMessageHooker/Hook")])); 
    $.Field({Static:true , Public:false}, "clobberDetectionMessage", $.UInt32); 
    $.Property({Static:false, Public:true }, "WindowHandle", $asm09.TypeRef("System.IntPtr"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Input.WindowMessageHooker/Hook */ 

(function Hook$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Input.WindowMessageHooker/Hook", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.WindowMessageHooker"), $asm09.TypeRef("System.IntPtr")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryRemove", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WndProc", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [
          $asm09.TypeRef("System.IntPtr"), $.UInt32, 
          $asm09.TypeRef("System.IntPtr"), $asm09.TypeRef("System.IntPtr")
        ], [])
    );

    $.Field({Static:false, Public:false}, "parent", $asm01.TypeRef("Microsoft.Xna.Framework.Input.WindowMessageHooker")); 
    $.Field({Static:false, Public:true }, "hWnd", $asm09.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "previousWndProc", $asm09.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "wndProcDelegate", $asm01.TypeRef("Microsoft.Xna.Framework.Input.WindowMessageHooker/Hook/WndProcDelegate")); 
    $.Field({Static:false, Public:false}, "wndProcFunction", $asm09.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "isHookRemoved", $.Boolean); 
    $.Field({Static:false, Public:true }, "isWindowDestroyed", $.Boolean); 
    $.Field({Static:false, Public:true }, "seenClobberDetectionMessage", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Xna.Framework.Input.WindowMessageHooker/Hook/WndProcDelegate */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Input.WindowMessageHooker/Hook/WndProcDelegate", false, []);

/* class Microsoft.Xna.Framework.Input.MouseMessageHooker */ 

(function MouseMessageHooker$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Input.WindowMessageHooker"), 
      Name: "Microsoft.Xna.Framework.Input.MouseMessageHooker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CurrentWheel", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WndProc", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.IntPtr")]), [
          $asm09.TypeRef("System.IntPtr"), $.UInt32, 
          $asm09.TypeRef("System.IntPtr"), $asm09.TypeRef("System.IntPtr")
        ], [])
    );

    $.Field({Static:true , Public:false}, "currentWheel", $.Int32); 
    $.Property({Static:true , Public:false}, "CurrentWheel", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Input.Mouse */ 

(function Mouse$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Input.Mouse", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "get_WindowHandle", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetState", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_WindowHandle", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IntPtr")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetPosition", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.Field({Static:true , Public:false}, "mouseMessageHooker", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseMessageHooker")); 
    $.Property({Static:true , Public:true }, "WindowHandle", $asm09.TypeRef("System.IntPtr"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Xna.Framework.Media.WmpProxyFunction */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Media.WmpProxyFunction", false, []);

/* class Microsoft.Xna.Framework.Media.WmpProxyThread */ 

(function WmpProxyThread$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.WmpProxyThread", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AppDomainUnloaded", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DestroyHwnd", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleMessage", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Initialize", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ProxyThreadFunc", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PumpMessages", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "RunInRightApartment", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$asm01.TypeRef("Microsoft.Xna.Framework.Media.WmpProxyFunction")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WaitForProxyThread", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [], [])
    );

    $.Field({Static:true , Public:false}, "m_InitializationState", $asm01.TypeRef("Microsoft.Xna.Framework.Media.WmpProxyThreadState"), function ($pi) {
        return $asm01.Microsoft.Xna.Framework.Media.WmpProxyThreadState.NotInitialized;
      }); 
    $.Field({Static:true , Public:false}, "m_ProxyFunction", $asm01.TypeRef("Microsoft.Xna.Framework.Media.WmpProxyFunction"), null); 
    $.Field({Static:true , Public:false}, "m_ResultOfFunction", $asm09.TypeRef("System.Int32")); 
    $.Field({Static:true , Public:false}, "m_FunctionCallHandle", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])); 
    $.Field({Static:true , Public:false}, "m_FunctionReturnHandle", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])); 
    $.Field({Static:true , Public:false}, "m_AppdomainUnloadHandle", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])); 
    $.Field({Static:true , Public:false}, "m_ProxyThreadExit", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])); 
    $.Field({Static:true , Public:false}, "m_CaughtException", $asm09.TypeRef("System.Exception"), null); 
    $.Field({Static:true , Public:false}, "m_FunctionCallMessage", $.UInt32); 
    $.Field({Static:true , Public:false}, "m_WindowClassRegistered", $.Boolean); 
    $.Field({Static:true , Public:false}, "syncObject", $.Object); 
    $.Field({Static:true , Public:false}, "m_ProxyWindowName", $jsilcore.TypeRef("JSIL.Pointer", [$.UInt16])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Media.WmpProxyThreadState */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Media.WmpProxyThreadState", false, {
    Initialized: 0, 
    NotInitialized: 1, 
    InitializationFailure: 2, 
    Shutdown: 3
  }, false
);

JSIL.DeclareNamespace("$lCrtImplementationDetails$g");
/* class <CrtImplementationDetails>.ModuleLoadException */ 

(function ModuleLoadException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Exception"), 
      Name: "<CrtImplementationDetails>.ModuleLoadException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Constant({Static:true , Public:true }, "Nested", "A nested exception occurred after the primary exception that caused the C++ module to fail to load.\n"); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <CrtImplementationDetails>.ModuleLoadExceptionHandlerException */ 

(function ModuleLoadExceptionHandlerException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("<CrtImplementationDetails>.ModuleLoadException"), 
      Name: "<CrtImplementationDetails>.ModuleLoadExceptionHandlerException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm09.TypeRef("System.Exception"), 
          $asm09.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NestedException", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_NestedException", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Constant({Static:true , Public:false}, "formatString", "\n{0}: {1}\n--- Start of primary exception ---\n{2}\n--- End of primary exception ---\n\n--- Start of nested exception ---\n{3}\n--- End of nested exception ---\n"); 
    $.Field({Static:false, Public:false}, "backing_store$NestedException", $asm09.TypeRef("System.Exception")); 
    $.Property({Static:false, Public:true }, "NestedException", $asm09.TypeRef("System.Exception"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <CrtImplementationDetails>.ModuleUninitializer */ 

(function ModuleUninitializer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Collections.Stack"), 
      Name: "<CrtImplementationDetails>.ModuleUninitializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AddHandler", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SingletonDomainUnload", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.EventArgs")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "lock", $.Object); 
    $.Field({Static:true , Public:false}, "_ModuleUninitializer", $.Type); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.AssemblyRefs */ 

(function AssemblyRefs$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.AssemblyRefs", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.AssemblyRefs/Windows */ 

(function Windows$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.AssemblyRefs/Windows", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "TokenOnly", "842cf8be1de50553"); 
    $.Constant({Static:true , Public:false}, "PublicKey", "0024000004800000140100000602000000240000525341310008000001000100c7835d93a2bf56c5649c2a0b9af5806803b7a4d0845e70c70f4b57d0d98d308301707d61625955bf0aa34590999324f362aedb9875ec9535a507399cf7dcaf41ab3672a6f2d2de1654fd3bda94c2ac80f7ebf73641c4d57f853a792ba33b442ae010895109171903d1b628caf31d1370fdd8774b3ce58fb2809fbfdb0cfddc7c0fe6ca9ee904c1c001db280b9d583ce3f586a6d7f412104a06a7f183a0c263bb0d9a5984e3c76d2052ad01e0f743ae4b5e19fcc1b2d6c9692de99699b0f7972f4b466f0a53e0ca18de547be55adf43a36564165bfc28de25f8a7b43038b22c07fe211d33cb24ad93fef0de4d67b28236bee129b08b943b1dbf702a6a305a6ab6"); 
    $.Constant({Static:true , Public:false}, "AudioImporters", "Microsoft.Xna.Framework.Content.Pipeline.AudioImporters, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553, processorArchitecture=MSIL"); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_ignore", $asm09.TypeRef("System.Type"), $thisType.__Type__); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.AssemblyRefs/Xbox360 */ 

(function Xbox360$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.AssemblyRefs/Xbox360", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "TokenOnly", "842cf8be1de50553"); 
    $.Constant({Static:true , Public:false}, "PublicKey", "0024000004800000140100000602000000240000525341310008000001000100c7835d93a2bf56c5649c2a0b9af5806803b7a4d0845e70c70f4b57d0d98d308301707d61625955bf0aa34590999324f362aedb9875ec9535a507399cf7dcaf41ab3672a6f2d2de1654fd3bda94c2ac80f7ebf73641c4d57f853a792ba33b442ae010895109171903d1b628caf31d1370fdd8774b3ce58fb2809fbfdb0cfddc7c0fe6ca9ee904c1c001db280b9d583ce3f586a6d7f412104a06a7f183a0c263bb0d9a5984e3c76d2052ad01e0f743ae4b5e19fcc1b2d6c9692de99699b0f7972f4b466f0a53e0ca18de547be55adf43a36564165bfc28de25f8a7b43038b22c07fe211d33cb24ad93fef0de4d67b28236bee129b08b943b1dbf702a6a305a6ab6"); 
    $.Constant({Static:true , Public:false}, "AudioImporters", "Microsoft.Xna.Framework.Content.Pipeline.AudioImporters, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553, processorArchitecture=MSIL"); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_ignore", $asm09.TypeRef("System.Type"), $thisType.__Type__); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.AssemblyRefs/WindowsMobile */ 

(function WindowsMobile$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.AssemblyRefs/WindowsMobile", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "TokenOnly", "842cf8be1de50553"); 
    $.Constant({Static:true , Public:false}, "PublicKey", "0024000004800000140100000602000000240000525341310008000001000100c7835d93a2bf56c5649c2a0b9af5806803b7a4d0845e70c70f4b57d0d98d308301707d61625955bf0aa34590999324f362aedb9875ec9535a507399cf7dcaf41ab3672a6f2d2de1654fd3bda94c2ac80f7ebf73641c4d57f853a792ba33b442ae010895109171903d1b628caf31d1370fdd8774b3ce58fb2809fbfdb0cfddc7c0fe6ca9ee904c1c001db280b9d583ce3f586a6d7f412104a06a7f183a0c263bb0d9a5984e3c76d2052ad01e0f743ae4b5e19fcc1b2d6c9692de99699b0f7972f4b466f0a53e0ca18de547be55adf43a36564165bfc28de25f8a7b43038b22c07fe211d33cb24ad93fef0de4d67b28236bee129b08b943b1dbf702a6a305a6ab6"); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_ignore", $asm09.TypeRef("System.Type"), $thisType.__Type__); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.GameClock */ 

(function GameClock$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.GameClock", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AdvanceFrameTime", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CounterToTimeSpan", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [$.Int64], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Counter", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElapsedAdjustedTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElapsedTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Frequency", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Resume", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Suspend", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateElapsedTime", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "baseRealTime", $.Int64); 
    $.Field({Static:false, Public:false}, "lastRealTime", $.Int64); 
    $.Field({Static:false, Public:false}, "lastRealTimeValid", $.Boolean); 
    $.Field({Static:false, Public:false}, "suspendCount", $.Int32); 
    $.Field({Static:false, Public:false}, "suspendStartTime", $.Int64); 
    $.Field({Static:false, Public:false}, "timeLostToSuspension", $.Int64); 
    $.Field({Static:false, Public:false}, "lastRealTimeCandidate", $.Int64); 
    $.Field({Static:false, Public:false}, "currentTimeOffset", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "currentTimeBase", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "elapsedTime", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "elapsedAdjustedTime", $asm09.TypeRef("System.TimeSpan")); 
    $.Property({Static:false, Public:false}, "CurrentTime", $asm09.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:false}, "ElapsedTime", $asm09.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:false}, "ElapsedAdjustedTime", $asm09.TypeRef("System.TimeSpan"));

    $.Property({Static:true , Public:false}, "Counter", $.Int64);

    $.Property({Static:true , Public:false}, "Frequency", $.Int64);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Content");
/* class Microsoft.Xna.Framework.Content.ContentSerializerAttribute */ 

(function ContentSerializerAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "Microsoft.Xna.Framework.Content.ContentSerializerAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowNull", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CollectionItemName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FlattenContent", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasCollectionItemName", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Optional", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SharedResource", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AllowNull", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CollectionItemName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ElementName", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FlattenContent", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Optional", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SharedResource", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "elementName", $.String); 
    $.Field({Static:false, Public:false}, "flattenContent", $.Boolean); 
    $.Field({Static:false, Public:false}, "optional", $.Boolean); 
    $.Field({Static:false, Public:false}, "allowNull", $.Boolean); 
    $.Field({Static:false, Public:false}, "sharedResource", $.Boolean); 
    $.Field({Static:false, Public:false}, "collectionItemName", $.String); 
    $.Property({Static:false, Public:true }, "ElementName", $.String);

    $.Property({Static:false, Public:true }, "FlattenContent", $.Boolean);

    $.Property({Static:false, Public:true }, "Optional", $.Boolean);

    $.Property({Static:false, Public:true }, "AllowNull", $.Boolean);

    $.Property({Static:false, Public:true }, "SharedResource", $.Boolean);

    $.Property({Static:false, Public:true }, "CollectionItemName", $.String);

    $.Property({Static:false, Public:true }, "HasCollectionItemName", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* class Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute */ 

(function ContentSerializerCollectionItemNameAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CollectionItemName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "collectionItemName", $.String); 
    $.Property({Static:false, Public:true }, "CollectionItemName", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.Class]; });

})();

/* class Microsoft.Xna.Framework.Content.ContentSerializerIgnoreAttribute */ 

(function ContentSerializerIgnoreAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "Microsoft.Xna.Framework.Content.ContentSerializerIgnoreAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* class Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute */ 

(function ContentSerializerTypeVersionAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeVersion", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false}, "typeVersion", $.Int32); 
    $.Property({Static:false, Public:true }, "TypeVersion", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Class", "Struct")]; });

})();

/* class Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute */ 

(function ContentSerializerRuntimeTypeAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RuntimeType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "runtimeType", $.String); 
    $.Property({Static:false, Public:true }, "RuntimeType", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Class", "Struct")]; });

})();

/* class Microsoft.Xna.Framework.Content.ContentLoadException */ 

(function ContentLoadException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Exception"), 
      Name: "Microsoft.Xna.Framework.Content.ContentLoadException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1032:ImplementStandardExceptionConstructors"]; });

})();

/* class Microsoft.Xna.Framework.Content.DecompressStream */ 

(function DecompressStream$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.IO.Stream"), 
      Name: "Microsoft.Xna.Framework.Content.DecompressStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DecompressNextBuffer", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadBufferFromDisk", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNextBufferFromDisk", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm09.TypeRef("System.IO.SeekOrigin")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Constant({Static:true , Public:false}, "CompressedBufferSize", 65536); 
    $.Constant({Static:true , Public:false}, "DecompressedBufferSize", 65536); 
    $.Field({Static:false, Public:false}, "baseStream", $asm09.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "compressedTodo", $.Int32); 
    $.Field({Static:false, Public:false}, "compressedSize", $.Int32); 
    $.Field({Static:false, Public:false}, "compressedPosition", $.Int32); 
    $.Field({Static:false, Public:false}, "compressedBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "decompressedTodo", $.Int32); 
    $.Field({Static:false, Public:false}, "decompressedSize", $.Int32); 
    $.Field({Static:false, Public:false}, "decompressedPosition", $.Int32); 
    $.Field({Static:false, Public:false}, "decompressedBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "decompressionContext", $asm09.TypeRef("System.IntPtr")); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ContentManager */ 

(function ContentManager$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.ContentManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IServiceProvider")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IServiceProvider"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RootDirectory", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ServiceProvider", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IServiceProvider"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetByteBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Load", 
      new JSIL.MethodSignature("!!0", [$.String], ["T"])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1004"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OpenStream", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IO.Stream"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAsset", 
      new JSIL.MethodSignature("!!0", [$.String, $asm09.TypeRef("System.Action`1", [$asm09.TypeRef("System.IDisposable")])], ["T"])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1004"]; });

    $.ExternalMethod({Static:false, Public:false}, "RecordDisposableObject", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IDisposable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RootDirectory", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Unload", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:false}, "contentExtension", ".xnb"); 
    $.Field({Static:false, Public:false}, "serviceProvider", $asm09.TypeRef("System.IServiceProvider")); 
    $.Field({Static:false, Public:false}, "rootDirectory", $.String); 
    $.Field({Static:false, Public:false}, "isRootDirectoryAbsolute", $.Boolean); 
    $.Field({Static:false, Public:false}, "fullRootDirectory", $.String); 
    $.Field({Static:false, Public:false}, "byteBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "weakByteBuffer", $asm09.TypeRef("System.WeakReference")); 
    $.Field({Static:false, Public:false}, "readAssetRecurseCount", $.Int32); 
    $.Field({Static:false, Public:false}, "loadedAssets", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object])); 
    $.Field({Static:false, Public:false}, "disposableAssets", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.IDisposable")])); 
    $.Property({Static:false, Public:true }, "ServiceProvider", $asm09.TypeRef("System.IServiceProvider"));

    $.Property({Static:false, Public:true }, "RootDirectory", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ResourceContentManager */ 

(function ResourceContentManager$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), 
      Name: "Microsoft.Xna.Framework.Content.ResourceContentManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IServiceProvider"), $asm09.TypeRef("System.Resources.ResourceManager")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OpenStream", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IO.Stream"), [$.String], [])
    );

    $.Field({Static:false, Public:false}, "resourceManager", $asm09.TypeRef("System.Resources.ResourceManager")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ContentTypeReader */ 

(function ContentTypeReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.ContentTypeReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanDeserializeIntoExistingObject", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeVersion", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")], [])
    );

    $.Field({Static:false, Public:false}, "targetType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "TargetIsValueType", $.Boolean); 
    $.Property({Static:false, Public:true }, "TargetType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeVersion", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CanDeserializeIntoExistingObject", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ContentTypeReader`1 */ 

(function ContentTypeReader$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), 
      Name: "Microsoft.Xna.Framework.Content.ContentTypeReader`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ArrayReader`1 */ 

(function ArrayReader$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.ArrayReader`1")])]), 
      Name: "Microsoft.Xna.Framework.Content.ArrayReader`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.ArrayReader`1")]), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.ArrayReader`1")])], [])
    );

    $.Field({Static:false, Public:false}, "elementReader", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.DictionaryReader`2 */ 

(function DictionaryReader$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [new JSIL.GenericParameter("Key", "Microsoft.Xna.Framework.Content.DictionaryReader`2"), new JSIL.GenericParameter("Value", "Microsoft.Xna.Framework.Content.DictionaryReader`2")])]), 
      Name: "Microsoft.Xna.Framework.Content.DictionaryReader`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["Key", "Value"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanDeserializeIntoExistingObject", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [new JSIL.GenericParameter("Key", "Microsoft.Xna.Framework.Content.DictionaryReader`2"), new JSIL.GenericParameter("Value", "Microsoft.Xna.Framework.Content.DictionaryReader`2")]), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [new JSIL.GenericParameter("Key", "Microsoft.Xna.Framework.Content.DictionaryReader`2"), new JSIL.GenericParameter("Value", "Microsoft.Xna.Framework.Content.DictionaryReader`2")])], [])
    );

    $.Field({Static:false, Public:false}, "keyReader", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
    $.Field({Static:false, Public:false}, "valueReader", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanDeserializeIntoExistingObject", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.EnumReader`1 */ 

(function EnumReader$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.EnumReader`1")]), 
      Name: "Microsoft.Xna.Framework.Content.EnumReader`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.EnumReader`1"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.EnumReader`1")], [])
    );

    $.Field({Static:false, Public:false}, "underlyingTypeReader", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ExternalReferenceReader */ 

(function ExternalReferenceReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), 
      Name: "Microsoft.Xna.Framework.Content.ExternalReferenceReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Object], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ListReader`1 */ 

(function ListReader$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm09.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.ListReader`1")])]), 
      Name: "Microsoft.Xna.Framework.Content.ListReader`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanDeserializeIntoExistingObject", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.ListReader`1")]), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm09.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.ListReader`1")])], [])
    );

    $.Field({Static:false, Public:false}, "elementReader", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanDeserializeIntoExistingObject", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.Vector2Reader */ 

(function Vector2Reader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), 
      Name: "Microsoft.Xna.Framework.Content.Vector2Reader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.Vector3Reader */ 

(function Vector3Reader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
      Name: "Microsoft.Xna.Framework.Content.Vector3Reader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.Vector4Reader */ 

(function Vector4Reader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")]), 
      Name: "Microsoft.Xna.Framework.Content.Vector4Reader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.MatrixReader */ 

(function MatrixReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
      Name: "Microsoft.Xna.Framework.Content.MatrixReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Matrix"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.QuaternionReader */ 

(function QuaternionReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
      Name: "Microsoft.Xna.Framework.Content.QuaternionReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Quaternion"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.PlaneReader */ 

(function PlaneReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")]), 
      Name: "Microsoft.Xna.Framework.Content.PlaneReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Plane"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Plane")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.PointReader */ 

(function PointReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")]), 
      Name: "Microsoft.Xna.Framework.Content.PointReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Point"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Point")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.RectangleReader */ 

(function RectangleReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")]), 
      Name: "Microsoft.Xna.Framework.Content.RectangleReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.BoundingBoxReader */ 

(function BoundingBoxReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), 
      Name: "Microsoft.Xna.Framework.Content.BoundingBoxReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.BoundingSphereReader */ 

(function BoundingSphereReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), 
      Name: "Microsoft.Xna.Framework.Content.BoundingSphereReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.BoundingFrustumReader */ 

(function BoundingFrustumReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")]), 
      Name: "Microsoft.Xna.Framework.Content.BoundingFrustumReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.RayReader */ 

(function RayReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Ray")]), 
      Name: "Microsoft.Xna.Framework.Content.RayReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Ray"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Ray")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.CurveReader */ 

(function CurveReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Curve")]), 
      Name: "Microsoft.Xna.Framework.Content.CurveReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanDeserializeIntoExistingObject", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Curve"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Curve")], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CanDeserializeIntoExistingObject", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ColorReader */ 

(function ColorReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Color")]), 
      Name: "Microsoft.Xna.Framework.Content.ColorReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Color"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Color")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.NullableReader`1 */ 

(function NullableReader$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm09.TypeRef("System.Nullable`1", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.NullableReader`1")])]), 
      Name: "Microsoft.Xna.Framework.Content.NullableReader`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.NullableReader`1")]), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm09.TypeRef("System.Nullable`1", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Content.NullableReader`1")])], [])
    );

    $.Field({Static:false, Public:false}, "underlyingTypeReader", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ObjectReader */ 

(function ObjectReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), 
      Name: "Microsoft.Xna.Framework.Content.ObjectReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Object], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.StringReader */ 

(function StringReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm09.TypeRef("System.String")]), 
      Name: "Microsoft.Xna.Framework.Content.StringReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.String], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ByteReader */ 

(function ByteReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm09.TypeRef("System.Byte")]), 
      Name: "Microsoft.Xna.Framework.Content.ByteReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Byte, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Byte], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.SByteReader */ 

(function SByteReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm09.TypeRef("System.SByte")]), 
      Name: "Microsoft.Xna.Framework.Content.SByteReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.SByte, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.SByte], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.Int16Reader */ 

(function Int16Reader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm09.TypeRef("System.Int16")]), 
      Name: "Microsoft.Xna.Framework.Content.Int16Reader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int16, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Int16], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.UInt16Reader */ 

(function UInt16Reader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm09.TypeRef("System.UInt16")]), 
      Name: "Microsoft.Xna.Framework.Content.UInt16Reader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.UInt16, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.UInt16], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.Int32Reader */ 

(function Int32Reader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm09.TypeRef("System.Int32")]), 
      Name: "Microsoft.Xna.Framework.Content.Int32Reader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Int32], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.UInt32Reader */ 

(function UInt32Reader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm09.TypeRef("System.UInt32")]), 
      Name: "Microsoft.Xna.Framework.Content.UInt32Reader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.UInt32, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.UInt32], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.Int64Reader */ 

(function Int64Reader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm09.TypeRef("System.Int64")]), 
      Name: "Microsoft.Xna.Framework.Content.Int64Reader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int64, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Int64], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.UInt64Reader */ 

(function UInt64Reader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm09.TypeRef("System.UInt64")]), 
      Name: "Microsoft.Xna.Framework.Content.UInt64Reader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.UInt64, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.UInt64], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.SingleReader */ 

(function SingleReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm09.TypeRef("System.Single")]), 
      Name: "Microsoft.Xna.Framework.Content.SingleReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Single], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.DoubleReader */ 

(function DoubleReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm09.TypeRef("System.Double")]), 
      Name: "Microsoft.Xna.Framework.Content.DoubleReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Double, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Double], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.BooleanReader */ 

(function BooleanReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm09.TypeRef("System.Boolean")]), 
      Name: "Microsoft.Xna.Framework.Content.BooleanReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Boolean], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.CharReader */ 

(function CharReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm09.TypeRef("System.Char")]), 
      Name: "Microsoft.Xna.Framework.Content.CharReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Char, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Char], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.DateTimeReader */ 

(function DateTimeReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm09.TypeRef("System.DateTime")]), 
      Name: "Microsoft.Xna.Framework.Content.DateTimeReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm09.TypeRef("System.DateTime")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.TimeSpanReader */ 

(function TimeSpanReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm09.TypeRef("System.TimeSpan")]), 
      Name: "Microsoft.Xna.Framework.Content.TimeSpanReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm09.TypeRef("System.TimeSpan")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.DecimalReader */ 

(function DecimalReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm09.TypeRef("System.Decimal")]), 
      Name: "Microsoft.Xna.Framework.Content.DecimalReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm09.TypeRef("System.Decimal")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.SongReader */ 

(function SongReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Song")]), 
      Name: "Microsoft.Xna.Framework.Content.SongReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Song"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Media.Song")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.SoundEffectReader */ 

(function SoundEffectReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")]), 
      Name: "Microsoft.Xna.Framework.Content.SoundEffectReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect"), [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.UnsafeNativeMethods", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "CloseHandle", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.IntPtr")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateEvent", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.UnsafeNativeMethods/SecurityAttributes")]), $.Boolean, 
          $.Boolean, $asm09.TypeRef("System.IntPtr")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFileMapping", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [
          $asm09.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("Microsoft.Xna.Framework.UnsafeNativeMethods/SecurityAttributes")]), 
          $.Int32, $.Int32, 
          $.Int32, $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MapViewOfFile", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [
          $asm09.TypeRef("System.IntPtr"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetEvent", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.IntPtr")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "UnmapViewOfFile", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.IntPtr")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "WaitForMultipleObjects", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.IntPtr")]), 
          $.Boolean, $.Int32
        ], [])
    );

    $.Constant({Static:true , Public:true }, "INFINITE", -1); 
    $.Constant({Static:true , Public:true }, "STATUS_DLL_NOT_FOUND", 3221225781); 
    $.Constant({Static:true , Public:true }, "PAGE_READONLY", 2); 
    $.Constant({Static:true , Public:true }, "PAGE_READWRITE", 4); 
    $.Constant({Static:true , Public:true }, "PAGE_WRITECOPY", 8); 
    $.Constant({Static:true , Public:true }, "FILE_MAP_WRITE", 2); 
    $.Constant({Static:true , Public:true }, "FILE_MAP_READ", 4); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "INVALID_HANDLE_VALUE", $asm09.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.UnsafeNativeMethods/SecurityAttributes */ 

(function SecurityAttributes$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.UnsafeNativeMethods/SecurityAttributes", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "Length", $.Int32); 
    $.Field({Static:false, Public:false}, "SecurityDescriptor", $asm09.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "InheritHandle", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.UserAsyncDispatcher */ 

(function UserAsyncDispatcher$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.UserAsyncDispatcher", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "AddPendingOperation", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IAsyncResult"), [
          $.UInt32, $asm09.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddPendingOperation", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IAsyncResult"), [
          $.UInt32, $asm09.TypeRef("System.AsyncCallback"), 
          $.Object, $.Boolean, 
          $asm01.TypeRef("Microsoft.Xna.Framework.AsyncOperationCleanup")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AsyncDispatcherThreadFunction", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CallbackGoesToDispatcher", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleFinishedOperation", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleManagedCallback", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType"), $.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnExit", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperationStillPending", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.XOverlappedAsyncResult")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PlatformSpecificInitialize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WaitForAsyncOperationToFinish", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.KernelReturnCode"), [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType")]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], [])
    );

    $.Field({Static:true , Public:false}, "parentExitEvent", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PendingOperationsLock", $.Object); 
    $.Field({Static:true , Public:false}, "pendingOperations", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.UInt32, $asm01.TypeRef("Microsoft.Xna.Framework.PendingOperation")])); 
    $.Field({Static:true , Public:false}, "initialized", $.Boolean, false); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.UserAsyncDispatcher/<>c__DisplayClass3 */ 

(function $l$gc__DisplayClass3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.UserAsyncDispatcher/<>c__DisplayClass3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "pendingOp", $asm01.TypeRef("Microsoft.Xna.Framework.PendingOperation")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.FrameworkDispatcher */ 

(function FrameworkDispatcher$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.FrameworkDispatcher", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "AddNewPendingCall", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType"), $.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsOncePerUpdateEvent", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PollForEvents", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Update", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false}, "UpdateCalledAtLeastOnce", $.Boolean); 
    $.Field({Static:true , Public:false}, "pendingCalls", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.FrameworkDispatcher/ManagedCallAndArg")])); 
    $.Field({Static:true , Public:false}, "pendingCallsCopy", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.FrameworkDispatcher/ManagedCallAndArg")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.FrameworkDispatcher/ManagedCallAndArg */ 

(function ManagedCallAndArg$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.FrameworkDispatcher/ManagedCallAndArg", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType"), $.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType"), $.UInt32], [])
    );

    $.Field({Static:false, Public:true }, "ManagedCallType", $asm01.TypeRef("Microsoft.Xna.Framework.ManagedCallType")); 
    $.Field({Static:false, Public:true }, "ManagedCallArg", $.UInt32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.FrameworkCallbackLinker */ 

(function FrameworkCallbackLinker$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.FrameworkCallbackLinker", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "add_AvatarChanged", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "add_DownloadCompleted", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "add_StorageDeviceChanged", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnAvatarChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnDownloadCompleted", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnStorageDeviceChanged", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "remove_AvatarChanged", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "remove_DownloadCompleted", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "remove_StorageDeviceChanged", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler")], [])
    );

    $.Field({Static:true , Public:false}, "StorageDeviceChanged", $asm09.TypeRef("System.EventHandler")); 
    $.Field({Static:true , Public:false}, "DownloadCompleted", $asm09.TypeRef("System.EventHandler")); 
    $.Field({Static:true , Public:false}, "AvatarChanged", $asm09.TypeRef("System.EventHandler")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.MediaLibrary */ 

(function MediaLibrary$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.MediaLibrary", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaSource")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Albums", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Artists", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.ArtistCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Genres", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.GenreCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MediaSource", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaSource"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Pictures", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Playlists", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.PlaylistCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RootPictureAlbum", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SavedPictures", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Songs", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetPictureFromToken", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Picture"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PickBestMediaSource", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaSource"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SavePicture", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Picture"), [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SavePicture", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Picture"), [$.String, $asm09.TypeRef("System.IO.Stream")], [])
    );

    $.Field({Static:false, Public:false}, "songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection")); 
    $.Field({Static:false, Public:false}, "artists", $asm01.TypeRef("Microsoft.Xna.Framework.Media.ArtistCollection")); 
    $.Field({Static:false, Public:false}, "albums", $asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection")); 
    $.Field({Static:false, Public:false}, "playlists", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PlaylistCollection")); 
    $.Field({Static:false, Public:false}, "genres", $asm01.TypeRef("Microsoft.Xna.Framework.Media.GenreCollection")); 
    $.Field({Static:false, Public:false}, "pictures", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureCollection")); 
    $.Field({Static:false, Public:false}, "savedPictures", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureCollection")); 
    $.Field({Static:false, Public:false}, "rootPictureAlbum", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum")); 
    $.Field({Static:false, Public:false}, "mediaSource", $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaSource")); 
    $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
    $.Property({Static:false, Public:true }, "Pictures", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureCollection"));

    $.Property({Static:false, Public:true }, "RootPictureAlbum", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum"));

    $.Property({Static:false, Public:true }, "SavedPictures", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureCollection"));

    $.Property({Static:false, Public:true }, "MediaSource", $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaSource"));

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:true }, "Songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"));

    $.Property({Static:false, Public:true }, "Artists", $asm01.TypeRef("Microsoft.Xna.Framework.Media.ArtistCollection"));

    $.Property({Static:false, Public:true }, "Albums", $asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection"));

    $.Property({Static:false, Public:true }, "Playlists", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PlaylistCollection"));

    $.Property({Static:false, Public:true }, "Genres", $asm01.TypeRef("Microsoft.Xna.Framework.Media.GenreCollection"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Media.MediaSourceType */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Media.MediaSourceType", true, {
    LocalDevice: 0, 
    WindowsMediaConnect: 4
  }, false
);

/* class Microsoft.Xna.Framework.Media.MediaSource */ 

(function MediaSource$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.MediaSource", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MediaSourceType", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaSourceType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetAvailableMediaSources", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$.Type]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "mediaSourceType", $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaSourceType")); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Property({Static:false, Public:true }, "MediaSourceType", $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaSourceType"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.VisualizationData */ 

(function VisualizationData$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.VisualizationData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Frequencies", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Single]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Samples", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Single]), [], [])
    );

    $.Field({Static:false, Public:false}, "frequencies", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Field({Static:false, Public:false}, "samples", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Field({Static:false, Public:false}, "frequenciesCollection", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Single])); 
    $.Field({Static:false, Public:false}, "samplesCollection", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Single])); 
    $.Property({Static:false, Public:true }, "Frequencies", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Single]));

    $.Property({Static:false, Public:true }, "Samples", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Single]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.TitleLocation */ 

(function TitleLocation$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.TitleLocation", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "get_Path", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:true , Public:false}, "_titleLocation", $.String); 
    $.Property({Static:true , Public:true }, "Path", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.TitleContainer */ 

(function TitleContainer$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.TitleContainer", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "CollapseParentDirectory", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCleanPath", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCleanPathAbsolute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPathAbsolute", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "OpenStream", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IO.Stream"), [$.String], [])
    );

    $.Field({Static:true , Public:false}, "badCharacters", $jsilcore.TypeRef("System.Array", [$.Char])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Xna.Framework.GamerServices");
/* interface Microsoft.Xna.Framework.GamerServices.IGuideRendererProxySource */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.GamerServices.IGuideRendererProxySource", false, [], function ($) {
    $.Method({}, "get_ServiceProvider", new JSIL.MethodSignature($asm09.TypeRef("System.IServiceProvider"), [], []));
    $.Method({}, "GetDrawingCommandsFromProxy", new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.IntPtr")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], []));
    $.Property({}, "ServiceProvider");
  }, []);

/* class Microsoft.Xna.Framework.GamerServices.GuideRendererConnector */ 

(function GuideRendererConnector$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.GamerServices.GuideRendererConnector", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "DisposeGuideRenderer", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_GuideRendererType", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_ProxySource", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.GamerServices.IGuideRendererProxySource")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryCreateGuideRenderer", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false}, "guideRenderer", $asm09.TypeRef("System.IDisposable")); 
    $.Field({Static:true , Public:false}, "guideRendererType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:true , Public:false}, "proxySource", $asm01.TypeRef("Microsoft.Xna.Framework.GamerServices.IGuideRendererProxySource")); 
    $.Property({Static:true , Public:true }, "GuideRendererType", $asm09.TypeRef("System.Type"));

    $.Property({Static:true , Public:true }, "ProxySource", $asm01.TypeRef("Microsoft.Xna.Framework.GamerServices.IGuideRendererProxySource"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Audio.MicrophoneState */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Audio.MicrophoneState", true, {
    Started: 0, 
    Stopped: 1
  }, false
);

/* class Microsoft.Xna.Framework.Audio.Microphone */ 

(function Microphone$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.Microphone", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_BufferReady", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_All", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AllMicrophones", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Audio.MicrophoneCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BufferDuration", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Default", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsHeadset", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SampleRate", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_State", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Audio.MicrophoneState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetData", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSampleDuration", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSampleRate", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSampleSizeInBytes", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnBufferReady", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_BufferReady", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SafeGetCaptureBufferDuration", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SafeIsHeadset", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BufferDuration", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Start", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Stop", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnsafeGetData", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "format", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioFormat")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Handle", $.UInt32); 
    $.Field({Static:false, Public:false}, "microphoneLock", $.Object); 
    $.Field({Static:true , Public:false}, "microphones", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.MicrophoneCollection")); 
    $.Field({Static:false, Public:false}, "captureBufferDuration", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Id", $.Int32); 
    $.Field({Static:false, Public:false}, "isHeadset", $.Boolean); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "Name", $.String); 
    $.Field({Static:false, Public:false}, "BufferReady", $asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])); 
    $.Property({Static:true , Public:true }, "All", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type]));

    $.Property({Static:true , Public:true }, "Default", $.Type);

    $.Property({Static:false, Public:true }, "State", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.MicrophoneState"));

    $.Property({Static:false, Public:true }, "BufferDuration", $asm09.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "SampleRate", $.Int32);

    $.Property({Static:false, Public:true }, "IsHeadset", $.Boolean);

    $.Property({Static:true , Public:false}, "AllMicrophones", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.MicrophoneCollection"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.MicrophoneCollection */ 

(function MicrophoneCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.MicrophoneCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnumerateMicrophones", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_All", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.Microphone")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Default", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Audio.Microphone"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnBufferReady", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SelectDefaultMicrophone", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "allMicrophones", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.Microphone")])); 
    $.Field({Static:false, Public:false}, "collection", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.Microphone")])); 
    $.Field({Static:false, Public:false}, "defaultMic", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.Microphone")); 
    $.Property({Static:false, Public:false}, "All", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.Microphone")]));

    $.Property({Static:false, Public:false}, "Default", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.Microphone"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.SoundEffectFinalizerHelper */ 

(function SoundEffectFinalizerHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.SoundEffectFinalizerHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Audio.AudioChannels */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Audio.AudioChannels", true, {
    Mono: 1, 
    Stereo: 2
  }, false
);

/* struct Microsoft.Xna.Framework.Audio.LoopRegion */ 

(function LoopRegion$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Audio.LoopRegion", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "Start", $.Int32); 
    $.Field({Static:false, Public:false}, "Length", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.SoundEffect */ 

(function SoundEffect$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.SoundEffect", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Int32, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels"), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $asm09.TypeRef("System.TimeSpan")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToInstancePool", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AllocateFormatAndData", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChildDestroyed", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Create", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm09.TypeRef("System.TimeSpan")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateFinalizerHelper", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FromBuffer", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Int32, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels"), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromStream", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DistanceScale", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DopplerScale", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Duration", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Loop", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Audio.LoopRegion"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MasterVolume", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MaxVelocityComponent", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SpeedOfSound", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFromInstancePool", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSampleDuration", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [
          $.Int32, $.Int32, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSampleSizeInBytes", 
      new JSIL.MethodSignature($.Int32, [
          $asm09.TypeRef("System.TimeSpan"), $.Int32, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsStoppedInstance", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Play", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Play", 
      new JSIL.MethodSignature($.Boolean, [
          $.Single, $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RecycleStoppedFireAndForgetInstances", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_DistanceScale", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_DopplerScale", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_MasterVolume", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_SpeedOfSound", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.Constant({Static:true , Public:false}, "defaultVolume", 1); 
    $.Field({Static:false, Public:false}, "disposed", $.Boolean); 
    $.Field({Static:false, Public:false}, "effectName", $.String); 
    $.Field({Static:false, Public:false}, "duration", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "loopInfo", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.LoopRegion")); 
    $.Field({Static:false, Public:false}, "syncObject", $.Object); 
    $.Field({Static:false, Public:false}, "handle", $.UInt32); 
    $.Field({Static:true , Public:false}, "speedOfSound", $.Single, 343.5); 
    $.Field({Static:true , Public:false}, "dopplerScale", $.Single, 1); 
    $.Field({Static:true , Public:false}, "distanceScale", $.Single, 1); 
    $.Field({Static:true , Public:false}, "maxVelocityComponent", $.Single, 343.499); 
    $.Field({Static:true , Public:false}, "currentVolume", $.Single, 1); 
    $.Field({Static:true , Public:false}, "fireAndForgetInstances", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance"), $.Boolean])); 
    $.Field({Static:false, Public:false}, "instancePool", $asm0B.TypeRef("System.Collections.Generic.Stack`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")])); 
    $.Field({Static:false, Public:false}, "children", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.WeakReference")])); 
    $.Field({Static:true , Public:false}, "finalizerHelper", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectFinalizerHelper")); 
    $.Field({Static:true , Public:false}, "instancesToDispose", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")])); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "Loop", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.LoopRegion"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Duration", $asm09.TypeRef("System.TimeSpan"));

    $.Property({Static:true , Public:true }, "MasterVolume", $.Single);

    $.Property({Static:false, Public:false}, "Handle", $.UInt32);

    $.Property({Static:true , Public:true }, "SpeedOfSound", $.Single);

    $.Property({Static:true , Public:true }, "DopplerScale", $.Single);

    $.Property({Static:true , Public:true }, "DistanceScale", $.Single);

    $.Property({Static:true , Public:false}, "MaxVelocityComponent", $.Single);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Audio.SoundState */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Audio.SoundState", true, {
    Playing: 0, 
    Paused: 1, 
    Stopped: 2
  }, false
);

/* class Microsoft.Xna.Framework.Audio.SoundEffectInstance */ 

(function SoundEffectInstance$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.SoundEffectInstance", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AllocateVoice", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Apply3D", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioListener"), $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioEmitter")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Apply3D", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioListener")]), $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioEmitter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeallocateVoice", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsFireAndForget", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsLooped", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Pan", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Pitch", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SoundEffect", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_State", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_VoiceHandle", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_VoiceHandleLock", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Volume", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Pause", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Play", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Resume", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SafeApply3D", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioListener")]), $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioEmitter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_IsLooped", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Pan", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Pitch", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SoundEffect", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_VoiceHandle", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Volume", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Stop", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Stop", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnsafeApply3D", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioListener")]), $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioEmitter")], [])
    );

    $.Field({Static:false, Public:false}, "effect", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    $.Field({Static:false, Public:false}, "disposed", $.Boolean); 
    $.Field({Static:false, Public:false}, "looped", $.Boolean); 
    $.Field({Static:false, Public:false}, "currentVolume", $.Single); 
    $.Field({Static:false, Public:false}, "currentPitch", $.Single); 
    $.Field({Static:false, Public:false}, "currentPan", $.Single); 
    $.Field({Static:false, Public:false}, "is3d", $.Boolean); 
    $.Field({Static:false, Public:false}, "isFireAndForget", $.Boolean); 
    $.Field({Static:false, Public:false}, "isPacketSubmitted", $.Boolean); 
    $.Field({Static:false, Public:false}, "listenerData", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.UnsafeNativeStructures/XACT_LISTENER_DATA")])); 
    $.Field({Static:false, Public:false}, "voiceHandle", $.UInt32); 
    $.Field({Static:false, Public:false}, "voiceHandleLock", $.Object); 
    $.Property({Static:false, Public:false}, "VoiceHandle", $.UInt32);

    $.Property({Static:false, Public:false}, "VoiceHandleLock", $.Object);

    $.Property({Static:false, Public:false}, "IsFireAndForget", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "SoundEffect", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect"));

    $.Property({Static:false, Public:true }, "Volume", $.Single);

    $.Property({Static:false, Public:true }, "Pitch", $.Single);

    $.Property({Static:false, Public:true }, "Pan", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "IsLooped", $.Boolean);

    $.Property({Static:false, Public:true }, "State", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundState"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance */ 

(function DynamicSoundEffectInstance$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance"), 
      Name: "Microsoft.Xna.Framework.Audio.DynamicSoundEffectInstance", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_BufferNeeded", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AllocateData", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AllocateVoice", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsLooped", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PendingBufferCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPendingBufferCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSampleDuration", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSampleSizeInBytes", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnBufferNeeded", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Play", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RaiseBufferNeededOnInstance", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_BufferNeeded", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_IsLooped", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubmitBuffer", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SubmitBuffer", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:true , Public:false}, "allInstances", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.UInt32, $asm09.TypeRef("System.WeakReference")])); 
    $.Field({Static:false, Public:false}, "format", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioFormat")); 
    $.Field({Static:false, Public:false}, "BufferNeeded", $asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "IsLooped", $.Boolean);

    $.Property({Static:false, Public:true }, "PendingBufferCount", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.AudioHelper */ 

(function AudioHelper$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Audio.AudioHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "Byteswap", 
      new JSIL.MethodSignature($.Int16, [$.Int16], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Byteswap", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSampleDuration", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [
          $.Int32, $.Int32, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSampleSizeInBytes", 
      new JSIL.MethodSignature($.Int32, [
          $asm09.TypeRef("System.TimeSpan"), $.Int32, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "LocalizeFormat", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeFormat", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels"), 
          $.Int16
        ], [])
    );

    $.Constant({Static:true , Public:false}, "waveFormatExSize", 18); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.AudioFormat */ 

(function AudioFormat$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.AudioFormat", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioChannels"), 
          $.Int16
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "DurationFromSize", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsAligned", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SizeFromDuration", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "RawBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "FormatTag", $.Int16); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "Channels", $.Int16); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "SampleRate", $.Int32); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "AvgBytesPerSec", $.Int32); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "BlockAlign", $.Int16); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "BitsPerSample", $.Int16); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.WavFile */ 

(function WavFile$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.WavFile", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Data", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Duration", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Format", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioFormat"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LoopLength", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LoopStart", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SampleLength", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Open", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseData", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseFormat", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseLoopRegion", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseSmplChunk", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseWavHeader", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseWsmpChunk", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadChunk", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false}, "riff", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false}, "wave", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false}, "fmt", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false}, "data", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false}, "smpl", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false}, "wsmp", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:true , Public:false}, "riffId", $.Int32); 
    $.Field({Static:true , Public:false}, "wavId", $.Int32); 
    $.Field({Static:true , Public:false}, "fmtId", $.Int32); 
    $.Field({Static:true , Public:false}, "smplId", $.Int32); 
    $.Field({Static:true , Public:false}, "wsmpId", $.Int32); 
    $.Field({Static:true , Public:false}, "dataId", $.Int32); 
    $.Field({Static:false, Public:false}, "reader", $asm09.TypeRef("System.IO.BinaryReader")); 
    $.Field({Static:false, Public:false}, "format", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioFormat")); 
    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "smplChunk", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.WavFile/RiffChunk")); 
    $.Field({Static:false, Public:false}, "wsmpChunk", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.WavFile/RiffChunk")); 
    $.Field({Static:false, Public:false}, "loop", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.LoopRegion")); 
    $.Property({Static:false, Public:false}, "Format", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioFormat"));

    $.Property({Static:false, Public:false}, "Data", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false}, "LoopStart", $.Int32);

    $.Property({Static:false, Public:false}, "LoopLength", $.Int32);

    $.Property({Static:false, Public:false}, "SampleLength", $.Int32);

    $.Property({Static:false, Public:false}, "Duration", $asm09.TypeRef("System.TimeSpan"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.WavFile/RiffChunk */ 

(function RiffChunk$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.WavFile/RiffChunk", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "id", $.Int32); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "Data", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.XOverlappedAsyncResult */ 

(function XOverlappedAsyncResult$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.XOverlappedAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $.UInt32, 
          $.Boolean, $asm01.TypeRef("Microsoft.Xna.Framework.AsyncOperationCleanup")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AsyncWaitHandle", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.EventWaitHandle"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReusable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KernelHandle", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrepareForEndFunction", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.IAsyncResult")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsCompleted", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.get_AsyncState", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_AsyncState");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.get_AsyncWaitHandle", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.WaitHandle"), [], [])
    )
      .Overrides(0, "get_AsyncWaitHandle");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.get_CompletedSynchronously", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_CompletedSynchronously");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.get_IsCompleted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(0, "get_IsCompleted");

    $.Field({Static:false, Public:false}, "asyncState", $.Object); 
    $.Field({Static:false, Public:false}, "asyncWaitHandle", $asm09.TypeRef("System.Threading.EventWaitHandle")); 
    $.Field({Static:false, Public:false}, "isCompleted", $.Boolean); 
    $.Field({Static:false, Public:false}, "kernelHandle", $.UInt32); 
    $.Field({Static:false, Public:false}, "endHasBeenCalled", $.Boolean); 
    $.Field({Static:false, Public:false}, "isReusable", $.Boolean); 
    $.Field({Static:false, Public:false}, "kernelHandleCleanup", $asm01.TypeRef("Microsoft.Xna.Framework.AsyncOperationCleanup")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.AsyncState", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.AsyncWaitHandle", $asm09.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.CompletedSynchronously", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.IAsyncResult.IsCompleted", $.Boolean);

    $.Property({Static:false, Public:false}, "AsyncWaitHandle", $asm09.TypeRef("System.Threading.EventWaitHandle"));

    $.Property({Static:false, Public:false}, "IsCompleted", $.Boolean);

    $.Property({Static:false, Public:false}, "KernelHandle", $.UInt32);

    $.Property({Static:false, Public:false}, "IsReusable", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IAsyncResult")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.Album */ 

(function Album$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.Album", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Artist", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Duration", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Genre", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasArt", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Songs", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAlbumArt", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IO.Stream"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetImageStream", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IO.Stream"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetThumbnail", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IO.Stream"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "handle", $.UInt32); 
    $.Field({Static:false, Public:false}, "hashcode", $.Int32); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "artist", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist")); 
    $.Field({Static:false, Public:false}, "genre", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre")); 
    $.Field({Static:false, Public:false}, "songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection")); 
    $.Field({Static:false, Public:false}, "duration", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "hasArt", $.Boolean); 
    $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "Handle", $.UInt32);

    $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Artist", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist"));

    $.Property({Static:false, Public:true }, "Songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"));

    $.Property({Static:false, Public:true }, "Genre", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre"));

    $.Property({Static:false, Public:true }, "Duration", $asm09.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "HasArt", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.AlbumCollection */ 

(function AlbumCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.AlbumCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Album"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Album")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "enumerator", $asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumEnumerator")); 
    $.Field({Static:false, Public:false}, "handle", $.UInt32); 
    $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "Handle", $.UInt32);

    $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Album"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Album")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Xna.Framework.Media.Artist */ 

(function Artist$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.Artist", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Albums", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Songs", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "handle", $.UInt32); 
    $.Field({Static:false, Public:false}, "hashcode", $.Int32); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection")); 
    $.Field({Static:false, Public:false}, "albums", $asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection")); 
    $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "Handle", $.UInt32);

    $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"));

    $.Property({Static:false, Public:true }, "Albums", $asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.ArtistCollection */ 

(function ArtistCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.ArtistCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "enumerator", $asm01.TypeRef("Microsoft.Xna.Framework.Media.ArtistEnumerator")); 
    $.Field({Static:false, Public:false}, "handle", $.UInt32); 
    $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "Handle", $.UInt32);

    $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Xna.Framework.Media.Genre */ 

(function Genre$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.Genre", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Albums", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Songs", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "handle", $.UInt32); 
    $.Field({Static:false, Public:false}, "hashcode", $.Int32); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection")); 
    $.Field({Static:false, Public:false}, "albums", $asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection")); 
    $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "Handle", $.UInt32);

    $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"));

    $.Property({Static:false, Public:true }, "Albums", $asm01.TypeRef("Microsoft.Xna.Framework.Media.AlbumCollection"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.GenreCollection */ 

(function GenreCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.GenreCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "enumerator", $asm01.TypeRef("Microsoft.Xna.Framework.Media.GenreEnumerator")); 
    $.Field({Static:false, Public:false}, "handle", $.UInt32); 
    $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "Handle", $.UInt32);

    $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Xna.Framework.Media.ComStreamWrapper */ 

(function ComStreamWrapper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.ComStreamWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Runtime.InteropServices.ComTypes.IStream")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Commit", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Runtime.InteropServices.ComTypes.IStream"), $.Int64, 
          $asm09.TypeRef("System.IntPtr"), $asm09.TypeRef("System.IntPtr")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLength", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IntPtr")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LockRegion", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Int64, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm09.TypeRef("System.IntPtr")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Revert", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Int32, 
          $asm09.TypeRef("System.IntPtr")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetSize", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Stat", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Runtime.InteropServices.ComTypes.STATSTG")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UnlockRegion", 
      new JSIL.MethodSignature(null, [
          $.Int64, $.Int64, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm09.TypeRef("System.IntPtr")
        ], [])
    );

    $.Field({Static:false, Public:false}, "source", $asm09.TypeRef("System.IO.Stream")); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Runtime.InteropServices.ComTypes.IStream")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.InteropServices.ClassInterfaceAttribute"), function () { return [$asm09.System.Runtime.InteropServices.ClassInterfaceType.None]; });

})();

/* class Microsoft.Xna.Framework.Media.ImageStream */ 

(function ImageStream$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.IO.Stream"), 
      Name: "Microsoft.Xna.Framework.Media.ImageStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Color")]), $.Int32, 
          $.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.XnaImageFormat"), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateKernelStreamFromStream", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EncodeBuffer", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm01.TypeRef("Microsoft.Xna.Framework.XnaImageFormat"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromColors", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Color")]), $.Int32, 
          $.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.XnaImageFormat"), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromStream", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.IO.Stream")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm09.TypeRef("System.IO.SeekOrigin")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateWidthHeightFormat", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm01.TypeRef("Microsoft.Xna.Framework.XnaImageFormat")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "streamLock", $.Object); 
    $.Field({Static:false, Public:false}, "handle", $.UInt32); 
    $.Field({Static:false, Public:false}, "disposed", $.Boolean); 
    $.Field({Static:false, Public:false}, "comStreamWrapper", $asm01.TypeRef("Microsoft.Xna.Framework.Media.ComStreamWrapper")); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:false}, "Handle", $.UInt32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1 */ 

(function MediaLibraryEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateItemInstance", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1"), [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1"), [], [])
    )
      .Overrides(0, "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset");

    $.Field({Static:false, Public:false}, "disposed", $.Boolean); 
    $.Field({Static:false, Public:false}, "handleList", $.UInt32); 
    $.Field({Static:false, Public:false}, "curIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "count", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.Current", new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.Property({Static:false, Public:false}, "Item", new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1"));

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Xna.Framework.Media.SongLibraryEnumerator */ 

(function SongLibraryEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Song")]), 
      Name: "Microsoft.Xna.Framework.Media.SongLibraryEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateItemInstance", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Song"), [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.Property({Static:false, Public:false}, "Handle", $.UInt32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.ArtistEnumerator */ 

(function ArtistEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist")]), 
      Name: "Microsoft.Xna.Framework.Media.ArtistEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateItemInstance", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist"), [$.UInt32], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.AlbumEnumerator */ 

(function AlbumEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Album")]), 
      Name: "Microsoft.Xna.Framework.Media.AlbumEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateItemInstance", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Album"), [$.UInt32], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.GenreEnumerator */ 

(function GenreEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre")]), 
      Name: "Microsoft.Xna.Framework.Media.GenreEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateItemInstance", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre"), [$.UInt32], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.PlaylistEnumerator */ 

(function PlaylistEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Playlist")]), 
      Name: "Microsoft.Xna.Framework.Media.PlaylistEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateItemInstance", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Playlist"), [$.UInt32], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.PictureEnumerator */ 

(function PictureEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Picture")]), 
      Name: "Microsoft.Xna.Framework.Media.PictureEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateItemInstance", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Picture"), [$.UInt32], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.PictureAlbumEnumerator */ 

(function PictureAlbumEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum")]), 
      Name: "Microsoft.Xna.Framework.Media.PictureAlbumEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateItemInstance", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum"), [$.UInt32], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.MediaPlayer */ 

(function MediaPlayer$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Media.MediaPlayer", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "add_ActiveSongChanged", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "add_MediaStateChanged", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GameHasControl", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_IsMuted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_IsRepeating", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_IsShuffled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_IsVisualizationEnabled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PlayPosition", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Queue", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaQueue"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_State", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaState"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Volume", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetVisualizationData", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Media.VisualizationData")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MoveNext", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MovePrevious", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnActiveSongChanged", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnMediaStateChanged", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventArgs")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Pause", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Play", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Song")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Play", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Play", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "remove_ActiveSongChanged", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "remove_MediaStateChanged", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Resume", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_IsMuted", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_IsRepeating", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_IsShuffled", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_IsVisualizationEnabled", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "set_Volume", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Stop", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false}, "shuffle", $.Boolean, false); 
    $.Field({Static:true , Public:false}, "repeat", $.Boolean, false); 
    $.Field({Static:true , Public:false}, "queue", $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaQueue")); 
    $.Field({Static:true , Public:false}, "ActiveSongChanged", $asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])); 
    $.Field({Static:true , Public:false}, "MediaStateChanged", $asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])); 
    $.Property({Static:true , Public:true }, "IsShuffled", $.Boolean);

    $.Property({Static:true , Public:true }, "IsRepeating", $.Boolean);

    $.Property({Static:true , Public:true }, "Queue", $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaQueue"));

    $.Property({Static:true , Public:true }, "State", $asm01.TypeRef("Microsoft.Xna.Framework.Media.MediaState"));

    $.Property({Static:true , Public:true }, "PlayPosition", $asm09.TypeRef("System.TimeSpan"));

    $.Property({Static:true , Public:true }, "Volume", $.Single);

    $.Property({Static:true , Public:true }, "IsMuted", $.Boolean);

    $.Property({Static:true , Public:true }, "IsVisualizationEnabled", $.Boolean);

    $.Property({Static:true , Public:true }, "GameHasControl", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.MediaQueue */ 

(function MediaQueue$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.MediaQueue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ActiveSong", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Song"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ActiveSongIndex", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Song"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PlayPosition", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MovePrevious", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Play", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Song")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Play", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Play", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ActiveSongIndex", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "ActiveSongIndex", $.Int32);

    $.Property({Static:false, Public:true }, "ActiveSong", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Song"));

    $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Song"));

    $.Property({Static:false, Public:false}, "PlayPosition", $asm09.TypeRef("System.TimeSpan"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Xna.Framework.Media.Picture */ 

(function Picture$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.Picture", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Album", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Date", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Height", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Width", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetImage", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IO.Stream"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetImageStream", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IO.Stream"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetThumbnail", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IO.Stream"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "handle", $.UInt32); 
    $.Field({Static:false, Public:false}, "hashcode", $.Int32); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "album", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum")); 
    $.Field({Static:false, Public:false}, "width", $.Int32); 
    $.Field({Static:false, Public:false}, "height", $.Int32); 
    $.Field({Static:false, Public:false}, "date", $asm09.TypeRef("System.DateTime")); 
    $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "Handle", $.UInt32);

    $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Album", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum"));

    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);

    $.Property({Static:false, Public:true }, "Date", $asm09.TypeRef("System.DateTime"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.PictureAlbum */ 

(function PictureAlbum$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.PictureAlbum", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Albums", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbumCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parent", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Pictures", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "handle", $.UInt32); 
    $.Field({Static:false, Public:false}, "hashcode", $.Int32); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "albums", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbumCollection")); 
    $.Field({Static:false, Public:false}, "parent", $.Type); 
    $.Field({Static:false, Public:false}, "pictures", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureCollection")); 
    $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "Handle", $.UInt32);

    $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Albums", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbumCollection"));

    $.Property({Static:false, Public:true }, "Pictures", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureCollection"));

    $.Property({Static:false, Public:true }, "Parent", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.PictureAlbumCollection */ 

(function PictureAlbumCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.PictureAlbumCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "enumerator", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbumEnumerator")); 
    $.Field({Static:false, Public:false}, "handle", $.UInt32); 
    $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "Handle", $.UInt32);

    $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureAlbum")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Xna.Framework.Media.PictureCollection */ 

(function PictureCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.PictureCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Picture"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Picture")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "enumerator", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PictureEnumerator")); 
    $.Field({Static:false, Public:false}, "handle", $.UInt32); 
    $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "Handle", $.UInt32);

    $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Picture"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Picture")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Xna.Framework.Media.Playlist */ 

(function Playlist$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.Playlist", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Duration", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Songs", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "handle", $.UInt32); 
    $.Field({Static:false, Public:false}, "hashcode", $.Int32); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection")); 
    $.Field({Static:false, Public:false}, "duration", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "Handle", $.UInt32);

    $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Songs", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongCollection"));

    $.Property({Static:false, Public:true }, "Duration", $asm09.TypeRef("System.TimeSpan"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.PlaylistCollection */ 

(function PlaylistCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.PlaylistCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Playlist"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Playlist")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "enumerator", $asm01.TypeRef("Microsoft.Xna.Framework.Media.PlaylistEnumerator")); 
    $.Field({Static:false, Public:false}, "handle", $.UInt32); 
    $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "Handle", $.UInt32);

    $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Playlist"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Playlist")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Xna.Framework.Media.Song */ 

(function Song$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.Song", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0B.TypeRef("System.Uri")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromUri", 
      new JSIL.MethodSignature($.Type, [$.String, $asm0B.TypeRef("System.Uri")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Album", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Album"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Artist", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Duration", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Genre", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsProtected", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsRated", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PlayCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Rating", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrackNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "handle", $.UInt32); 
    $.Field({Static:false, Public:false}, "hashcode", $.Int32); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "artist", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist")); 
    $.Field({Static:false, Public:false}, "album", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Album")); 
    $.Field({Static:false, Public:false}, "genre", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre")); 
    $.Field({Static:false, Public:false}, "duration", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "rating", $.Int32); 
    $.Field({Static:false, Public:false}, "trackNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "Handle", $.UInt32);

    $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Artist", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Artist"));

    $.Property({Static:false, Public:true }, "Album", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Album"));

    $.Property({Static:false, Public:true }, "Genre", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Genre"));

    $.Property({Static:false, Public:true }, "Duration", $asm09.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "IsRated", $.Boolean);

    $.Property({Static:false, Public:true }, "Rating", $.Int32);

    $.Property({Static:false, Public:true }, "PlayCount", $.Int32);

    $.Property({Static:false, Public:true }, "TrackNumber", $.Int32);

    $.Property({Static:false, Public:true }, "IsProtected", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Media.SongCollection */ 

(function SongCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Media.SongCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValidHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Media.Song"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Song")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfDisposed", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.Field({Static:false, Public:false}, "libraryCollection", $asm01.TypeRef("Microsoft.Xna.Framework.Media.SongLibraryEnumerator")); 
    $.Field({Static:false, Public:false}, "handle", $.UInt32); 
    $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.Property({Static:false, Public:false}, "Handle", $.UInt32);

    $.Property({Static:false, Public:false}, "IsValidHandle", $.Boolean);

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Song"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Song")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* delegate Microsoft.Xna.Framework.AsyncOperationCleanup */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.AsyncOperationCleanup", false, []);

/* struct Microsoft.Xna.Framework.PendingOperation */ 

(function PendingOperation$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.PendingOperation", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.XOverlappedAsyncResult"), $asm09.TypeRef("System.AsyncCallback")], [])
    );

    $.Field({Static:false, Public:true }, "Async", $asm01.TypeRef("Microsoft.Xna.Framework.XOverlappedAsyncResult")); 
    $.Field({Static:false, Public:true }, "Callback", $asm09.TypeRef("System.AsyncCallback")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ContentReader */ 

(function ContentReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.IO.BinaryReader"), 
      Name: "Microsoft.Xna.Framework.Content.ContentReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), $asm09.TypeRef("System.IO.Stream"), 
          $.String, $asm09.TypeRef("System.Action`1", [$asm09.TypeRef("System.IDisposable")]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), $asm09.TypeRef("System.IO.Stream"), 
          $.String, $asm09.TypeRef("System.Action`1", [$asm09.TypeRef("System.IDisposable")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateContentLoadException", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentLoadException"), [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateContentLoadException", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentLoadException"), [
          $asm09.TypeRef("System.Exception"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateContentLoadException", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentLoadException"), [
          $.String, $asm09.TypeRef("System.Exception"), 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssetName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentManager", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAbsolutePathToReference", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPathToReference", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeReader", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), $.Object], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrepareStream", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IO.Stream"), [
          $asm09.TypeRef("System.IO.Stream"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAsset", 
      new JSIL.MethodSignature("!!0", [], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadByteBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadColor", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Color"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadDouble", 
      new JSIL.MethodSignature($.Double, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadExternalReference", 
      new JSIL.MethodSignature("!!0", [], ["T"])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1004"]; });

    $.ExternalMethod({Static:false, Public:false}, "ReadHeader", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadMatrix", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Matrix"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadObject", 
      new JSIL.MethodSignature("!!0", [], ["T"])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1004"]; });

    $.ExternalMethod({Static:false, Public:true }, "ReadObject", 
      new JSIL.MethodSignature("!!0", ["!!0"], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadObject", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")], ["T"])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1004"]; });

    $.ExternalMethod({Static:false, Public:true }, "ReadObject", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), "!!0"], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadObjectInternal", 
      new JSIL.MethodSignature("!!0", [$.Object], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadObjectInternal", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), $.Object], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadQuaternion", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Quaternion"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadRawObject", 
      new JSIL.MethodSignature("!!0", [], ["T"])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1004"]; });

    $.ExternalMethod({Static:false, Public:true }, "ReadRawObject", 
      new JSIL.MethodSignature("!!0", ["!!0"], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadRawObject", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")], ["T"])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1004"]; });

    $.ExternalMethod({Static:false, Public:true }, "ReadRawObject", 
      new JSIL.MethodSignature("!!0", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), "!!0"], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadSharedResource", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadSharedResources", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadSingle", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadVector2", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadVector3", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadVector4", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
    );

    $.Constant({Static:true , Public:false}, "PlatformLabel", "w"); 
    $.Constant({Static:true , Public:false}, "XnbVersion", 5); 
    $.Constant({Static:true , Public:false}, "XnbCompressedVersion", 32773); 
    $.Constant({Static:true , Public:false}, "XnbVersionProfileMask", 32512); 
    $.Constant({Static:true , Public:false}, "XnbVersionProfileShift", 8); 
    $.Constant({Static:true , Public:false}, "XnbPrologueSize", 10); 
    $.Constant({Static:true , Public:false}, "XnbCompressedPrologueSize", 14); 
    $.Field({Static:false, Public:false}, "contentManager", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")); 
    $.Field({Static:false, Public:false}, "assetName", $.String); 
    $.Field({Static:false, Public:false}, "recordDisposableObject", $asm09.TypeRef("System.Action`1", [$asm09.TypeRef("System.IDisposable")])); 
    $.Field({Static:false, Public:false}, "typeReaders", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])); 
    $.Field({Static:false, Public:false}, "sharedResourceFixups", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Action`1", [$.Object])])])); 
    $.Field({Static:false, Public:false}, "graphicsProfile", $.Int32); 
    $.Property({Static:false, Public:true }, "ContentManager", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"));

    $.Property({Static:false, Public:true }, "AssetName", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ContentReader/<>c__DisplayClass1`1 */ 

(function $l$gc__DisplayClass1$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.ContentReader/<>c__DisplayClass1`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "$this", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader")); 
    $.Field({Static:false, Public:true }, "fixup", $asm09.TypeRef("System.Action`1", [$.GenericParameter("T")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.Content.ContentTypeReaderManager */ 

(function ContentTypeReaderManager$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.ContentTypeReaderManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddTypeReader", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ContainsTypeReader", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeReader", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), [
          $.String, $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeReader", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), [$asm09.TypeRef("System.Type"), $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTypeReader", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Performance", "CA1822:MarkMembersAsStatic"]; });

    $.ExternalMethod({Static:true , Public:false}, "InstantiateTypeReader", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadTypeManifest", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")]), [$.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RollbackAddReader", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", ["!!0", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")]), $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "RollbackAddReaders", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])], [])
    );

    $.Field({Static:false, Public:false}, "contentReader", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader")); 
    $.Field({Static:true , Public:false}, "nameToReader", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])); 
    $.Field({Static:true , Public:false}, "targetTypeToReader", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Type"), $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])); 
    $.Field({Static:true , Public:false}, "readerTypeToReader", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Type"), $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ReflectiveReader`1 */ 

(function ReflectiveReader$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader"), 
      Name: "Microsoft.Xna.Framework.Content.ReflectiveReader`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanDeserializeIntoExistingObject", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeVersion", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Object], [])
    );

    $.Field({Static:false, Public:false}, "baseReader", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
    $.Field({Static:false, Public:false}, "memberHelpers", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper")])); 
    $.Field({Static:false, Public:false}, "instanceConstructor", $asm09.TypeRef("System.Reflection.ConstructorInfo")); 
    $.Field({Static:false, Public:false}, "typeVersion", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanDeserializeIntoExistingObject", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "TypeVersion", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper */ 

(function ReflectiveReaderMemberHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager"), $asm09.TypeRef("System.Reflection.FieldInfo"), 
          $asm09.TypeRef("System.Reflection.PropertyInfo"), $asm09.TypeRef("System.Type"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixupSharedResource", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSharedResource", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.MemberInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Read", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader"), $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldSerializeMember", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Reflection.MemberInfo"), $asm09.TypeRef("System.Type"), 
          $.Boolean, $.Boolean, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldSerializeProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Reflection.PropertyInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryCreate", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Reflection.FieldInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryCreate", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReaderManager"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Reflection.PropertyInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSkippedMember", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MemberInfo")], [])
    );

    $.Field({Static:false, Public:false}, "typeReader", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentTypeReader")); 
    $.Field({Static:false, Public:false}, "fieldInfo", $asm09.TypeRef("System.Reflection.FieldInfo")); 
    $.Field({Static:false, Public:false}, "propertyInfo", $asm09.TypeRef("System.Reflection.PropertyInfo")); 
    $.Field({Static:false, Public:false}, "canWrite", $.Boolean); 
    $.Field({Static:false, Public:false}, "sharedResource", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper/<>c__DisplayClass2 */ 

(function $l$gc__DisplayClass2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper/<>c__DisplayClass2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "$this", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper")); 
    $.Field({Static:false, Public:true }, "input", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentReader")); 
    $.Field({Static:false, Public:true }, "parentInstance", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Xna.Framework.RegistryKeys */ 

(function RegistryKeys$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.RegistryKeys", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "ProductVersion", "v4.0"); 
    $.Constant({Static:true , Public:false}, "FrameworkVersion", "v4.0"); 
    $.Constant({Static:true , Public:false}, "FrameworkKeyBase", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\XNA\\Framework\\"); 
    $.Constant({Static:true , Public:false}, "FrameworkKey", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\XNA\\Framework\\v4.0"); 
    $.Constant({Static:true , Public:false}, "FrameworkNativeLibraryPath", "NativeLibraryPath"); 
    $.Constant({Static:true , Public:false}, "GameStudioKeyBase", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\XNA\\Game Studio\\"); 
    $.Constant({Static:true , Public:false}, "GameStudioKey", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\XNA\\Game Studio\\v4.0"); 
    $.Constant({Static:true , Public:false}, "GameStudioSubkey", "SOFTWARE\\Microsoft\\XNA\\Game Studio\\v4.0"); 
    $.Constant({Static:true , Public:false}, "GameStudioInstalled", "Installed"); 
    $.Constant({Static:true , Public:false}, "GameStudioInstallPath", "InstallPath"); 
    $.Constant({Static:true , Public:false}, "SharedKeyRoot", "HKEY_LOCAL_MACHINE\\"); 
    $.Constant({Static:true , Public:false}, "SharedKeyPart", "SOFTWARE\\Microsoft\\XNA\\Game Studio\\"); 
    $.Constant({Static:true , Public:false}, "SharedKey", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\XNA\\Game Studio\\"); 
    $.Constant({Static:true , Public:false}, "SharedKeyPath", "SharedComponentsPath"); 
    $.Constant({Static:true , Public:false}, "SharedDeployableRuntimes", "DeployableRuntimes"); 
    $.Constant({Static:true , Public:false}, "GS4r1BlockKey", "BlockOutOfOrderInstallGs4r1"); 
    $.Field({Static:true , Public:false}, "DontRemoveMePlease", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.EnvironmentVariables */ 

(function EnvironmentVariables$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.EnvironmentVariables", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "XnaGsVersionFolder", "XNAGSv4"); 
    $.Constant({Static:true , Public:false}, "XnaGsSharedFolder", "XNAGSShared"); 
    $.Field({Static:true , Public:false}, "DontRemoveMePlease", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Logger */ 

(function Logger$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Logger", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "BeginLogEvent", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.LoggingEvent"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "EndLogEvent", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.LoggingEvent"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "LogEvent", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.LoggingEvent"), $.String], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.AudioEmitter */ 

(function AudioEmitter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.AudioEmitter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DopplerScale", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Forward", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Position", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Up", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Velocity", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DopplerScale", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Forward", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Up", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Velocity", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.Field({Static:false, Public:false}, "emitterData", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.UnsafeNativeStructures/XACT_EMITTER_DATA")); 
    $.Property({Static:false, Public:true }, "Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Forward", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Up", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "DopplerScale", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.AudioListener */ 

(function AudioListener$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.AudioListener", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Forward", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Position", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Up", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Velocity", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Forward", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Up", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Velocity", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.Field({Static:false, Public:false}, "listenerData", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.UnsafeNativeStructures/XACT_LISTENER_DATA")); 
    $.Property({Static:false, Public:true }, "Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Forward", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Up", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.UnsafeNativeStructures */ 

(function UnsafeNativeStructures$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Audio.UnsafeNativeStructures", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "FlipHandedness", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Audio.UnsafeNativeStructures/XACT_LISTENER_DATA */ 

(function XACT_LISTENER_DATA$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Audio.UnsafeNativeStructures/XACT_LISTENER_DATA", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "_Forward", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "_Up", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "_Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "_Velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "pCone", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Audio.UnsafeNativeStructures/XACT_EMITTER_DATA */ 

(function XACT_EMITTER_DATA$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Audio.UnsafeNativeStructures/XACT_EMITTER_DATA", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "pCone", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])); 
    $.Field({Static:false, Public:false}, "_Forward", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "_Up", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "_Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "_Velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "_innerRadius", $.Single); 
    $.Field({Static:false, Public:false}, "_innerRadiusAngle", $.Single); 
    $.Field({Static:false, Public:false}, "ChannelCount", $.UInt32); 
    $.Field({Static:false, Public:false}, "ChannelRadius", $.Single); 
    $.Field({Static:false, Public:false}, "pChannelAzimuths", $jsilcore.TypeRef("JSIL.Pointer", [$.Single])); 
    $.Field({Static:false, Public:false}, "pVolumeCurve", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])); 
    $.Field({Static:false, Public:false}, "pLfeCurve", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])); 
    $.Field({Static:false, Public:false}, "pLpfDirectCurve", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])); 
    $.Field({Static:false, Public:false}, "pLpfReverbCurve", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])); 
    $.Field({Static:false, Public:false}, "pReverbCurve", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])); 
    $.Field({Static:false, Public:false}, "CurveDistanceScaler", $.Single); 
    $.Field({Static:false, Public:false}, "_DopplerScale", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.NoMicrophoneConnectedException */ 

(function NoMicrophoneConnectedException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Exception"), 
      Name: "Microsoft.Xna.Framework.Audio.NoMicrophoneConnectedException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1032:ImplementStandardExceptionConstructors"]; });

})();

/* class Microsoft.Xna.Framework.FrameworkResources */ 

(function FrameworkResources$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.FrameworkResources", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode"]; });

    $.ExternalMethod({Static:true , Public:false}, "get_AllPlayersFolder", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AloneInTheParty", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Apply3DBeforePlaying", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArrayMultipleFour", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BackBufferBadSize", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BadXnb", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BadXnbGraphicsProfile", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BadXnbMagic", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BadXnbPlatform", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BadXnbSize", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BadXnbTypeVersion", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BadXnbVersion", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BadXnbWrongType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BeginMustBeCalledBeforeDraw", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BeginMustBeCalledBeforeEnd", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BindPoseNotAvailable", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BlobStreamIsNotExpandable", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BoundingBoxZeroPoints", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BoundingSphereZeroPoints", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BoundStateObject", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BuiltInEffectWrongTextureType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CallFrameworkDispatcherUpdate", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CannotCallSpriteBeginTwice", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CannotClearNullDepth", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CannotDrawNoData", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CannotDrawNoShader", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CannotEndTwice", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CannotGetBackBufferActiveRenderTargets", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CannotMixShader2and3", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CannotNextSpriteBeginImmediate", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CannotPresentActiveRenderTargets", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CannotSetAlreadyUsedRenderTarget", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CannotUseFormatTypeAsManualWhenLocking", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CantDisableLighting", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CantRemoveLocalMachine", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CantSerializeMember", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CantSerializeReadOnlyNull", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CharacterNotInFont", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ContentManagerCannotChangeRootDirectory", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CouldNotCreateResource", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CouldNotDeleteContainerAlreadyInUse", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CouldNotReadKeyboard", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CueNotFound", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Globalization.CultureInfo"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DataNotAvailable", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DecompressionError", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DeviceCannotBeNullOnResourceCreate", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DirectRenderingWrongAppType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DirectRenderingWrongMode", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DriverError", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DuplicateVertexElement", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DxtNotMultipleOfFour", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EmptySongCollectionsCannotBePlayed", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EndMustBeCalledBeforeBegin", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Expired", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GamerAlreadyInSession", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GamerInvalid", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GamerNull", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GamerServicesAlreadyInitialized", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GamerServicesGuideAlreadyVisible", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GamerServicesInitializeFromNonUIThread", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GamerServicesNotInitialized", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GesturesNotAvailable", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GesturesNotEnabled", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GuideIsShowing", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IAsyncNotFromBegin", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InCallback", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IndexBuffersMustBeSizedCorrectly", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InstallingTitleUpdate", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InstancePlayFailedDueToLimit", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidAccelerometer", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidApply3DCall", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidAudioBuffer", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidAudioBufferOffset", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidBufferSize", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidBytesPerCluster", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidCacheContainerOpenAsyncResult", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidCall", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidCategory", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidContentVersion", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidController", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidCue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidDataSize", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidDevice", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidDisplayOrientation", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidDynamicIsLoopedCall", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidEmitterDopplerScale", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidEntryCount", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidFileCacheSize", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidInstanceStreams", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidIsLoopedCall", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidLoopRegion", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidMicrophoneBufferDuration", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidNativeHandle", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidOffsetCountLength", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidPanCall", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidRectangle", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidServiceProvider", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidSessionState", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidSoundOffsetOrIndex", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidStoragePath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidStringFormat", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidTitleContainerName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidTotalSize", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidTouchPanel", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidTrackIndex", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidUsage", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidVariableIndex", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidWaveIndex", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidWaveStream", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidXactVolume", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InviteeNotSignedIn", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IsCompleteMustBeCalled", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LeaderboardColumnNotFound", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LeaderboardColumnOverflow", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LeaderboardIsArbitrated", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LeaderboardNotLocal", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LeaderboardReaderCannotPage", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LeaderboardWriteOverflow", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LIVEn400BadRequest", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LIVEn401Unauthorized", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LIVEn500InternalServerError", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LIVEn503ServiceUnavailable", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LIVEnAccountBanned", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LIVEnAccountSuspended", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LIVEnCountryNotSupported", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LIVEnFlashUpdateRequired", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LIVEnGamertagChangeRequired", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LIVEnGamertagUpdateRequired", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LIVEnInvalidUser", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LIVEnNotSupportedTitle", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LIVEnNoXBLAccount", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LIVEnServiceNotProvisioned", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LIVEnTermsOfServiceNotAccepted", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LIVEnTitleUpdateRequired", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LIVEnUnexpectedNetworkError", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LIVEnXBLConnectionUnavailable", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LIVEnXBLNotEnabled", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LocalDeviceLibrary", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MissingNativeDependency", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MissingVertexShaderInput", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MissingVertexShaderInputDetails", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MobileNoInstancing", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ModelHasNoEffect", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ModelHasNoIEffectMatrices", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MoreData", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustBeValidIndex", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustCallBeginSprite", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustDrawSomething", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustResolveRenderTarget", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustRetrieveAtLeastOne", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustUserShaderCode", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NegativePlaneDistance", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NegativeRadius", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NetworkError", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NetworkGamerDisposed", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NetworkGamerNotLocal", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NetworkGamerRequired", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NetworkGamerWrongSession", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NetworkNotAvailable", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NetworkOperationTimedOut", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NetworkSessionPropertiesReadOnly", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoAudioPlaybackDevicesFound", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoCreatorsClub", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoDefaultConstructor", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoDeviceConnected", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoGraphicsDevice", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoGraphicsDeviceContent", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoJoinInProgress", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NonZeroInstanceFrequency", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoProjectGuid", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoPublicSlots", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NotCurrentTechnique", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NotEnoughCorners", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NotEnoughPacketSpace", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NotEnoughSourceSize", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NotEnoughTargetSize", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NotFound", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NotInvited", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoWaveBank", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NullGraphicsDeviceService", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NullNotAllowed", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NullWindowHandleNotAllowed", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NumberVerticesMustBeGreaterZero", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ObjectDisposedException", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OffsetNotValid", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OnlyOneCacheContainer", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OnlySupportedForLIVEn", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OnlySupportedForXboxLIVE", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OpenResourceNotBinary", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OpenResourceNotFound", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OpenStreamError", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OpenStreamNotFound", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OppositePlanes", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OutOfMemoryDrawUserPrimitives", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OutRangeFieldOfView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OverTheInstancePacketLimit", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PacketArrayTooSmall", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PacketQueueFull", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PlayerDeviceAlreadyOpened", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PlayerFourFolder", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PlayerOneFolder", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PlayerThreeFolder", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PlayerTwoFolder", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProFeatureNotSupported", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileAspectRatio", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileDataCountRange", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileDataIndexOutOfRange", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileDataOffsetRange", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileDataSizeTooBig", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileFeatureNotSupported", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileFormatNotSupported", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileInvalidBlendFormat", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileInvalidDevice", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileInvalidFilterFormat", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileMaxPrimitiveCount", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileMaxRenderTargets", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileMaxVertexElements", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileMaxVertexStreams", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileMaxVertexStride", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileNoIndexElementSize32", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileNoMinMaxSrcDestBlend", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileNoSeparateAlphaBlend", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileNotPowerOfTwo", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileNotPowerOfTwoDXT", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileNotPowerOfTwoMipped", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileNotPrivileged", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileNotSignedIn", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileNoWrapNonPow2", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfilePixelShaderModel", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileTooBig", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileVertexShaderModel", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProfileVertexTextureFormatNotSupported", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProxyAlreadyRunning", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProxyCreateFailed", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProxyInitializeFailed", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProxyMissingDependency", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ProxyUpdateFailed", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RankedNoJoinInProgress", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ReaderConstructedNewInstance", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ReadOnly", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ReadOnlySharedResource", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ReflectiveReaderTypeNotFound", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RenderTargetsMustMatch", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RequireNonNullAudioEngine", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceDataMustBeCorrectSize", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceInUse", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceManager", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Resources.ResourceManager"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ResourcesMustBeGreaterThanZeroSize", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceTooLarge", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SavedGameFolder", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ScissorInvalid", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SelectVariation", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SessionAlreadyExists", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SessionEnded", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SessionFindLocal", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SessionFull", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SessionNotFound", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SessionNotHost", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SessionNotJoinable", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShaderCodeSizeMustBeDword", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShadersMustBeCompiled", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ShowSignInPaneCountInvalid", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SimulateMarketplacePurchaseCancelString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SimulateMarketplacePurchaseOkString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SimulateMarketplacePurchaseString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SimulateMarketplaceTitleString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SkinnedEffectMaxBones", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SkinnedEffectWeightsPerVertex", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SongPlaybackFailed", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_StaleSearchResult", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_StreamNotSeekable", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_StreamTooLong", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_StringCollectionInvalid", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_StringNullEmptyOrTooLong", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_StringTooLong", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TargetElapsedNegative", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TargetElapsedTooLarge", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TitleNameNotNull", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TooManyOperations", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TooManyPendingAsyncOperations", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TooManyRegions", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TrialMode", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TrueSkillNotHost", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypeReaderDuplicate", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypeReaderInvalid", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypeReaderNotFound", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypeReaderNotRegistered", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnexpectedError", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnknownError", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_VertexElementBadUsage", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_VertexElementOffsetNotMultipleFour", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_VertexElementOutsideStride", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_VertexElementsOverlap", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_VertexStrideTooSmall", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_VertexTypeNotIVertexType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_VertexTypeNotValueType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_VertexTypeNullDeclaration", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_VertexTypeWrongSize", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ViewportInvalid", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_VisualizationArrayTooSmall", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_VoiceDestructionFailed", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_WaveBankNotPrepared", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_WmpMediaSource", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_WriteLeaderboardException", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_WriteOnlyGetNotSupported", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_WrongNumberOfGamers", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_WrongTextureFormat", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XactReadFile", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XBLIGFeatureNotSupported", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XdkUnexpectedError", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XlastAchievement", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XlastAvatarAsset", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XlastContextValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XlastGameMode", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XlastGamerPicture", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XlastLeaderboard", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XlastPresenceMode", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XlastProperty", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XlastUnknown", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "set_Culture", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Globalization.CultureInfo")], [])
    );

    $.Field({Static:true , Public:false}, "resourceMan", $asm09.TypeRef("System.Resources.ResourceManager")); 
    $.Field({Static:true , Public:false}, "resourceCulture", $asm09.TypeRef("System.Globalization.CultureInfo")); 
    $.Property({Static:true , Public:false}, "ResourceManager", $asm09.TypeRef("System.Resources.ResourceManager"))
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "Culture", $asm09.TypeRef("System.Globalization.CultureInfo"))
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "AllPlayersFolder", $.String);

    $.Property({Static:true , Public:false}, "AloneInTheParty", $.String);

    $.Property({Static:true , Public:false}, "Apply3DBeforePlaying", $.String);

    $.Property({Static:true , Public:false}, "ArrayMultipleFour", $.String);

    $.Property({Static:true , Public:false}, "BackBufferBadSize", $.String);

    $.Property({Static:true , Public:false}, "BadXnb", $.String);

    $.Property({Static:true , Public:false}, "BadXnbGraphicsProfile", $.String);

    $.Property({Static:true , Public:false}, "BadXnbMagic", $.String);

    $.Property({Static:true , Public:false}, "BadXnbPlatform", $.String);

    $.Property({Static:true , Public:false}, "BadXnbSize", $.String);

    $.Property({Static:true , Public:false}, "BadXnbTypeVersion", $.String);

    $.Property({Static:true , Public:false}, "BadXnbVersion", $.String);

    $.Property({Static:true , Public:false}, "BadXnbWrongType", $.String);

    $.Property({Static:true , Public:false}, "BeginMustBeCalledBeforeDraw", $.String);

    $.Property({Static:true , Public:false}, "BeginMustBeCalledBeforeEnd", $.String);

    $.Property({Static:true , Public:false}, "BindPoseNotAvailable", $.String);

    $.Property({Static:true , Public:false}, "BlobStreamIsNotExpandable", $.String);

    $.Property({Static:true , Public:false}, "BoundingBoxZeroPoints", $.String);

    $.Property({Static:true , Public:false}, "BoundingSphereZeroPoints", $.String);

    $.Property({Static:true , Public:false}, "BoundStateObject", $.String);

    $.Property({Static:true , Public:false}, "BuiltInEffectWrongTextureType", $.String);

    $.Property({Static:true , Public:false}, "CallFrameworkDispatcherUpdate", $.String);

    $.Property({Static:true , Public:false}, "CannotCallSpriteBeginTwice", $.String);

    $.Property({Static:true , Public:false}, "CannotClearNullDepth", $.String);

    $.Property({Static:true , Public:false}, "CannotDrawNoData", $.String);

    $.Property({Static:true , Public:false}, "CannotDrawNoShader", $.String);

    $.Property({Static:true , Public:false}, "CannotEndTwice", $.String);

    $.Property({Static:true , Public:false}, "CannotGetBackBufferActiveRenderTargets", $.String);

    $.Property({Static:true , Public:false}, "CannotMixShader2and3", $.String);

    $.Property({Static:true , Public:false}, "CannotNextSpriteBeginImmediate", $.String);

    $.Property({Static:true , Public:false}, "CannotPresentActiveRenderTargets", $.String);

    $.Property({Static:true , Public:false}, "CannotSetAlreadyUsedRenderTarget", $.String);

    $.Property({Static:true , Public:false}, "CannotUseFormatTypeAsManualWhenLocking", $.String);

    $.Property({Static:true , Public:false}, "CantDisableLighting", $.String);

    $.Property({Static:true , Public:false}, "CantRemoveLocalMachine", $.String);

    $.Property({Static:true , Public:false}, "CantSerializeMember", $.String);

    $.Property({Static:true , Public:false}, "CantSerializeReadOnlyNull", $.String);

    $.Property({Static:true , Public:false}, "CharacterNotInFont", $.String);

    $.Property({Static:true , Public:false}, "ContentManagerCannotChangeRootDirectory", $.String);

    $.Property({Static:true , Public:false}, "CouldNotCreateResource", $.String);

    $.Property({Static:true , Public:false}, "CouldNotDeleteContainerAlreadyInUse", $.String);

    $.Property({Static:true , Public:false}, "CouldNotReadKeyboard", $.String);

    $.Property({Static:true , Public:false}, "CueNotFound", $.String);

    $.Property({Static:true , Public:false}, "DataNotAvailable", $.String);

    $.Property({Static:true , Public:false}, "DecompressionError", $.String);

    $.Property({Static:true , Public:false}, "DeviceCannotBeNullOnResourceCreate", $.String);

    $.Property({Static:true , Public:false}, "DirectRenderingWrongAppType", $.String);

    $.Property({Static:true , Public:false}, "DirectRenderingWrongMode", $.String);

    $.Property({Static:true , Public:false}, "DriverError", $.String);

    $.Property({Static:true , Public:false}, "DuplicateVertexElement", $.String);

    $.Property({Static:true , Public:false}, "DxtNotMultipleOfFour", $.String);

    $.Property({Static:true , Public:false}, "EmptySongCollectionsCannotBePlayed", $.String);

    $.Property({Static:true , Public:false}, "EndMustBeCalledBeforeBegin", $.String);

    $.Property({Static:true , Public:false}, "Expired", $.String);

    $.Property({Static:true , Public:false}, "GamerAlreadyInSession", $.String);

    $.Property({Static:true , Public:false}, "GamerInvalid", $.String);

    $.Property({Static:true , Public:false}, "GamerNull", $.String);

    $.Property({Static:true , Public:false}, "GamerServicesAlreadyInitialized", $.String);

    $.Property({Static:true , Public:false}, "GamerServicesGuideAlreadyVisible", $.String);

    $.Property({Static:true , Public:false}, "GamerServicesInitializeFromNonUIThread", $.String);

    $.Property({Static:true , Public:false}, "GamerServicesNotInitialized", $.String);

    $.Property({Static:true , Public:false}, "GesturesNotAvailable", $.String);

    $.Property({Static:true , Public:false}, "GesturesNotEnabled", $.String);

    $.Property({Static:true , Public:false}, "GuideIsShowing", $.String);

    $.Property({Static:true , Public:false}, "IAsyncNotFromBegin", $.String);

    $.Property({Static:true , Public:false}, "InCallback", $.String);

    $.Property({Static:true , Public:false}, "IndexBuffersMustBeSizedCorrectly", $.String);

    $.Property({Static:true , Public:false}, "InstallingTitleUpdate", $.String);

    $.Property({Static:true , Public:false}, "InstancePlayFailedDueToLimit", $.String);

    $.Property({Static:true , Public:false}, "InvalidAccelerometer", $.String);

    $.Property({Static:true , Public:false}, "InvalidApply3DCall", $.String);

    $.Property({Static:true , Public:false}, "InvalidAudioBuffer", $.String);

    $.Property({Static:true , Public:false}, "InvalidAudioBufferOffset", $.String);

    $.Property({Static:true , Public:false}, "InvalidBufferSize", $.String);

    $.Property({Static:true , Public:false}, "InvalidBytesPerCluster", $.String);

    $.Property({Static:true , Public:false}, "InvalidCacheContainerOpenAsyncResult", $.String);

    $.Property({Static:true , Public:false}, "InvalidCall", $.String);

    $.Property({Static:true , Public:false}, "InvalidCategory", $.String);

    $.Property({Static:true , Public:false}, "InvalidContentVersion", $.String);

    $.Property({Static:true , Public:false}, "InvalidController", $.String);

    $.Property({Static:true , Public:false}, "InvalidCue", $.String);

    $.Property({Static:true , Public:false}, "InvalidDataSize", $.String);

    $.Property({Static:true , Public:false}, "InvalidDevice", $.String);

    $.Property({Static:true , Public:false}, "InvalidDisplayOrientation", $.String);

    $.Property({Static:true , Public:false}, "InvalidDynamicIsLoopedCall", $.String);

    $.Property({Static:true , Public:false}, "InvalidEmitterDopplerScale", $.String);

    $.Property({Static:true , Public:false}, "InvalidEntryCount", $.String);

    $.Property({Static:true , Public:false}, "InvalidFileCacheSize", $.String);

    $.Property({Static:true , Public:false}, "InvalidInstanceStreams", $.String);

    $.Property({Static:true , Public:false}, "InvalidIsLoopedCall", $.String);

    $.Property({Static:true , Public:false}, "InvalidLoopRegion", $.String);

    $.Property({Static:true , Public:false}, "InvalidMicrophoneBufferDuration", $.String);

    $.Property({Static:true , Public:false}, "InvalidNativeHandle", $.String);

    $.Property({Static:true , Public:false}, "InvalidOffsetCountLength", $.String);

    $.Property({Static:true , Public:false}, "InvalidPanCall", $.String);

    $.Property({Static:true , Public:false}, "InvalidRectangle", $.String);

    $.Property({Static:true , Public:false}, "InvalidServiceProvider", $.String);

    $.Property({Static:true , Public:false}, "InvalidSessionState", $.String);

    $.Property({Static:true , Public:false}, "InvalidSoundOffsetOrIndex", $.String);

    $.Property({Static:true , Public:false}, "InvalidStoragePath", $.String);

    $.Property({Static:true , Public:false}, "InvalidStringFormat", $.String);

    $.Property({Static:true , Public:false}, "InvalidTitleContainerName", $.String);

    $.Property({Static:true , Public:false}, "InvalidTotalSize", $.String);

    $.Property({Static:true , Public:false}, "InvalidTouchPanel", $.String);

    $.Property({Static:true , Public:false}, "InvalidTrackIndex", $.String);

    $.Property({Static:true , Public:false}, "InvalidUsage", $.String);

    $.Property({Static:true , Public:false}, "InvalidVariableIndex", $.String);

    $.Property({Static:true , Public:false}, "InvalidWaveIndex", $.String);

    $.Property({Static:true , Public:false}, "InvalidWaveStream", $.String);

    $.Property({Static:true , Public:false}, "InvalidXactVolume", $.String);

    $.Property({Static:true , Public:false}, "InviteeNotSignedIn", $.String);

    $.Property({Static:true , Public:false}, "IsCompleteMustBeCalled", $.String);

    $.Property({Static:true , Public:false}, "LeaderboardColumnNotFound", $.String);

    $.Property({Static:true , Public:false}, "LeaderboardColumnOverflow", $.String);

    $.Property({Static:true , Public:false}, "LeaderboardIsArbitrated", $.String);

    $.Property({Static:true , Public:false}, "LeaderboardNotLocal", $.String);

    $.Property({Static:true , Public:false}, "LeaderboardReaderCannotPage", $.String);

    $.Property({Static:true , Public:false}, "LeaderboardWriteOverflow", $.String);

    $.Property({Static:true , Public:false}, "LIVEn400BadRequest", $.String);

    $.Property({Static:true , Public:false}, "LIVEn401Unauthorized", $.String);

    $.Property({Static:true , Public:false}, "LIVEn500InternalServerError", $.String);

    $.Property({Static:true , Public:false}, "LIVEn503ServiceUnavailable", $.String);

    $.Property({Static:true , Public:false}, "LIVEnAccountBanned", $.String);

    $.Property({Static:true , Public:false}, "LIVEnAccountSuspended", $.String);

    $.Property({Static:true , Public:false}, "LIVEnCountryNotSupported", $.String);

    $.Property({Static:true , Public:false}, "LIVEnFlashUpdateRequired", $.String);

    $.Property({Static:true , Public:false}, "LIVEnGamertagChangeRequired", $.String);

    $.Property({Static:true , Public:false}, "LIVEnGamertagUpdateRequired", $.String);

    $.Property({Static:true , Public:false}, "LIVEnInvalidUser", $.String);

    $.Property({Static:true , Public:false}, "LIVEnNotSupportedTitle", $.String);

    $.Property({Static:true , Public:false}, "LIVEnNoXBLAccount", $.String);

    $.Property({Static:true , Public:false}, "LIVEnServiceNotProvisioned", $.String);

    $.Property({Static:true , Public:false}, "LIVEnTermsOfServiceNotAccepted", $.String);

    $.Property({Static:true , Public:false}, "LIVEnTitleUpdateRequired", $.String);

    $.Property({Static:true , Public:false}, "LIVEnUnexpectedNetworkError", $.String);

    $.Property({Static:true , Public:false}, "LIVEnXBLConnectionUnavailable", $.String);

    $.Property({Static:true , Public:false}, "LIVEnXBLNotEnabled", $.String);

    $.Property({Static:true , Public:false}, "LocalDeviceLibrary", $.String);

    $.Property({Static:true , Public:false}, "MissingNativeDependency", $.String);

    $.Property({Static:true , Public:false}, "MissingVertexShaderInput", $.String);

    $.Property({Static:true , Public:false}, "MissingVertexShaderInputDetails", $.String);

    $.Property({Static:true , Public:false}, "MobileNoInstancing", $.String);

    $.Property({Static:true , Public:false}, "ModelHasNoEffect", $.String);

    $.Property({Static:true , Public:false}, "ModelHasNoIEffectMatrices", $.String);

    $.Property({Static:true , Public:false}, "MoreData", $.String);

    $.Property({Static:true , Public:false}, "MustBeValidIndex", $.String);

    $.Property({Static:true , Public:false}, "MustCallBeginSprite", $.String);

    $.Property({Static:true , Public:false}, "MustDrawSomething", $.String);

    $.Property({Static:true , Public:false}, "MustResolveRenderTarget", $.String);

    $.Property({Static:true , Public:false}, "MustRetrieveAtLeastOne", $.String);

    $.Property({Static:true , Public:false}, "MustUserShaderCode", $.String);

    $.Property({Static:true , Public:false}, "NegativePlaneDistance", $.String);

    $.Property({Static:true , Public:false}, "NegativeRadius", $.String);

    $.Property({Static:true , Public:false}, "NetworkError", $.String);

    $.Property({Static:true , Public:false}, "NetworkGamerDisposed", $.String);

    $.Property({Static:true , Public:false}, "NetworkGamerNotLocal", $.String);

    $.Property({Static:true , Public:false}, "NetworkGamerRequired", $.String);

    $.Property({Static:true , Public:false}, "NetworkGamerWrongSession", $.String);

    $.Property({Static:true , Public:false}, "NetworkNotAvailable", $.String);

    $.Property({Static:true , Public:false}, "NetworkOperationTimedOut", $.String);

    $.Property({Static:true , Public:false}, "NetworkSessionPropertiesReadOnly", $.String);

    $.Property({Static:true , Public:false}, "NoAudioPlaybackDevicesFound", $.String);

    $.Property({Static:true , Public:false}, "NoCreatorsClub", $.String);

    $.Property({Static:true , Public:false}, "NoDefaultConstructor", $.String);

    $.Property({Static:true , Public:false}, "NoDeviceConnected", $.String);

    $.Property({Static:true , Public:false}, "NoGraphicsDevice", $.String);

    $.Property({Static:true , Public:false}, "NoGraphicsDeviceContent", $.String);

    $.Property({Static:true , Public:false}, "NoJoinInProgress", $.String);

    $.Property({Static:true , Public:false}, "NonZeroInstanceFrequency", $.String);

    $.Property({Static:true , Public:false}, "NoProjectGuid", $.String);

    $.Property({Static:true , Public:false}, "NoPublicSlots", $.String);

    $.Property({Static:true , Public:false}, "NotCurrentTechnique", $.String);

    $.Property({Static:true , Public:false}, "NotEnoughCorners", $.String);

    $.Property({Static:true , Public:false}, "NotEnoughPacketSpace", $.String);

    $.Property({Static:true , Public:false}, "NotEnoughSourceSize", $.String);

    $.Property({Static:true , Public:false}, "NotEnoughTargetSize", $.String);

    $.Property({Static:true , Public:false}, "NotFound", $.String);

    $.Property({Static:true , Public:false}, "NotInvited", $.String);

    $.Property({Static:true , Public:false}, "NoWaveBank", $.String);

    $.Property({Static:true , Public:false}, "NullGraphicsDeviceService", $.String);

    $.Property({Static:true , Public:false}, "NullNotAllowed", $.String);

    $.Property({Static:true , Public:false}, "NullWindowHandleNotAllowed", $.String);

    $.Property({Static:true , Public:false}, "NumberVerticesMustBeGreaterZero", $.String);

    $.Property({Static:true , Public:false}, "ObjectDisposedException", $.String);

    $.Property({Static:true , Public:false}, "OffsetNotValid", $.String);

    $.Property({Static:true , Public:false}, "OnlyOneCacheContainer", $.String);

    $.Property({Static:true , Public:false}, "OnlySupportedForLIVEn", $.String);

    $.Property({Static:true , Public:false}, "OnlySupportedForXboxLIVE", $.String);

    $.Property({Static:true , Public:false}, "OpenResourceNotBinary", $.String);

    $.Property({Static:true , Public:false}, "OpenResourceNotFound", $.String);

    $.Property({Static:true , Public:false}, "OpenStreamError", $.String);

    $.Property({Static:true , Public:false}, "OpenStreamNotFound", $.String);

    $.Property({Static:true , Public:false}, "OppositePlanes", $.String);

    $.Property({Static:true , Public:false}, "OutOfMemoryDrawUserPrimitives", $.String);

    $.Property({Static:true , Public:false}, "OutRangeFieldOfView", $.String);

    $.Property({Static:true , Public:false}, "OverTheInstancePacketLimit", $.String);

    $.Property({Static:true , Public:false}, "PacketArrayTooSmall", $.String);

    $.Property({Static:true , Public:false}, "PacketQueueFull", $.String);

    $.Property({Static:true , Public:false}, "PlayerDeviceAlreadyOpened", $.String);

    $.Property({Static:true , Public:false}, "PlayerFourFolder", $.String);

    $.Property({Static:true , Public:false}, "PlayerOneFolder", $.String);

    $.Property({Static:true , Public:false}, "PlayerThreeFolder", $.String);

    $.Property({Static:true , Public:false}, "PlayerTwoFolder", $.String);

    $.Property({Static:true , Public:false}, "ProFeatureNotSupported", $.String);

    $.Property({Static:true , Public:false}, "ProfileAspectRatio", $.String);

    $.Property({Static:true , Public:false}, "ProfileDataCountRange", $.String);

    $.Property({Static:true , Public:false}, "ProfileDataIndexOutOfRange", $.String);

    $.Property({Static:true , Public:false}, "ProfileDataOffsetRange", $.String);

    $.Property({Static:true , Public:false}, "ProfileDataSizeTooBig", $.String);

    $.Property({Static:true , Public:false}, "ProfileFeatureNotSupported", $.String);

    $.Property({Static:true , Public:false}, "ProfileFormatNotSupported", $.String);

    $.Property({Static:true , Public:false}, "ProfileInvalidBlendFormat", $.String);

    $.Property({Static:true , Public:false}, "ProfileInvalidDevice", $.String);

    $.Property({Static:true , Public:false}, "ProfileInvalidFilterFormat", $.String);

    $.Property({Static:true , Public:false}, "ProfileMaxPrimitiveCount", $.String);

    $.Property({Static:true , Public:false}, "ProfileMaxRenderTargets", $.String);

    $.Property({Static:true , Public:false}, "ProfileMaxVertexElements", $.String);

    $.Property({Static:true , Public:false}, "ProfileMaxVertexStreams", $.String);

    $.Property({Static:true , Public:false}, "ProfileMaxVertexStride", $.String);

    $.Property({Static:true , Public:false}, "ProfileNoIndexElementSize32", $.String);

    $.Property({Static:true , Public:false}, "ProfileNoMinMaxSrcDestBlend", $.String);

    $.Property({Static:true , Public:false}, "ProfileNoSeparateAlphaBlend", $.String);

    $.Property({Static:true , Public:false}, "ProfileNotPowerOfTwo", $.String);

    $.Property({Static:true , Public:false}, "ProfileNotPowerOfTwoDXT", $.String);

    $.Property({Static:true , Public:false}, "ProfileNotPowerOfTwoMipped", $.String);

    $.Property({Static:true , Public:false}, "ProfileNotPrivileged", $.String);

    $.Property({Static:true , Public:false}, "ProfileNotSignedIn", $.String);

    $.Property({Static:true , Public:false}, "ProfileNoWrapNonPow2", $.String);

    $.Property({Static:true , Public:false}, "ProfilePixelShaderModel", $.String);

    $.Property({Static:true , Public:false}, "ProfileTooBig", $.String);

    $.Property({Static:true , Public:false}, "ProfileVertexShaderModel", $.String);

    $.Property({Static:true , Public:false}, "ProfileVertexTextureFormatNotSupported", $.String);

    $.Property({Static:true , Public:false}, "ProxyAlreadyRunning", $.String);

    $.Property({Static:true , Public:false}, "ProxyCreateFailed", $.String);

    $.Property({Static:true , Public:false}, "ProxyInitializeFailed", $.String);

    $.Property({Static:true , Public:false}, "ProxyMissingDependency", $.String);

    $.Property({Static:true , Public:false}, "ProxyUpdateFailed", $.String);

    $.Property({Static:true , Public:false}, "RankedNoJoinInProgress", $.String);

    $.Property({Static:true , Public:false}, "ReaderConstructedNewInstance", $.String);

    $.Property({Static:true , Public:false}, "ReadOnly", $.String);

    $.Property({Static:true , Public:false}, "ReadOnlySharedResource", $.String);

    $.Property({Static:true , Public:false}, "ReflectiveReaderTypeNotFound", $.String);

    $.Property({Static:true , Public:false}, "RenderTargetsMustMatch", $.String);

    $.Property({Static:true , Public:false}, "RequireNonNullAudioEngine", $.String);

    $.Property({Static:true , Public:false}, "ResourceDataMustBeCorrectSize", $.String);

    $.Property({Static:true , Public:false}, "ResourceInUse", $.String);

    $.Property({Static:true , Public:false}, "ResourcesMustBeGreaterThanZeroSize", $.String);

    $.Property({Static:true , Public:false}, "ResourceTooLarge", $.String);

    $.Property({Static:true , Public:false}, "SavedGameFolder", $.String);

    $.Property({Static:true , Public:false}, "ScissorInvalid", $.String);

    $.Property({Static:true , Public:false}, "SelectVariation", $.String);

    $.Property({Static:true , Public:false}, "SessionAlreadyExists", $.String);

    $.Property({Static:true , Public:false}, "SessionEnded", $.String);

    $.Property({Static:true , Public:false}, "SessionFindLocal", $.String);

    $.Property({Static:true , Public:false}, "SessionFull", $.String);

    $.Property({Static:true , Public:false}, "SessionNotFound", $.String);

    $.Property({Static:true , Public:false}, "SessionNotHost", $.String);

    $.Property({Static:true , Public:false}, "SessionNotJoinable", $.String);

    $.Property({Static:true , Public:false}, "ShaderCodeSizeMustBeDword", $.String);

    $.Property({Static:true , Public:false}, "ShadersMustBeCompiled", $.String);

    $.Property({Static:true , Public:false}, "ShowSignInPaneCountInvalid", $.String);

    $.Property({Static:true , Public:false}, "SimulateMarketplacePurchaseCancelString", $.String);

    $.Property({Static:true , Public:false}, "SimulateMarketplacePurchaseOkString", $.String);

    $.Property({Static:true , Public:false}, "SimulateMarketplacePurchaseString", $.String);

    $.Property({Static:true , Public:false}, "SimulateMarketplaceTitleString", $.String);

    $.Property({Static:true , Public:false}, "SkinnedEffectMaxBones", $.String);

    $.Property({Static:true , Public:false}, "SkinnedEffectWeightsPerVertex", $.String);

    $.Property({Static:true , Public:false}, "SongPlaybackFailed", $.String);

    $.Property({Static:true , Public:false}, "StaleSearchResult", $.String);

    $.Property({Static:true , Public:false}, "StreamNotSeekable", $.String);

    $.Property({Static:true , Public:false}, "StreamTooLong", $.String);

    $.Property({Static:true , Public:false}, "StringCollectionInvalid", $.String);

    $.Property({Static:true , Public:false}, "StringNullEmptyOrTooLong", $.String);

    $.Property({Static:true , Public:false}, "StringTooLong", $.String);

    $.Property({Static:true , Public:false}, "TargetElapsedNegative", $.String);

    $.Property({Static:true , Public:false}, "TargetElapsedTooLarge", $.String);

    $.Property({Static:true , Public:false}, "TitleNameNotNull", $.String);

    $.Property({Static:true , Public:false}, "TooManyOperations", $.String);

    $.Property({Static:true , Public:false}, "TooManyPendingAsyncOperations", $.String);

    $.Property({Static:true , Public:false}, "TooManyRegions", $.String);

    $.Property({Static:true , Public:false}, "TrialMode", $.String);

    $.Property({Static:true , Public:false}, "TrueSkillNotHost", $.String);

    $.Property({Static:true , Public:false}, "TypeReaderDuplicate", $.String);

    $.Property({Static:true , Public:false}, "TypeReaderInvalid", $.String);

    $.Property({Static:true , Public:false}, "TypeReaderNotFound", $.String);

    $.Property({Static:true , Public:false}, "TypeReaderNotRegistered", $.String);

    $.Property({Static:true , Public:false}, "UnexpectedError", $.String);

    $.Property({Static:true , Public:false}, "UnknownError", $.String);

    $.Property({Static:true , Public:false}, "VertexElementBadUsage", $.String);

    $.Property({Static:true , Public:false}, "VertexElementOffsetNotMultipleFour", $.String);

    $.Property({Static:true , Public:false}, "VertexElementOutsideStride", $.String);

    $.Property({Static:true , Public:false}, "VertexElementsOverlap", $.String);

    $.Property({Static:true , Public:false}, "VertexStrideTooSmall", $.String);

    $.Property({Static:true , Public:false}, "VertexTypeNotIVertexType", $.String);

    $.Property({Static:true , Public:false}, "VertexTypeNotValueType", $.String);

    $.Property({Static:true , Public:false}, "VertexTypeNullDeclaration", $.String);

    $.Property({Static:true , Public:false}, "VertexTypeWrongSize", $.String);

    $.Property({Static:true , Public:false}, "ViewportInvalid", $.String);

    $.Property({Static:true , Public:false}, "VisualizationArrayTooSmall", $.String);

    $.Property({Static:true , Public:false}, "VoiceDestructionFailed", $.String);

    $.Property({Static:true , Public:false}, "WaveBankNotPrepared", $.String);

    $.Property({Static:true , Public:false}, "WmpMediaSource", $.String);

    $.Property({Static:true , Public:false}, "WriteLeaderboardException", $.String);

    $.Property({Static:true , Public:false}, "WriteOnlyGetNotSupported", $.String);

    $.Property({Static:true , Public:false}, "WrongNumberOfGamers", $.String);

    $.Property({Static:true , Public:false}, "WrongTextureFormat", $.String);

    $.Property({Static:true , Public:false}, "XactReadFile", $.String);

    $.Property({Static:true , Public:false}, "XBLIGFeatureNotSupported", $.String);

    $.Property({Static:true , Public:false}, "XdkUnexpectedError", $.String);

    $.Property({Static:true , Public:false}, "XlastAchievement", $.String);

    $.Property({Static:true , Public:false}, "XlastAvatarAsset", $.String);

    $.Property({Static:true , Public:false}, "XlastContextValue", $.String);

    $.Property({Static:true , Public:false}, "XlastGameMode", $.String);

    $.Property({Static:true , Public:false}, "XlastGamerPicture", $.String);

    $.Property({Static:true , Public:false}, "XlastLeaderboard", $.String);

    $.Property({Static:true , Public:false}, "XlastPresenceMode", $.String);

    $.Property({Static:true , Public:false}, "XlastProperty", $.String);

    $.Property({Static:true , Public:false}, "XlastUnknown", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerNonUserCodeAttribute"))
    .Attribute($asm0B.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0"]; });

})();

/* class Microsoft.Xna.Framework.FrameworkUIResources */ 

(function FrameworkUIResources$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.FrameworkUIResources", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode"]; });

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Globalization.CultureInfo"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GamerServicesCancelButton", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_GamerServicesOkButton", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceManager", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Resources.ResourceManager"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "set_Culture", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Globalization.CultureInfo")], [])
    );

    $.Field({Static:true , Public:false}, "resourceMan", $asm09.TypeRef("System.Resources.ResourceManager")); 
    $.Field({Static:true , Public:false}, "resourceCulture", $asm09.TypeRef("System.Globalization.CultureInfo")); 
    $.Property({Static:true , Public:false}, "ResourceManager", $asm09.TypeRef("System.Resources.ResourceManager"))
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "Culture", $asm09.TypeRef("System.Globalization.CultureInfo"))
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "GamerServicesOkButton", $.String);

    $.Property({Static:true , Public:false}, "GamerServicesCancelButton", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0"]; })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerNonUserCodeAttribute"))
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* enum Microsoft.Xna.Framework.PlayerIndex */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.PlayerIndex", true, {
    One: 0, 
    Two: 1, 
    Three: 2, 
    Four: 3
  }, false
);

/* enum Microsoft.Xna.Framework.Input.ButtonValues */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Input.ButtonValues", false, {
    Up: 1, 
    Down: 2, 
    Left: 4, 
    Right: 8, 
    Start: 16, 
    Back: 32, 
    LeftThumb: 64, 
    RightThumb: 128, 
    LeftShoulder: 256, 
    RightShoulder: 512, 
    BigButton: 2048, 
    A: 4096, 
    B: 8192, 
    X: 16384, 
    Y: 32768
  }, true
);

/* enum Microsoft.Xna.Framework.Input.Buttons */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Input.Buttons", true, {
    DPadUp: 1, 
    DPadDown: 2, 
    DPadLeft: 4, 
    DPadRight: 8, 
    Start: 16, 
    Back: 32, 
    LeftStick: 64, 
    RightStick: 128, 
    LeftShoulder: 256, 
    RightShoulder: 512, 
    BigButton: 2048, 
    A: 4096, 
    B: 8192, 
    X: 16384, 
    Y: 32768, 
    LeftThumbstickLeft: 2097152, 
    RightTrigger: 4194304, 
    LeftTrigger: 8388608, 
    RightThumbstickUp: 16777216, 
    RightThumbstickDown: 33554432, 
    RightThumbstickRight: 67108864, 
    RightThumbstickLeft: 134217728, 
    LeftThumbstickUp: 268435456, 
    LeftThumbstickDown: 536870912, 
    LeftThumbstickRight: 1073741824
  }, true
);

/* enum Microsoft.Xna.Framework.Input.ButtonState */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Input.ButtonState", true, {
    Released: 0, 
    Pressed: 1
  }, false
);

/* enum Microsoft.Xna.Framework.Input.GamePadType */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Input.GamePadType", true, {
    Unknown: 0, 
    GamePad: 1, 
    Wheel: 2, 
    ArcadeStick: 3, 
    FlightStick: 4, 
    DancePad: 5, 
    Guitar: 6, 
    AlternateGuitar: 7, 
    DrumKit: 8, 
    BigButtonPad: 768
  }, false
);

/* class Microsoft.Xna.Framework.Input.GamePad */ 

(function GamePad$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Input.GamePad", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "GetCapabilities", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadCapabilities"), [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetState", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadState"), [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetState", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadState"), [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDeadZone")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResetThrottleState", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex"), $asm01.TypeRef("Microsoft.Xna.Framework.ErrorCodes")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetVibration", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex"), $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrottleDisconnectedRetries", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")], [])
    );

    $.Constant({Static:true , Public:false}, "XinputNativeDll", "xinput1_3.dll"); 
    $.Field({Static:true , Public:false}, "_disconnected", $jsilcore.TypeRef("System.Array", [$.Boolean]), function ($pi) {
        return JSIL.Array.New($asm09.System.Boolean, 4);
      }); 
    $.Field({Static:true , Public:false}, "_lastReadTime", $jsilcore.TypeRef("System.Array", [$.Int64]), function ($pi) {
        return JSIL.Array.New($asm09.System.Int64, 4);
      }); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Input.GamePadDeadZone */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Input.GamePadDeadZone", true, {
    None: 0, 
    IndependentAxes: 1, 
    Circular: 2
  }, false
);

/* class Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils */ 

(function GamePadDeadZoneUtils$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "ApplyLeftStickDeadZone", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [
          $.Int32, $.Int32, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDeadZone")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ApplyLinearDeadZone", 
      new JSIL.MethodSignature($.Single, [
          $.Single, $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ApplyRightStickDeadZone", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [
          $.Int32, $.Int32, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDeadZone")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ApplyStickDeadZone", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [
          $.Int32, $.Int32, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDeadZone"), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ApplyTriggerDeadZone", 
      new JSIL.MethodSignature($.Single, [$.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDeadZone")], [])
    );

    $.Constant({Static:true , Public:false}, "LeftStickDeadZoneSize", 7849); 
    $.Constant({Static:true , Public:false}, "RightStickDeadZoneSize", 8689); 
    $.Constant({Static:true , Public:false}, "TriggerDeadZoneSize", 30); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Input.Keys */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Input.Keys", true, {
    None: 0, 
    Back: 8, 
    Tab: 9, 
    Enter: 13, 
    Pause: 19, 
    CapsLock: 20, 
    Kana: 21, 
    Kanji: 25, 
    Escape: 27, 
    ImeConvert: 28, 
    ImeNoConvert: 29, 
    Space: 32, 
    PageUp: 33, 
    PageDown: 34, 
    End: 35, 
    Home: 36, 
    Left: 37, 
    Up: 38, 
    Right: 39, 
    Down: 40, 
    Select: 41, 
    Print: 42, 
    Execute: 43, 
    PrintScreen: 44, 
    Insert: 45, 
    Delete: 46, 
    Help: 47, 
    D0: 48, 
    D1: 49, 
    D2: 50, 
    D3: 51, 
    D4: 52, 
    D5: 53, 
    D6: 54, 
    D7: 55, 
    D8: 56, 
    D9: 57, 
    A: 65, 
    B: 66, 
    C: 67, 
    D: 68, 
    E: 69, 
    F: 70, 
    G: 71, 
    H: 72, 
    I: 73, 
    J: 74, 
    K: 75, 
    L: 76, 
    M: 77, 
    N: 78, 
    O: 79, 
    P: 80, 
    Q: 81, 
    R: 82, 
    S: 83, 
    T: 84, 
    U: 85, 
    V: 86, 
    W: 87, 
    X: 88, 
    Y: 89, 
    Z: 90, 
    LeftWindows: 91, 
    RightWindows: 92, 
    Apps: 93, 
    Sleep: 95, 
    NumPad0: 96, 
    NumPad1: 97, 
    NumPad2: 98, 
    NumPad3: 99, 
    NumPad4: 100, 
    NumPad5: 101, 
    NumPad6: 102, 
    NumPad7: 103, 
    NumPad8: 104, 
    NumPad9: 105, 
    Multiply: 106, 
    Add: 107, 
    Separator: 108, 
    Subtract: 109, 
    Decimal: 110, 
    Divide: 111, 
    F1: 112, 
    F2: 113, 
    F3: 114, 
    F4: 115, 
    F5: 116, 
    F6: 117, 
    F7: 118, 
    F8: 119, 
    F9: 120, 
    F10: 121, 
    F11: 122, 
    F12: 123, 
    F13: 124, 
    F14: 125, 
    F15: 126, 
    F16: 127, 
    F17: 128, 
    F18: 129, 
    F19: 130, 
    F20: 131, 
    F21: 132, 
    F22: 133, 
    F23: 134, 
    F24: 135, 
    NumLock: 144, 
    Scroll: 145, 
    LeftShift: 160, 
    RightShift: 161, 
    LeftControl: 162, 
    RightControl: 163, 
    LeftAlt: 164, 
    RightAlt: 165, 
    BrowserBack: 166, 
    BrowserForward: 167, 
    BrowserRefresh: 168, 
    BrowserStop: 169, 
    BrowserSearch: 170, 
    BrowserFavorites: 171, 
    BrowserHome: 172, 
    VolumeMute: 173, 
    VolumeDown: 174, 
    VolumeUp: 175, 
    MediaNextTrack: 176, 
    MediaPreviousTrack: 177, 
    MediaStop: 178, 
    MediaPlayPause: 179, 
    LaunchMail: 180, 
    SelectMedia: 181, 
    LaunchApplication1: 182, 
    LaunchApplication2: 183, 
    OemSemicolon: 186, 
    OemPlus: 187, 
    OemComma: 188, 
    OemMinus: 189, 
    OemPeriod: 190, 
    OemQuestion: 191, 
    OemTilde: 192, 
    ChatPadGreen: 202, 
    ChatPadOrange: 203, 
    OemOpenBrackets: 219, 
    OemPipe: 220, 
    OemCloseBrackets: 221, 
    OemQuotes: 222, 
    Oem8: 223, 
    OemBackslash: 226, 
    ProcessKey: 229, 
    OemCopy: 242, 
    OemAuto: 243, 
    OemEnlW: 244, 
    Attn: 246, 
    Crsel: 247, 
    Exsel: 248, 
    EraseEof: 249, 
    Play: 250, 
    Zoom: 251, 
    Pa1: 253, 
    OemClear: 254
  }, false
);

/* enum Microsoft.Xna.Framework.Input.KeyState */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Input.KeyState", true, {
    Up: 0, 
    Down: 1
  }, false
);

/* struct Microsoft.Xna.Framework.Input.KeyboardState */ 

(function KeyboardState$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.KeyboardState", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPressedKey", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckPressedKeys", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyState"), [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetPressedKeys", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsKeyDown", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsKeyUp", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemovePressedKey", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:true , Public:false}, "stateMask0", $.UInt32, 4294967295)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Usage", "CA2207:InitializeValueTypeStaticFieldsInline"]; }); 
    $.Field({Static:true , Public:false}, "stateMask1", $.UInt32, 4294967295)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Usage", "CA2207:InitializeValueTypeStaticFieldsInline"]; }); 
    $.Field({Static:true , Public:false}, "stateMask2", $.UInt32, 4294967295)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Usage", "CA2207:InitializeValueTypeStaticFieldsInline"]; }); 
    $.Field({Static:true , Public:false}, "stateMask3", $.UInt32, 4294967295)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Usage", "CA2207:InitializeValueTypeStaticFieldsInline"]; }); 
    $.Field({Static:true , Public:false}, "stateMask4", $.UInt32, 4294967295)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Usage", "CA2207:InitializeValueTypeStaticFieldsInline"]; }); 
    $.Field({Static:true , Public:false}, "stateMask5", $.UInt32, 4294967295)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Usage", "CA2207:InitializeValueTypeStaticFieldsInline"]; }); 
    $.Field({Static:true , Public:false}, "stateMask6", $.UInt32, 4294967295)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Usage", "CA2207:InitializeValueTypeStaticFieldsInline"]; }); 
    $.Field({Static:true , Public:false}, "stateMask7", $.UInt32, 4294967295)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Usage", "CA2207:InitializeValueTypeStaticFieldsInline"]; }); 
    $.Field({Static:false, Public:false}, "currentState0", $.UInt32); 
    $.Field({Static:false, Public:false}, "currentState1", $.UInt32); 
    $.Field({Static:false, Public:false}, "currentState2", $.UInt32); 
    $.Field({Static:false, Public:false}, "currentState3", $.UInt32); 
    $.Field({Static:false, Public:false}, "currentState4", $.UInt32); 
    $.Field({Static:false, Public:false}, "currentState5", $.UInt32); 
    $.Field({Static:false, Public:false}, "currentState6", $.UInt32); 
    $.Field({Static:false, Public:false}, "currentState7", $.UInt32); 
    $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyState"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct Microsoft.Xna.Framework.Input.MouseState */ 

(function MouseState$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.MouseState", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 8, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LeftButton", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MiddleButton", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RightButton", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ScrollWheelValue", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_X", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XButton1", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XButton2", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Y", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "x", $.Int32); 
    $.Field({Static:false, Public:false}, "y", $.Int32); 
    $.Field({Static:false, Public:false}, "leftButton", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Field({Static:false, Public:false}, "rightButton", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Field({Static:false, Public:false}, "middleButton", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Field({Static:false, Public:false}, "xb1", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Field({Static:false, Public:false}, "xb2", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Field({Static:false, Public:false}, "wheel", $.Int32); 
    $.Property({Static:false, Public:true }, "X", $.Int32);

    $.Property({Static:false, Public:true }, "Y", $.Int32);

    $.Property({Static:false, Public:true }, "LeftButton", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "RightButton", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "MiddleButton", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "XButton1", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "XButton2", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "ScrollWheelValue", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Input.SafeNativeMethods */ 

(function SafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Input.SafeNativeMethods", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "CallWindowProc", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [
          $asm09.TypeRef("System.IntPtr"), $asm09.TypeRef("System.IntPtr"), 
          $.UInt32, $asm09.TypeRef("System.IntPtr"), 
          $asm09.TypeRef("System.IntPtr")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetFunctionPointerForDelegate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [$asm09.TypeRef("System.Delegate")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetWindowLongPtr", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [$asm09.TypeRef("System.IntPtr"), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "RegisterWindowMessage", 
      new JSIL.MethodSignature($.UInt32, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SendMessage", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [
          $asm09.TypeRef("System.IntPtr"), $.UInt32, 
          $asm09.TypeRef("System.IntPtr"), $asm09.TypeRef("System.IntPtr")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SetWindowLongPtr", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [
          $asm09.TypeRef("System.IntPtr"), $.Int32, 
          $asm09.TypeRef("System.IntPtr")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:true }, "GWLP_WNDPROC", -4); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Input.GamePadButtons */ 

(function GamePadButtons$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.GamePadButtons", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Buttons")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_A", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_B", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Back", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BigButton", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LeftShoulder", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LeftStick", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RightShoulder", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RightStick", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Start", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_X", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Y", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "_a", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Field({Static:false, Public:false}, "_b", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Field({Static:false, Public:false}, "_x", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Field({Static:false, Public:false}, "_y", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Field({Static:false, Public:false}, "_leftStick", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Field({Static:false, Public:false}, "_rightStick", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Field({Static:false, Public:false}, "_leftShoulder", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Field({Static:false, Public:false}, "_rightShoulder", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Field({Static:false, Public:false}, "_back", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Field({Static:false, Public:false}, "_start", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Field({Static:false, Public:false}, "_bigButton", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Property({Static:false, Public:true }, "A", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "B", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "Back", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "X", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "Y", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "Start", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "LeftShoulder", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "LeftStick", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "RightShoulder", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "RightStick", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "BigButton", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Input.GamePadDPad */ 

(function GamePadDPad$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.GamePadDPad", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Down", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Left", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Right", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Up", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "_up", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Field({Static:false, Public:false}, "_right", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Field({Static:false, Public:false}, "_down", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Field({Static:false, Public:false}, "_left", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState")); 
    $.Property({Static:false, Public:true }, "Up", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "Down", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "Right", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    $.Property({Static:false, Public:true }, "Left", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonState"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Input.GamePadThumbSticks */ 

(function GamePadThumbSticks$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.GamePadThumbSticks", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Left", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Right", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "_left", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "_right", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Property({Static:false, Public:true }, "Left", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Right", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Input.GamePadTriggers */ 

(function GamePadTriggers$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.GamePadTriggers", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Left", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Right", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "_left", $.Single); 
    $.Field({Static:false, Public:false}, "_right", $.Single); 
    $.Property({Static:false, Public:true }, "Left", $.Single);

    $.Property({Static:false, Public:true }, "Right", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Input.GamePadState */ 

(function GamePadState$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.GamePadState", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadThumbSticks"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadTriggers"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadButtons"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDPad")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $.Single, $.Single, 
          $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Buttons")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.XINPUT_STATE")]), $asm01.TypeRef("Microsoft.Xna.Framework.ErrorCodes"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDeadZone")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FillInternalState", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Buttons", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadButtons"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DPad", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDPad"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsConnected", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PacketNumber", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ThumbSticks", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadThumbSticks"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Triggers", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadTriggers"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsButtonDown", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Buttons")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsButtonUp", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Buttons")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Constant({Static:true , Public:false}, "_normalButtonMask", 64511); 
    $.Field({Static:false, Public:false}, "_connected", $.Boolean); 
    $.Field({Static:false, Public:false}, "_packet", $.Int32); 
    $.Field({Static:false, Public:false}, "_thumbs", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadThumbSticks")); 
    $.Field({Static:false, Public:false}, "_triggers", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadTriggers")); 
    $.Field({Static:false, Public:false}, "_buttons", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadButtons")); 
    $.Field({Static:false, Public:false}, "_dpad", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDPad")); 
    $.Field({Static:false, Public:false}, "_state", $asm01.TypeRef("Microsoft.Xna.Framework.Input.XINPUT_STATE")); 
    $.Property({Static:false, Public:true }, "Buttons", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadButtons"));

    $.Property({Static:false, Public:true }, "DPad", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadDPad"));

    $.Property({Static:false, Public:true }, "IsConnected", $.Boolean);

    $.Property({Static:false, Public:true }, "PacketNumber", $.Int32);

    $.Property({Static:false, Public:true }, "ThumbSticks", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadThumbSticks"));

    $.Property({Static:false, Public:true }, "Triggers", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadTriggers"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Input.GamePadCapabilities */ 

(function GamePadCapabilities$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.GamePadCapabilities", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.XINPUT_CAPABILITIES")]), $asm01.TypeRef("Microsoft.Xna.Framework.ErrorCodes")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GamePadType", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasAButton", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasBackButton", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasBButton", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasBigButton", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasDPadDownButton", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasDPadLeftButton", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasDPadRightButton", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasDPadUpButton", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasLeftShoulderButton", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasLeftStickButton", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasLeftTrigger", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasLeftVibrationMotor", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasLeftXThumbStick", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasLeftYThumbStick", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasRightShoulderButton", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasRightStickButton", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasRightTrigger", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasRightVibrationMotor", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasRightXThumbStick", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasRightYThumbStick", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasStartButton", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasVoiceSupport", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasXButton", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasYButton", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsConnected", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "_connected", $.Boolean); 
    $.Field({Static:false, Public:false}, "_caps", $asm01.TypeRef("Microsoft.Xna.Framework.Input.XINPUT_CAPABILITIES")); 
    $.Property({Static:false, Public:true }, "GamePadType", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadType"));

    $.Property({Static:false, Public:true }, "IsConnected", $.Boolean);

    $.Property({Static:false, Public:true }, "HasAButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasBackButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasBButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasDPadDownButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasDPadLeftButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasDPadRightButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasDPadUpButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasLeftShoulderButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasLeftStickButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasRightShoulderButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasRightStickButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasStartButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasXButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasYButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasBigButton", $.Boolean);

    $.Property({Static:false, Public:true }, "HasLeftXThumbStick", $.Boolean);

    $.Property({Static:false, Public:true }, "HasLeftYThumbStick", $.Boolean);

    $.Property({Static:false, Public:true }, "HasRightXThumbStick", $.Boolean);

    $.Property({Static:false, Public:true }, "HasRightYThumbStick", $.Boolean);

    $.Property({Static:false, Public:true }, "HasLeftTrigger", $.Boolean);

    $.Property({Static:false, Public:true }, "HasRightTrigger", $.Boolean);

    $.Property({Static:false, Public:true }, "HasLeftVibrationMotor", $.Boolean);

    $.Property({Static:false, Public:true }, "HasRightVibrationMotor", $.Boolean);

    $.Property({Static:false, Public:true }, "HasVoiceSupport", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Performance", "CA1815:OverrideEqualsAndOperatorEqualsOnValueTypes"]; });

})();

/* struct Microsoft.Xna.Framework.Input.XINPUT_STATE */ 

(function XINPUT_STATE$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.XINPUT_STATE", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "PacketNumber", $.Int32); 
    $.Field({Static:false, Public:true }, "GamePad", $asm01.TypeRef("Microsoft.Xna.Framework.Input.XINPUT_GAMEPAD")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Input.XINPUT_GAMEPAD */ 

(function XINPUT_GAMEPAD$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.XINPUT_GAMEPAD", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "Buttons", $asm01.TypeRef("Microsoft.Xna.Framework.Input.ButtonValues")); 
    $.Field({Static:false, Public:true }, "LeftTrigger", $.Byte); 
    $.Field({Static:false, Public:true }, "RightTrigger", $.Byte); 
    $.Field({Static:false, Public:true }, "ThumbLX", $.Int16); 
    $.Field({Static:false, Public:true }, "ThumbLY", $.Int16); 
    $.Field({Static:false, Public:true }, "ThumbRX", $.Int16); 
    $.Field({Static:false, Public:true }, "ThumbRY", $.Int16); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Input.XINPUT_VIBRATION */ 

(function XINPUT_VIBRATION$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.XINPUT_VIBRATION", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "LeftMotorSpeed", $.Int16); 
    $.Field({Static:false, Public:true }, "RightMotorSpeed", $.Int16); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Input.XINPUT_CAPABILITIES */ 

(function XINPUT_CAPABILITIES$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Input.XINPUT_CAPABILITIES", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "Type", $.Byte); 
    $.Field({Static:false, Public:true }, "SubType", $.Byte); 
    $.Field({Static:false, Public:true }, "Flags", $.UInt16); 
    $.Field({Static:false, Public:true }, "GamePad", $asm01.TypeRef("Microsoft.Xna.Framework.Input.XINPUT_GAMEPAD")); 
    $.Field({Static:false, Public:true }, "Vibration", $asm01.TypeRef("Microsoft.Xna.Framework.Input.XINPUT_VIBRATION")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Input.WindowMessageHookerTester */ 

(function WindowMessageHookerTester$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Input.WindowMessageHooker"), 
      Name: "Microsoft.Xna.Framework.Input.WindowMessageHookerTester", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.WindowMessageHookerTester/WndProcDelegate")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WndProc", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.IntPtr")]), [
          $asm09.TypeRef("System.IntPtr"), $.UInt32, 
          $asm09.TypeRef("System.IntPtr"), $asm09.TypeRef("System.IntPtr")
        ], [])
    );

    $.Field({Static:false, Public:false}, "wndProcDelegate", $asm01.TypeRef("Microsoft.Xna.Framework.Input.WindowMessageHookerTester/WndProcDelegate")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Xna.Framework.Input.WindowMessageHookerTester/WndProcDelegate */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Input.WindowMessageHookerTester/WndProcDelegate", false, []);

/* class Microsoft.Xna.Framework.MathHelper */ 

(function MathHelper$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.MathHelper", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Barycentric", 
      new JSIL.MethodSignature($.Single, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CatmullRom", 
      new JSIL.MethodSignature($.Single, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature($.Single, [
          $.Single, $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature($.Single, [$.Single, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Hermite", 
      new JSIL.MethodSignature($.Single, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Single, [
          $.Single, $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Single, [$.Single, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Single, [$.Single, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SmoothStep", 
      new JSIL.MethodSignature($.Single, [
          $.Single, $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDegrees", 
      new JSIL.MethodSignature($.Single, [$.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToRadians", 
      new JSIL.MethodSignature($.Single, [$.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "WrapAngle", 
      new JSIL.MethodSignature($.Single, [$.Single], [])
    );

    $.Constant({Static:true , Public:true }, "E", 2.71828175); 
    $.Constant({Static:true , Public:true }, "Log2E", 1.442695); 
    $.Constant({Static:true , Public:true }, "Log10E", 0.4342945); 
    $.Constant({Static:true , Public:true }, "Pi", 3.14159274); 
    $.Constant({Static:true , Public:true }, "TwoPi", 6.28318548); 
    $.Constant({Static:true , Public:true }, "PiOver2", 1.57079637); 
    $.Constant({Static:true , Public:true }, "PiOver4", 0.7853982); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Design");
/* class Microsoft.Xna.Framework.Design.MemberPropertyDescriptor */ 

(function MemberPropertyDescriptor$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.ComponentModel.PropertyDescriptor"), 
      Name: "Microsoft.Xna.Framework.Design.MemberPropertyDescriptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MemberInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanResetValue", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ComponentType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResetValue", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ShouldSerializeValue", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.Field({Static:false, Public:false}, "_member", $asm09.TypeRef("System.Reflection.MemberInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ComponentType", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.FieldPropertyDescriptor */ 

(function FieldPropertyDescriptor$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Design.MemberPropertyDescriptor"), 
      Name: "Microsoft.Xna.Framework.Design.FieldPropertyDescriptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.FieldInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PropertyType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Object, $.Object], [])
    );

    $.Field({Static:false, Public:false}, "_field", $asm09.TypeRef("System.Reflection.FieldInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "PropertyType", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.PropertyPropertyDescriptor */ 

(function PropertyPropertyDescriptor$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Design.MemberPropertyDescriptor"), 
      Name: "Microsoft.Xna.Framework.Design.PropertyPropertyDescriptor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.PropertyInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PropertyType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetValue", 
      new JSIL.MethodSignature($.Object, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      new JSIL.MethodSignature(null, [$.Object, $.Object], [])
    );

    $.Field({Static:false, Public:false}, "_property", $asm09.TypeRef("System.Reflection.PropertyInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "PropertyType", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.MathTypeConverter */ 

(function MathTypeConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.ComponentModel.ExpandableObjectConverter"), 
      Name: "Microsoft.Xna.Framework.Design.MathTypeConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertTo", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertFromValues", 
      new JSIL.MethodSignature($.String, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $jsilcore.TypeRef("System.Array", ["!!0"])
        ], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertToValues", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCreateInstanceSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetProperties", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.ComponentModel.PropertyDescriptorCollection"), [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Attribute")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPropertiesSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext")], [])
    );

    $.Field({Static:false, Public:false}, "propertyDescriptions", $asm0B.TypeRef("System.ComponentModel.PropertyDescriptorCollection"))
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051"]; }); 
    $.Field({Static:false, Public:false}, "supportStringConvert", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.PointConverter */ 

(function PointConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), 
      Name: "Microsoft.Xna.Framework.Design.PointConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm09.TypeRef("System.Type")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Performance", "CA1800"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Collections.IDictionary")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.RectangleConverter */ 

(function RectangleConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), 
      Name: "Microsoft.Xna.Framework.Design.RectangleConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Collections.IDictionary")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.Vector2Converter */ 

(function Vector2Converter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), 
      Name: "Microsoft.Xna.Framework.Design.Vector2Converter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm09.TypeRef("System.Type")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Performance", "CA1800"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Collections.IDictionary")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.Vector3Converter */ 

(function Vector3Converter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), 
      Name: "Microsoft.Xna.Framework.Design.Vector3Converter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm09.TypeRef("System.Type")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Performance", "CA1800"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Collections.IDictionary")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.Vector4Converter */ 

(function Vector4Converter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), 
      Name: "Microsoft.Xna.Framework.Design.Vector4Converter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm09.TypeRef("System.Type")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Performance", "CA1800"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Collections.IDictionary")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.QuaternionConverter */ 

(function QuaternionConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), 
      Name: "Microsoft.Xna.Framework.Design.QuaternionConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm09.TypeRef("System.Type")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Performance", "CA1800"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Collections.IDictionary")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.MatrixConverter */ 

(function MatrixConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), 
      Name: "Microsoft.Xna.Framework.Design.MatrixConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Collections.IDictionary")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.BoundingBoxConverter */ 

(function BoundingBoxConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), 
      Name: "Microsoft.Xna.Framework.Design.BoundingBoxConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Collections.IDictionary")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.BoundingSphereConverter */ 

(function BoundingSphereConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), 
      Name: "Microsoft.Xna.Framework.Design.BoundingSphereConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Collections.IDictionary")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.PlaneConverter */ 

(function PlaneConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), 
      Name: "Microsoft.Xna.Framework.Design.PlaneConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Collections.IDictionary")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.RayConverter */ 

(function RayConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), 
      Name: "Microsoft.Xna.Framework.Design.RayConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Collections.IDictionary")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Design.ColorConverter */ 

(function ColorConverter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm01.TypeRef("Microsoft.Xna.Framework.Design.MathTypeConverter"), 
      Name: "Microsoft.Xna.Framework.Design.ColorConverter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm09.TypeRef("System.Type")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Performance", "CA1800"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Object, [$asm0B.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm09.TypeRef("System.Collections.IDictionary")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Xna.Framework.Graphics");
JSIL.DeclareNamespace("Microsoft.Xna.Framework.Graphics.PackedVector");
/* interface Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector", true, [], function ($) {
    $.Method({}, "ToVector4", new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], []));
    $.Method({}, "PackFromVector4", new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], []));
  }, []);

/* interface Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1 */ 

JSIL.MakeInterface(
  "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", true, ["TPacked"], function ($) {
    $.Method({}, "get_PackedValue", new JSIL.MethodSignature(new JSIL.GenericParameter("TPacked", "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1"), [], []));
    $.Method({}, "set_PackedValue", new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TPacked", "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1")], []));
    $.Property({}, "PackedValue");
  }, [$asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector")]);

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8 */ 

(function Alpha8$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      new JSIL.MethodSignature($.Byte, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    )
      .Overrides(1, "PackFromVector4");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
    )
      .Overrides(1, "ToVector4");

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
      new JSIL.MethodSignature($.Byte, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      new JSIL.MethodSignature(null, [$.Byte], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToAlpha", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "packedValue", $.Byte); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.Byte);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.Byte]), 
      /* 1 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565 */ 

(function Bgr565$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      new JSIL.MethodSignature($.UInt16, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    )
      .Overrides(1, "PackFromVector4");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
    )
      .Overrides(1, "ToVector4");

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
      new JSIL.MethodSignature($.UInt16, [
          $.Single, $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      new JSIL.MethodSignature(null, [$.UInt16], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToVector3", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt16); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt16)
      .Attribute($asm09.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt16]), 
      /* 1 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551 */ 

(function Bgra5551$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      new JSIL.MethodSignature($.UInt16, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    )
      .Overrides(1, "PackFromVector4");

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
      new JSIL.MethodSignature($.UInt16, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      new JSIL.MethodSignature(null, [$.UInt16], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToVector4", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt16); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt16)
      .Attribute($asm09.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt16]), 
      /* 1 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444 */ 

(function Bgra4444$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      new JSIL.MethodSignature($.UInt16, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    )
      .Overrides(1, "PackFromVector4");

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
      new JSIL.MethodSignature($.UInt16, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      new JSIL.MethodSignature(null, [$.UInt16], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToVector4", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt16); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt16)
      .Attribute($asm09.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt16]), 
      /* 1 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.Byte4 */ 

(function Byte4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.Byte4", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    )
      .Overrides(1, "PackFromVector4");

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
      new JSIL.MethodSignature($.UInt32, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToVector4", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
      .Attribute($asm09.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), 
      /* 1 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle */ 

(function HalfSingle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      new JSIL.MethodSignature($.UInt16, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    )
      .Overrides(1, "PackFromVector4");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
    )
      .Overrides(1, "ToVector4");

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      new JSIL.MethodSignature(null, [$.UInt16], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt16); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt16)
      .Attribute($asm09.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt16]), 
      /* 1 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2 */ 

(function HalfVector2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    )
      .Overrides(1, "PackFromVector4");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
    )
      .Overrides(1, "ToVector4");

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
      new JSIL.MethodSignature($.UInt32, [$.Single, $.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToVector2", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], [])
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
      .Attribute($asm09.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), 
      /* 1 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4 */ 

(function HalfVector4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      new JSIL.MethodSignature($.UInt64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    )
      .Overrides(1, "PackFromVector4");

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
      new JSIL.MethodSignature($.UInt64, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      new JSIL.MethodSignature(null, [$.UInt64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToVector4", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt64); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt64)
      .Attribute($asm09.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt64]), 
      /* 1 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2 */ 

(function NormalizedByte2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      new JSIL.MethodSignature($.UInt16, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    )
      .Overrides(1, "PackFromVector4");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
    )
      .Overrides(1, "ToVector4");

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
      new JSIL.MethodSignature($.UInt16, [$.Single, $.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      new JSIL.MethodSignature(null, [$.UInt16], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToVector2", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], [])
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt16); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt16)
      .Attribute($asm09.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt16]), 
      /* 1 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4 */ 

(function NormalizedByte4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    )
      .Overrides(1, "PackFromVector4");

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
      new JSIL.MethodSignature($.UInt32, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToVector4", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
      .Attribute($asm09.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), 
      /* 1 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2 */ 

(function NormalizedShort2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    )
      .Overrides(1, "PackFromVector4");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
    )
      .Overrides(1, "ToVector4");

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
      new JSIL.MethodSignature($.UInt32, [$.Single, $.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToVector2", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], [])
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
      .Attribute($asm09.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), 
      /* 1 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4 */ 

(function NormalizedShort4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      new JSIL.MethodSignature($.UInt64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    )
      .Overrides(1, "PackFromVector4");

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
      new JSIL.MethodSignature($.UInt64, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      new JSIL.MethodSignature(null, [$.UInt64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToVector4", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt64); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt64)
      .Attribute($asm09.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt64]), 
      /* 1 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils */ 

(function PackUtils$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "ClampAndRound", 
      new JSIL.MethodSignature($.Double, [
          $.Single, $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "PackSigned", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "PackSNorm", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "PackUNorm", 
      new JSIL.MethodSignature($.UInt32, [$.Single, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "PackUnsigned", 
      new JSIL.MethodSignature($.UInt32, [$.Single, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "UnpackSNorm", 
      new JSIL.MethodSignature($.Single, [$.UInt32, $.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "UnpackUNorm", 
      new JSIL.MethodSignature($.Single, [$.UInt32, $.UInt32], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.Rg32 */ 

(function Rg32$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.Rg32", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    )
      .Overrides(1, "PackFromVector4");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
    )
      .Overrides(1, "ToVector4");

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
      new JSIL.MethodSignature($.UInt32, [$.Single, $.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToVector2", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], [])
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
      .Attribute($asm09.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), 
      /* 1 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102 */ 

(function Rgba1010102$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    )
      .Overrides(1, "PackFromVector4");

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
      new JSIL.MethodSignature($.UInt32, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToVector4", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
      .Attribute($asm09.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), 
      /* 1 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64 */ 

(function Rgba64$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      new JSIL.MethodSignature($.UInt64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    )
      .Overrides(1, "PackFromVector4");

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
      new JSIL.MethodSignature($.UInt64, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      new JSIL.MethodSignature(null, [$.UInt64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToVector4", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt64); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt64)
      .Attribute($asm09.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt64]), 
      /* 1 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.Short2 */ 

(function Short2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.Short2", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    )
      .Overrides(1, "PackFromVector4");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
    )
      .Overrides(1, "ToVector4");

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
      new JSIL.MethodSignature($.UInt32, [$.Single, $.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToVector2", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], [])
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt32); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
      .Attribute($asm09.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), 
      /* 1 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Graphics.PackedVector.Short4 */ 

(function Short4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Graphics.PackedVector.Short4", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      new JSIL.MethodSignature($.UInt64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    )
      .Overrides(1, "PackFromVector4");

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
      new JSIL.MethodSignature($.UInt64, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      new JSIL.MethodSignature(null, [$.UInt64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToVector4", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
    );

    $.Field({Static:false, Public:false}, "packedValue", $.UInt64); 
    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt64)
      .Attribute($asm09.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt64]), 
      /* 1 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.ManagedCallType */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.ManagedCallType", false, {
    NoManagedCall: 1, 
    RunUnitTestDelegate: 2, 
    AsyncOperationCompleted: 3, 
    Media_ActiveSongChanged: 4, 
    Media_PlayStateChanged: 5, 
    Net_WriteLeaderboards: 6, 
    System_DeviceChanged: 7, 
    System_DownloadCompleted: 8, 
    CaptureBufferReady: 9, 
    PlaybackBufferNeeded: 10
  }, false
);

/* enum Microsoft.Xna.Framework.LoggingEvent */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.LoggingEvent", false, {
    ApplicationConstruction: 0, 
    ApplicationStartup: 1, 
    DevicePresent: 2, 
    Update: 3, 
    Draw: 4, 
    LoadContent: 5, 
    AwardAchievement: 6, 
    GamerServicesInitialize: 7, 
    GetAchievements: 8, 
    GetProfile: 9, 
    GetFromGamertag: 10, 
    GetPartnerToken: 11, 
    LeaderboardRead: 12, 
    LeaderboardWrite: 13, 
    ShowGameInvite: 14, 
    ShowGamercard: 15, 
    ShowMessageBox: 16
  }, false
);

/* enum Microsoft.Xna.Framework.KernelReturnCode */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.KernelReturnCode", false, {
    OutputBufferTooSmall: 2147746304, 
    TooManyPendingAsyncOperations: 2147746305, 
    BeginEndPairDoesNotMatch: 2147746306, 
    AsyncShutdown: 2147746307, 
    TitleUpdate: 2147746308, 
    ProFeatureNotSupported: 2147746309, 
    ProfileNotSignedIn: 2147746310, 
    ProfileNotPrivileged: 2147746311, 
    GuideAlreadyVisible: 2147746312, 
    NetworkError: 2147746313, 
    PacketQueueFull: 2147746314, 
    SessionAlreadyExists: 2147746315, 
    SessionNotFound: 2147746316, 
    SessionNotJoinable: 2147746317, 
    SessionFull: 2147746318, 
    StaleSearchResult: 2147746319, 
    QualityOfServiceNotComplete: 2147746320, 
    NotInvited: 2147746321, 
    InviteeNotSignedIn: 2147746322, 
    TrialMode: 2147746323, 
    NetworkNotAvailable: 2147746324, 
    LIVEn400BadRequest: 2147746325, 
    LIVEn401Unauthorized: 2147746326, 
    LIVEn500InternalServerError: 2147746327, 
    LIVEn503ServiceUnavailable: 2147746328, 
    LIVEnTitleUpdateRequired: 2147746329, 
    LIVEnFlashUpdateRequired: 2147746330, 
    LIVEnNotSupportedTitle: 2147746331, 
    LIVEnAccountBanned: 2147746332, 
    LIVEnAccountSuspended: 2147746333, 
    LIVEnCountryNotSupported: 2147746334, 
    LIVEnGamertagChangeRequired: 2147746335, 
    LIVEnGamertagUpdateRequired: 2147746336, 
    LIVEnXBLConnectionUnavailable: 2147746337, 
    LIVEnUnexpectedNetworkError: 2147746338, 
    LIVEnServiceNotProvisioned: 2147746339, 
    LIVEnInvalidUser: 2147746340, 
    LIVEnTermsOfServiceNotAccepted: 2147746341, 
    LIVEnXBLNotEnabled: 2147746342, 
    LIVEnNoXBLAccount: 2147746343, 
    NetworkOperationTimedOut: 2147746344
  }, false
);

/* enum Microsoft.Xna.Framework.XnaImageFormat */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.XnaImageFormat", false, {
    Jpeg: 0, 
    Gif: 1, 
    Png: 2
  }, false
);

/* enum Microsoft.Xna.Framework.XnaImageOperation */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.XnaImageOperation", false, {
    Nothing: 0, 
    Scale: 1, 
    Crop: 2
  }, true
);

/* enum Microsoft.Xna.Framework.DisplayOrientation */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.DisplayOrientation", true, {
    Default: 0, 
    LandscapeLeft: 1, 
    LandscapeRight: 2, 
    Portrait: 4
  }, true
);

/* class Microsoft.Xna.Framework.Audio.NoAudioHardwareException */ 

(function NoAudioHardwareException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Runtime.InteropServices.ExternalException"), 
      Name: "Microsoft.Xna.Framework.Audio.NoAudioHardwareException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.InstancePlayLimitException */ 

(function InstancePlayLimitException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Runtime.InteropServices.ExternalException"), 
      Name: "Microsoft.Xna.Framework.Audio.InstancePlayLimitException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Helpers */ 

(function Helpers$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Helpers", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "CheckDisposed", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode"]; });

    $.ExternalMethod({Static:true , Public:true }, "ChooseOrientation", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"), [
          $asm01.TypeRef("Microsoft.Xna.Framework.DisplayOrientation"), $.Int32, 
          $.Int32, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Failed", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Failed", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.ErrorCodes")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetExceptionFromResult", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.UInt32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Usage", "CA2201:DoNotRaiseReservedExceptionTypes"]; })
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly"]; })
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity"]; });

    $.ExternalMethod({Static:true , Public:true }, "GetSizeOf", 
      new JSIL.MethodSignature($.UInt32, [], ["T"])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsLandscape", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SmartGetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Succeeded", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Succeeded", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.ErrorCodes")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowExceptionFromErrorCode", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.ErrorCodes")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowExceptionFromErrorCode", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowExceptionFromResult", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ValidateCopyParameters", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ValidateOrientation", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.DisplayOrientation")], [])
    );

    $.Constant({Static:true , Public:true }, "InvalidHandle", 4294967295); 
    $.Constant({Static:true , Public:true }, "MaximumStringLength", 260); 
    $.Constant({Static:true , Public:true }, "Guide_MessageBox_MaxButtons", 3); 
    $.Constant({Static:true , Public:true }, "MaxNumberOfSignedInPlayers", 1); 
    $.Constant({Static:true , Public:false}, "PlayerAnyIndex", 255); 
    $.Field({Static:true , Public:false}, "KeepKernelReturnCode", $.Object, $asm01.Microsoft.Xna.Framework.KernelReturnCode.__Type__); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.ErrorCodes */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.ErrorCodes", false, {
    Success: 0, 
    AccessDenied: 5, 
    Busy: 170, 
    AlreadyExists: 183, 
    Pending: 997, 
    NotConnected: 1167, 
    Empty: 4306, 
    E_NOTIMPL: 2147500033, 
    E_ABORT: 2147500036, 
    E_FAIL: 2147500037, 
    REGDB_E_CLASSNOTREG: 2147746132, 
    VFW_E_NO_AUDIO_HARDWARE: 2147746390, 
    E_ACCESSDENIED: 2147942405, 
    E_OUTOFMEMORY: 2147942414, 
    ERROR_SHARING_VIOLATION: 2147942432, 
    E_INVALIDARG: 2147942487, 
    STRSAFE_E_INSUFFICIENT_BUFFER: 2147942522, 
    DIRECTRENDERING_E_INVALID_MODE: 2150814720, 
    DIRECTRENDERING_E_ELEMENT_NOT_IN_VISUALTREE: 2281703676, 
    D3DERR_OUTOFVIDEOMEMORY: 2289435004, 
    D3DERR_WRONGTEXTUREFORMAT: 2289436696, 
    D3DERR_TOOMANYOPERATIONS: 2289436701, 
    D3DERR_DRIVERINTERNALERROR: 2289436711, 
    D3DERR_NOTFOUND: 2289436774, 
    D3DERR_MOREDATA: 2289436775, 
    D3DERR_DEVICELOST: 2289436776, 
    D3DERR_DEVICENOTRESET: 2289436777, 
    D3DERR_NOTAVAILABLE: 2289436784, 
    D3DERR_INVALIDCALL: 2289436786, 
    XACTENGINE_E_ALREADYINITIALIZED: 2328297473, 
    XACTENGINE_E_NOTINITIALIZED: 2328297474, 
    XACTENGINE_E_EXPIRED: 2328297475, 
    XACTENGINE_E_NONOTIFICATIONCALLBACK: 2328297476, 
    XACTENGINE_E_NOTIFICATIONREGISTERED: 2328297477, 
    XACTENGINE_E_INVALIDUSAGE: 2328297478, 
    XACTENGINE_E_INVALIDDATA: 2328297479, 
    XACTENGINE_E_INSTANCELIMITFAILTOPLAY: 2328297480, 
    XACTENGINE_E_NOGLOBALSETTINGS: 2328297481, 
    XACTENGINE_E_INVALIDVARIABLEINDEX: 2328297482, 
    XACTENGINE_E_INVALIDCATEGORY: 2328297483, 
    XACTENGINE_E_INVALIDCUEINDEX: 2328297484, 
    XACTENGINE_E_INVALIDWAVEINDEX: 2328297485, 
    XACTENGINE_E_INVALIDTRACKINDEX: 2328297486, 
    XACTENGINE_E_INVALIDSOUNDOFFSETORINDEX: 2328297487, 
    XACTENGINE_E_READFILE: 2328297488, 
    XACTENGINE_E_UNKNOWNEVENT: 2328297489, 
    XACTENGINE_E_INCALLBACK: 2328297490, 
    XACTENGINE_E_NOWAVEBANK: 2328297491, 
    XACTENGINE_E_SELECTVARIATION: 2328297492, 
    XACTENGINE_E_MULTIPLEAUDITIONENGINES: 2328297493, 
    XACTENGINE_E_WAVEBANKNOTPREPARED: 2328297494, 
    XACTENGINE_E_NORENDERER: 2328297495, 
    XACTENGINE_E_INVALIDENTRYCOUNT: 2328297496, 
    XACTENGINE_E_SEEKTIMEBEYONDCUEEND: 2328297497, 
    XACTENGINE_E_AUDITION_WRITEFILE: 2328297729, 
    XACTENGINE_E_AUDITION_NOSOUNDBANK: 2328297730, 
    XACTENGINE_E_AUDITION_INVALIDRPCINDEX: 2328297731, 
    XACTENGINE_E_AUDITION_MISSINGDATA: 2328297732, 
    XACTENGINE_E_AUDITION_UNKNOWNCOMMAND: 2328297733, 
    XACTENGINE_E_AUDITION_INVALIDDSPINDEX: 2328297734, 
    XACTENGINE_E_AUDITION_MISSINGWAVE: 2328297735, 
    XACTENGINE_E_AUDITION_CREATEDIRECTORYFAILED: 2328297736, 
    XACTENGINE_E_AUDITION_INVALIDSESSION: 2328297737, 
    ZDKSYSTEM_E_AUDIO_INSTANCELIMIT: 2343370753, 
    ZDKSYSTEM_E_AUDIO_INVALIDSTATE: 2343370754, 
    ZDKSYSTEM_E_AUDIO_INVALIDDATA: 2343370755, 
    CAPTURE_ENGINE_E_DEVICEGONE: 2364407809
  }, false
);

/* enum Microsoft.Xna.Framework.ContainmentType */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.ContainmentType", true, {
    Disjoint: 0, 
    Contains: 1, 
    Intersects: 2
  }, false
);

/* struct Microsoft.Xna.Framework.BoundingBox */ 

(function BoundingBox$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.BoundingBox", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromPoints", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromSphere", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromSphere", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMerged", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMerged", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCorners", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCorners", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType"), [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("Microsoft.Xna.Framework.Ray")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Ray")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Nullable`1", [$.Single])])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SupportMapping", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Constant({Static:true , Public:true }, "CornerCount", 8); 
    $.Field({Static:false, Public:true }, "Min", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"))
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "Max", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"))
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.Microsoft.Xna.Framework.Design.BoundingBoxConverter.__Type__]; });

})();

/* class Microsoft.Xna.Framework.BoundingFrustum */ 

(function BoundingFrustum$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.BoundingFrustum", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ComputeIntersection", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Ray")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ComputeIntersectionLine", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Ray"), [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bottom", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Plane"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Far", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Plane"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Left", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Plane"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Matrix", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Matrix"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Near", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Plane"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Right", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Plane"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Top", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Plane"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCorners", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCorners", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType"), [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("Microsoft.Xna.Framework.Ray")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Ray")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Nullable`1", [$.Single])])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Matrix", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMatrix", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SupportMapping", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Constant({Static:true , Public:true }, "CornerCount", 8); 
    $.Constant({Static:true , Public:false}, "NearPlaneIndex", 0); 
    $.Constant({Static:true , Public:false}, "FarPlaneIndex", 1); 
    $.Constant({Static:true , Public:false}, "LeftPlaneIndex", 2); 
    $.Constant({Static:true , Public:false}, "RightPlaneIndex", 3); 
    $.Constant({Static:true , Public:false}, "TopPlaneIndex", 4); 
    $.Constant({Static:true , Public:false}, "BottomPlaneIndex", 5); 
    $.Constant({Static:true , Public:false}, "NumPlanes", 6); 
    $.Field({Static:false, Public:false}, "matrix", $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:false}, "planes", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")])); 
    $.Field({Static:false, Public:false}, "cornerArray", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])); 
    $.Field({Static:false, Public:false}, "gjk", $asm01.TypeRef("Microsoft.Xna.Framework.Gjk")); 
    $.Property({Static:false, Public:true }, "Near", $asm01.TypeRef("Microsoft.Xna.Framework.Plane"));

    $.Property({Static:false, Public:true }, "Far", $asm01.TypeRef("Microsoft.Xna.Framework.Plane"));

    $.Property({Static:false, Public:true }, "Left", $asm01.TypeRef("Microsoft.Xna.Framework.Plane"));

    $.Property({Static:false, Public:true }, "Right", $asm01.TypeRef("Microsoft.Xna.Framework.Plane"));

    $.Property({Static:false, Public:true }, "Top", $asm01.TypeRef("Microsoft.Xna.Framework.Plane"));

    $.Property({Static:false, Public:true }, "Bottom", $asm01.TypeRef("Microsoft.Xna.Framework.Plane"));

    $.Property({Static:false, Public:true }, "Matrix", $asm01.TypeRef("Microsoft.Xna.Framework.Matrix"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.System.ComponentModel.ExpandableObjectConverter.__Type__]; });

})();

/* struct Microsoft.Xna.Framework.BoundingSphere */ 

(function BoundingSphere$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.BoundingSphere", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType"), [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.ContainmentType")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromBoundingBox", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromBoundingBox", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromFrustum", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromPoints", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMerged", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateMerged", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType"), [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("Microsoft.Xna.Framework.Ray")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Ray")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Nullable`1", [$.Single])])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SupportMapping", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.Field({Static:false, Public:true }, "Center", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"))
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "Radius", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.Microsoft.Xna.Framework.Design.BoundingSphereConverter.__Type__]; });

})();

/* enum Microsoft.Xna.Framework.CurveLoopType */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.CurveLoopType", true, {
    Constant: 0, 
    Cycle: 1, 
    CycleOffset: 2, 
    Oscillate: 3, 
    Linear: 4
  }, false
);

/* enum Microsoft.Xna.Framework.CurveTangent */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.CurveTangent", true, {
    Flat: 0, 
    Linear: 1, 
    Smooth: 2
  }, false
);

/* class Microsoft.Xna.Framework.Curve */ 

(function Curve$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Curve", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CalcCycle", 
      new JSIL.MethodSignature($.Single, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ComputeTangent", 
      new JSIL.MethodSignature(null, [$.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.CurveTangent")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ComputeTangent", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.CurveTangent"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.CurveTangent")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ComputeTangents", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.CurveTangent")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ComputeTangents", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.CurveTangent"), $asm01.TypeRef("Microsoft.Xna.Framework.CurveTangent")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Evaluate", 
      new JSIL.MethodSignature($.Single, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindSegment", 
      new JSIL.MethodSignature($.Single, [
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsConstant", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Keys", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.CurveKeyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PostLoop", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.CurveLoopType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreLoop", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.CurveLoopType"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Hermite", 
      new JSIL.MethodSignature($.Single, [
          $asm01.TypeRef("Microsoft.Xna.Framework.CurveKey"), $asm01.TypeRef("Microsoft.Xna.Framework.CurveKey"), 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PostLoop", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.CurveLoopType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PreLoop", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.CurveLoopType")], [])
    );

    $.Field({Static:false, Public:false}, "preLoop", $asm01.TypeRef("Microsoft.Xna.Framework.CurveLoopType")); 
    $.Field({Static:false, Public:false}, "postLoop", $asm01.TypeRef("Microsoft.Xna.Framework.CurveLoopType")); 
    $.Field({Static:false, Public:false}, "keys", $asm01.TypeRef("Microsoft.Xna.Framework.CurveKeyCollection")); 
    $.Property({Static:false, Public:true }, "PreLoop", $asm01.TypeRef("Microsoft.Xna.Framework.CurveLoopType"));

    $.Property({Static:false, Public:true }, "PostLoop", $asm01.TypeRef("Microsoft.Xna.Framework.CurveLoopType"));

    $.Property({Static:false, Public:true }, "Keys", $asm01.TypeRef("Microsoft.Xna.Framework.CurveKeyCollection"));

    $.Property({Static:false, Public:true }, "IsConstant", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.System.ComponentModel.ExpandableObjectConverter.__Type__]; });

})();

/* enum Microsoft.Xna.Framework.CurveContinuity */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.CurveContinuity", true, {
    Smooth: 0, 
    Step: 1
  }, false
);

/* class Microsoft.Xna.Framework.CurveKey */ 

(function CurveKey$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.CurveKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $asm01.TypeRef("Microsoft.Xna.Framework.CurveContinuity")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Continuity", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.CurveContinuity"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Position", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TangentIn", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TangentOut", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1062"]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Continuity", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.CurveContinuity")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TangentIn", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TangentOut", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.Field({Static:false, Public:false}, "position", $.Single); 
    $.Field({Static:false, Public:false}, "internalValue", $.Single); 
    $.Field({Static:false, Public:false}, "tangentOut", $.Single); 
    $.Field({Static:false, Public:false}, "tangentIn", $.Single); 
    $.Field({Static:false, Public:false}, "continuity", $asm01.TypeRef("Microsoft.Xna.Framework.CurveContinuity")); 
    $.Property({Static:false, Public:true }, "Position", $.Single);

    $.Property({Static:false, Public:true }, "Value", $.Single);

    $.Property({Static:false, Public:true }, "TangentIn", $.Single);

    $.Property({Static:false, Public:true }, "TangentOut", $.Single);

    $.Property({Static:false, Public:true }, "Continuity", $asm01.TypeRef("Microsoft.Xna.Framework.CurveContinuity"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm09.TypeRef("System.IComparable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.System.ComponentModel.ExpandableObjectConverter.__Type__]; });

})();

/* class Microsoft.Xna.Framework.CurveKeyCollection */ 

(function CurveKeyCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.CurveKeyCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeCacheValues", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.CurveKey"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(2, "GetEnumerator");

    $.Field({Static:false, Public:false}, "Keys", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")])); 
    $.Field({Static:false, Public:false}, "TimeRange", $.Single); 
    $.Field({Static:false, Public:false}, "InvTimeRange", $.Single); 
    $.Field({Static:false, Public:false}, "IsCacheAvailable", $.Boolean); 
    $.Property({Static:false, Public:true }, "Item", $asm01.TypeRef("Microsoft.Xna.Framework.CurveKey"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.CurveKey")]), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm0B.System.ComponentModel.ExpandableObjectConverter.__Type__]; })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class Microsoft.Xna.Framework.Gjk */ 

(function Gjk$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Gjk", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddSupportPoint", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeClosestPoint", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Dot", 
      new JSIL.MethodSignature($.Single, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClosestPoint", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FullSimplex", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxLengthSquared", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSatisfiesRule", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateDeterminant", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateSimplex", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.Field({Static:true , Public:false}, "BitsToIndices", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "closestPoint", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "y", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])); 
    $.Field({Static:false, Public:false}, "yLengthSq", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Field({Static:false, Public:false}, "edges", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])])); 
    $.Field({Static:false, Public:false}, "edgeLengthSq", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Single])])); 
    $.Field({Static:false, Public:false}, "det", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Single])])); 
    $.Field({Static:false, Public:false}, "simplexBits", $.Int32); 
    $.Field({Static:false, Public:false}, "maxLengthSq", $.Single); 
    $.Property({Static:false, Public:true }, "FullSimplex", $.Boolean);

    $.Property({Static:false, Public:true }, "MaxLengthSquared", $.Single);

    $.Property({Static:false, Public:true }, "ClosestPoint", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Matrix */ 

(function Matrix$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Matrix", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 16, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1025"]; });

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateBillboard", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateBillboard", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateConstrainedBillboard", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
          $asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateConstrainedBillboard", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
          $asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromAxisAngle", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromAxisAngle", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromQuaternion", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromQuaternion", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromYawPitchRoll", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromYawPitchRoll", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateLookAt", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateLookAt", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateOrthographic", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateOrthographic", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateOrthographicOffCenter", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateOrthographicOffCenter", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreatePerspective", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreatePerspective", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreatePerspectiveFieldOfView", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreatePerspectiveFieldOfView", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreatePerspectiveOffCenter", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreatePerspectiveOffCenter", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateReflection", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateReflection", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateRotationX", 
      new JSIL.MethodSignature($.Type, [$.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateRotationX", 
      new JSIL.MethodSignature(null, [$.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateRotationY", 
      new JSIL.MethodSignature($.Type, [$.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateRotationY", 
      new JSIL.MethodSignature(null, [$.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateRotationZ", 
      new JSIL.MethodSignature($.Type, [$.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateRotationZ", 
      new JSIL.MethodSignature(null, [$.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature($.Type, [$.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateScale", 
      new JSIL.MethodSignature(null, [$.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateShadow", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Plane")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateShadow", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateTranslation", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateTranslation", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateTranslation", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateTranslation", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateWorld", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateWorld", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Decompose", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Determinant", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Backward", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Down", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Forward", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Identity", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Left", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Right", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Translation", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Up", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Invert", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Invert", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Single, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Backward", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Down", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Forward", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Left", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Right", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Translation", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Up", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transpose", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transpose", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.Field({Static:false, Public:true }, "M11", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "M12", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "M13", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "M14", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "M21", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "M22", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "M23", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "M24", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "M31", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "M32", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "M33", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "M34", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "M41", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "M42", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "M43", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "M44", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:true , Public:false}, "_identity", $.Type); 
    function Matrix__cctor () {
      $thisType._identity = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      Matrix__cctor
    );

    $.Property({Static:true , Public:true }, "Identity", $.Type);

    $.Property({Static:false, Public:true }, "Up", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Down", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Right", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Left", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Forward", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Backward", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.Property({Static:false, Public:true }, "Translation", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.Microsoft.Xna.Framework.Design.MatrixConverter.__Type__]; });

})();

/* struct Microsoft.Xna.Framework.Matrix/CanonicalBasis */ 

(function CanonicalBasis$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Matrix/CanonicalBasis", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "Row0", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:true }, "Row1", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:true }, "Row2", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Matrix/VectorBasis */ 

(function VectorBasis$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Matrix/VectorBasis", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "Element0", $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])); 
    $.Field({Static:false, Public:true }, "Element1", $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])); 
    $.Field({Static:false, Public:true }, "Element2", $jsilcore.TypeRef("JSIL.Pointer", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Color */ 

(function Color$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Color", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ClampToByte32", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ClampToByte64", 
      new JSIL.MethodSignature($.Int32, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromNonPremultiplied", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromNonPremultiplied", 
      new JSIL.MethodSignature($.Type, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_A", 
      new JSIL.MethodSignature($.Byte, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AliceBlue", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_AntiqueWhite", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Aqua", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Aquamarine", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Azure", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_B", 
      new JSIL.MethodSignature($.Byte, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Beige", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Bisque", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Black", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_BlanchedAlmond", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Blue", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_BlueViolet", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Brown", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_BurlyWood", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_CadetBlue", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Chartreuse", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Chocolate", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Coral", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_CornflowerBlue", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Cornsilk", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Crimson", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Cyan", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkBlue", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkCyan", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkGoldenrod", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkGray", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkGreen", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkKhaki", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkMagenta", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkOliveGreen", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkOrange", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkOrchid", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkRed", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkSalmon", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkSeaGreen", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkSlateBlue", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkSlateGray", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkTurquoise", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DarkViolet", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DeepPink", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DeepSkyBlue", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DimGray", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DodgerBlue", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Firebrick", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_FloralWhite", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ForestGreen", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Fuchsia", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_G", 
      new JSIL.MethodSignature($.Byte, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Gainsboro", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GhostWhite", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Gold", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Goldenrod", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Gray", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Green", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GreenYellow", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Honeydew", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_HotPink", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_IndianRed", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Indigo", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Ivory", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Khaki", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Lavender", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LavenderBlush", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LawnGreen", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LemonChiffon", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightBlue", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightCoral", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightCyan", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightGoldenrodYellow", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightGray", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightGreen", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightPink", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSalmon", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSeaGreen", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSkyBlue", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSlateGray", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightSteelBlue", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LightYellow", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Lime", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_LimeGreen", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Linen", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Magenta", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Maroon", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumAquamarine", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumBlue", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumOrchid", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumPurple", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumSeaGreen", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumSlateBlue", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumSpringGreen", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumTurquoise", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MediumVioletRed", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MidnightBlue", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MintCream", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MistyRose", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Moccasin", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_NavajoWhite", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Navy", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OldLace", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Olive", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OliveDrab", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Orange", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OrangeRed", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Orchid", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PackedValue", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PaleGoldenrod", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PaleGreen", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PaleTurquoise", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PaleVioletRed", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PapayaWhip", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PeachPuff", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Peru", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Pink", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Plum", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PowderBlue", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Purple", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_R", 
      new JSIL.MethodSignature($.Byte, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Red", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_RosyBrown", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_RoyalBlue", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SaddleBrown", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Salmon", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SandyBrown", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SeaGreen", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SeaShell", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sienna", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Silver", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SkyBlue", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SlateBlue", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SlateGray", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Snow", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SpringGreen", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_SteelBlue", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Tan", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Teal", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Thistle", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Tomato", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Transparent", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Turquoise", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Violet", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Wheat", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_White", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_WhiteSmoke", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Yellow", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_YellowGreen", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    )
      .Overrides(1, "PackFromVector4");

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PackHelper", 
      new JSIL.MethodSignature($.UInt32, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_A", 
      new JSIL.MethodSignature(null, [$.Byte], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_B", 
      new JSIL.MethodSignature(null, [$.Byte], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_G", 
      new JSIL.MethodSignature(null, [$.Byte], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_PackedValue", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_R", 
      new JSIL.MethodSignature(null, [$.Byte], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToVector3", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToVector4", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector4"), [], [])
    );

    $.Field({Static:false, Public:true }, "r", $.Byte); 
    $.Field({Static:false, Public:true }, "g", $.Byte); 
    $.Field({Static:false, Public:true }, "b", $.Byte); 
    $.Field({Static:false, Public:true }, "a", $.Byte); 
    $.Property({Static:false, Public:true }, "R", $.Byte);

    $.Property({Static:false, Public:true }, "G", $.Byte);

    $.Property({Static:false, Public:true }, "B", $.Byte);

    $.Property({Static:false, Public:true }, "A", $.Byte);

    $.Property({Static:false, Public:true , Virtual:true }, "PackedValue", $.UInt32)
      .Attribute($asm09.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.Property({Static:true , Public:true }, "Transparent", $.Type);

    $.Property({Static:true , Public:true }, "AliceBlue", $.Type);

    $.Property({Static:true , Public:true }, "AntiqueWhite", $.Type);

    $.Property({Static:true , Public:true }, "Aqua", $.Type);

    $.Property({Static:true , Public:true }, "Aquamarine", $.Type);

    $.Property({Static:true , Public:true }, "Azure", $.Type);

    $.Property({Static:true , Public:true }, "Beige", $.Type);

    $.Property({Static:true , Public:true }, "Bisque", $.Type);

    $.Property({Static:true , Public:true }, "Black", $.Type);

    $.Property({Static:true , Public:true }, "BlanchedAlmond", $.Type);

    $.Property({Static:true , Public:true }, "Blue", $.Type);

    $.Property({Static:true , Public:true }, "BlueViolet", $.Type);

    $.Property({Static:true , Public:true }, "Brown", $.Type);

    $.Property({Static:true , Public:true }, "BurlyWood", $.Type);

    $.Property({Static:true , Public:true }, "CadetBlue", $.Type);

    $.Property({Static:true , Public:true }, "Chartreuse", $.Type);

    $.Property({Static:true , Public:true }, "Chocolate", $.Type);

    $.Property({Static:true , Public:true }, "Coral", $.Type);

    $.Property({Static:true , Public:true }, "CornflowerBlue", $.Type);

    $.Property({Static:true , Public:true }, "Cornsilk", $.Type);

    $.Property({Static:true , Public:true }, "Crimson", $.Type);

    $.Property({Static:true , Public:true }, "Cyan", $.Type);

    $.Property({Static:true , Public:true }, "DarkBlue", $.Type);

    $.Property({Static:true , Public:true }, "DarkCyan", $.Type);

    $.Property({Static:true , Public:true }, "DarkGoldenrod", $.Type);

    $.Property({Static:true , Public:true }, "DarkGray", $.Type);

    $.Property({Static:true , Public:true }, "DarkGreen", $.Type);

    $.Property({Static:true , Public:true }, "DarkKhaki", $.Type);

    $.Property({Static:true , Public:true }, "DarkMagenta", $.Type);

    $.Property({Static:true , Public:true }, "DarkOliveGreen", $.Type);

    $.Property({Static:true , Public:true }, "DarkOrange", $.Type);

    $.Property({Static:true , Public:true }, "DarkOrchid", $.Type);

    $.Property({Static:true , Public:true }, "DarkRed", $.Type);

    $.Property({Static:true , Public:true }, "DarkSalmon", $.Type);

    $.Property({Static:true , Public:true }, "DarkSeaGreen", $.Type);

    $.Property({Static:true , Public:true }, "DarkSlateBlue", $.Type);

    $.Property({Static:true , Public:true }, "DarkSlateGray", $.Type);

    $.Property({Static:true , Public:true }, "DarkTurquoise", $.Type);

    $.Property({Static:true , Public:true }, "DarkViolet", $.Type);

    $.Property({Static:true , Public:true }, "DeepPink", $.Type);

    $.Property({Static:true , Public:true }, "DeepSkyBlue", $.Type);

    $.Property({Static:true , Public:true }, "DimGray", $.Type);

    $.Property({Static:true , Public:true }, "DodgerBlue", $.Type);

    $.Property({Static:true , Public:true }, "Firebrick", $.Type);

    $.Property({Static:true , Public:true }, "FloralWhite", $.Type);

    $.Property({Static:true , Public:true }, "ForestGreen", $.Type);

    $.Property({Static:true , Public:true }, "Fuchsia", $.Type);

    $.Property({Static:true , Public:true }, "Gainsboro", $.Type);

    $.Property({Static:true , Public:true }, "GhostWhite", $.Type);

    $.Property({Static:true , Public:true }, "Gold", $.Type);

    $.Property({Static:true , Public:true }, "Goldenrod", $.Type);

    $.Property({Static:true , Public:true }, "Gray", $.Type);

    $.Property({Static:true , Public:true }, "Green", $.Type);

    $.Property({Static:true , Public:true }, "GreenYellow", $.Type);

    $.Property({Static:true , Public:true }, "Honeydew", $.Type);

    $.Property({Static:true , Public:true }, "HotPink", $.Type);

    $.Property({Static:true , Public:true }, "IndianRed", $.Type);

    $.Property({Static:true , Public:true }, "Indigo", $.Type);

    $.Property({Static:true , Public:true }, "Ivory", $.Type);

    $.Property({Static:true , Public:true }, "Khaki", $.Type);

    $.Property({Static:true , Public:true }, "Lavender", $.Type);

    $.Property({Static:true , Public:true }, "LavenderBlush", $.Type);

    $.Property({Static:true , Public:true }, "LawnGreen", $.Type);

    $.Property({Static:true , Public:true }, "LemonChiffon", $.Type);

    $.Property({Static:true , Public:true }, "LightBlue", $.Type);

    $.Property({Static:true , Public:true }, "LightCoral", $.Type);

    $.Property({Static:true , Public:true }, "LightCyan", $.Type);

    $.Property({Static:true , Public:true }, "LightGoldenrodYellow", $.Type);

    $.Property({Static:true , Public:true }, "LightGreen", $.Type);

    $.Property({Static:true , Public:true }, "LightGray", $.Type);

    $.Property({Static:true , Public:true }, "LightPink", $.Type);

    $.Property({Static:true , Public:true }, "LightSalmon", $.Type);

    $.Property({Static:true , Public:true }, "LightSeaGreen", $.Type);

    $.Property({Static:true , Public:true }, "LightSkyBlue", $.Type);

    $.Property({Static:true , Public:true }, "LightSlateGray", $.Type);

    $.Property({Static:true , Public:true }, "LightSteelBlue", $.Type);

    $.Property({Static:true , Public:true }, "LightYellow", $.Type);

    $.Property({Static:true , Public:true }, "Lime", $.Type);

    $.Property({Static:true , Public:true }, "LimeGreen", $.Type);

    $.Property({Static:true , Public:true }, "Linen", $.Type);

    $.Property({Static:true , Public:true }, "Magenta", $.Type);

    $.Property({Static:true , Public:true }, "Maroon", $.Type);

    $.Property({Static:true , Public:true }, "MediumAquamarine", $.Type);

    $.Property({Static:true , Public:true }, "MediumBlue", $.Type);

    $.Property({Static:true , Public:true }, "MediumOrchid", $.Type);

    $.Property({Static:true , Public:true }, "MediumPurple", $.Type);

    $.Property({Static:true , Public:true }, "MediumSeaGreen", $.Type);

    $.Property({Static:true , Public:true }, "MediumSlateBlue", $.Type);

    $.Property({Static:true , Public:true }, "MediumSpringGreen", $.Type);

    $.Property({Static:true , Public:true }, "MediumTurquoise", $.Type);

    $.Property({Static:true , Public:true }, "MediumVioletRed", $.Type);

    $.Property({Static:true , Public:true }, "MidnightBlue", $.Type);

    $.Property({Static:true , Public:true }, "MintCream", $.Type);

    $.Property({Static:true , Public:true }, "MistyRose", $.Type);

    $.Property({Static:true , Public:true }, "Moccasin", $.Type);

    $.Property({Static:true , Public:true }, "NavajoWhite", $.Type);

    $.Property({Static:true , Public:true }, "Navy", $.Type);

    $.Property({Static:true , Public:true }, "OldLace", $.Type);

    $.Property({Static:true , Public:true }, "Olive", $.Type);

    $.Property({Static:true , Public:true }, "OliveDrab", $.Type);

    $.Property({Static:true , Public:true }, "Orange", $.Type);

    $.Property({Static:true , Public:true }, "OrangeRed", $.Type);

    $.Property({Static:true , Public:true }, "Orchid", $.Type);

    $.Property({Static:true , Public:true }, "PaleGoldenrod", $.Type);

    $.Property({Static:true , Public:true }, "PaleGreen", $.Type);

    $.Property({Static:true , Public:true }, "PaleTurquoise", $.Type);

    $.Property({Static:true , Public:true }, "PaleVioletRed", $.Type);

    $.Property({Static:true , Public:true }, "PapayaWhip", $.Type);

    $.Property({Static:true , Public:true }, "PeachPuff", $.Type);

    $.Property({Static:true , Public:true }, "Peru", $.Type);

    $.Property({Static:true , Public:true }, "Pink", $.Type);

    $.Property({Static:true , Public:true }, "Plum", $.Type);

    $.Property({Static:true , Public:true }, "PowderBlue", $.Type);

    $.Property({Static:true , Public:true }, "Purple", $.Type);

    $.Property({Static:true , Public:true }, "Red", $.Type);

    $.Property({Static:true , Public:true }, "RosyBrown", $.Type);

    $.Property({Static:true , Public:true }, "RoyalBlue", $.Type);

    $.Property({Static:true , Public:true }, "SaddleBrown", $.Type);

    $.Property({Static:true , Public:true }, "Salmon", $.Type);

    $.Property({Static:true , Public:true }, "SandyBrown", $.Type);

    $.Property({Static:true , Public:true }, "SeaGreen", $.Type);

    $.Property({Static:true , Public:true }, "SeaShell", $.Type);

    $.Property({Static:true , Public:true }, "Sienna", $.Type);

    $.Property({Static:true , Public:true }, "Silver", $.Type);

    $.Property({Static:true , Public:true }, "SkyBlue", $.Type);

    $.Property({Static:true , Public:true }, "SlateBlue", $.Type);

    $.Property({Static:true , Public:true }, "SlateGray", $.Type);

    $.Property({Static:true , Public:true }, "Snow", $.Type);

    $.Property({Static:true , Public:true }, "SpringGreen", $.Type);

    $.Property({Static:true , Public:true }, "SteelBlue", $.Type);

    $.Property({Static:true , Public:true }, "Tan", $.Type);

    $.Property({Static:true , Public:true }, "Teal", $.Type);

    $.Property({Static:true , Public:true }, "Thistle", $.Type);

    $.Property({Static:true , Public:true }, "Tomato", $.Type);

    $.Property({Static:true , Public:true }, "Turquoise", $.Type);

    $.Property({Static:true , Public:true }, "Violet", $.Type);

    $.Property({Static:true , Public:true }, "Wheat", $.Type);

    $.Property({Static:true , Public:true }, "White", $.Type);

    $.Property({Static:true , Public:true }, "WhiteSmoke", $.Type);

    $.Property({Static:true , Public:true }, "Yellow", $.Type);

    $.Property({Static:true , Public:true }, "YellowGreen", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", [$.UInt32]), 
      /* 1 */ $asm01.TypeRef("Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector"), 
      /* 2 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.Microsoft.Xna.Framework.Design.ColorConverter.__Type__]; });

})();

/* enum Microsoft.Xna.Framework.PlaneIntersectionType */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.PlaneIntersectionType", true, {
    Front: 0, 
    Back: 1, 
    Intersecting: 2
  }, false
);

/* struct Microsoft.Xna.Framework.Plane */ 

(function Plane$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Plane", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Dot", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Dot", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")]), $jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "DotCoordinate", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "DotCoordinate", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "DotNormal", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "DotNormal", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType"), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType"), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType"), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlaneIntersectionType")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Normalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.Field({Static:false, Public:true }, "Normal", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"))
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "D", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.Microsoft.Xna.Framework.Design.PlaneConverter.__Type__]; });

})();

/* struct Microsoft.Xna.Framework.Point */ 

(function Point$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Point", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:true }, "X", $.Int32)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "Y", $.Int32)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:true , Public:false}, "_zero", $.Type); 
    function Point__cctor () {
      $thisType._zero = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      Point__cctor
    );

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.Microsoft.Xna.Framework.Design.PointConverter.__Type__]; });

})();

/* struct Microsoft.Xna.Framework.Quaternion */ 

(function Quaternion$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Quaternion", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Concatenate", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Concatenate", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Conjugate", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Conjugate", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Conjugate", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromAxisAngle", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromAxisAngle", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromRotationMatrix", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromRotationMatrix", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromYawPitchRoll", 
      new JSIL.MethodSignature($.Type, [
          $.Single, $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromYawPitchRoll", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Identity", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Inverse", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Inverse", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Length", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "LengthSquared", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Normalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Slerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Slerp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:true }, "X", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "Y", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "Z", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "W", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:true , Public:false}, "_identity", $.Type); 
    function Quaternion__cctor () {
      $thisType._identity = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      Quaternion__cctor
    );

    $.Property({Static:true , Public:true }, "Identity", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.Microsoft.Xna.Framework.Design.QuaternionConverter.__Type__]; });

})();

/* struct Microsoft.Xna.Framework.Ray */ 

(function Ray$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Ray", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingBox")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Nullable`1", [$.Single])])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingFrustum")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Plane")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Nullable`1", [$.Single])])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.BoundingSphere")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Nullable`1", [$.Single])])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:true }, "Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"))
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "Direction", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3"))
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.Microsoft.Xna.Framework.Design.RayConverter.__Type__]; });

})();

/* struct Microsoft.Xna.Framework.Rectangle */ 

(function Rectangle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Rectangle", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsPoint", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Point")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsPoint", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Point")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsRectangle", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ContainsRectangle", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bottom", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Center", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Point"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Empty", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Left", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Location", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Point"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Right", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Top", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Inflate", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "OffsetPoint", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Point")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Offset", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Location", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Point")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.Field({Static:false, Public:true }, "X", $.Int32)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "Y", $.Int32)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "Width", $.Int32)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "Height", $.Int32)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:true , Public:false}, "_empty", $.Type); 
    function Rectangle__cctor () {
      $thisType._empty = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      Rectangle__cctor
    );

    $.Property({Static:false, Public:true }, "Left", $.Int32);

    $.Property({Static:false, Public:true }, "Right", $.Int32);

    $.Property({Static:false, Public:true }, "Top", $.Int32);

    $.Property({Static:false, Public:true }, "Bottom", $.Int32);

    $.Property({Static:false, Public:true }, "Location", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Property({Static:false, Public:true }, "Center", $asm01.TypeRef("Microsoft.Xna.Framework.Point"));

    $.Property({Static:true , Public:true }, "Empty", $.Type);

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.Microsoft.Xna.Framework.Design.RectangleConverter.__Type__]; });

})();

/* struct Microsoft.Xna.Framework.Vector2 */ 

(function Vector2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Vector2", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Barycentric", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type, $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Barycentric", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CatmullRom", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type, $.Type, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CatmullRom", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "DistanceSquared", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "DistanceSquared", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "DivideScalar", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "DivideScalar", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_One", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UnitX", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UnitY", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Hermite", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type, $.Type, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Hermite", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Length", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "LengthSquared", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyScalar", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyScalar", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Normalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_DivisionScalar", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_MultiplyScalar", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_MultiplyScalarLeft", 
      new JSIL.MethodSignature($.Type, [$.Single, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Reflect", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Reflect", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SmoothStep", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SmoothStep", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Usage", "CA2233"]; });

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Usage", "CA2233"]; });

    $.ExternalMethod({Static:true , Public:true }, "TransformNormal", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TransformNormal", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TransformNormal", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TransformNormal", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Usage", "CA2233"]; });

    $.Field({Static:false, Public:true }, "X", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "Y", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:true , Public:false}, "_zero", $.Type); 
    $.Field({Static:true , Public:false}, "_one", $.Type); 
    $.Field({Static:true , Public:false}, "_unitX", $.Type); 
    $.Field({Static:true , Public:false}, "_unitY", $.Type); 
    function Vector2__cctor () {
      $thisType._zero = new $thisType();
      $thisType._one = new $thisType();
      $thisType._unitX = new $thisType();
      $thisType._unitY = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      Vector2__cctor
    );

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.Property({Static:true , Public:true }, "One", $.Type);

    $.Property({Static:true , Public:true }, "UnitX", $.Type);

    $.Property({Static:true , Public:true }, "UnitY", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.Microsoft.Xna.Framework.Design.Vector2Converter.__Type__]; });

})();

/* struct Microsoft.Xna.Framework.Vector3 */ 

(function Vector3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Vector3", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Barycentric", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type, $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Barycentric", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CatmullRom", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type, $.Type, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CatmullRom", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Cross", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Cross", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "DistanceSquared", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "DistanceSquared", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "DivideScalar", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "DivideScalar", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Backward", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Down", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Forward", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Left", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_One", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Right", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UnitX", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UnitY", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UnitZ", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Up", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Hermite", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type, $.Type, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Hermite", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Length", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "LengthSquared", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyScalar", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyScalar", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Normalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_DivisionScalar", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_MultiplyScalar", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_MultiplyScalarLeft", 
      new JSIL.MethodSignature($.Type, [$.Single, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Reflect", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Reflect", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SmoothStep", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SmoothStep", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Usage", "CA2233"]; });

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Usage", "CA2233"]; });

    $.ExternalMethod({Static:true , Public:true }, "TransformNormal", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TransformNormal", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TransformNormal", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TransformNormal", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Usage", "CA2233"]; });

    $.Field({Static:false, Public:true }, "X", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "Y", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "Z", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:true , Public:false}, "_zero", $.Type); 
    $.Field({Static:true , Public:false}, "_one", $.Type); 
    $.Field({Static:true , Public:false}, "_unitX", $.Type); 
    $.Field({Static:true , Public:false}, "_unitY", $.Type); 
    $.Field({Static:true , Public:false}, "_unitZ", $.Type); 
    $.Field({Static:true , Public:false}, "_up", $.Type); 
    $.Field({Static:true , Public:false}, "_down", $.Type); 
    $.Field({Static:true , Public:false}, "_right", $.Type); 
    $.Field({Static:true , Public:false}, "_left", $.Type); 
    $.Field({Static:true , Public:false}, "_forward", $.Type); 
    $.Field({Static:true , Public:false}, "_backward", $.Type); 
    function Vector3__cctor () {
      $thisType._zero = new $thisType();
      $thisType._one = new $thisType();
      $thisType._unitX = new $thisType();
      $thisType._unitY = new $thisType();
      $thisType._unitZ = new $thisType();
      $thisType._up = new $thisType();
      $thisType._down = new $thisType();
      $thisType._right = new $thisType();
      $thisType._left = new $thisType();
      $thisType._forward = new $thisType();
      $thisType._backward = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      Vector3__cctor
    );

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.Property({Static:true , Public:true }, "One", $.Type);

    $.Property({Static:true , Public:true }, "UnitX", $.Type);

    $.Property({Static:true , Public:true }, "UnitY", $.Type);

    $.Property({Static:true , Public:true }, "UnitZ", $.Type);

    $.Property({Static:true , Public:true }, "Up", $.Type);

    $.Property({Static:true , Public:true }, "Down", $.Type);

    $.Property({Static:true , Public:true }, "Right", $.Type);

    $.Property({Static:true , Public:true }, "Left", $.Type);

    $.Property({Static:true , Public:true }, "Forward", $.Type);

    $.Property({Static:true , Public:true }, "Backward", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.Microsoft.Xna.Framework.Design.Vector3Converter.__Type__]; });

})();

/* struct Microsoft.Xna.Framework.Vector4 */ 

(function Vector4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Vector4", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Barycentric", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type, $.Single, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Barycentric", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CatmullRom", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type, $.Type, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CatmullRom", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Distance", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "DistanceSquared", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "DistanceSquared", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "DivideScalar", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "DivideScalar", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature($.Single, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dot", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Single])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_One", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UnitW", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UnitX", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UnitY", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UnitZ", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Hermite", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type, $.Type, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Hermite", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Length", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "LengthSquared", 
      new JSIL.MethodSignature($.Single, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyScalar", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyScalar", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Normalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Normalize", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_DivisionScalar", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_MultiplyScalar", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_MultiplyScalarLeft", 
      new JSIL.MethodSignature($.Type, [$.Single, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SmoothStep", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SmoothStep", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Usage", "CA2233"]; });

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Type]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Quaternion")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Usage", "CA2233"]; });

    $.Field({Static:false, Public:true }, "X", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "Y", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "Z", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:false, Public:true }, "W", $.Single)
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Design", "CA1051:DoNotDeclareVisibleInstanceFields"]; }); 
    $.Field({Static:true , Public:false}, "_zero", $.Type); 
    $.Field({Static:true , Public:false}, "_one", $.Type); 
    $.Field({Static:true , Public:false}, "_unitX", $.Type); 
    $.Field({Static:true , Public:false}, "_unitY", $.Type); 
    $.Field({Static:true , Public:false}, "_unitZ", $.Type); 
    $.Field({Static:true , Public:false}, "_unitW", $.Type); 
    function Vector4__cctor () {
      $thisType._zero = new $thisType();
      $thisType._one = new $thisType();
      $thisType._unitX = new $thisType();
      $thisType._unitY = new $thisType();
      $thisType._unitZ = new $thisType();
      $thisType._unitW = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      Vector4__cctor
    );

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.Property({Static:true , Public:true }, "One", $.Type);

    $.Property({Static:true , Public:true }, "UnitX", $.Type);

    $.Property({Static:true , Public:true }, "UnitY", $.Type);

    $.Property({Static:true , Public:true }, "UnitZ", $.Type);

    $.Property({Static:true , Public:true }, "UnitW", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm01.Microsoft.Xna.Framework.Design.Vector4Converter.__Type__]; });

})();

/* class Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils */ 

(function HalfUtils$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Pack", 
      new JSIL.MethodSignature($.UInt16, [$.Single], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Unpack", 
      new JSIL.MethodSignature($.Single, [$.UInt16], [])
    );

    $.Constant({Static:true , Public:false}, "cFracBits", 10); 
    $.Constant({Static:true , Public:false}, "cExpBits", 5); 
    $.Constant({Static:true , Public:false}, "cSignBit", 15); 
    $.Constant({Static:true , Public:false}, "cSignMask", 32768); 
    $.Constant({Static:true , Public:false}, "cFracMask", 1023); 
    $.Constant({Static:true , Public:false}, "cExpBias", 15); 
    $.Constant({Static:true , Public:false}, "cRoundBit", 4096); 
    $.Constant({Static:true , Public:false}, "eMax", 16); 
    $.Constant({Static:true , Public:false}, "eMin", -14); 
    $.Constant({Static:true , Public:false}, "wMaxNormal", 1207955455); 
    $.Constant({Static:true , Public:false}, "wMinNormal", 947912704); 
    $.Constant({Static:true , Public:false}, "BiasDiffo", 3355443200); 
    $.Constant({Static:true , Public:false}, "cFracBitsDiff", 13); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

