/* Generated by JSIL v0.7.8 build 22841. See http://jsil.org/ for more information. */ 
/* Generating type stubs only */ 
var $asm08 = JSIL.DeclareAssembly("Microsoft.Xna.Framework.Xact, Version=4.0.0.0, Culture=neutral, PublicKeyToken=842cf8be1de50553");

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Xna");
JSIL.DeclareNamespace("Microsoft.Xna.Framework");
JSIL.DeclareNamespace("Microsoft.Xna.Framework.Audio");
/* delegate Microsoft.Xna.Framework.Audio.CueDestroyedEventHandler */ 

JSIL.MakeDelegate("Microsoft.Xna.Framework.Audio.CueDestroyedEventHandler", false, []);

JSIL.DeclareNamespace("$lCrtImplementationDetails$g");
/* class <CrtImplementationDetails>.ModuleLoadException */ 

(function ModuleLoadException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Exception"), 
      Name: "<CrtImplementationDetails>.ModuleLoadException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Constant({Static:true , Public:true }, "Nested", "A nested exception occurred after the primary exception that caused the C++ module to fail to load.\n"); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <CrtImplementationDetails>.ModuleLoadExceptionHandlerException */ 

(function ModuleLoadExceptionHandlerException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm08.TypeRef("<CrtImplementationDetails>.ModuleLoadException"), 
      Name: "<CrtImplementationDetails>.ModuleLoadExceptionHandlerException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm09.TypeRef("System.Exception"), 
          $asm09.TypeRef("System.Exception")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NestedException", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_NestedException", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Constant({Static:true , Public:false}, "formatString", "\n{0}: {1}\n--- Start of primary exception ---\n{2}\n--- End of primary exception ---\n\n--- Start of nested exception ---\n{3}\n--- End of nested exception ---\n"); 
    $.Field({Static:false, Public:false}, "backing_store$NestedException", $asm09.TypeRef("System.Exception")); 
    $.Property({Static:false, Public:true }, "NestedException", $asm09.TypeRef("System.Exception"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class <CrtImplementationDetails>.ModuleUninitializer */ 

(function ModuleUninitializer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Collections.Stack"), 
      Name: "<CrtImplementationDetails>.ModuleUninitializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "AddHandler", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SingletonDomainUnload", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.EventArgs")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "lock", $.Object); 
    $.Field({Static:true , Public:false}, "_ModuleUninitializer", $.Type); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Audio.RendererDetail */ 

(function RendererDetail$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Audio.RendererDetail", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FriendlyName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RendererId", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "_name", $.String); 
    $.Field({Static:false, Public:false}, "_id", $.String); 
    $.Property({Static:false, Public:true }, "FriendlyName", $.String);

    $.Property({Static:false, Public:true }, "RendererId", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.Cue */ 

(function Cue$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.Cue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.String, 
          $.UInt32, $asm08.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_Disposing", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Apply3D", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioListener"), $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioEmitter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsCreated", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPaused", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPlaying", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPrepared", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPreparing", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsStopped", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsStopping", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetVariable", 
      new JSIL.MethodSignature($.Single, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Pause", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Play", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_Disposing", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Resume", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetVariable", 
      new JSIL.MethodSignature(null, [$.String, $.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Stop", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("Microsoft.Xna.Framework.Audio.AudioStopOptions")], [])
    );

    $.Field({Static:false, Public:false}, "cueHandle", $.UInt32); 
    $.Field({Static:false, Public:false}, "engineHandle", $.UInt32); 
    $.Field({Static:false, Public:false}, "applied3D", $.Boolean); 
    $.Field({Static:false, Public:false}, "played", $.Boolean); 
    $.Field({Static:false, Public:false}, "_name", $.String); 
    $.Field({Static:false, Public:false}, "parent", $asm08.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"))
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields"]; }); 
    $.Field({Static:false, Public:false}, "_isDisposed", $.Boolean); 
    $.Field({Static:false, Public:false}, "Disposing", $asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "IsCreated", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPreparing", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPrepared", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPlaying", $.Boolean);

    $.Property({Static:false, Public:true }, "IsStopping", $.Boolean);

    $.Property({Static:false, Public:true }, "IsStopped", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPaused", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Xna.Framework.Audio.AudioStopOptions */ 

JSIL.MakeEnum(
  "Microsoft.Xna.Framework.Audio.AudioStopOptions", true, {
    AsAuthored: 0, 
    Immediate: 1
  }, false
);

/* class Microsoft.Xna.Framework.Audio.SoundBank */ 

(function SoundBank$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.SoundBank", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_Disposing", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsInUse", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCue", 
      new JSIL.MethodSignature($asm08.TypeRef("Microsoft.Xna.Framework.Audio.Cue"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "PlayCue", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "PlayCue", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioListener"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Audio.AudioEmitter")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_Disposing", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])], [])
    );

    $.Field({Static:false, Public:false}, "soundBankHandle", $.UInt32); 
    $.Field({Static:false, Public:false}, "engineHandle", $.UInt32); 
    $.Field({Static:false, Public:false}, "pCleanupData", $asm09.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "parent", $asm08.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine")); 
    $.Field({Static:false, Public:false}, "_isDisposed", $.Boolean); 
    $.Field({Static:false, Public:false}, "Disposing", $asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])); 
    $.Property({Static:false, Public:true }, "IsInUse", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.WaveBank */ 

(function WaveBank$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.WaveBank", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"), $.String, 
          $.Int32, $.Int16
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_Disposing", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckWaveBankHeader", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsInUse", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPrepared", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_Disposing", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])], [])
    );

    $.Field({Static:false, Public:false}, "waveBankHandle", $.UInt32); 
    $.Field({Static:false, Public:false}, "engineHandle", $.UInt32); 
    $.Field({Static:false, Public:false}, "pFileStream", $asm09.TypeRef("System.IO.FileStream")); 
    $.Field({Static:false, Public:false}, "pCleanupData", $asm09.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "parent", $asm08.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine")); 
    $.Field({Static:false, Public:false}, "_isDisposed", $.Boolean); 
    $.Field({Static:false, Public:false}, "Disposing", $asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])); 
    $.Property({Static:false, Public:true }, "IsInUse", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPrepared", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Xna.Framework.Audio.AudioCategory */ 

(function AudioCategory$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "Microsoft.Xna.Framework.Audio.AudioCategory", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Pause", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Resume", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetVolume", 
      new JSIL.MethodSignature(null, [$.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Stop", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("Microsoft.Xna.Framework.Audio.AudioStopOptions")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "_parent", $asm08.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine")); 
    $.Field({Static:false, Public:false}, "_category", $.UInt16); 
    $.Field({Static:false, Public:false}, "_name", $.String); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Xna.Framework.Audio.AudioEngine */ 

(function AudioEngine$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Microsoft.Xna.Framework.Audio.AudioEngine", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm09.TypeRef("System.TimeSpan"), 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"), function () { return ["Microsoft.Usage", "CA1801:ReviewUnusedParameters"]; });

    $.ExternalMethod({Static:false, Public:true }, "add_Disposing", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddInstance", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDisposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RendererDetails", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm08.TypeRef("Microsoft.Xna.Framework.Audio.RendererDetail")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetCategory", 
      new JSIL.MethodSignature($asm08.TypeRef("Microsoft.Xna.Framework.Audio.AudioCategory"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetGlobalVariable", 
      new JSIL.MethodSignature($.Single, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotifyDestroyedCue", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotifyDestroyedEngine", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_Disposing", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveInstance", 
      new JSIL.MethodSignature(null, [$.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetGlobalVariable", 
      new JSIL.MethodSignature(null, [$.String, $.Single], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Constant({Static:true , Public:true }, "ContentVersion", 39); 
    $.Field({Static:false, Public:false}, "engineHandle", $.UInt32); 
    $.Field({Static:false, Public:false}, "destChannelCount", $.Int32); 
    $.Field({Static:true , Public:false}, "hasHookedDestroy", $.Boolean); 
    $.Field({Static:false, Public:false}, "pSettingsData", $asm09.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "p3dAudio", $asm09.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "pDsp", $asm09.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "_isDisposed", $.Boolean); 
    $.Field({Static:false, Public:false}, "Disposing", $asm09.TypeRef("System.EventHandler`1", [$asm09.TypeRef("System.EventArgs")])); 
    $.Field({Static:true , Public:false}, "audioInstances", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.UInt32, $asm09.TypeRef("System.WeakReference")])); 
    $.Field({Static:true , Public:false}, "pSyncObject", $.Object); 
    $.Property({Static:false, Public:true }, "RendererDetails", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm08.TypeRef("Microsoft.Xna.Framework.Audio.RendererDetail")]));

    $.Property({Static:false, Public:true }, "IsDisposed", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

