/* Generated by JSIL v0.7.8 build 22841. See http://jsil.org/ for more information. */ 
var $asm00 = JSIL.DeclareAssembly("BrokenMagicJumper, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.SetEntryPoint($asm00, $asm00.TypeRef("BrokenMagicJumper.Program"), "Main", new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.String")])]));

JSIL.DeclareNamespace("BrokenMagicJumper");
/* struct BrokenMagicJumper.Circle */ 

(function Circle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };

  function Circle__ctor (position, radius) {
    this.Center = position;
    this.Radius = +radius;
  };

  function Circle_Intersects (rectangle) {
    var v = $S00().Construct($T03().Clamp(
        this.Center.X, 
        $T01().$Cast(rectangle.get_Left()), 
        $T01().$Cast(rectangle.get_Right())
      ), $T03().Clamp(
        this.Center.Y, 
        $T01().$Cast(rectangle.get_Top()), 
        $T01().$Cast(rectangle.get_Bottom())
      ));
    var distanceSquared = +$T00().op_Subtraction(this.Center, v).LengthSquared();
    return ((distanceSquared >= 0) && (distanceSquared <= (this.Radius * this.Radius)));
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "BrokenMagicJumper.Circle", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Single], []), 
      Circle__ctor
    );

    $.Method({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")], []), 
      Circle_Intersects
    );

    $.Field({Static:false, Public:true }, "Center", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:true }, "Radius", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface BrokenMagicJumper.IGameLayer */ 

JSIL.MakeInterface(
  "BrokenMagicJumper.IGameLayer", false, [], function ($) {
    $.Method({}, "get_Name", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "set_Name", new JSIL.MethodSignature(null, [$.String], []));
    $.Method({}, "get_Visible", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "set_Visible", new JSIL.MethodSignature(null, [$.Boolean], []));
    $.Method({}, "get_Opacity", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_Opacity", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "Draw", new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $.Single, 
          $.Single, $.Single, 
          $.Single
        ], []));
    $.Property({}, "Name");
    $.Property({}, "Visible");
    $.Property({}, "Opacity");
  }, []);

/* class BrokenMagicJumper.EntityLayer */ 

(function EntityLayer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.BrokenMagicJumper.Level)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Boolean)) ();
  };

  function EntityLayer__ctor (level) {
    this.set_Visible(true);
    this.set_Opacity(1);
    this.Level = level;
  };

  function EntityLayer_Draw (spriteBatch, levelWidth, levelHeight, cameraPositionX, cameraPositionY) {
  };

  function EntityLayer_get_Name () {
    return this.EntityLayer$Name$value;
  };

  function EntityLayer_get_Opacity () {
    return +this.EntityLayer$Opacity$value;
  };

  function EntityLayer_get_Visible () {
    return this.EntityLayer$Visible$value;
  };

  function EntityLayer_set_Name (value) {
    this.EntityLayer$Name$value = value;
  };

  function EntityLayer_set_Opacity (value) {
    this.EntityLayer$Opacity$value = +value;
  };

  function EntityLayer_set_Visible (value) {
    this.EntityLayer$Visible$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "BrokenMagicJumper.EntityLayer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("BrokenMagicJumper.Level")], []), 
      EntityLayer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $.Single, 
          $.Single, $.Single, 
          $.Single
        ], []), 
      EntityLayer_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], []), 
      EntityLayer_get_Name
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_Opacity", 
      new JSIL.MethodSignature($.Single, [], []), 
      EntityLayer_get_Opacity
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_Visible", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      EntityLayer_get_Visible
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], []), 
      EntityLayer_set_Name
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "set_Opacity", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      EntityLayer_set_Opacity
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "set_Visible", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      EntityLayer_set_Visible
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:true }, "Level", $asm00.TypeRef("BrokenMagicJumper.Level")); 
    $.Field({Static:false, Public:false}, "EntityLayer$Name$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EntityLayer$Visible$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "EntityLayer$Opacity$value", $.Single)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Visible", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Opacity", $.Single);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("BrokenMagicJumper.IGameLayer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class BrokenMagicJumper.CollidedWithTileArgs */ 

(function CollidedWithTileArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.EventArgs)) ();
  };

  function CollidedWithTileArgs__ctor (x, y) {
    $T01().prototype._ctor.call(this);
    this.CollidedWithTileArgs$X$value = x;
    this.CollidedWithTileArgs$Y$value = y;
  };

  function CollidedWithTileArgs_get_X () {
    return this.CollidedWithTileArgs$X$value;
  };

  function CollidedWithTileArgs_get_Y () {
    return this.CollidedWithTileArgs$Y$value;
  };

  function CollidedWithTileArgs_set_X (value) {
    this.CollidedWithTileArgs$X$value = value;
  };

  function CollidedWithTileArgs_set_Y (value) {
    this.CollidedWithTileArgs$Y$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.EventArgs"), 
      Name: "BrokenMagicJumper.CollidedWithTileArgs", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], []), 
      CollidedWithTileArgs__ctor
    );

    $.Method({Static:false, Public:true }, "get_X", 
      new JSIL.MethodSignature($.Int32, [], []), 
      CollidedWithTileArgs_get_X
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Y", 
      new JSIL.MethodSignature($.Int32, [], []), 
      CollidedWithTileArgs_get_Y
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_X", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      CollidedWithTileArgs_set_X
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Y", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      CollidedWithTileArgs_set_Y
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "CollidedWithTileArgs$X$value", $.Int32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "CollidedWithTileArgs$Y$value", $.Int32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "X", $.Int32);

    $.Property({Static:false, Public:true }, "Y", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class BrokenMagicJumper.Globals */ 

(function Globals$Members () {
  var $, $thisType;
  function Globals__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "BrokenMagicJumper.Globals", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Globals__ctor
    );

    $.Field({Static:true , Public:true }, "Logo", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "TitleScreen", $asm00.TypeRef("BrokenMagicJumper.BrokenMagicJumperTitleScreen")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class BrokenMagicJumper.BrokenMagicJumperGameplayScreen */ 

(function BrokenMagicJumperGameplayScreen$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.TimeSpan)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.GameMode)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm09.System.String))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.IO.Directory)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.BrokenMagicJumper.Level)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteSortMode)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.BlendState)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.RasterizerState)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm09.System.Exception)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Media.MediaPlayer)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keyboard)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePad)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.PlayerIndex)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePadState)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Buttons)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm00.BrokenMagicJumper.Player)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm00.BrokenMagicJumper.Globals)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Media.Song)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm09.System.Math)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm0A.SharedXNA.GameModeManager)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.RasterizerState"), []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Media.Song")], []))) ();
  };

  function BrokenMagicJumperGameplayScreen__ctor () {
    this.HudFontColor = $T01().get_CornflowerBlue().MemberwiseClone();
    this.levelIndex = -1;
    $T02().prototype._ctor.call(this);
    this.numberOfLevels = $T04().GetFiles("Content/Levels", "*.tmx").length;
  };

  function BrokenMagicJumperGameplayScreen_Draw (gameTime) {
    $T06().GraphicsDevice.InternalClear($T01().get_CornflowerBlue());
    this.level.Draw(gameTime, $T06().CommonBatch);
    this.DrawHud();
  };

  function BrokenMagicJumperGameplayScreen_DrawHud () {
    $T06().CommonBatch.Begin();
    var titleSafeArea = $T06().GraphicsDevice.get_Viewport().get_TitleSafeArea();
    $S00().Construct($T0D().$Cast(titleSafeArea.X), $T0D().$Cast(titleSafeArea.Y));
    $S00().Construct(($T0D().$Cast(titleSafeArea.X) + ($T0D().$Cast(titleSafeArea.Width) / 2)), ($T0D().$Cast(titleSafeArea.Y) + ($T0D().$Cast(titleSafeArea.Height) / 2)));
    $T06().CommonBatch.End();
    $T06().CommonBatch.Begin(
      $T0E().Immediate, 
      $T0F().AlphaBlend, 
      null, 
      null, 
      ($S01().Construct()).__Initialize__({
          ScissorTestEnable: true}
      )
    );
    $T06().CommonBatch.End();
  };

  function BrokenMagicJumperGameplayScreen_DrawShadowedString (font, value, position, color) {
    $T06().CommonBatch.DrawString(
      font, 
      value, 
      $T0C().op_Addition(position, $S00().Construct(1, 1)), 
      $T01().get_Black()
    );
    $T06().CommonBatch.DrawString(font, value, position, color);
  };

  function BrokenMagicJumperGameplayScreen_EnterState ($exception) {
    try {
      $T14().set_IsRepeating(true);
      $S02().CallStatic($T14(), "Play", null, this.BackgroundMusic);
    } catch ($exception) {
    }
    this.LoadLevel(0);
  };

  function BrokenMagicJumperGameplayScreen_ExitState () {
    $T14().Pause();
  };

  function BrokenMagicJumperGameplayScreen_GetHudFontColor (isOn) {
    if (!isOn) {
      return $T01().get_Gray();
    }
    return this.HudFontColor;
  };

  function BrokenMagicJumperGameplayScreen_HandleInput () {
    this.previousKeyboardState = this.keyboardState.MemberwiseClone();
    this.previousGamePadState = this.gamePadState.MemberwiseClone();
    this.keyboardState = $T16().GetState().MemberwiseClone();
    this.gamePadState = $T17().GetState($T18().One).MemberwiseClone();
    if (this.keyboardState.IsKeyDown($T1A().Escape)) {
      $T06().Game.Exit();
    }
    if (!(!this.previousKeyboardState.IsKeyUp($T1A().PageUp) || !this.keyboardState.IsKeyDown($T1A().PageUp))) {
      this.LoadNextLevel();
    } else if (!(!this.previousKeyboardState.IsKeyUp($T1A().PageDown) || !this.keyboardState.IsKeyDown($T1A().PageDown))) {
      this.LoadPreviousLevel();
    }
    var continuePressed = (this.keyboardState.IsKeyDown($T1A().Space) || 
      this.gamePadState.IsButtonDown($T1D().Start));
    if (!(this.wasContinuePressed || !continuePressed)) {
      if (!this.level.get_Player().get_IsAlive()) {
        this.level.StartNewLife();
      } else if (this.level.get_ReachedExit()) {
        this.LoadNextLevel();
      }
    } else if (this.level.get_ReachedExit()) {
      if ($T00().op_GreaterThan(
          $T00().op_Subtraction($T06().Game.TimeSinceStart, this.level.ExitReachedTime).MemberwiseClone(), 
          $T00().FromSeconds(2).MemberwiseClone()
        )) {
        this.LoadNextLevel();
      }
    } else if (!(this.level.get_Player().get_IsAlive() || !$T00().op_GreaterThan(
          $T00().op_Subtraction($T06().Game.TimeSinceStart, this.level.get_Player().DeathTime).MemberwiseClone(), 
          $T00().FromSeconds(1.5).MemberwiseClone()
        ))) {
      this.level.StartNewLife();
    }
    this.wasContinuePressed = continuePressed;
  };

  function BrokenMagicJumperGameplayScreen_LoadContent (Content) {
    $T20().Logo = Content.Load$b1($T21())("Screens/TitleScreen");
    this.BackgroundMusic = Content.Load$b1($T22())("Sounds/Music/BackgroundMusic");
  };

  function BrokenMagicJumperGameplayScreen_LoadLevel (levelIndex) {
    this.levelIndex = levelIndex;
    if (this.level !== null) {
      this.level.Dispose();
    }
    var levelPath = (JSIL.ConcatString("Content/Levels/", levelIndex, ".tmx"));
    this.level = new ($T08())($T06().Game.get_Services(), levelPath, levelIndex);
  };

  function BrokenMagicJumperGameplayScreen_LoadNextLevel () {
    if (((this.levelIndex + 1) | 0) >= this.numberOfLevels) {
      this.ShowGameWinScreen();
      return;
    }
    this.LoadLevel($T25().Max(((this.levelIndex + 1) | 0), 0));
  };

  function BrokenMagicJumperGameplayScreen_LoadPreviousLevel () {
    this.LoadLevel($T25().Max(((this.levelIndex - 1) | 0), 0));
  };

  function BrokenMagicJumperGameplayScreen_ReloadCurrentLevel () {
    this.LoadLevel(this.levelIndex);
  };

  function BrokenMagicJumperGameplayScreen_ShowGameWinScreen () {
    $T26().PopMenu();
  };

  function BrokenMagicJumperGameplayScreen_Update (gameTime) {
    this.HandleInput();
    this.level.Update(gameTime, this.keyboardState.MemberwiseClone(), this.gamePadState.MemberwiseClone());
    $T02().prototype.Update.call(this, gameTime);
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.GameMode"), 
      Name: "BrokenMagicJumper.BrokenMagicJumperGameplayScreen", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      BrokenMagicJumperGameplayScreen__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      BrokenMagicJumperGameplayScreen_Draw
    );

    $.Method({Static:false, Public:false}, "DrawHud", 
      new JSIL.MethodSignature(null, [], []), 
      BrokenMagicJumperGameplayScreen_DrawHud
    );

    $.Method({Static:false, Public:false}, "DrawShadowedString", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $.String, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      BrokenMagicJumperGameplayScreen_DrawShadowedString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "EnterState", 
      new JSIL.MethodSignature(null, [], []), 
      BrokenMagicJumperGameplayScreen_EnterState
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ExitState", 
      new JSIL.MethodSignature(null, [], []), 
      BrokenMagicJumperGameplayScreen_ExitState
    );

    $.Method({Static:false, Public:false}, "GetHudFontColor", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Color"), [$.Boolean], []), 
      BrokenMagicJumperGameplayScreen_GetHudFontColor
    );

    $.Method({Static:false, Public:false}, "HandleInput", 
      new JSIL.MethodSignature(null, [], []), 
      BrokenMagicJumperGameplayScreen_HandleInput
    );

    $.Method({Static:false, Public:true }, "LoadContent", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")], []), 
      BrokenMagicJumperGameplayScreen_LoadContent
    );

    $.Method({Static:false, Public:false}, "LoadLevel", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      BrokenMagicJumperGameplayScreen_LoadLevel
    );

    $.Method({Static:false, Public:false}, "LoadNextLevel", 
      new JSIL.MethodSignature(null, [], []), 
      BrokenMagicJumperGameplayScreen_LoadNextLevel
    );

    $.Method({Static:false, Public:false}, "LoadPreviousLevel", 
      new JSIL.MethodSignature(null, [], []), 
      BrokenMagicJumperGameplayScreen_LoadPreviousLevel
    );

    $.Method({Static:false, Public:false}, "ReloadCurrentLevel", 
      new JSIL.MethodSignature(null, [], []), 
      BrokenMagicJumperGameplayScreen_ReloadCurrentLevel
    );

    $.Method({Static:false, Public:false}, "ShowGameWinScreen", 
      new JSIL.MethodSignature(null, [], []), 
      BrokenMagicJumperGameplayScreen_ShowGameWinScreen
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      BrokenMagicJumperGameplayScreen_Update
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "HudFontColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:true , Public:true }, "StaticInstance", $.Type); 
    $.Field({Static:true , Public:true }, "LevelMenu", $asm0A.TypeRef("SharedXNA.PopUpMenuScreen")); 
    $.Field({Static:false, Public:false}, "levelIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "level", $asm00.TypeRef("BrokenMagicJumper.Level")); 
    $.Field({Static:false, Public:false}, "wasContinuePressed", $.Boolean); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "WarningTime", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "gamePadState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadState")); 
    $.Field({Static:false, Public:false}, "keyboardState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")); 
    $.Field({Static:false, Public:false}, "previousGamePadState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadState")); 
    $.Field({Static:false, Public:false}, "previousKeyboardState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")); 
    $.Field({Static:false, Public:false}, "numberOfLevels", $.Int32); 
    $.Field({Static:false, Public:false}, "BackgroundMusic", $asm01.TypeRef("Microsoft.Xna.Framework.Media.Song")); 
    function BrokenMagicJumperGameplayScreen__cctor () {
      $thisType.WarningTime = new $asm09.System.TimeSpan();
      $thisType.WarningTime = $T00().FromSeconds(30).MemberwiseClone();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      BrokenMagicJumperGameplayScreen__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum BrokenMagicJumper.ShardPowerType */ 

JSIL.MakeEnum(
  "BrokenMagicJumper.ShardPowerType", true, {
    None: 0, 
    DoubleJump: 1, 
    FloatJump: 2
  }, false
);

/* class BrokenMagicJumper.Shard */ 

(function Shard$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.BrokenMagicJumper.Level)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.BrokenMagicJumper.ShardPowerType)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.SharedXNA.AnimationPlayer)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.BrokenMagicJumper.Circle)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm09.System.Exception)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0A.SharedXNA.Animation)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0A.SharedXNA.SpriteAtlas)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Audio.SoundEffect)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm00.BrokenMagicJumper.Player)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm09.System.Double)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm09.System.TimeSpan)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Exception"), [$asm09.TypeRef("System.String")]))) ();
  };

  function Shard__ctor (level, position, type) {
    this.level = level;
    this.BasePosition = position;
    this.Type = type;
    this.LoadContent();
  };

  function Shard_Draw (gameTime, spriteBatch) {
    if (this.IsPickedUp) {
      return;
    }
    this.texture.Draw(
      gameTime, 
      spriteBatch, 
      this.get_Position(), 
      32, 
      32, 
      $T06().None, 
      $T07().get_White().MemberwiseClone()
    );
  };

  function Shard_Drop (position) {
    this.IsPickedUp = false;
    this.BasePosition = position;
    this.WasTouchedLastFrame = true;
  };

  function Shard_get_BoundingCircle () {
    return new ($T08())(this.BasePosition.MemberwiseClone(), ($T09().$Cast(this.level.TileWidth) / 3));
  };

  function Shard_get_Level () {
    return this.level;
  };

  function Shard_get_Position () {
    return $T01().op_Addition(this.BasePosition, $S00().Construct(0, this.bounce));
  };

  function Shard_LoadContent () {
    switch (this.Type.valueOf()) {
      case 1: 
        var spriteSheet = this.get_Level().get_Content().Load$b1($T0A())("Sprites/shard_green");
        break;

      case 2: 
        spriteSheet = this.get_Level().get_Content().Load$b1($T0A())("Sprites/shard_pink");
        break;

      default: 
        throw $S01().Construct("SHEET NOT DEFINED");

    }
    this.animation = new ($T0D())(new ($T0E())(spriteSheet, 16, 16), 0.2, true);
    this.texture = new ($T05())();
    this.texture.PlayAnimation(this.animation);
    this.origin = $S00().Construct(($T09().$Cast(this.animation.get_SpriteAtlas().SpritePixelWidth) / 2), ($T09().$Cast(this.animation.get_SpriteAtlas().SpritePixelHeight) / 2));
    this.collectedSound = this.get_Level().get_Content().Load$b1($T0F())("Sounds/ShardPickup");
  };

  function Shard_OnTouchedPlayer (collectedBy) {
    if (this.IsPickedUp) {
      return;
    }
    this.IsPickedUp = true;
    if (collectedBy.CarriedShard !== null) {
      collectedBy.CarriedShard.Drop(this.BasePosition.MemberwiseClone());
    }
    this.collectedSound.Play();
    collectedBy.SetPower(this, this.Type);
  };

  function Shard_Update (gameTime) {
    var t = +((gameTime.get_TotalGameTime().get_TotalSeconds() * 3) + (this.get_Position().X * -0.75));
    this.bounce = +(($T09().$Cast(Math.sin(t)) * 0.18) * $T09().$Cast(this.animation.get_SpriteAtlas().SpritePixelHeight));
    this.texture.PlayAnimation(this.animation);
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "BrokenMagicJumper.Shard", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("BrokenMagicJumper.Level"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $asm00.TypeRef("BrokenMagicJumper.ShardPowerType")
        ], []), 
      Shard__ctor
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime"), $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")], []), 
      Shard_Draw
    );

    $.Method({Static:false, Public:false}, "Drop", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      Shard_Drop
    );

    $.Method({Static:false, Public:true }, "get_BoundingCircle", 
      new JSIL.MethodSignature($asm00.TypeRef("BrokenMagicJumper.Circle"), [], []), 
      Shard_get_BoundingCircle
    );

    $.Method({Static:false, Public:true }, "get_Level", 
      new JSIL.MethodSignature($asm00.TypeRef("BrokenMagicJumper.Level"), [], []), 
      Shard_get_Level
    );

    $.Method({Static:false, Public:true }, "get_Position", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], []), 
      Shard_get_Position
    );

    $.Method({Static:false, Public:true }, "LoadContent", 
      new JSIL.MethodSignature(null, [], []), 
      Shard_LoadContent
    );

    $.Method({Static:false, Public:true }, "OnTouchedPlayer", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("BrokenMagicJumper.Player")], []), 
      Shard_OnTouchedPlayer
    );

    $.Method({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      Shard_Update
    );

    $.Field({Static:false, Public:false}, "animation", $asm0A.TypeRef("SharedXNA.Animation")); 
    $.Field({Static:false, Public:false}, "texture", $asm0A.TypeRef("SharedXNA.AnimationPlayer")); 
    $.Field({Static:false, Public:false}, "origin", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "collectedSound", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    $.Field({Static:false, Public:true }, "Type", $asm00.TypeRef("BrokenMagicJumper.ShardPowerType")); 
    $.Field({Static:false, Public:true }, "IsPickedUp", $.Boolean); 
    $.Field({Static:false, Public:true }, "BasePosition", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "bounce", $.Single); 
    $.Field({Static:false, Public:true }, "WasTouchedLastFrame", $.Boolean); 
    $.Field({Static:false, Public:false}, "level", $asm00.TypeRef("BrokenMagicJumper.Level")); 
    $.Property({Static:false, Public:true }, "Level", $asm00.TypeRef("BrokenMagicJumper.Level"));

    $.Property({Static:false, Public:true }, "Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "BoundingCircle", $asm00.TypeRef("BrokenMagicJumper.Circle"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class BrokenMagicJumper.TextureLayer */ 

(function TextureLayer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm09.System.Double)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm04.Microsoft.Xna.Framework.Graphics.Texture2D))) ();
  };

  function TextureLayer__ctor (content, basePath, scrollRate, lit) {
    this.set_Visible(true);
    this.set_Opacity(1);
    this.TextureLayer$Textures$value = JSIL.Array.New($T04(), 3);

    for (var i = 0; i < 3; i = ((i + 1) | 0)) {
      this.TextureLayer$Textures$value[i] = content.Load$b1($T04())(JSIL.ConcatString(basePath, "_", i));
    }
    this.TextureLayer$ScrollRate$value = +scrollRate;
    this.TextureLayer$RepeatVertical$value = (scrollRate === 0);
    this.TextureLayer$IsLit$value = lit;
  };

  function TextureLayer_Draw (spriteBatch, levelWidth, levelHeight, cameraPositionX, cameraPositionY) {
    var $temp00;
    $temp00 = new ($T08())();
    if (this.TextureLayer$RepeatVertical$value) {
      spriteBatch.DrawRect(
        this.TextureLayer$Textures$value[0], 
        new ($T09())(0, 0, $T0C().GraphicsDevice.get_Viewport().get_Width(), $T0C().GraphicsDevice.get_Viewport().get_Height()), 
        new ($T09())(0, 0, $T0C().GraphicsDevice.get_Viewport().get_Width(), $T0C().GraphicsDevice.get_Viewport().get_Height()), 
        $T0D().get_White()
      );
      return;
    }
    var segmentWidth = (this.TextureLayer$Textures$value[0]).get_Width();
    var arg_96_0 = (this.TextureLayer$Textures$value[0]).get_Height();
    var x = +(cameraPositionX * this.TextureLayer$ScrollRate$value);
    var leftSegment = ((Math.floor((x / $T02().$Cast(segmentWidth)))) | 0);
    x = +(((x / $T02().$Cast(segmentWidth)) - $T02().$Cast(leftSegment)) * $T02().$Cast(-$T02().$Cast(segmentWidth)));

    for (var i = 0; i <= 2; i = ((i + 1) | 0)) {
      spriteBatch.Draw(
        this.TextureLayer$Textures$value[((((leftSegment + i) | 0) % this.TextureLayer$Textures$value.length) | 0)], 
        ($temp00._ctor((x + $T02().$Cast(((segmentWidth * i) | 0))), -cameraPositionY), 
          $temp00), 
        $T0D().get_White()
      );
    }
  };

  function TextureLayer_get_IsLit () {
    return this.TextureLayer$IsLit$value;
  };

  function TextureLayer_get_Name () {
    return this.TextureLayer$Name$value;
  };

  function TextureLayer_get_Opacity () {
    return +this.TextureLayer$Opacity$value;
  };

  function TextureLayer_get_RepeatVertical () {
    return this.TextureLayer$RepeatVertical$value;
  };

  function TextureLayer_get_ScrollRate () {
    return +this.TextureLayer$ScrollRate$value;
  };

  function TextureLayer_get_Textures () {
    return this.TextureLayer$Textures$value;
  };

  function TextureLayer_get_Visible () {
    return this.TextureLayer$Visible$value;
  };

  function TextureLayer_set_IsLit (value) {
    this.TextureLayer$IsLit$value = value;
  };

  function TextureLayer_set_Name (value) {
    this.TextureLayer$Name$value = value;
  };

  function TextureLayer_set_Opacity (value) {
    this.TextureLayer$Opacity$value = +value;
  };

  function TextureLayer_set_RepeatVertical (value) {
    this.TextureLayer$RepeatVertical$value = value;
  };

  function TextureLayer_set_ScrollRate (value) {
    this.TextureLayer$ScrollRate$value = +value;
  };

  function TextureLayer_set_Textures (value) {
    this.TextureLayer$Textures$value = value;
  };

  function TextureLayer_set_Visible (value) {
    this.TextureLayer$Visible$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "BrokenMagicJumper.TextureLayer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), $.String, 
          $.Single, $.Boolean
        ], []), 
      TextureLayer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $.Single, 
          $.Single, $.Single, 
          $.Single
        ], []), 
      TextureLayer_Draw
    );

    $.Method({Static:false, Public:true }, "get_IsLit", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      TextureLayer_get_IsLit
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], []), 
      TextureLayer_get_Name
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_Opacity", 
      new JSIL.MethodSignature($.Single, [], []), 
      TextureLayer_get_Opacity
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_RepeatVertical", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      TextureLayer_get_RepeatVertical
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ScrollRate", 
      new JSIL.MethodSignature($.Single, [], []), 
      TextureLayer_get_ScrollRate
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Textures", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")]), [], []), 
      TextureLayer_get_Textures
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_Visible", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      TextureLayer_get_Visible
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_IsLit", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      TextureLayer_set_IsLit
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], []), 
      TextureLayer_set_Name
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "set_Opacity", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      TextureLayer_set_Opacity
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_RepeatVertical", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      TextureLayer_set_RepeatVertical
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ScrollRate", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      TextureLayer_set_ScrollRate
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Textures", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")])], []), 
      TextureLayer_set_Textures
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "set_Visible", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      TextureLayer_set_Visible
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TextureLayer$Textures$value", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")]))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TextureLayer$ScrollRate$value", $.Single)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TextureLayer$RepeatVertical$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TextureLayer$IsLit$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TextureLayer$Name$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TextureLayer$Visible$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TextureLayer$Opacity$value", $.Single)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Textures", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")]));

    $.Property({Static:false, Public:true }, "ScrollRate", $.Single);

    $.Property({Static:false, Public:true }, "RepeatVertical", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLit", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Visible", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Opacity", $.Single);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("BrokenMagicJumper.IGameLayer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class BrokenMagicJumper.TileLayer */ 

(function TileLayer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.BrokenMagicJumper.Level)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.TmxPropertyDict)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.Double)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm09.System.Math)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm00.BrokenMagicJumper.Tile)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm00.BrokenMagicJumper.Tile))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm09.System.Boolean)) ();
  };

  function TileLayer__ctor (level) {
    this.set_Visible(true);
    this.set_Opacity(1);
    this.Level = level;
  };

  function TileLayer_Draw (spriteBatch, levelWidth, levelHeight, cameraPositionX, cameraPositionY) {
    var $temp00;
    $temp00 = new ($T03())();
    var properties = new JSIL.BoxedVariable(null);
    var texture = new JSIL.BoxedVariable(null);
    var rect = new JSIL.BoxedVariable(new ($T06())());
    var left = ((Math.floor((cameraPositionX / $T02().$Cast(this.TileWdith)))) | 0);
    var right = ((Math.ceil(($T02().$Cast(left) + ($T02().$Cast(spriteBatch.get_GraphicsDevice().get_Viewport().get_Width()) / $T02().$Cast(this.TileWdith))))) | 0);
    right = $T0D().Min(right, ((this.Tiles.length0 - 1) | 0));
    var top = ((Math.floor((cameraPositionY / $T02().$Cast(this.TileHeight)))) | 0);
    var bottom = ((Math.ceil(($T02().$Cast(top) + ($T02().$Cast(spriteBatch.get_GraphicsDevice().get_Viewport().get_Height()) / $T02().$Cast(this.TileHeight))))) | 0);
    bottom = $T0D().Min(bottom, ((this.Tiles.length1 - 1) | 0));
    var halfTileSize = $T03().op_DivisionScalar(this.Level.TileSize, 2);

    for (var y = top; y <= bottom; y = ((y + 1) | 0)) {

      for (var x = left; x <= right; x = ((x + 1) | 0)) {
        var t = this.Tiles.Get(x, y).MemberwiseClone();
        var effects = $T10().None;
        if (t.DiagonalFlip) {
          if (!t.HorizontalFlip) {
            effects = $T10().$Cast((effects | $T10().FlipHorizontally));
          }
        } else if (t.HorizontalFlip) {
          effects = $T10().$Cast((effects | $T10().FlipHorizontally));
        }
        if (t.VerticalFlip) {
          effects = $T10().$Cast((effects | $T10().FlipVertically));
        }
        if (this.Level.TileLookup(t.GID, /* ref */ properties, /* ref */ texture, /* ref */ rect)) {
          var position = $T03().op_Addition($T03().op_Multiply(($temp00._ctor($T02().$Cast(x), $T02().$Cast(y)), 
                $temp00), this.Level.TileSize), halfTileSize);
          spriteBatch.DrawScaleF(
            texture.get(), 
            position, 
            rect.get().MemberwiseClone(), 
            $T11().get_White(), 
            (t.DiagonalFlip ? 1.57079637 : 0), 
            halfTileSize, 
            1, 
            effects, 
            0
          );
        }
      }
    }
  };

  function TileLayer_get_Name () {
    return this.TileLayer$Name$value;
  };

  function TileLayer_get_Opacity () {
    return +this.TileLayer$Opacity$value;
  };

  function TileLayer_get_Visible () {
    return this.TileLayer$Visible$value;
  };

  function TileLayer_set_Name (value) {
    this.TileLayer$Name$value = value;
  };

  function TileLayer_set_Opacity (value) {
    this.TileLayer$Opacity$value = +value;
  };

  function TileLayer_set_Visible (value) {
    this.TileLayer$Visible$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "BrokenMagicJumper.TileLayer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("BrokenMagicJumper.Level")], []), 
      TileLayer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $.Single, 
          $.Single, $.Single, 
          $.Single
        ], []), 
      TileLayer_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], []), 
      TileLayer_get_Name
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_Opacity", 
      new JSIL.MethodSignature($.Single, [], []), 
      TileLayer_get_Opacity
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_Visible", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      TileLayer_get_Visible
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], []), 
      TileLayer_set_Name
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "set_Opacity", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      TileLayer_set_Opacity
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "set_Visible", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      TileLayer_set_Visible
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:true }, "TileWdith", $.Int32); 
    $.Field({Static:false, Public:true }, "TileHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "Tiles", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("BrokenMagicJumper.Tile")])); 
    $.Field({Static:false, Public:true }, "Level", $asm00.TypeRef("BrokenMagicJumper.Level")); 
    $.Field({Static:false, Public:false}, "TileLayer$Name$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TileLayer$Visible$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TileLayer$Opacity$value", $.Single)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Visible", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Opacity", $.Single);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("BrokenMagicJumper.IGameLayer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class BrokenMagicJumper.TileSet */ 

(function TileSet$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.SpriteAtlas)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.UInt32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };

  function TileSet__ctor (atlas, baseId, tileWidth, tileHeight) {
    this.atlas = atlas;
    this.baseId = baseId;
    this.TileWidth = tileWidth;
    this.TileHeight = tileHeight;
    this.TileSize = $S00().Construct($T04().$Cast(this.TileWidth), $T04().$Cast(this.TileHeight));
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "BrokenMagicJumper.TileSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("SharedXNA.SpriteAtlas"), $.UInt32, 
          $.Int32, $.Int32
        ], []), 
      TileSet__ctor
    );

    $.Field({Static:false, Public:true }, "$name", $.String); 
    $.Field({Static:false, Public:true }, "TileWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "TileHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "baseId", $.UInt32); 
    $.Field({Static:false, Public:true }, "atlas", $asm0A.TypeRef("SharedXNA.SpriteAtlas")); 
    $.Field({Static:false, Public:true }, "TileSize", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:true }, "tmxTileset", $asm0A.TypeRef("SharedXNA.TmxTileset")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class BrokenMagicJumper.Level */ 

(function Level$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.IServiceProvider)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm00.BrokenMagicJumper.Shard))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Random)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.IO.Path)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.IO.Stream)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.TitleContainer)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.SharedXNA.TmxMap)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm09.System.IDisposable)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Audio.SoundEffect)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.PresentationParameters)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteSortMode)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.BlendState)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize(System.Array.Of($asm00.BrokenMagicJumper.IGameLayer))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.BrokenMagicJumper.IGameLayer)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SamplerState)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm00.BrokenMagicJumper.Player)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm00.BrokenMagicJumper.Shard)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm00.BrokenMagicJumper.TileCollision)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize(System.Array.Of($asm00.BrokenMagicJumper.Tile))) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm0A.SharedXNA.TmxPropertyDict)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm00.BrokenMagicJumper.Tile)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm00.BrokenMagicJumper.TileSet)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.TmxTileset))) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm0A.SharedXNA.TmxTileset)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm09.System.Console)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm0A.SharedXNA.TmxImage)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm0A.SharedXNA.SpriteAtlas)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.ITmxLayer))) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm0A.SharedXNA.ITmxLayer)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm0A.SharedXNA.TmxTileLayer)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm00.BrokenMagicJumper.TileLayer)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm0A.SharedXNA.TmxLayerTile)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm09.System.UInt32)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm09.System.Collections.Generic.Dictionary$b2.Of($asm09.System.String, $asm09.System.String))) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm09.System.Exception)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm0A.SharedXNA.TmxObjectLayer)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm09.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm09.System.String, $asm0A.SharedXNA.ITmxElement))) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm09.System.Collections.Generic.Dictionary$b2.Of($asm09.System.String, $asm0A.SharedXNA.ITmxElement))) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm09.System.Collections.Generic.KeyValuePair$b2.Of($asm09.System.String, $asm0A.SharedXNA.ITmxElement))) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm0A.SharedXNA.TmxObject)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm0A.SharedXNA.RectangleEx)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm0A.SharedXNA.PointEx)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm00.BrokenMagicJumper.ShardPowerType)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm00.BrokenMagicJumper.EntityLayer)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm09.System.NotSupportedException)) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm09.System.Object)) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize(System.Array.Of($asm00.BrokenMagicJumper.TileSet))) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize($asm09.System.Int64)) ();
  };
  var $T41 = function () {
    return ($T41 = JSIL.Memoize($asm09.System.UInt64)) ();
  };
  var $T42 = function () {
    return ($T42 = JSIL.Memoize($asm09.System.Collections.Generic.Dictionary$b2.Of($asm09.System.Int32, $asm0A.SharedXNA.TmxPropertyDict))) ();
  };
  var $T43 = function () {
    return ($T43 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T44 = function () {
    return ($T44 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePadState)) ();
  };
  var $T45 = function () {
    return ($T45 = JSIL.Memoize($asm00.BrokenMagicJumper.Circle)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("BrokenMagicJumper.Shard")]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Random"), [$asm09.TypeRef("System.Int32")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), [$asm09.TypeRef("System.IServiceProvider"), $asm09.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Exception"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.NotSupportedException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm09.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm00.BrokenMagicJumper.IGameLayer.get_Visible)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm00.BrokenMagicJumper.IGameLayer.Draw)) ();
  };

  function Level__ctor (serviceProvider, levelPath, levelIndex) {
    this.DefaultShards = $S00().Construct();
    this.shards = $S00().Construct();
    this.exit = $thisType.InvalidPosition.MemberwiseClone();
    this.random = $S01().Construct(354668);
    this.LevelFilePath = levelPath;
    this.LevelDirectory = $T06().GetDirectoryName(levelPath);
    this.content = $S02().Construct(serviceProvider, "Content");
    var fileStream = $T09().OpenStream(levelPath);
    try {
      this.LoadTiles(new ($T0A())(fileStream, function ($import) {
            return $asm01.Microsoft.Xna.Framework.TitleContainer.OpenStream($asm09.System.IO.Path.Combine(this.LevelDirectory, $import));
          }.bind(this)));
    } finally {
      if (fileStream !== null) {
        $IM00().Call(fileStream, null);
      }
    }
    this.exitReachedSound = this.get_Content().Load$b1($T0C())("Sounds/ExitReached");
    var arg_AD_0 = $T0F().GraphicsDevice.get_PresentationParameters();
    this.StartNewLife();
  };

  function Level_Dispose () {
    this.get_Content().Unload();
  };

  function Level_Draw (gameTime, spriteBatch) {
    var $temp00;
    var levelWidth = +$T12().$Cast(((this.TileWidth * this.get_Width()) | 0));
    var levelHeight = +$T12().$Cast(((this.TileHeight * this.get_Height()) | 0));
    this.ScrollCamera(spriteBatch.get_GraphicsDevice().get_Viewport());
    var cameraTransform = $T14().CreateTranslation(-this.cameraPositionX, -this.cameraPositionY, 0).MemberwiseClone();
    spriteBatch.Begin(
      $T15().Immediate, 
      $T16().AlphaBlend, 
      null, 
      null, 
      null, 
      null, 
      cameraTransform.MemberwiseClone()
    );

    for (var i = 0; i < this.layers.length; i = ((i + 1) | 0)) {
      if ($IM01().Call(this.layers[i], null)) {
        $IM02().Call(this.layers[i], null, 
          spriteBatch, 
          levelWidth, 
          levelHeight, 
          this.cameraPositionX, 
          this.cameraPositionY
        );
      }
    }
    spriteBatch.End();
    spriteBatch.Begin(
      $T15().Immediate, 
      $T16().AlphaBlend, 
      $T19().PointClamp, 
      null, 
      null, 
      null, 
      cameraTransform.MemberwiseClone()
    );
    this.get_Player().Draw(gameTime, spriteBatch);

    for (var a$0 = this.shards._items, i$0 = 0, l$0 = this.shards._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var gem = a$0[i$0];
      gem.Draw(gameTime, spriteBatch);
    }
    spriteBatch.End();
  };

  function Level_get_Content () {
    return this.content;
  };

  function Level_get_Height () {
    return this.levelHeight;
  };

  function Level_get_Player () {
    return this.player;
  };

  function Level_get_ReachedExit () {
    return this.reachedExit;
  };

  function Level_get_Width () {
    return this.levelWidth;
  };

  function Level_GetBounds (x, y) {
    return new ($T1C())(((x * this.TileWidth) | 0), ((y * this.TileHeight) | 0), this.TileWidth, this.TileHeight);
  };

  function Level_GetCollision (x, y) {
    if (!((x >= 0) && (x < this.get_Width()))) {
      return $T1D().Impassable;
    }
    if (!((y >= 0) && (y < this.get_Height()))) {
      return $T1D().Passable;
    }
    return this.collisionLayer.Tiles.Get(x, y).Collision;
  };

  function Level_LoadTiles (level) {
    var $temp00, $temp01, $temp02, $temp03;
    var properties = new JSIL.BoxedVariable(null);
    var texture = new JSIL.BoxedVariable(null);
    var rect = new JSIL.BoxedVariable(new ($T1C())());
    var propertyValue = new JSIL.BoxedVariable(null);
    var a = null, t = new ($T21())(), t2 = new ($T21())(), rect2 = new ($T1C())();
    this.levelWidth = level.TmxMap$Width$value;
    this.levelHeight = level.TmxMap$Height$value;
    this.TileWidth = level.TmxMap$TileWidth$value;
    this.TileHeight = level.TmxMap$TileHeight$value;
    this.TileSize = $S03().Construct($T12().$Cast(this.TileWidth), $T12().$Cast(this.TileHeight));
    this.tileSets = JSIL.Array.New($T23(), level.TmxMap$Tilesets$value.get_Count());
    var tileSetCounter = 0;

    for (var a$0 = level.TmxMap$Tilesets$value._items, i$0 = 0, l$0 = level.TmxMap$Tilesets$value._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var tmxTileSet = a$0[i$0];
      $T26().WriteLine(JSIL.ConcatString("Loading tileSet ", tmxTileSet.TmxTileset$Image$value.TmxImage$Source$value));
      var fullpath = (tmxTileSet.TmxTileset$Image$value.TmxImage$Source$value.substr(3));
      var spriteSheet = this.get_Content().Load$b1($T20())(fullpath);
      var atlas = new ($T29())(spriteSheet, tmxTileSet.TmxTileset$TileWidth$value, tmxTileSet.TmxTileset$TileHeight$value);
      var tileSet = new ($T23())(atlas, tmxTileSet.TmxTileset$FirstGid$value, tmxTileSet.TmxTileset$TileWidth$value, tmxTileSet.TmxTileset$TileHeight$value);
      tileSet.$name = tmxTileSet.get_Name();
      tileSet.tmxTileset = tmxTileSet;
      this.tileSets[tileSetCounter] = tileSet;
      tileSetCounter = ((tileSetCounter + 1) | 0);
    }
    this.layers = JSIL.Array.New($T18(), level.TmxMap$Layers$value.get_Count());
    var layerCounter = 0;

    for (var a$1 = level.TmxMap$Layers$value._items, i$1 = 0, l$1 = level.TmxMap$Layers$value._size; i$1 < l$1; ($temp01 = i$1, 
        i$1 = ((i$1 + 1) | 0), 
        $temp01)) {
      var layer = a$1[i$1];
      if ($T2C().$As(layer) !== null) {
        var tmxLayer = $T2C().$Cast(layer);
        var gameLayer = new ($T2D())(this);
        gameLayer.set_Name(tmxLayer.get_Name());
        gameLayer.TileWdith = level.TmxMap$TileWidth$value;
        gameLayer.TileHeight = level.TmxMap$TileHeight$value;
        gameLayer.Tiles = JSIL.MultidimensionalArray.New($T21(), level.TmxMap$Width$value, level.TmxMap$Height$value);
        if (tmxLayer.get_Name() == "collision") {

        $loop4: 
          for (var a$2 = tmxLayer.TmxTileLayer$Tiles$value._items, i$2 = 0, l$2 = tmxLayer.TmxTileLayer$Tiles$value._size; i$2 < l$2; ($temp02 = i$2, 
              i$2 = ((i$2 + 1) | 0), 
              $temp02)) {
            var tile = a$2[i$2];
            if (!((tile.TmxLayerTile$GID$value === 0) || 
                !this.TileLookup(tile.TmxLayerTile$GID$value, /* ref */ properties, /* ref */ texture, /* ref */ rect) || 
                (properties.get() === null) || !properties.get().TryGetValue("type", /* ref */ propertyValue))) {

              var $label0 = 0;
            $labelgroup0: 
              while (true) {
                switch ($label0) {
                  case 0: /* $entry0 */ 
                    if ((a = propertyValue.get()) !== null) {
                      if (!(a == "solid")) {
                        if (!(a == "platform")) {
                          $label0 = 1 /* goto IL_26A */ ;
                          continue $labelgroup0;
                        }
                        $T21().prototype._ctor.call(t, tile.TmxLayerTile$GID$value, $T1D().Platform);
                      } else {
                        $T21().prototype._ctor.call(t, tile.TmxLayerTile$GID$value, $T1D().Impassable);
                      }
                      t.HorizontalFlip = tile.TmxLayerTile$HorizontalFlip$value;
                      t.VerticalFlip = tile.TmxLayerTile$VerticalFlip$value;
                      t.DiagonalFlip = tile.TmxLayerTile$DiagonalFlip$value;
                      gameLayer.Tiles.GetReference(tile.TmxLayerTile$X$value, tile.TmxLayerTile$Y$value).set(t.MemberwiseClone());
                      continue $loop4;
                    }

                    $label0 = 1 /* goto IL_26A */ ;
                    continue $labelgroup0;
                  case 1: /* IL_26A */ 
                    throw $S04().Construct("NO TYPE PROPERTY ON META DATA COLLISION TILE!!!");

                    break $labelgroup0;
                }
              }
            }
          }
          this.collisionLayer = gameLayer;
          this.collisionLayer.set_Visible(false);
        } else {

          for (var a$3 = tmxLayer.TmxTileLayer$Tiles$value._items, i$3 = 0, l$3 = tmxLayer.TmxTileLayer$Tiles$value._size; i$3 < l$3; ($temp03 = i$3, 
              i$3 = ((i$3 + 1) | 0), 
              $temp03)) {
            var tile2 = a$3[i$3];
            if (tile2.TmxLayerTile$GID$value !== 0) {
              $T21().prototype._ctor.call(t2, tile2.TmxLayerTile$GID$value, $T1D().Passable);
              t2.HorizontalFlip = tile2.TmxLayerTile$HorizontalFlip$value;
              t2.VerticalFlip = tile2.TmxLayerTile$VerticalFlip$value;
              t2.DiagonalFlip = tile2.TmxLayerTile$DiagonalFlip$value;
              gameLayer.Tiles.GetReference(tile2.TmxLayerTile$X$value, tile2.TmxLayerTile$Y$value).set(t2.MemberwiseClone());
            }
          }
        }
        this.layers[layerCounter] = gameLayer;
      } else if ($T32().$As(layer) !== null) {
        var tmxLayer2 = $T32().$Cast(layer);
        var enumerator5 = $T34().prototype.GetEnumerator.call(tmxLayer2.TmxObjectLayer$Objects$value);

        while (enumerator5.MoveNext()) {
          var entry = enumerator5.get_Current().MemberwiseClone();
          var obj = $T36().$As(entry.get_Value());
          if (obj.TmxObject$ObjectType$value.valueOf() === 0) {
            $T1C().prototype._ctor.call(rect2, obj.TmxObject$X$value, obj.TmxObject$Y$value, obj.TmxObject$Width$value, obj.TmxObject$Height$value);
            if (obj.TmxObject$Type$value == "start") {
              this.start = $T37().BottomCenter(rect2.MemberwiseClone());
              this.player = new ($T1A())(this, this.start.MemberwiseClone());
            } else if (obj.TmxObject$Type$value == "exit") {
              this.exit = rect2.get_Center().MemberwiseClone();
            } else if (obj.TmxObject$Type$value == "double_shard") {
              this.DefaultShards.Add(new ($T1B())(this, $T38().ToVector2(rect2.get_Center().MemberwiseClone()), $T39().DoubleJump));
            } else if (obj.TmxObject$Type$value == "float_shard") {
              this.DefaultShards.Add(new ($T1B())(this, $T38().ToVector2(rect2.get_Center().MemberwiseClone()), $T39().FloatJump));
            }
          }
        }
        var gameLayer2 = new ($T3A())(this);
        gameLayer2.set_Name(tmxLayer2.get_Name());
        this.layers[layerCounter] = gameLayer2;
      }
      layerCounter = ((layerCounter + 1) | 0);
    }
    if (this.get_Player() === null) {
      throw $S05().Construct("A level must have a starting point.");
    }
    if ($T00().op_Equality(this.exit, $thisType.InvalidPosition)) {
      throw $S05().Construct("A level must have an exit.");
    }
  };

  function Level_OnExitReached () {
    if (!this.reachedExit) {
      this.get_Player().OnReachedExit();
      this.exitReachedSound.Play();
      this.reachedExit = true;
      this.ExitReachedTime = $T0F().Game.TimeSinceStart.MemberwiseClone();
    }
  };

  function Level_OnPlayerKilled (killedBy) {
    this.get_Player().OnKilled(killedBy);
  };

  function Level_ScrollCamera (viewport) {
    var marginWidth = +($T12().$Cast(viewport.get_Width()) * 0.35);
    var marginLeft = +(this.cameraPositionX + marginWidth);
    var marginRight = +((this.cameraPositionX + $T12().$Cast(viewport.get_Width())) - marginWidth);
    var marginHeight = +($T12().$Cast(viewport.get_Height()) * 0.35);
    var marginTop = +(this.cameraPositionY + marginHeight);
    var marginBottom = +((this.cameraPositionY + $T12().$Cast(viewport.get_Height())) - marginHeight);
    var cameraMovementX = +0;
    if (this.get_Player().get_Position().X < marginLeft) {
      cameraMovementX = +(this.get_Player().get_Position().X - marginLeft);
    } else if (this.get_Player().get_Position().X > marginRight) {
      cameraMovementX = +(this.get_Player().get_Position().X - marginRight);
    }
    var cameraMovementY = +0;
    if (this.get_Player().get_Position().Y < marginTop) {
      cameraMovementY = +(this.get_Player().get_Position().Y - marginTop);
    } else if (this.get_Player().get_Position().Y > marginBottom) {
      cameraMovementY = +(this.get_Player().get_Position().Y - marginBottom);
    }
    var maxCameraPositionX = +$T12().$Cast(((((this.TileWidth * this.get_Width()) | 0) - viewport.get_Width()) | 0));
    this.cameraPositionX = +$T3E().Clamp((this.cameraPositionX + cameraMovementX), 0, maxCameraPositionX);
    var maxCameraPositionY = +$T12().$Cast(((((this.TileHeight * this.get_Height()) | 0) - viewport.get_Height()) | 0));
    this.cameraPositionY = +$T3E().Clamp((this.cameraPositionY + cameraMovementY), 0, maxCameraPositionY);
  };

  function Level_StartNewLife () {
    var $temp00;
    this.get_Player().Reset(this.start.MemberwiseClone());
    this.shards.Clear();

    for (var a$0 = this.DefaultShards._items, i$0 = 0, l$0 = this.DefaultShards._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var shard = a$0[i$0];
      this.shards.Add(new ($T1B())(this, shard.BasePosition.MemberwiseClone(), shard.Type));
    }
    this.reachedExit = false;
  };

  function Level_TileLookup (gid, /* ref */ properties, /* ref */ texture, /* ref */ rect) {
    if (gid === 0) {
      properties.set(null);
      texture.set(null);
      rect.set(new ($T1C())());
      return false;
    }

    for (var i = 0; i < this.tileSets.length; i = ((i + 1) | 0)) {
      var set = this.tileSets[i];
      var lastId = (($T41().op_Addition(
            $T41().FromNumber(set.baseId), 
            $T40().FromNumber(set.atlas.TotalCellCount).ToUInt64()
          ).ToNumber(4294967295, false) - 1) >>> 0);
      if (!((gid < set.baseId) || (gid > lastId))) {
        set.tmxTileset.TmxTileset$Tiles$value.TryGetValue($T03().$Cast(((gid - set.baseId) >>> 0)), /* ref */ properties);
        texture.set(set.atlas.Texture);
        rect.set(set.atlas.GetRect($T03().$Cast(((gid - set.baseId) >>> 0))));
        return true;
      }
    }
    properties.set(null);
    texture.set(null);
    rect.set(new ($T1C())());
    return false;
  };

  function Level_Update (gameTime, keyboardState, gamePadState) {
    if (!(this.get_Player().get_IsAlive() && !this.reachedExit)) {
      this.get_Player().ApplyPhysics(gameTime);
      return;
    }
    this.get_Player().Update(gameTime, keyboardState, gamePadState);
    this.UpdateGems(gameTime);
    if (this.get_Player().get_BoundingRectangle().get_Top() >= ((this.get_Height() * this.TileHeight) | 0)) {
      this.OnPlayerKilled(null);
    }
    if (!(!this.get_Player().get_IsAlive() || 
        !this.get_Player().get_IsOnGround() || !this.get_Player().get_BoundingRectangle().ContainsPoint(this.exit))) {
      this.OnExitReached();
    }
  };

  function Level_UpdateGems (gameTime) {

    for (var i = 0; i < this.shards.get_Count(); i = ((i + 1) | 0)) {
      var gem = this.shards.get_Item(i);
      gem.Update(gameTime);
      if (!gem.IsPickedUp) {
        if (gem.WasTouchedLastFrame) {
          if (!gem.get_BoundingCircle().Intersects(this.get_Player().get_BoundingRectangle().MemberwiseClone())) {
            gem.WasTouchedLastFrame = false;
          }
        } else if (gem.get_BoundingCircle().Intersects(this.get_Player().get_BoundingRectangle().MemberwiseClone())) {
          gem.OnTouchedPlayer(this.get_Player());
        }
      }
    }
  };

  function Level_WorldToScreen (worldPosition) {
    return $S03().Construct(((worldPosition.X - this.cameraPositionX) / $T12().$Cast($T0F().GraphicsDevice.get_Viewport().get_Width())), ((worldPosition.Y - this.cameraPositionY) / $T12().$Cast($T0F().GraphicsDevice.get_Viewport().get_Height())));
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "BrokenMagicJumper.Level", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IServiceProvider"), $.String, 
          $.Int32
        ], []), 
      Level__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], []), 
      Level_Dispose
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime"), $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")], []), 
      Level_Draw
    );

    $.Method({Static:false, Public:true }, "get_Content", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), [], []), 
      Level_get_Content
    );

    $.Method({Static:false, Public:true }, "get_Height", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Level_get_Height
    );

    $.Method({Static:false, Public:true }, "get_Player", 
      new JSIL.MethodSignature($asm00.TypeRef("BrokenMagicJumper.Player"), [], []), 
      Level_get_Player
    );

    $.Method({Static:false, Public:true }, "get_ReachedExit", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Level_get_ReachedExit
    );

    $.Method({Static:false, Public:true }, "get_Width", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Level_get_Width
    );

    $.Method({Static:false, Public:true }, "GetBounds", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), [$.Int32, $.Int32], []), 
      Level_GetBounds
    );

    $.Method({Static:false, Public:true }, "GetCollision", 
      new JSIL.MethodSignature($asm00.TypeRef("BrokenMagicJumper.TileCollision"), [$.Int32, $.Int32], []), 
      Level_GetCollision
    );

    $.Method({Static:false, Public:false}, "LoadTiles", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.TmxMap")], []), 
      Level_LoadTiles
    );

    $.Method({Static:false, Public:false}, "OnExitReached", 
      new JSIL.MethodSignature(null, [], []), 
      Level_OnExitReached
    );

    $.Method({Static:false, Public:false}, "OnPlayerKilled", 
      new JSIL.MethodSignature(null, [$.Object], []), 
      Level_OnPlayerKilled
    );

    $.Method({Static:false, Public:false}, "ScrollCamera", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Viewport")], []), 
      Level_ScrollCamera
    );

    $.Method({Static:false, Public:true }, "StartNewLife", 
      new JSIL.MethodSignature(null, [], []), 
      Level_StartNewLife
    );

    $.Method({Static:false, Public:true }, "TileLookup", 
      new JSIL.MethodSignature($.Boolean, [
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("SharedXNA.TmxPropertyDict")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")])
        ], []), 
      Level_TileLookup
    );

    $.Method({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("Microsoft.Xna.Framework.GameTime"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadState")
        ], []), 
      Level_Update
    );

    $.Method({Static:false, Public:false}, "UpdateGems", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      Level_UpdateGems
    );

    $.Method({Static:false, Public:true }, "WorldToScreen", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      Level_WorldToScreen
    );

    $.Field({Static:false, Public:false}, "layers", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("BrokenMagicJumper.IGameLayer")])); 
    $.Field({Static:false, Public:false}, "collisionLayer", $asm00.TypeRef("BrokenMagicJumper.TileLayer")); 
    $.Field({Static:false, Public:false}, "tileSets", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("BrokenMagicJumper.TileSet")])); 
    $.Field({Static:false, Public:false}, "levelWidth", $.Int32); 
    $.Field({Static:false, Public:false}, "levelHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "TileWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "TileHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "TileSize", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "player", $asm00.TypeRef("BrokenMagicJumper.Player")); 
    $.Field({Static:false, Public:false}, "DefaultShards", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("BrokenMagicJumper.Shard")])); 
    $.Field({Static:false, Public:false}, "shards", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm00.TypeRef("BrokenMagicJumper.Shard")])); 
    $.Field({Static:false, Public:false}, "start", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "exit", $asm01.TypeRef("Microsoft.Xna.Framework.Point")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "InvalidPosition", $asm01.TypeRef("Microsoft.Xna.Framework.Point")); 
    $.Field({Static:false, Public:false}, "random", $asm09.TypeRef("System.Random")); 
    $.Field({Static:false, Public:false}, "cameraPositionX", $.Single); 
    $.Field({Static:false, Public:false}, "cameraPositionY", $.Single); 
    $.Field({Static:false, Public:false}, "LevelFilePath", $.String); 
    $.Field({Static:false, Public:false}, "LevelDirectory", $.String); 
    $.Field({Static:false, Public:true }, "ExitReachedTime", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "reachedExit", $.Boolean); 
    $.Field({Static:false, Public:false}, "content", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")); 
    $.Field({Static:false, Public:false}, "exitReachedSound", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    function Level__cctor () {
      $thisType.InvalidPosition = new $asm01.Microsoft.Xna.Framework.Point();
      $thisType.InvalidPosition = new ($T00())(-1, -1);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      Level__cctor
    );

    $.Property({Static:false, Public:true }, "Player", $asm00.TypeRef("BrokenMagicJumper.Player"));

    $.Property({Static:false, Public:true }, "ReachedExit", $.Boolean);

    $.Property({Static:false, Public:true }, "Content", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"));

    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class BrokenMagicJumper.Player */ 

(function Player$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.BrokenMagicJumper.Level)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.EventHandler$b1.Of($asm00.BrokenMagicJumper.CollidedWithTileArgs))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Delegate)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Threading.Interlocked)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.TimeSpan)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.Double)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Audio.SoundEffect)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0A.SharedXNA.AnimationPlayer)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePadState)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePadThumbSticks)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Buttons)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm00.BrokenMagicJumper.TileCollision)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0A.SharedXNA.RectangleEx)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm0A.SharedXNA.Animation)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm00.BrokenMagicJumper.CollidedWithTileArgs)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm09.System.Object)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePad)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.PlayerIndex)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm00.BrokenMagicJumper.ShardPowerType)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm00.BrokenMagicJumper.Shard)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };

  function Player__ctor (level, position) {
    this.level = level;
    this.LoadContent();
    this.Reset(position);
  };

  function Player_add_CollidedWithTile (value) {
    var eventHandler = this.CollidedWithTile;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T03().Combine(eventHandler2, value);
      eventHandler = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference(this, "CollidedWithTile"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Player_ApplyPhysics (gameTime) {
    var elapsed = +$T06().$Cast(gameTime.get_ElapsedGameTime().get_TotalSeconds());
    var previousPosition = this.get_Position().MemberwiseClone();
    this.velocity.X += +((this.movement * 13000) * elapsed);
    if (!this.isFloating) {
      this.velocity.Y = +$T08().Clamp((this.velocity.Y + (3400 * elapsed)), -550, 550);
    } else {
      this.velocity.Y = +0;
    }
    this.velocity.Y = +this.DoJump(this.velocity.Y, gameTime);
    if (this.get_IsOnGround()) {
      this.velocity.X *= +0.48;
    } else {
      this.velocity.X *= +0.58;
    }
    this.velocity.X = +$T08().Clamp(this.velocity.X, -1750, 1750);
    var arg_103_0 = +this.get_Position().X;
    (this.Position = $T01().op_Addition(this.Position, $T01().op_MultiplyScalar(this.velocity, elapsed)));
    (this.Position = $S00().Construct($T06().$Cast(Math.round(this.Position.X)), $T06().$Cast(Math.round(this.Position.Y))));
    this.HandleCollisions();
    if (this.get_Position().X === previousPosition.X) {
      this.velocity.X = +0;
    }
    if (this.get_Position().Y === previousPosition.Y) {
      this.velocity.Y = +0;
    }
  };

  function Player_DoJump (velocityY, gameTime) {
    if (this.isJumping) {
      if (!(!(!this.wasJumping && 
            this.get_IsOnGround()) && (this.jumpTime <= 0))) {
        if (this.jumpTime === 0) {
          this.jumpSound.Play();
        }
        if (this.isFloating) {
          this.jumpTime += +($T06().$Cast(gameTime.get_ElapsedGameTime().get_TotalSeconds()) / 2.5);
        } else {
          this.jumpTime += +$T06().$Cast(gameTime.get_ElapsedGameTime().get_TotalSeconds());
        }
        this.sprite.PlayAnimation(this.jumpAnimation);
      } else if (!(this.wasJumping || 
          !this.HasDoubleJumpPower || this.hasDoubleJumped)) {
        if (this.jumpTime === 0) {
          this.jumpSound.Play();
        }
        this.jumpTime += +$T06().$Cast(gameTime.get_ElapsedGameTime().get_TotalSeconds());
        this.sprite.PlayAnimation(this.jumpAnimation);
        this.hasDoubleJumped = true;
      } else if (!(this.wasJumping || 
          !this.HasFloatJumpPower || this.hasFloatJumped)) {
        if (this.jumpTime === 0) {
          this.floatSound.Play();
        }
        this.jumpTime += +$T06().$Cast(gameTime.get_ElapsedGameTime().get_TotalSeconds());
        this.sprite.PlayAnimation(this.jumpAnimation);
        this.hasFloatJumped = true;
        this.isFloating = true;
      }
      if (!((0 >= this.jumpTime) || (this.jumpTime > 0.35))) {
        if (!this.isFloating) {
          velocityY = +(-3500 * (1 - $T06().$Cast(Math.pow((this.jumpTime / 0.35), 0.14000000059604645))));
        }
      } else {
        this.jumpTime = +0;
      }
    } else {
      this.jumpTime = +0;
    }
    this.wasJumping = this.isJumping;
    if (this.get_IsOnGround()) {
      this.hasDoubleJumped = false;
      this.hasFloatJumped = false;
    }
    if (!(!this.isFloating || (this.jumpTime !== 0))) {
      this.isFloating = false;
    }
    return +velocityY;
  };

  function Player_Draw (gameTime, spriteBatch) {
    if (this.get_Velocity().X < 0) {
      this.flip = $T0E().FlipHorizontally;
    } else if (this.get_Velocity().X > 0) {
      this.flip = $T0E().None;
    }
    var bounds = this.get_BoundingRectangle().MemberwiseClone();
    var pos = $S00().Construct($T06().$Cast(((bounds.X - 8) | 0)), $T06().$Cast(((bounds.Y + 8) | 0)));
    switch (this.currentPower.valueOf()) {
      case 1: 
        this.suitSprite.Draw(
          gameTime, 
          spriteBatch, 
          pos, 
          64, 
          64, 
          this.flip, 
          $T10().get_Green().MemberwiseClone()
        );
        break;

      case 2: 
        this.suitSprite.Draw(
          gameTime, 
          spriteBatch, 
          pos, 
          64, 
          64, 
          this.flip, 
          $T10().get_HotPink().MemberwiseClone()
        );
        break;

      default: 
        this.suitSprite.Draw(
          gameTime, 
          spriteBatch, 
          pos, 
          64, 
          64, 
          this.flip, 
          $jsilxna.ColorFromPremultipliedInts(null, 160, 153, 232, 255)
        );
        break;

    }
    this.sprite.Draw(
      gameTime, 
      spriteBatch, 
      pos, 
      64, 
      64, 
      this.flip, 
      null
    );
  };

  function Player_get_BoundingRectangle () {
    var left = ((((Math.round((this.get_Position().X - 32))) | 0) + this.localBounds.X) | 0);
    var top = ((((Math.round((this.get_Position().Y - 64))) | 0) + this.localBounds.Y) | 0);
    return new ($T0F())(left, top, this.localBounds.Width, this.localBounds.Height);
  };

  function Player_get_IsAlive () {
    return this.isAlive;
  };

  function Player_get_IsOnGround () {
    return this.isOnGround;
  };

  function Player_get_Level () {
    return this.level;
  };

  function Player_get_Position () {
    return this.position;
  };

  function Player_get_Velocity () {
    return this.velocity;
  };

  function Player_GetInput (keyboardState, gamePadState) {
    this.movement = +(gamePadState.get_ThumbSticks().get_Left().X * 1);
    if ((Math.abs(this.movement)) < 0.5) {
      this.movement = +0;
    }
    if (!(!gamePadState.IsButtonDown($T15().DPadLeft) && 
        !keyboardState.IsKeyDown($T16().Left) && !keyboardState.IsKeyDown($T16().A))) {
      this.movement = +-1;
    } else if (!(!gamePadState.IsButtonDown($T15().DPadRight) && 
        !keyboardState.IsKeyDown($T16().Right) && !keyboardState.IsKeyDown($T16().D))) {
      this.movement = +1;
    }
    this.isJumping = (gamePadState.IsButtonDown($T15().A) || 
      keyboardState.IsKeyDown($T16().Space) || 
      keyboardState.IsKeyDown($T16().Up) || 
      keyboardState.IsKeyDown($T16().W));
  };

  function Player_HandleCollisions () {
    var bounds = this.get_BoundingRectangle().MemberwiseClone();
    var leftTile = ((Math.floor(($T06().$Cast(bounds.get_Left()) / $T06().$Cast(this.get_Level().TileWidth)))) | 0);
    var rightTile = ((((Math.ceil(($T06().$Cast(bounds.get_Right()) / $T06().$Cast(this.get_Level().TileWidth)))) | 0) - 1) | 0);
    var topTile = ((Math.floor(($T06().$Cast(bounds.get_Top()) / $T06().$Cast(this.get_Level().TileHeight)))) | 0);
    var bottomTile = ((((Math.ceil(($T06().$Cast(bounds.get_Bottom()) / $T06().$Cast(this.get_Level().TileHeight)))) | 0) - 1) | 0);
    if (this.velocity.X < 0) {
      var firstHorizontalTile = rightTile;
      var lastHorizontalTile = leftTile;
      var horizontalStep = -1;
    } else {
      firstHorizontalTile = leftTile;
      lastHorizontalTile = rightTile;
      horizontalStep = 1;
    }
    this.isOnGround = false;

    for (var y = topTile; y <= bottomTile; y = ((y + 1) | 0)) {

      for (var x = firstHorizontalTile; x !== ((lastHorizontalTile + horizontalStep) | 0); x = ((x + horizontalStep) | 0)) {
        var collision = this.get_Level().GetCollision(x, y);
        if (collision.valueOf() !== 0) {
          this.OnCollisionWithTile(x, y);
          var tileBounds = this.get_Level().GetBounds(x, y);
          var depth = $T18().GetIntersectionDepth(bounds, tileBounds).MemberwiseClone();
          if ($T01().op_Inequality(depth, $T01().get_Zero())) {
            var absDepthX = +(Math.abs(depth.X));
            var absDepthY = +(Math.abs(depth.Y));
            if (!((absDepthY >= absDepthX) && (collision !== $T17().Platform))) {
              if (this.previousBottom <= $T06().$Cast(tileBounds.get_Top())) {
                this.isOnGround = true;
              }
              if (!((collision !== $T17().Impassable) && !this.get_IsOnGround())) {
                (this.Position = $S00().Construct(this.Position.X, (this.Position.Y + depth.Y)));
                this.jumpTime = +0;
                bounds = this.get_BoundingRectangle().MemberwiseClone();
              }
            } else if (collision === $T17().Impassable) {
              (this.Position = $S00().Construct((this.Position.X + depth.X), this.Position.Y));
              bounds = this.get_BoundingRectangle().MemberwiseClone();
            }
          }
        }
      }
    }
    this.previousBottom = +$T06().$Cast(bounds.get_Bottom());
  };

  function Player_LoadContent () {
    this.idleAnimation = $T19().FromTexture(
      this.get_Level().get_Content(), 
      "Sprites/Player/Idle", 
      8, 
      8, 
      2, 
      true
    );
    this.runAnimation = $T19().FromTexture(
      this.get_Level().get_Content(), 
      "Sprites/Player/Run", 
      8, 
      8, 
      0.2, 
      true
    );
    this.jumpAnimation = $T19().FromTexture(
      this.get_Level().get_Content(), 
      "Sprites/Player/Jump", 
      8, 
      8, 
      0.1, 
      false
    );
    this.celebrateAnimation = $T19().FromTexture(
      this.get_Level().get_Content(), 
      "Sprites/Player/Celebrate", 
      8, 
      8, 
      0.1, 
      false
    );
    this.dieAnimation = $T19().FromTexture(
      this.get_Level().get_Content(), 
      "Sprites/Player/Die", 
      8, 
      8, 
      0.1, 
      false
    );
    this.suitAnimation = $T19().FromTexture(
      this.get_Level().get_Content(), 
      "Sprites/Player/Suit", 
      8, 
      8, 
      1, 
      false
    );
    this.localBounds = new ($T0F())(8, 0, 42, 64);
    this.jumpSound = this.get_Level().get_Content().Load$b1($T0B())("Sounds/Player/Jump");
    this.floatSound = this.get_Level().get_Content().Load$b1($T0B())("Sounds/Player/Float");
    this.dashSound = this.get_Level().get_Content().Load$b1($T0B())("Sounds/Player/Dash");
    this.fallSound = this.get_Level().get_Content().Load$b1($T0B())("Sounds/Player/Wilhelm");
  };

  function Player_OnCollisionWithTile (x, y) {
    var handler = this.CollidedWithTile;
    if (handler !== null) {
      handler(this, new ($T1B())(x, y));
    }
  };

  function Player_OnKilled (killedBy) {
    this.isAlive = false;
    this.DeathTime = $T1D().Game.TimeSinceStart.MemberwiseClone();
    this.fallSound.Play();
    this.sprite.PlayAnimation(this.dieAnimation);
    $T1E().SetVibration($T1F().One, 0, 0);
  };

  function Player_OnReachedExit () {
    this.sprite.PlayAnimation(this.celebrateAnimation);
  };

  function Player_remove_CollidedWithTile (value) {
    var eventHandler = this.CollidedWithTile;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T03().Remove(eventHandler2, value);
      eventHandler = $T04().CompareExchange$b1($T02())(/* ref */ new JSIL.MemberReference(this, "CollidedWithTile"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Player_Reset (position) {
    (this.Position = position);
    (this.Velocity = $T01().get_Zero().MemberwiseClone());
    this.isAlive = true;
    this.sprite.PlayAnimation(this.idleAnimation);
    this.HasDoubleJumpPower = false;
    this.hasDoubleJumped = false;
    this.HasFloatJumpPower = false;
    this.hasFloatJumped = false;
    this.isFloating = false;
    this.CarriedShard = null;
    this.currentPower = $T20().None;
    this.suitSprite.PlayAnimation(this.suitAnimation);
  };

  function Player_set_Position (value) {
    this.position = value;
  };

  function Player_set_Velocity (value) {
    this.velocity = value;
  };

  function Player_SetPower (shard, shardPowerType) {
    this.HasDoubleJumpPower = false;
    this.HasFloatJumpPower = false;
    if (shardPowerType === $T20().DoubleJump) {
      this.HasDoubleJumpPower = true;
      this.hasDoubleJumped = false;
    } else if (shardPowerType === $T20().FloatJump) {
      this.HasFloatJumpPower = true;
      this.hasFloatJumped = false;
    }
    this.currentPower = shardPowerType;
    this.CarriedShard = shard;
  };

  function Player_Update (gameTime, keyboardState, gamePadState) {
    this.GetInput(keyboardState, gamePadState);
    this.ApplyPhysics(gameTime);
    if (!(!this.get_IsAlive() || !this.get_IsOnGround())) {
      if (((Math.abs(this.get_Velocity().X)) - 0.02) > 0) {
        this.sprite.PlayAnimation(this.runAnimation);
      } else {
        this.sprite.PlayAnimation(this.idleAnimation);
      }
    }
    this.movement = +0;
    this.isJumping = false;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "BrokenMagicJumper.Player", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("BrokenMagicJumper.Level"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      Player__ctor
    );

    $.Method({Static:false, Public:true }, "add_CollidedWithTile", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm00.TypeRef("BrokenMagicJumper.CollidedWithTileArgs")])], []), 
      Player_add_CollidedWithTile
    );

    $.Method({Static:false, Public:true }, "ApplyPhysics", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      Player_ApplyPhysics
    );

    $.Method({Static:false, Public:false}, "DoJump", 
      new JSIL.MethodSignature($.Single, [$.Single, $asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      Player_DoJump
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime"), $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")], []), 
      Player_Draw
    );

    $.Method({Static:false, Public:true }, "get_BoundingRectangle", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), [], []), 
      Player_get_BoundingRectangle
    );

    $.Method({Static:false, Public:true }, "get_IsAlive", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Player_get_IsAlive
    );

    $.Method({Static:false, Public:true }, "get_IsOnGround", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Player_get_IsOnGround
    );

    $.Method({Static:false, Public:true }, "get_Level", 
      new JSIL.MethodSignature($asm00.TypeRef("BrokenMagicJumper.Level"), [], []), 
      Player_get_Level
    );

    $.Method({Static:false, Public:true }, "get_Position", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], []), 
      Player_get_Position
    );

    $.Method({Static:false, Public:true }, "get_Velocity", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], []), 
      Player_get_Velocity
    );

    $.Method({Static:false, Public:false}, "GetInput", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadState")], []), 
      Player_GetInput
    );

    $.Method({Static:false, Public:false}, "HandleCollisions", 
      new JSIL.MethodSignature(null, [], []), 
      Player_HandleCollisions
    );

    $.Method({Static:false, Public:true }, "LoadContent", 
      new JSIL.MethodSignature(null, [], []), 
      Player_LoadContent
    );

    $.Method({Static:false, Public:false}, "OnCollisionWithTile", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], []), 
      Player_OnCollisionWithTile
    );

    $.Method({Static:false, Public:true }, "OnKilled", 
      new JSIL.MethodSignature(null, [$.Object], []), 
      Player_OnKilled
    );

    $.Method({Static:false, Public:true }, "OnReachedExit", 
      new JSIL.MethodSignature(null, [], []), 
      Player_OnReachedExit
    );

    $.Method({Static:false, Public:true }, "remove_CollidedWithTile", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm00.TypeRef("BrokenMagicJumper.CollidedWithTileArgs")])], []), 
      Player_remove_CollidedWithTile
    );

    $.Method({Static:false, Public:true }, "Reset", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      Player_Reset
    );

    $.Method({Static:false, Public:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      Player_set_Position
    );

    $.Method({Static:false, Public:true }, "set_Velocity", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      Player_set_Velocity
    );

    $.Method({Static:false, Public:true }, "SetPower", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("BrokenMagicJumper.Shard"), $asm00.TypeRef("BrokenMagicJumper.ShardPowerType")], []), 
      Player_SetPower
    );

    $.Method({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("Microsoft.Xna.Framework.GameTime"), $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadState")
        ], []), 
      Player_Update
    );

    $.Constant({Static:true , Public:false}, "MoveAcceleration", 13000); 
    $.Constant({Static:true , Public:false}, "MaxMoveSpeed", 1750); 
    $.Constant({Static:true , Public:false}, "GroundDragFactor", 0.48); 
    $.Constant({Static:true , Public:false}, "AirDragFactor", 0.58); 
    $.Constant({Static:true , Public:false}, "MaxJumpTime", 0.35); 
    $.Constant({Static:true , Public:false}, "JumpLaunchVelocity", -3500); 
    $.Constant({Static:true , Public:false}, "MaxFallSpeed", 550); 
    $.Constant({Static:true , Public:false}, "JumpControlPower", 0.14); 
    $.Constant({Static:true , Public:false}, "MoveStickScale", 1); 
    $.Constant({Static:true , Public:false}, "AccelerometerScale", 1.5); 
    $.Constant({Static:true , Public:false}, "JumpButton", 4096); 
    $.Field({Static:false, Public:false}, "CollidedWithTile", $asm09.TypeRef("System.EventHandler`1", [$asm00.TypeRef("BrokenMagicJumper.CollidedWithTileArgs")])); 
    $.Field({Static:false, Public:false}, "idleAnimation", $asm0A.TypeRef("SharedXNA.Animation")); 
    $.Field({Static:false, Public:false}, "runAnimation", $asm0A.TypeRef("SharedXNA.Animation")); 
    $.Field({Static:false, Public:false}, "jumpAnimation", $asm0A.TypeRef("SharedXNA.Animation")); 
    $.Field({Static:false, Public:false}, "celebrateAnimation", $asm0A.TypeRef("SharedXNA.Animation")); 
    $.Field({Static:false, Public:false}, "dieAnimation", $asm0A.TypeRef("SharedXNA.Animation")); 
    $.Field({Static:false, Public:false}, "suitAnimation", $asm0A.TypeRef("SharedXNA.Animation")); 
    $.Field({Static:false, Public:true }, "flip", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteEffects")); 
    $.Field({Static:false, Public:false}, "sprite", $asm0A.TypeRef("SharedXNA.AnimationPlayer")); 
    $.Field({Static:false, Public:false}, "suitSprite", $asm0A.TypeRef("SharedXNA.AnimationPlayer")); 
    $.Field({Static:false, Public:false}, "jumpSound", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    $.Field({Static:false, Public:false}, "floatSound", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    $.Field({Static:false, Public:false}, "dashSound", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    $.Field({Static:false, Public:false}, "fallSound", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    $.Field({Static:false, Public:true }, "HasDoubleJumpPower", $.Boolean); 
    $.Field({Static:false, Public:false}, "hasDoubleJumped", $.Boolean); 
    $.Field({Static:false, Public:true }, "HasFloatJumpPower", $.Boolean); 
    $.Field({Static:false, Public:false}, "hasFloatJumped", $.Boolean); 
    $.Field({Static:false, Public:false}, "isFloating", $.Boolean); 
    $.Field({Static:false, Public:true }, "DeathTime", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "level", $asm00.TypeRef("BrokenMagicJumper.Level")); 
    $.Field({Static:false, Public:false}, "isAlive", $.Boolean); 
    $.Field({Static:false, Public:false}, "position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "previousBottom", $.Single); 
    $.Field({Static:false, Public:false}, "velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "currentPower", $asm00.TypeRef("BrokenMagicJumper.ShardPowerType")); 
    $.Field({Static:false, Public:true }, "CarriedShard", $asm00.TypeRef("BrokenMagicJumper.Shard")); 
    $.Field({Static:false, Public:false}, "isOnGround", $.Boolean); 
    $.Field({Static:false, Public:false}, "movement", $.Single); 
    $.Field({Static:false, Public:false}, "isJumping", $.Boolean); 
    $.Field({Static:false, Public:false}, "wasJumping", $.Boolean); 
    $.Field({Static:false, Public:false}, "jumpTime", $.Single); 
    $.Field({Static:false, Public:false}, "localBounds", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")); 
    $.Property({Static:false, Public:true }, "Level", $asm00.TypeRef("BrokenMagicJumper.Level"));

    $.Property({Static:false, Public:true }, "IsAlive", $.Boolean);

    $.Property({Static:false, Public:true }, "Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Velocity", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "IsOnGround", $.Boolean);

    $.Property({Static:false, Public:true }, "BoundingRectangle", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class BrokenMagicJumper.Program */ 

(function Program$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm09.System.String))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.BrokenMagicJumper.BrokenMagicJumperGame)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.IDisposable)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePad)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.PlayerIndex)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm09.System.IDisposable.Dispose)) ();
  };

  function Program_Main (args) {
    var game = new ($T01())();
    try {
      game.Run();
    } finally {
      if (game !== null) {
        $IM00().Call(game, null);
      }
    }
    $T04().SetVibration($T05().One, 0, 0);
  };

  JSIL.MakeStaticClass("BrokenMagicJumper.Program", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "Main", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String])], []), 
      Program_Main
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class BrokenMagicJumper.BrokenMagicJumperGame */ 

(function BrokenMagicJumperGame$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.SharedGameBase)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.GameMode)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.BrokenMagicJumper.Globals)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.BrokenMagicJumper.BrokenMagicJumperTitleScreen)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.GameModeManager)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Console)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.BrokenMagicJumper.BrokenMagicJumperGameplayScreen)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };

  function BrokenMagicJumperGame__ctor () {
    $T00().prototype._ctor.call(this);
    this.bWantGamerServices = false;
  };

  function BrokenMagicJumperGame_DoneWithInitialLoading (mode) {
    $T00().prototype.DoneWithInitialLoading.call(this, mode);
    $T02().TitleScreen = new ($T03())(this.TitleScreenImg, function (param0) {
        $asm0A.SharedXNA.GameModeManager.PushMenu($asm00.BrokenMagicJumper.BrokenMagicJumperGameplayScreen.StaticInstance);
      });
    $T04().PushMenu($T02().TitleScreen);
  };

  function BrokenMagicJumperGame_LoadContent () {
    $T05().WriteLine("BrokenMagicJumperGame.LoadContent");
    $T00().prototype.LoadContent.call(this);
  };

  function BrokenMagicJumperGame_LoadContentInBackground (mode) {
    $T05().WriteLine("BrokenMagicJumperGame.LoadContentInBackground");
    $T00().prototype.LoadContentInBackground.call(this, mode);
    this.TitleScreenImg = this.get_Content().Load$b1($T06())("Screens\\TitleScreen");
    $T03().LoadContent(this.get_Content());
    $T09().StaticInstance = new ($T09())();
    $T09().StaticInstance.LoadContent(this.get_Content());
  };

  function BrokenMagicJumperGame_Update (gameTime) {
    $T00().prototype.Update.call(this, gameTime);
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.SharedGameBase"), 
      Name: "BrokenMagicJumper.BrokenMagicJumperGame", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      BrokenMagicJumperGame__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoneWithInitialLoading", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.GameMode")], []), 
      BrokenMagicJumperGame_DoneWithInitialLoading
    );

    $.Method({Static:false, Public:false, Virtual:true }, "LoadContent", 
      new JSIL.MethodSignature(null, [], []), 
      BrokenMagicJumperGame_LoadContent
    );

    $.Method({Static:false, Public:false, Virtual:true }, "LoadContentInBackground", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.GameMode")], []), 
      BrokenMagicJumperGame_LoadContentInBackground
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      BrokenMagicJumperGame_Update
    );

    $.Field({Static:false, Public:false}, "TitleScreenImg", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class BrokenMagicJumper.BrokenMagicJumperTitleScreen */ 

(function BrokenMagicJumperTitleScreen$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.GameMode_GameModeEvent)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.TitleScreenThingy)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.TimeSpan)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.SharedXNA.UIHelper)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm04.Microsoft.Xna.Framework.Graphics.Texture2D))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Audio.SoundEffectInstance)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Audio.SoundEffect)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0A.SharedXNA.CommonMessages)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0A.SharedXNA.GameMode)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keyboard)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePad)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.PlayerIndex)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };

  function BrokenMagicJumperTitleScreen__ctor (Tex, Evt) {
    this.pressStartColor = ($jsilxna.ColorFromPremultipliedInts(null, 255, 255, 255, 255));
    $T04().prototype._ctor.call(this, Tex, Evt);
    this.bDrawGhettoStartPrompt = false;
  };

  function BrokenMagicJumperTitleScreen_Draw (gameTime) {
    this.DrawTime += +$T06().$Cast(gameTime.get_ElapsedGameTime().get_TotalSeconds());
    $T04().prototype.Draw.call(this, gameTime);
    $T08().Begin();
    if (this.DrawTime > 3) {
      var storyFrame = (((this.DrawTime - 3) / 1) | 0);
      if (storyFrame < $thisType.StoryScreenTextures.length) {
        $T08().DrawFilledBox(
          0, 
          0, 
          $T0A().ScreenWidth, 
          $T0A().ScreenHeight, 
          $T02().get_White(), 
          $T02().get_White()
        );
        $T08().get_Batch().DrawRect($thisType.StoryScreenTextures[storyFrame], $T0A().ScreenRectangle, $T02().get_White());
        if (!((storyFrame !== 0) || (this.introInstance !== null))) {
          this.introInstance = $thisType.intro.CreateInstance();
          this.introInstance.Play();
        } else if (!((storyFrame !== 10) || (this.reptosInstance !== null))) {
          this.reptosInstance = $thisType.ReptosSound.CreateInstance();
          this.reptosInstance.Play();
        }
      } else {
        $T08().get_Batch().DrawString($T0A().MenuFont, $T0E().get_PressStartToContinue(), $S00().Construct((($T0A().ScreenWidth / 2) - 100), ($T0A().ScreenHeight - 75)), this.pressStartColor);
      }
    }
    $T08().End();
  };

  function BrokenMagicJumperTitleScreen_EnterState () {
    $T10().prototype.EnterState.call(this);
    this.DrawTime = +0;
  };

  function BrokenMagicJumperTitleScreen_ExitState () {
    if (this.introInstance !== null) {
      this.introInstance.Stop(true);
      this.introInstance = null;
    }
    if (this.reptosInstance !== null) {
      this.reptosInstance.Stop(true);
      this.reptosInstance = null;
    }
    $T10().prototype.ExitState.call(this);
  };

  function BrokenMagicJumperTitleScreen_LoadContent (content) {
    $thisType.StoryScreenTextures = JSIL.Array.New($T00(), 14);

    for (var i = 0; i <= 13; i = ((i + 1) | 0)) {
      $thisType.StoryScreenTextures[i] = content.Load$b1($T00())($T12().Format("Story\\Story{0:d2}", i));
    }
    $thisType.ReptosSound = content.Load$b1($T0D())("Sounds/DoomSound");
    $thisType.intro = content.Load$b1($T0D())("Sounds/IntroSound");
  };

  function BrokenMagicJumperTitleScreen_Update (gameTime) {
    $T04().prototype.Update.call(this, gameTime);
  };

  function BrokenMagicJumperTitleScreen_UpdateInput (gameTime) {
    $T10().prototype.UpdateInput.call(this, gameTime);
    var keyboardState = $T14().GetState().MemberwiseClone();
    $T15().GetState($T16().One);
    if (keyboardState.IsKeyDown($T17().Escape)) {
      $T0A().Game.Exit();
    }
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.TitleScreenThingy"), 
      Name: "BrokenMagicJumper.BrokenMagicJumperTitleScreen", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm0A.TypeRef("SharedXNA.GameMode/GameModeEvent")], []), 
      BrokenMagicJumperTitleScreen__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      BrokenMagicJumperTitleScreen_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "EnterState", 
      new JSIL.MethodSignature(null, [], []), 
      BrokenMagicJumperTitleScreen_EnterState
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ExitState", 
      new JSIL.MethodSignature(null, [], []), 
      BrokenMagicJumperTitleScreen_ExitState
    );

    $.Method({Static:true , Public:true }, "LoadContent", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")], []), 
      BrokenMagicJumperTitleScreen_LoadContent
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      BrokenMagicJumperTitleScreen_Update
    );

    $.Method({Static:false, Public:true , Virtual:true }, "UpdateInput", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      BrokenMagicJumperTitleScreen_UpdateInput
    );

    $.Constant({Static:true , Public:false}, "WaitTimeBeforeCinamatic", 3); 
    $.Field({Static:true , Public:false}, "StoryScreenTextures", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")])); 
    $.Field({Static:true , Public:false}, "ReptosSound", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    $.Field({Static:true , Public:false}, "intro", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    $.Field({Static:false, Public:false}, "DrawTime", $.Single); 
    $.Field({Static:false, Public:false}, "pressStartColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:false}, "introInstance", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")); 
    $.Field({Static:false, Public:false}, "reptosInstance", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffectInstance")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum BrokenMagicJumper.TileCollision */ 

JSIL.MakeEnum(
  "BrokenMagicJumper.TileCollision", false, {
    Passable: 0, 
    Impassable: 1, 
    Platform: 2
  }, false
);

/* struct BrokenMagicJumper.Tile */ 

(function Tile$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.UInt32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.BrokenMagicJumper.TileCollision)) ();
  };

  function Tile__ctor (gid, collision) {
    this.GID = gid;
    this.Collision = collision;
    this.HorizontalFlip = false;
    this.VerticalFlip = false;
    this.DiagonalFlip = false;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "BrokenMagicJumper.Tile", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32, $asm00.TypeRef("BrokenMagicJumper.TileCollision")], []), 
      Tile__ctor
    );

    $.Field({Static:false, Public:true }, "GID", $.UInt32); 
    $.Field({Static:false, Public:true }, "Collision", $asm00.TypeRef("BrokenMagicJumper.TileCollision")); 
    $.Field({Static:false, Public:true }, "HorizontalFlip", $.Boolean); 
    $.Field({Static:false, Public:true }, "VerticalFlip", $.Boolean); 
    $.Field({Static:false, Public:true }, "DiagonalFlip", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

