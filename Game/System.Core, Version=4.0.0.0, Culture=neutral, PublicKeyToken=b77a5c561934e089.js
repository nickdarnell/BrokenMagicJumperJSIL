/* Generated by JSIL v0.7.8 build 22841. See http://jsil.org/ for more information. */ 
/* Generating type stubs only */ 
var $asm0D = JSIL.DeclareAssembly("System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Diagnostics");
JSIL.DeclareNamespace("System.Diagnostics.Eventing");
/* struct System.Diagnostics.Eventing.EventDescriptor */ 

(function EventDescriptor$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Diagnostics.Eventing.EventDescriptor", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Byte, 
          $.Byte, $.Byte, 
          $.Byte, $.Int32, 
          $.Int64
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Channel", 
      new JSIL.MethodSignature($.Byte, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_EventId", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Keywords", 
      new JSIL.MethodSignature($.Int64, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Level", 
      new JSIL.MethodSignature($.Byte, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Opcode", 
      new JSIL.MethodSignature($.Byte, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Task", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      new JSIL.MethodSignature($.Byte, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "m_id", $.UInt16); 
    $.Field({Static:false, Public:false}, "m_version", $.Byte); 
    $.Field({Static:false, Public:false}, "m_channel", $.Byte); 
    $.Field({Static:false, Public:false}, "m_level", $.Byte); 
    $.Field({Static:false, Public:false}, "m_opcode", $.Byte); 
    $.Field({Static:false, Public:false}, "m_task", $.UInt16); 
    $.Field({Static:false, Public:false}, "m_keywords", $.Int64); 
    $.Property({Static:false, Public:true }, "EventId", $.Int32);

    $.Property({Static:false, Public:true }, "Version", $.Byte);

    $.Property({Static:false, Public:true }, "Channel", $.Byte);

    $.Property({Static:false, Public:true }, "Level", $.Byte);

    $.Property({Static:false, Public:true }, "Opcode", $.Byte);

    $.Property({Static:false, Public:true }, "Task", $.Int32);

    $.Property({Static:false, Public:true }, "Keywords", $.Int64);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.EventProvider */ 

(function EventProvider$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.EventProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateActivityId", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Deregister", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EncodeObject", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $jsilcore.TypeRef("JSIL.Pointer", [$asm0D.TypeRef("System.Diagnostics.Eventing.EventProvider/EventData")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EtwEnableCallBack", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Guid")]), $.Int32, 
          $.Byte, $.Int64, 
          $.Int64, $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Void")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EtwRegister", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetActivityId", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetLastWriteEventError", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.EventProvider/WriteEventErrorCode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEnabled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.Byte, $.Int64], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetActivityId", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Guid")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetLastError", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $.Int32, 
          $asm09.TypeRef("System.IntPtr")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteMessageEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Byte, 
          $.Int64
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteMessageEvent", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTransferEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $asm09.TypeRef("System.Guid"), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteTransferEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $asm09.TypeRef("System.Guid"), 
          $.Int32, $asm09.TypeRef("System.IntPtr")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_regHandle", $.Int64); 
    $.Field({Static:false, Public:false}, "m_level", $.Byte); 
    $.Field({Static:false, Public:false}, "m_anyKeywordMask", $.Int64); 
    $.Field({Static:false, Public:false}, "m_allKeywordMask", $.Int64); 
    $.Field({Static:false, Public:false}, "m_enabled", $.Int32); 
    $.Field({Static:false, Public:false}, "m_providerId", $asm09.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false}, "m_disposed", $.Int32); 
    $.Field({Static:true , Public:false}, "s_returnCodeSlot", $asm09.TypeRef("System.LocalDataStoreSlot")); 
    $.Field({Static:true , Public:false}, "s_platformNotSupported", $.Boolean); 
    $.Field({Static:true , Public:false}, "s_preWin7", $.Boolean); 
    $.Constant({Static:true , Public:false}, "s_basicTypeAllocationBufferSize", 16); 
    $.Constant({Static:true , Public:false}, "s_etwMaxMumberArguments", 32); 
    $.Constant({Static:true , Public:false}, "s_etwAPIMaxStringCount", 8); 
    $.Constant({Static:true , Public:false}, "s_maxEventDataDescriptors", 128); 
    $.Constant({Static:true , Public:false}, "s_traceEventMaximumSize", 65482); 
    $.Constant({Static:true , Public:false}, "s_traceEventMaximumStringSize", 32724); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.Eventing.EventProvider/WriteEventErrorCode */ 

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.EventProvider/WriteEventErrorCode", false, {
    NoError: 0, 
    NoFreeBuffers: 1, 
    EventTooBig: 2
  }, false
);

/* struct System.Diagnostics.Eventing.EventProvider/EventData */ 

(function EventData$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Diagnostics.Eventing.EventProvider/EventData", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "DataPointer", $.UInt64); 
    $.Field({Static:false, Public:false}, "Size", $.UInt32); 
    $.Field({Static:false, Public:false}, "Reserved", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.Eventing.EventProvider/ActivityControl */ 

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.EventProvider/ActivityControl", false, {
    EVENT_ACTIVITY_CTRL_GET_ID: 1, 
    EVENT_ACTIVITY_CTRL_SET_ID: 2, 
    EVENT_ACTIVITY_CTRL_CREATE_ID: 3, 
    EVENT_ACTIVITY_CTRL_GET_SET_ID: 4, 
    EVENT_ACTIVITY_CTRL_CREATE_SET_ID: 5
  }, false
);

/* class System.Diagnostics.Eventing.EventProviderTraceListener */ 

(function EventProviderTraceListener$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Diagnostics.TraceListener"), 
      Name: "System.Diagnostics.Eventing.EventProviderTraceListener", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fail", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Delimiter", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsThreadSafe", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSupportedAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitProvider", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Delimiter", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm0B.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm0B.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm0B.TypeRef("System.Diagnostics.TraceEventType"), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm0B.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm0B.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceTransfer", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $.Int32, $.String, 
          $asm09.TypeRef("System.Guid")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteLine", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "m_provider", $asm0D.TypeRef("System.Diagnostics.Eventing.EventProvider")); 
    $.Field({Static:false, Public:false}, "m_delimiter", $.String); 
    $.Field({Static:false, Public:false}, "m_initializedDelim", $.Int32); 
    $.Field({Static:false, Public:false}, "m_Lock", $.Object); 
    $.Constant({Static:true , Public:false}, "s_nullStringValue", "null"); 
    $.Constant({Static:true , Public:false}, "s_nullStringComaValue", "null,"); 
    $.Constant({Static:true , Public:false}, "s_nullCStringValue", ": null"); 
    $.Constant({Static:true , Public:false}, "s_activityIdString", "activityId="); 
    $.Constant({Static:true , Public:false}, "s_relatedActivityIdString", "relatedActivityId="); 
    $.Constant({Static:true , Public:false}, "s_callStackString", " : CallStack:"); 
    $.Constant({Static:true , Public:false}, "s_optionDelimiter", "delimiter"); 
    $.Constant({Static:true , Public:false}, "s_keyWordMask", 4294967040); 
    $.Constant({Static:true , Public:false}, "s_defaultPayloadSize", 512); 
    $.Property({Static:false, Public:true }, "Delimiter", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsThreadSafe", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Management");
JSIL.DeclareNamespace("System.Management.Instrumentation");
/* class System.Management.Instrumentation.ManagementEntityAttribute */ 

(function ManagementEntityAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Management.Instrumentation.ManagementEntityAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_External", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Singleton", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_External", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Singleton", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "_nounName", $.String); 
    $.Field({Static:false, Public:false}, "_isExternalClass", $.Boolean); 
    $.Field({Static:false, Public:false}, "_isSingleton", $.Boolean); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "External", $.Boolean);

    $.Property({Static:false, Public:true }, "Singleton", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.Class]; });

})();

/* enum System.Management.Instrumentation.ManagementHostingModel */ 

JSIL.MakeEnum(
  "System.Management.Instrumentation.ManagementHostingModel", true, {
    Decoupled: 0, 
    NetworkService: 1, 
    LocalService: 2, 
    LocalSystem: 3
  }, false
);

/* class System.Management.Instrumentation.WmiConfigurationAttribute */ 

(function WmiConfigurationAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Management.Instrumentation.WmiConfigurationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HostingGroup", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_HostingModel", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Management.Instrumentation.ManagementHostingModel"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IdentifyLevel", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceSecurity", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Scope", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityRestriction", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_HostingGroup", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_HostingModel", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Management.Instrumentation.ManagementHostingModel")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_IdentifyLevel", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_NamespaceSecurity", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityRestriction", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "_Scope", $.String); 
    $.Field({Static:false, Public:false}, "_SecurityRestriction", $.String); 
    $.Field({Static:false, Public:false}, "_NamespaceSecurity", $.String); 
    $.Field({Static:false, Public:false}, "_HostingModel", $asm0D.TypeRef("System.Management.Instrumentation.ManagementHostingModel")); 
    $.Field({Static:false, Public:false}, "_HostingGroup", $.String); 
    $.Field({Static:false, Public:false}, "_IdentifyLevel", $.Boolean); 
    $.Property({Static:false, Public:true }, "SecurityRestriction", $.String);

    $.Property({Static:false, Public:true }, "NamespaceSecurity", $.String);

    $.Property({Static:false, Public:true }, "IdentifyLevel", $.Boolean);

    $.Property({Static:false, Public:true }, "HostingModel", $asm0D.TypeRef("System.Management.Instrumentation.ManagementHostingModel"));

    $.Property({Static:false, Public:true }, "HostingGroup", $.String);

    $.Property({Static:false, Public:true }, "Scope", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.Assembly]; });

})();

/* class System.Management.Instrumentation.ManagementMemberAttribute */ 

(function ManagementMemberAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Management.Instrumentation.ManagementMemberAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "_Name", $.String); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

/* class System.Management.Instrumentation.ManagementNewInstanceAttribute */ 

(function ManagementNewInstanceAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementNewInstanceAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Constructor", "Method")]; });

})();

/* class System.Management.Instrumentation.ManagementBindAttribute */ 

(function ManagementBindAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Management.Instrumentation.ManagementNewInstanceAttribute"), 
      Name: "System.Management.Instrumentation.ManagementBindAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "_schema", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "Schema", $asm09.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Constructor", "Method")]; });

})();

/* class System.Management.Instrumentation.ManagementCreateAttribute */ 

(function ManagementCreateAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Management.Instrumentation.ManagementNewInstanceAttribute"), 
      Name: "System.Management.Instrumentation.ManagementCreateAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Constructor", "Method")]; });

})();

/* class System.Management.Instrumentation.ManagementRemoveAttribute */ 

(function ManagementRemoveAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementRemoveAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "_schema", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "Schema", $asm09.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.Method]; });

})();

/* class System.Management.Instrumentation.ManagementEnumeratorAttribute */ 

(function ManagementEnumeratorAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Management.Instrumentation.ManagementNewInstanceAttribute"), 
      Name: "System.Management.Instrumentation.ManagementEnumeratorAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "_schema", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "Schema", $asm09.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Constructor", "Method")]; });

})();

/* class System.Management.Instrumentation.ManagementProbeAttribute */ 

(function ManagementProbeAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementProbeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "_schema", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "Schema", $asm09.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* class System.Management.Instrumentation.ManagementTaskAttribute */ 

(function ManagementTaskAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementTaskAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "_schema", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "Schema", $asm09.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.Method]; });

})();

/* class System.Management.Instrumentation.ManagementKeyAttribute */ 

(function ManagementKeyAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementKeyAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* class System.Management.Instrumentation.ManagementReferenceAttribute */ 

(function ManagementReferenceAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Management.Instrumentation.ManagementReferenceAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "_Type", $.String); 
    $.Property({Static:false, Public:true }, "Type", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Field", "Parameter", "Property")]; });

})();

/* enum System.Management.Instrumentation.ManagementConfigurationType */ 

JSIL.MakeEnum(
  "System.Management.Instrumentation.ManagementConfigurationType", true, {
    Apply: 0, 
    OnCommit: 1
  }, false
);

/* class System.Management.Instrumentation.ManagementConfigurationAttribute */ 

(function ManagementConfigurationAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementConfigurationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Mode", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Management.Instrumentation.ManagementConfigurationType"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Mode", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Management.Instrumentation.ManagementConfigurationType")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "updateMode", $asm0D.TypeRef("System.Management.Instrumentation.ManagementConfigurationType")); 
    $.Field({Static:false, Public:false}, "_schema", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true }, "Mode", $asm0D.TypeRef("System.Management.Instrumentation.ManagementConfigurationType"));

    $.Property({Static:false, Public:true }, "Schema", $asm09.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* class System.Management.Instrumentation.ManagementCommitAttribute */ 

(function ManagementCommitAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementCommitAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.Method]; });

})();

/* class System.Management.Instrumentation.ManagementNameAttribute */ 

(function ManagementNameAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Management.Instrumentation.ManagementNameAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "_Name", $.String); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.Parameter]; });

})();

/* class System.Management.Instrumentation.InstrumentationBaseException */ 

(function InstrumentationBaseException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Exception"), 
      Name: "System.Management.Instrumentation.InstrumentationBaseException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Exception")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Management.Instrumentation.InstrumentationException */ 

(function InstrumentationException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Management.Instrumentation.InstrumentationBaseException"), 
      Name: "System.Management.Instrumentation.InstrumentationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Exception")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Exception")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Management.Instrumentation.InstanceNotFoundException */ 

(function InstanceNotFoundException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Management.Instrumentation.InstrumentationException"), 
      Name: "System.Management.Instrumentation.InstanceNotFoundException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Exception")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Diagnostics.Eventing.Reader");
/* class System.Diagnostics.Eventing.Reader.EventBookmark */ 

(function EventBookmark$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventBookmark", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BookmarkText", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Overrides(0, "GetObjectData")
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "bookmark", $.String); 
    $.Property({Static:false, Public:false}, "BookmarkText", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Runtime.Serialization.ISerializable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.Eventing.Reader.EventLogType */ 

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.EventLogType", true, {
    Administrative: 0, 
    Operational: 1, 
    Analytical: 2, 
    Debug: 3
  }, false
);

/* enum System.Diagnostics.Eventing.Reader.EventLogIsolation */ 

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.EventLogIsolation", true, {
    Application: 0, 
    System: 1, 
    Custom: 2
  }, false
);

/* enum System.Diagnostics.Eventing.Reader.EventLogMode */ 

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.EventLogMode", true, {
    Circular: 0, 
    AutoBackup: 1, 
    Retain: 2
  }, false
);

/* class System.Diagnostics.Eventing.Reader.EventLogConfiguration */ 

(function EventLogConfiguration$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogConfiguration", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsClassicLog", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEnabled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogFilePath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogIsolation", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogIsolation"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogMode", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogMode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_LogType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumSizeInBytes", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OwningProviderName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderBufferSize", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderControlGuid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Guid")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderKeywords", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderLatency", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderLevel", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderMaximumNumberOfBuffers", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderMinimumNumberOfBuffers", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderNames", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityDescriptor", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SaveChanges", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsEnabled", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LogFilePath", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LogMode", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogMode")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaximumSizeInBytes", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProviderKeywords", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Nullable`1", [$.Int64])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProviderLevel", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Nullable`1", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityDescriptor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "handle", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
    $.Field({Static:false, Public:false}, "session", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")); 
    $.Field({Static:false, Public:false}, "channelName", $.String); 
    $.Property({Static:false, Public:true }, "LogName", $.String);

    $.Property({Static:false, Public:true }, "LogType", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogType"));

    $.Property({Static:false, Public:true }, "LogIsolation", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogIsolation"));

    $.Property({Static:false, Public:true }, "IsEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "IsClassicLog", $.Boolean);

    $.Property({Static:false, Public:true }, "SecurityDescriptor", $.String);

    $.Property({Static:false, Public:true }, "LogFilePath", $.String);

    $.Property({Static:false, Public:true }, "MaximumSizeInBytes", $.Int64);

    $.Property({Static:false, Public:true }, "LogMode", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogMode"));

    $.Property({Static:false, Public:true }, "OwningProviderName", $.String);

    $.Property({Static:false, Public:true }, "ProviderNames", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Property({Static:false, Public:true }, "ProviderLevel", $asm09.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderKeywords", $asm09.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true }, "ProviderBufferSize", $asm09.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderMinimumNumberOfBuffers", $asm09.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderMaximumNumberOfBuffers", $asm09.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderLatency", $asm09.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderControlGuid", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Guid")]));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogLink */ 

(function EventLogLink$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogLink", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.String, $.UInt32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChannelId", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsImported", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "channelName", $.String); 
    $.Field({Static:false, Public:false}, "isImported", $.Boolean); 
    $.Field({Static:false, Public:false}, "displayName", $.String); 
    $.Field({Static:false, Public:false}, "channelId", $.UInt32); 
    $.Field({Static:false, Public:false}, "dataReady", $.Boolean); 
    $.Field({Static:false, Public:false}, "pmReference", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
    $.Field({Static:false, Public:false}, "syncObject", $.Object); 
    $.Property({Static:false, Public:true }, "LogName", $.String);

    $.Property({Static:false, Public:true }, "IsImported", $.Boolean);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:false}, "ChannelId", $.UInt32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogStatus */ 

(function EventLogStatus$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogStatus", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_StatusCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "channelName", $.String); 
    $.Field({Static:false, Public:false}, "win32ErrorCode", $.Int32); 
    $.Property({Static:false, Public:true }, "LogName", $.String);

    $.Property({Static:false, Public:true }, "StatusCode", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventProperty */ 

(function EventProperty$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventProperty", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "value", $.Object); 
    $.Property({Static:false, Public:true }, "Value", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogPropertySelector */ 

(function EventLogPropertySelector$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogPropertySelector", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [], [])
    );

    $.Field({Static:false, Public:false}, "renderContextHandleValues", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
    $.Property({Static:false, Public:false}, "Handle", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventRecord */ 

(function EventRecord$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventRecord", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatDescription", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatDescription", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ActivityId", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Guid")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Bookmark", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keywords", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeywordsDisplayNames", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Level", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LevelDisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LogName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MachineName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Opcode", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int16]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OpcodeDisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProcessId", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderId", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Guid")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Qualifiers", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RecordId", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RelatedActivityId", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Guid")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Task", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TaskDisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ThreadId", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TimeCreated", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.DateTime")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UserId", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.Principal.SecurityIdentifier"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Version", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Version", $asm09.TypeRef("System.Nullable`1", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Level", $asm09.TypeRef("System.Nullable`1", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Task", $asm09.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "Opcode", $asm09.TypeRef("System.Nullable`1", [$.Int16]));

    $.Property({Static:false, Public:true , Virtual:true }, "Keywords", $asm09.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true , Virtual:true }, "RecordId", $asm09.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderId", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "LogName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ProcessId", $asm09.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "ThreadId", $asm09.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "MachineName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "UserId", $asm09.TypeRef("System.Security.Principal.SecurityIdentifier"));

    $.Property({Static:false, Public:true , Virtual:true }, "TimeCreated", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ActivityId", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "RelatedActivityId", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Qualifiers", $asm09.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "LevelDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "OpcodeDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "TaskDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "KeywordsDisplayNames", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "Bookmark", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventKeyword */ 

(function EventKeyword$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventKeyword", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int64, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int64, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Int64, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "value", $.Int64); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "displayName", $.String); 
    $.Field({Static:false, Public:false}, "dataReady", $.Boolean); 
    $.Field({Static:false, Public:false}, "pmReference", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
    $.Field({Static:false, Public:false}, "syncObject", $.Object); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Int64);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLevel */ 

(function EventLevel$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLevel", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "value", $.Int32); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "displayName", $.String); 
    $.Field({Static:false, Public:false}, "dataReady", $.Boolean); 
    $.Field({Static:false, Public:false}, "pmReference", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
    $.Field({Static:false, Public:false}, "syncObject", $.Object); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Int32);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogRecord */ 

(function EventLogRecord$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogRecord", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), 
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatDescription", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatDescription", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ActivityId", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Guid")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Bookmark", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ContainerLog", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keywords", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeywordsDisplayNames", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Level", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LevelDisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LogName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MachineName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MatchedQueryIds", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Opcode", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int16]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OpcodeDisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProcessId", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderId", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Guid")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Qualifiers", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RecordId", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RelatedActivityId", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Guid")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Task", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TaskDisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ThreadId", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TimeCreated", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.DateTime")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UserId", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.Principal.SecurityIdentifier"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Version", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBookmarkHandleFromBookmark", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetPropertyValues", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$.Object]), [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogPropertySelector")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareSystemData", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "handle", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"))
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute")); 
    $.Field({Static:false, Public:false}, "session", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")); 
    $.Field({Static:false, Public:false}, "systemProperties", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.NativeWrapper/SystemProperties")); 
    $.Field({Static:false, Public:false}, "containerChannel", $.String); 
    $.Field({Static:false, Public:false}, "matchedQueryIds", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "syncObject", $.Object); 
    $.Field({Static:false, Public:false}, "levelName", $.String); 
    $.Field({Static:false, Public:false}, "taskName", $.String); 
    $.Field({Static:false, Public:false}, "opcodeName", $.String); 
    $.Field({Static:false, Public:false}, "keywordsNames", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])); 
    $.Field({Static:false, Public:false}, "levelNameReady", $.Boolean); 
    $.Field({Static:false, Public:false}, "taskNameReady", $.Boolean); 
    $.Field({Static:false, Public:false}, "opcodeNameReady", $.Boolean); 
    $.Field({Static:false, Public:false}, "cachedMetadataInformation", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation")); 
    $.Constant({Static:true , Public:false}, "SYSTEM_PROPERTY_COUNT", 18); 
    $.Property({Static:false, Public:false}, "Handle", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Version", $asm09.TypeRef("System.Nullable`1", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Qualifiers", $asm09.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "Level", $asm09.TypeRef("System.Nullable`1", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Task", $asm09.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "Opcode", $asm09.TypeRef("System.Nullable`1", [$.Int16]));

    $.Property({Static:false, Public:true , Virtual:true }, "Keywords", $asm09.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true , Virtual:true }, "RecordId", $asm09.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderId", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "LogName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ProcessId", $asm09.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "ThreadId", $asm09.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "MachineName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "UserId", $asm09.TypeRef("System.Security.Principal.SecurityIdentifier"));

    $.Property({Static:false, Public:true , Virtual:true }, "TimeCreated", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ActivityId", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "RelatedActivityId", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true }, "ContainerLog", $.String);

    $.Property({Static:false, Public:true }, "MatchedQueryIds", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "Bookmark", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"));

    $.Property({Static:false, Public:true , Virtual:true }, "LevelDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "OpcodeDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "TaskDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "KeywordsDisplayNames", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogReader */ 

(function EventLogReader$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.PathType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"), $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CancelReading", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_BatchSize", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_LogStatus", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogStatus")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetNextBatch", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.TimeSpan")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ReadEvent", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadEvent", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"), [$asm09.TypeRef("System.TimeSpan")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Seek", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Seek", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"), $.Int64], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Seek", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.SeekOrigin"), $.Int64], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SeekCommon", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SeekReset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_BatchSize", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "eventQuery", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery")); 
    $.Field({Static:false, Public:false}, "batchSize", $.Int32); 
    $.Field({Static:false, Public:false}, "handle", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
    $.Field({Static:false, Public:false}, "eventsBuffer", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.IntPtr")])); 
    $.Field({Static:false, Public:false}, "currentIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "eventCount", $.Int32); 
    $.Field({Static:false, Public:false}, "isEof", $.Boolean); 
    $.Field({Static:false, Public:false}, "cachedMetadataInformation", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation")); 
    $.Property({Static:false, Public:true }, "BatchSize", $.Int32);

    $.Property({Static:false, Public:true }, "LogStatus", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogStatus")]));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogWatcher */ 

(function EventLogWatcher$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogWatcher", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"), $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"), $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_EventRecordWritten", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Enabled", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "HandleEventsRequestCompletion", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IssueCallback", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_EventRecordWritten", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RequestEvents", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Enabled", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StartSubscribing", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "StopSubscribing", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SubscribedEventsAvailableCallback", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "EventRecordWritten", $asm09.TypeRef("System.EventHandler`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")])); 
    $.Field({Static:false, Public:false}, "eventQuery", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery")); 
    $.Field({Static:false, Public:false}, "bookmark", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")); 
    $.Field({Static:false, Public:false}, "readExistingEvents", $.Boolean); 
    $.Field({Static:false, Public:false}, "handle", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
    $.Field({Static:false, Public:false}, "eventsBuffer", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.IntPtr")])); 
    $.Field({Static:false, Public:false}, "numEventsInBuffer", $.Int32); 
    $.Field({Static:false, Public:false}, "isSubscribing", $.Boolean); 
    $.Field({Static:false, Public:false}, "callbackThreadId", $.Int32); 
    $.Field({Static:false, Public:false}, "subscriptionWaitHandle", $asm09.TypeRef("System.Threading.AutoResetEvent")); 
    $.Field({Static:false, Public:false}, "unregisterDoneHandle", $asm09.TypeRef("System.Threading.AutoResetEvent")); 
    $.Field({Static:false, Public:false}, "registeredWaitHandle", $asm09.TypeRef("System.Threading.RegisteredWaitHandle")); 
    $.Field({Static:false, Public:false}, "cachedMetadataInformation", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation")); 
    $.Field({Static:false, Public:false}, "asyncException", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException")); 
    $.Property({Static:false, Public:true }, "Enabled", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs */ 

(function EventRecordWrittenEventArgs$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.EventArgs"), 
      Name: "System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogRecord")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EventException", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_EventRecord", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "record", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord")); 
    $.Field({Static:false, Public:false}, "exception", $asm09.TypeRef("System.Exception")); 
    $.Property({Static:false, Public:true }, "EventRecord", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"));

    $.Property({Static:false, Public:true }, "EventException", $asm09.TypeRef("System.Exception"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogQuery */ 

(function EventLogQuery$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogQuery", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.PathType")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Path", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Query", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReverseDirection", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Session", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_ThePathType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TolerateQueryErrors", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_ReverseDirection", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Session", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_TolerateQueryErrors", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "query", $.String); 
    $.Field({Static:false, Public:false}, "path", $.String); 
    $.Field({Static:false, Public:false}, "session", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")); 
    $.Field({Static:false, Public:false}, "pathType", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.PathType")); 
    $.Field({Static:false, Public:false}, "tolerateErrors", $.Boolean); 
    $.Field({Static:false, Public:false}, "reverseDirection", $.Boolean); 
    $.Property({Static:false, Public:true }, "Session", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"));

    $.Property({Static:false, Public:true }, "TolerateQueryErrors", $.Boolean);

    $.Property({Static:false, Public:true }, "ReverseDirection", $.Boolean);

    $.Property({Static:false, Public:false}, "Path", $.String);

    $.Property({Static:false, Public:false}, "ThePathType", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.PathType"));

    $.Property({Static:false, Public:false}, "Query", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogHandle */ 

(function EventLogHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IntPtr"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

})();

/* enum System.Diagnostics.Eventing.Reader.SessionAuthentication */ 

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.SessionAuthentication", true, {
    Default: 0, 
    Negotiate: 1, 
    Kerberos: 2, 
    Ntlm: 3
  }, false
);

/* enum System.Diagnostics.Eventing.Reader.PathType */ 

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.PathType", true, {
    LogName: 1, 
    FilePath: 2
  }, false
);

/* class System.Diagnostics.Eventing.Reader.EventLogSession */ 

(function EventLogSession$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogSession", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm09.TypeRef("System.Security.SecureString"), 
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.SessionAuthentication")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CancelCurrentOperations", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearLog", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ClearLog", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ExportLog", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String, $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ExportLog", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String, $.String, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportLogAndMessages", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportLogAndMessages", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String, $.String, 
          $.Boolean, $asm09.TypeRef("System.Globalization.CultureInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GlobalSession", 
      new JSIL.MethodSignature($.Type, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLogInformation", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogInformation"), [$.String, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.PathType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLogNames", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetProviderNames", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetupSystemContext", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetupUserContext", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.Field({Static:false, Public:false}, "renderContextHandleSystem", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
    $.Field({Static:false, Public:false}, "renderContextHandleUser", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
    $.Field({Static:false, Public:false}, "syncObject", $.Object); 
    $.Field({Static:false, Public:false}, "server", $.String); 
    $.Field({Static:false, Public:false}, "user", $.String); 
    $.Field({Static:false, Public:false}, "domain", $.String); 
    $.Field({Static:false, Public:false}, "logOnType", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.SessionAuthentication")); 
    $.Field({Static:false, Public:false}, "handle", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
    $.Field({Static:true , Public:false}, "globalSession", $.Type); 
    $.Property({Static:false, Public:false}, "Handle", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Property({Static:true , Public:true }, "GlobalSession", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventMetadata */ 

(function EventMetadata$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventMetadata", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Byte, 
          $.Byte, $.Byte, 
          $.Byte, $.Int16, 
          $.Int64, $.String, 
          $.String, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      new JSIL.MethodSignature($.Int64, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Keywords", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Level", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogLink", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Opcode", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Task", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventTask"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Template", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      new JSIL.MethodSignature($.Byte, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "id", $.Int64); 
    $.Field({Static:false, Public:false}, "version", $.Byte); 
    $.Field({Static:false, Public:false}, "channelId", $.Byte); 
    $.Field({Static:false, Public:false}, "level", $.Byte); 
    $.Field({Static:false, Public:false}, "opcode", $.Int16); 
    $.Field({Static:false, Public:false}, "task", $.Int32); 
    $.Field({Static:false, Public:false}, "keywords", $.Int64); 
    $.Field({Static:false, Public:false}, "template", $.String); 
    $.Field({Static:false, Public:false}, "description", $.String); 
    $.Field({Static:false, Public:false}, "pmReference", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
    $.Property({Static:false, Public:true }, "Id", $.Int64);

    $.Property({Static:false, Public:true }, "Version", $.Byte);

    $.Property({Static:false, Public:true }, "LogLink", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink"));

    $.Property({Static:false, Public:true }, "Level", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel"));

    $.Property({Static:false, Public:true }, "Opcode", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode"));

    $.Property({Static:false, Public:true }, "Task", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventTask"));

    $.Property({Static:false, Public:true }, "Keywords", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]));

    $.Property({Static:false, Public:true }, "Template", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventOpcode */ 

(function EventOpcode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventOpcode", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "value", $.Int32); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "displayName", $.String); 
    $.Field({Static:false, Public:false}, "dataReady", $.Boolean); 
    $.Field({Static:false, Public:false}, "pmReference", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
    $.Field({Static:false, Public:false}, "syncObject", $.Object); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Int32);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventTask */ 

(function EventTask$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventTask", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $asm09.TypeRef("System.Guid")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EventGuid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "value", $.Int32); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "displayName", $.String); 
    $.Field({Static:false, Public:false}, "guid", $asm09.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false}, "dataReady", $.Boolean); 
    $.Field({Static:false, Public:false}, "pmReference", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
    $.Field({Static:false, Public:false}, "syncObject", $.Object); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Int32);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:true }, "EventGuid", $asm09.TypeRef("System.Guid"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogException */ 

(function EventLogException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Exception"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Exception")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "errorCode", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.ImplementInterfaces(
      /* 2 */ $asm09.TypeRef("System.Runtime.Serialization.ISerializable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogNotFoundException */ 

(function EventLogNotFoundException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogNotFoundException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Exception")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogReadingException */ 

(function EventLogReadingException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogReadingException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Exception")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException */ 

(function EventLogProviderDisabledException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Exception")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogInvalidDataException */ 

(function EventLogInvalidDataException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogInvalidDataException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Exception")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogInformation */ 

(function EventLogInformation$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), $.String, 
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.PathType")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_CreationTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.DateTime")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_FileSize", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IsLogFull", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Boolean]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_LastAccessTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.DateTime")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_LastWriteTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.DateTime")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_OldestRecordNumber", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_RecordCount", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "creationTime", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.DateTime")])); 
    $.Field({Static:false, Public:false}, "lastAccessTime", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.DateTime")])); 
    $.Field({Static:false, Public:false}, "lastWriteTime", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.DateTime")])); 
    $.Field({Static:false, Public:false}, "fileSize", $asm09.TypeRef("System.Nullable`1", [$.Int64])); 
    $.Field({Static:false, Public:false}, "fileAttributes", $asm09.TypeRef("System.Nullable`1", [$.Int32])); 
    $.Field({Static:false, Public:false}, "recordCount", $asm09.TypeRef("System.Nullable`1", [$.Int64])); 
    $.Field({Static:false, Public:false}, "oldestRecordNumber", $asm09.TypeRef("System.Nullable`1", [$.Int64])); 
    $.Field({Static:false, Public:false}, "isLogFull", $asm09.TypeRef("System.Nullable`1", [$.Boolean])); 
    $.Property({Static:false, Public:true }, "CreationTime", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "LastAccessTime", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "LastWriteTime", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "FileSize", $asm09.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true }, "Attributes", $asm09.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "RecordCount", $asm09.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true }, "OldestRecordNumber", $asm09.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true }, "IsLogFull", $asm09.TypeRef("System.Nullable`1", [$.Boolean]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.NativeWrapper */ 

(function NativeWrapper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.NativeWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "EvtArchiveExportedLog", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.Int32, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtCancel", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtClearLog", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtClose", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtCreateBookmark", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtExportLog", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.String, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtFormatMessage", 
      new JSIL.MethodSignature($.String, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.UInt32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtFormatMessageFormatDescription", 
      new JSIL.MethodSignature($.String, [
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetObjectArrayProperty", 
      new JSIL.MethodSignature($.Object, [
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetObjectArraySize", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtNext", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.IntPtr")]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtNextChannelPath", 
      new JSIL.MethodSignature($.String, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtNextEventMetadata", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtNextPublisherId", 
      new JSIL.MethodSignature($.String, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenChannelConfig", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenChannelEnum", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenEventMetadataEnum", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenLog", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.PathType")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenProviderEnum", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenProviderMetadata", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtQuery", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtRenderBookmark", 
      new JSIL.MethodSignature($.String, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtRenderBufferWithContextUserOrValues", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$.Object]), [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtSaveChannelConfig", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtSubscribe", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"), 
          $.String, $.String, 
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm09.TypeRef("System.IntPtr"), 
          $asm09.TypeRef("System.IntPtr"), $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtUpdateBookmark", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_platformNotSupported", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.NativeWrapper/SystemProperties */ 

(function SystemProperties$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.NativeWrapper/SystemProperties", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "filled", $.Boolean); 
    $.Field({Static:false, Public:true }, "Id", $asm09.TypeRef("System.Nullable`1", [$.UInt16])); 
    $.Field({Static:false, Public:true }, "Version", $asm09.TypeRef("System.Nullable`1", [$.Byte])); 
    $.Field({Static:false, Public:true }, "Qualifiers", $asm09.TypeRef("System.Nullable`1", [$.UInt16])); 
    $.Field({Static:false, Public:true }, "Level", $asm09.TypeRef("System.Nullable`1", [$.Byte])); 
    $.Field({Static:false, Public:true }, "Task", $asm09.TypeRef("System.Nullable`1", [$.UInt16])); 
    $.Field({Static:false, Public:true }, "Opcode", $asm09.TypeRef("System.Nullable`1", [$.Byte])); 
    $.Field({Static:false, Public:true }, "Keywords", $asm09.TypeRef("System.Nullable`1", [$.UInt64])); 
    $.Field({Static:false, Public:true }, "RecordId", $asm09.TypeRef("System.Nullable`1", [$.UInt64])); 
    $.Field({Static:false, Public:true }, "ProviderName", $.String); 
    $.Field({Static:false, Public:true }, "ProviderId", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Guid")])); 
    $.Field({Static:false, Public:true }, "ChannelName", $.String); 
    $.Field({Static:false, Public:true }, "ProcessId", $asm09.TypeRef("System.Nullable`1", [$.UInt32])); 
    $.Field({Static:false, Public:true }, "ThreadId", $asm09.TypeRef("System.Nullable`1", [$.UInt32])); 
    $.Field({Static:false, Public:true }, "ComputerName", $.String); 
    $.Field({Static:false, Public:true }, "UserId", $asm09.TypeRef("System.Security.Principal.SecurityIdentifier")); 
    $.Field({Static:false, Public:true }, "TimeCreated", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.DateTime")])); 
    $.Field({Static:false, Public:true }, "ActivityId", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Guid")])); 
    $.Field({Static:false, Public:true }, "RelatedActivityId", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Guid")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.ProviderMetadata */ 

(function ProviderMetadata$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.ProviderMetadata", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), 
          $asm09.TypeRef("System.Globalization.CultureInfo")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), 
          $asm09.TypeRef("System.Globalization.CultureInfo"), $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckReleased", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "FindStandardKeywordDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindStandardLevelDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindStandardOpcodeDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindStandardTaskDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $.UInt32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Events", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventMetadata")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HelpLink", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Uri"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Keywords", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Levels", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogLinks", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MessageFilePath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Opcodes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParameterFilePath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProviderMessageID", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResourceFilePath", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Tasks", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")]), [], [])
    );

    $.Field({Static:false, Public:false}, "handle", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
    $.Field({Static:false, Public:false}, "defaultProviderHandle", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")); 
    $.Field({Static:false, Public:false}, "session", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")); 
    $.Field({Static:false, Public:false}, "providerName", $.String); 
    $.Field({Static:false, Public:false}, "cultureInfo", $asm09.TypeRef("System.Globalization.CultureInfo")); 
    $.Field({Static:false, Public:false}, "logFilePath", $.String); 
    $.Field({Static:false, Public:false}, "levels", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")])); 
    $.Field({Static:false, Public:false}, "opcodes", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")])); 
    $.Field({Static:false, Public:false}, "tasks", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")])); 
    $.Field({Static:false, Public:false}, "keywords", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")])); 
    $.Field({Static:false, Public:false}, "standardLevels", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")])); 
    $.Field({Static:false, Public:false}, "standardOpcodes", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")])); 
    $.Field({Static:false, Public:false}, "standardTasks", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")])); 
    $.Field({Static:false, Public:false}, "standardKeywords", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")])); 
    $.Field({Static:false, Public:false}, "channelReferences", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink")])); 
    $.Field({Static:false, Public:false}, "syncObject", $.Object); 
    $.Property({Static:false, Public:false}, "Handle", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Id", $asm09.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "MessageFilePath", $.String);

    $.Property({Static:false, Public:true }, "ResourceFilePath", $.String);

    $.Property({Static:false, Public:true }, "ParameterFilePath", $.String);

    $.Property({Static:false, Public:true }, "HelpLink", $asm0B.TypeRef("System.Uri"));

    $.Property({Static:false, Public:false}, "ProviderMessageID", $.UInt32);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:true }, "LogLinks", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink")]));

    $.Property({Static:false, Public:true }, "Levels", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")]));

    $.Property({Static:false, Public:true }, "Opcodes", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")]));

    $.Property({Static:false, Public:true }, "Keywords", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]));

    $.Property({Static:false, Public:true }, "Tasks", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")]));

    $.Property({Static:false, Public:true }, "Events", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventMetadata")]));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.Eventing.Reader.ProviderMetadata/ObjectTypeName */ 

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.ProviderMetadata/ObjectTypeName", false, {
    Level: 0, 
    Opcode: 1, 
    Task: 2, 
    Keyword: 3
  }, false
);

/* class System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation */ 

(function ProviderMetadataCachedInformation$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), $.String, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCacheEntry", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/ProviderMetadataId"), $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeleteCacheEntry", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/ProviderMetadataId")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushOldestEntry", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetFormatDescription", 
      new JSIL.MethodSignature($.String, [$.String, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetFormatDescription", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetKeywordDisplayNames", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [$.String, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetLevelDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetOpcodeDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetProviderMetadata", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"), [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/ProviderMetadataId")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTaskDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IsCacheFull", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsProviderinCache", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/ProviderMetadataId")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateCacheValueInfoForHit", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/CacheItem")], [])
    );

    $.Field({Static:false, Public:false}, "cache", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/ProviderMetadataId"), $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/CacheItem")])); 
    $.Field({Static:false, Public:false}, "maximumCacheSize", $.Int32); 
    $.Field({Static:false, Public:false}, "session", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")); 
    $.Field({Static:false, Public:false}, "logfile", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/ProviderMetadataId */ 

(function ProviderMetadataId$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/ProviderMetadataId", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Globalization.CultureInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_TheCultureInfo", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Globalization.CultureInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false}, "providerName", $.String); 
    $.Field({Static:false, Public:false}, "cultureInfo", $asm09.TypeRef("System.Globalization.CultureInfo")); 
    $.Property({Static:false, Public:true }, "ProviderName", $.String);

    $.Property({Static:false, Public:true }, "TheCultureInfo", $asm09.TypeRef("System.Globalization.CultureInfo"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/CacheItem */ 

(function CacheItem$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation/CacheItem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderMetadata", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_TheTime", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_TheTime", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.DateTime")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "pm", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")); 
    $.Field({Static:false, Public:false}, "theTime", $asm09.TypeRef("System.DateTime")); 
    $.Property({Static:false, Public:true }, "TheTime", $asm09.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "ProviderMetadata", $asm0D.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.Eventing.Reader.StandardEventLevel */ 

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.StandardEventLevel", true, {
    LogAlways: 0, 
    Critical: 1, 
    Error: 2, 
    Warning: 3, 
    Informational: 4, 
    Verbose: 5
  }, false
);

/* enum System.Diagnostics.Eventing.Reader.StandardEventTask */ 

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.StandardEventTask", true, {
    None: 0
  }, false
);

/* enum System.Diagnostics.Eventing.Reader.StandardEventOpcode */ 

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.StandardEventOpcode", true, {
    Info: 0, 
    Start: 1, 
    Stop: 2, 
    DataCollectionStart: 3, 
    DataCollectionStop: 4, 
    Extension: 5, 
    Reply: 6, 
    Resume: 7, 
    Suspend: 8, 
    Send: 9, 
    Receive: 240
  }, false
);

/* enum System.Diagnostics.Eventing.Reader.StandardEventKeywords */ 

JSIL.MakeEnum(
  "System.Diagnostics.Eventing.Reader.StandardEventKeywords", true, {
    None: 0, 
    WdiContext: 562949953421312, 
    WdiDiagnostic: 1125899906842624, 
    Sqm: 2251799813685248, 
    AuditFailure: 4503599627370496, 
    CorrelationHint: 4503599627370496, 
    AuditSuccess: 9007199254740992, 
    EventLogClassic: 36028797018963968
  }, true
);

JSIL.DeclareNamespace("System.Linq");
JSIL.DeclareNamespace("System.Linq.Expressions");
/* class System.Linq.Expressions.OldExpressionVisitor */ 

(function OldExpressionVisitor$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.OldExpressionVisitor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Visit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBinary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBinding", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberBinding"), [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBindingList", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")]), [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConditional", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ConditionalExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ConstantExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitElementInitializer", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ElementInit"), [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitElementInitializerList", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")]), [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitExpressionList", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitInvocation", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.InvocationExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitListInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ListInitExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberAccess", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.MemberExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberAssignment", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm0D.TypeRef("System.Linq.Expressions.MemberAssignment")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.MemberInitExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberListBinding", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm0D.TypeRef("System.Linq.Expressions.MemberListBinding")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberMemberBinding", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm0D.TypeRef("System.Linq.Expressions.MemberMemberBinding")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMethodCall", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNew", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.NewExpression"), [$asm0D.TypeRef("System.Linq.Expressions.NewExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNewArray", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.NewArrayExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTypeIs", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.TypeBinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUnary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Strings */ 

(function Strings$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Expressions.Strings", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "AmbiguousJump", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AmbiguousMatchInExpandoObject", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMemberNotDeclOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentTypeDoesNotMatchMember", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BinaryOperatorNotDefined", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BinderNotCompatibleWithCallSite", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeElementThroughProperty", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeMemberThroughProperty", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCloseOverByRef", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCompileConstant", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CoercionOperatorNotDefined", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DuplicateVariable", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicBinderResultNotAssignable", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicBindingNeedsRestrictions", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicObjectResultNotAssignable", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object, $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodNoRefOutParam", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EqualityMustReturnBoolean", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeCannotInitializeArrayType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchAssignment", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchConstructorParameter", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchLabel", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchMethodParameter", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchParameter", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchReturn", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeNotInvocable", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExtensionNodeMustOverrideProperty", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldInfoNotDefinedForType", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenericMethodWithArgsDoesNotExistOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AccessorsCannotHaveByRefArgs", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AccessorsCannotHaveVarArgs", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AllCaseBodiesMustHaveSameType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AllTestValuesMustHaveSameType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgCntMustBeGreaterThanNameCnt", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentCannotBeOfTypeVoid", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeArray", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeArrayIndexType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeBoolean", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeFieldInfoOrPropertInfo", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeFieldInfoOrPropertInfoOrMethod", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeInstanceMember", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeInteger", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeSingleDimensionalArrayType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustNotHaveValueType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentTypeCannotBeVoid", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentTypesMustMatch", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArrayTypeMustBeArray", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BindingCannotBeNull", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BodyOfCatchMustHaveSameTypeAsBodyOfTry", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BothAccessorsMustBeStatic", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BoundsCannotBeLessThanOne", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CannotCompileDynamic", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CoalesceUsedOnNonNullType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CollectionModifiedWhileEnumerating", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CollectionReadOnly", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ControlCannotEnterExpression", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ControlCannotEnterTry", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ControlCannotLeaveFilterTest", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ControlCannotLeaveFinally", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ConversionIsNotSupportedForArithmeticTypes", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CountCannotBeNegative", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultBodyMustBeSupplied", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ElementInitializerMethodNotAdd", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ElementInitializerMethodStatic", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ElementInitializerMethodWithZeroArgs", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EnumerationIsDone", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ExpressionMustBeReadable", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ExpressionMustBeWriteable", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ExtensionNotReduced", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FaultCannotHaveCatchOrFinally", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FirstArgumentMustBeCallSite", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_HomogenousAppDomainRequired", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfArgumentsForMembers", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfConstructorArguments", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfIndexes", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfLambdaArguments", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfLambdaDeclarationParameters", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfMembersForGivenConstructor", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfTypeArgsForAction", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfTypeArgsForFunc", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IndexesOfSetGetMustMatch", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidArgumentValue", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidAsmNameOrExtension", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidOutputDir", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidUnboxType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LabelMustBeVoidOrHaveExpression", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LabelTypeMustBeVoid", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LambdaTypeMustBeDerivedFromSystemDelegate", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ListInitializerWithZeroMembers", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MethodBuilderDoesNotHaveTypeBuilder", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MethodPreconditionViolated", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustBeReducible", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustReduceToDifferent", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NonEmptyCollectionRequired", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoOrInvalidRuleProduced", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OnlyStaticFieldsHaveNullInstance", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OnlyStaticMethodsHaveNullInstance", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OnlyStaticPropertiesHaveNullInstance", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PdbGeneratorNeedsExpressionCompiler", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PropertyCannotHaveRefType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PropertyTyepMustMatchSetter", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PropertyTypeCannotBeVoid", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_QueueEmpty", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_QuotedExpressionMustBeLambda", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ReducedNotCompatible", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ReducibleMustOverrideReduce", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RethrowRequiresCatch", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SetterHasNoParams", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SetterMustBeVoid", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_StartEndMustBeOrdered", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TryMustHaveCatchFinallyOrFault", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TryNotAllowedInFilter", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypeDoesNotHaveConstructorForTheSignature", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypeMustBeDerivedFromSystemDelegate", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_TypeMustNotBeByRef", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnexpectedCoalesceOperator", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnhandledBinding", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnknownBindingType", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IllegalNewGenericParams", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfMethodCallArguments", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectTypeForTypeAs", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstanceAndMethodTypeMismatch", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstanceFieldNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstancePropertyNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstancePropertyWithoutParameterNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstancePropertyWithSpecifiedParametersNotDefinedForType", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCast", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidLvalue", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMemberType", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMetaObjectCreated", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidNullValue", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidObjectType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOperation", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "KeyDoesNotExistInExpando", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LabelTargetAlreadyDefined", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LabelTargetUndefined", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LogicalOperatorMustHaveBooleanOperators", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MemberNotFieldOrProperty", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodContainsGenericParameters", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodDoesNotExistOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodIsGeneric", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodNotPropertyAccessor", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithArgsDoesNotExistOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithMoreThanOneMatch", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteChildToSameType", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteToSameNode", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteWithoutMethod", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NonLocalJumpWithValue", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotAMemberOfType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperandTypesDoNotMatchParameters", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperatorNotImplementedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OutOfRange", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OverloadOperatorTypeDoesNotMatchConversionType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterExpressionNotValidAsDelegate", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveAccessor", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveGetter", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveSetter", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyWithMoreThanOneMatch", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReferenceEqualityNotDefined", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SameKeyExistsInExpando", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SwitchValueTypeDoesNotMatchComparisonMethodParameter", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TestValueTypeDoesNotMatchComparisonMethodParameter", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryNotSupportedForMethodsWithRefArgs", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryNotSupportedForValueTypeInstances", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeContainsGenericParameters", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeIsGeneric", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeMissingDefaultConstructor", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeNotIEnumerable", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeParameterIsNotDelegate", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnaryOperatorNotDefined", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UndefinedVariable", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedVarArgsCall", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBinary", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBindingType", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledConvert", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledExpressionType", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledUnary", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnknownLiftType", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustBeStatic", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustNotBeVoid", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOpMustHaveConsistentTypes", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOpMustHaveValidReturnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "VariableMustNotBeByRef", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.Property({Static:true , Public:false}, "MethodPreconditionViolated", $.String);

    $.Property({Static:true , Public:false}, "InvalidArgumentValue", $.String);

    $.Property({Static:true , Public:false}, "NonEmptyCollectionRequired", $.String);

    $.Property({Static:true , Public:false}, "ArgCntMustBeGreaterThanNameCnt", $.String);

    $.Property({Static:true , Public:false}, "ReducibleMustOverrideReduce", $.String);

    $.Property({Static:true , Public:false}, "MustReduceToDifferent", $.String);

    $.Property({Static:true , Public:false}, "ReducedNotCompatible", $.String);

    $.Property({Static:true , Public:false}, "SetterHasNoParams", $.String);

    $.Property({Static:true , Public:false}, "PropertyCannotHaveRefType", $.String);

    $.Property({Static:true , Public:false}, "IndexesOfSetGetMustMatch", $.String);

    $.Property({Static:true , Public:false}, "AccessorsCannotHaveVarArgs", $.String);

    $.Property({Static:true , Public:false}, "AccessorsCannotHaveByRefArgs", $.String);

    $.Property({Static:true , Public:false}, "BoundsCannotBeLessThanOne", $.String);

    $.Property({Static:true , Public:false}, "TypeMustNotBeByRef", $.String);

    $.Property({Static:true , Public:false}, "TypeDoesNotHaveConstructorForTheSignature", $.String);

    $.Property({Static:true , Public:false}, "CountCannotBeNegative", $.String);

    $.Property({Static:true , Public:false}, "ArrayTypeMustBeArray", $.String);

    $.Property({Static:true , Public:false}, "SetterMustBeVoid", $.String);

    $.Property({Static:true , Public:false}, "PropertyTyepMustMatchSetter", $.String);

    $.Property({Static:true , Public:false}, "BothAccessorsMustBeStatic", $.String);

    $.Property({Static:true , Public:false}, "OnlyStaticFieldsHaveNullInstance", $.String);

    $.Property({Static:true , Public:false}, "OnlyStaticPropertiesHaveNullInstance", $.String);

    $.Property({Static:true , Public:false}, "OnlyStaticMethodsHaveNullInstance", $.String);

    $.Property({Static:true , Public:false}, "PropertyTypeCannotBeVoid", $.String);

    $.Property({Static:true , Public:false}, "InvalidUnboxType", $.String);

    $.Property({Static:true , Public:false}, "ExpressionMustBeReadable", $.String);

    $.Property({Static:true , Public:false}, "ExpressionMustBeWriteable", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustNotHaveValueType", $.String);

    $.Property({Static:true , Public:false}, "MustBeReducible", $.String);

    $.Property({Static:true , Public:false}, "AllTestValuesMustHaveSameType", $.String);

    $.Property({Static:true , Public:false}, "AllCaseBodiesMustHaveSameType", $.String);

    $.Property({Static:true , Public:false}, "DefaultBodyMustBeSupplied", $.String);

    $.Property({Static:true , Public:false}, "MethodBuilderDoesNotHaveTypeBuilder", $.String);

    $.Property({Static:true , Public:false}, "TypeMustBeDerivedFromSystemDelegate", $.String);

    $.Property({Static:true , Public:false}, "ArgumentTypeCannotBeVoid", $.String);

    $.Property({Static:true , Public:false}, "LabelMustBeVoidOrHaveExpression", $.String);

    $.Property({Static:true , Public:false}, "LabelTypeMustBeVoid", $.String);

    $.Property({Static:true , Public:false}, "QuotedExpressionMustBeLambda", $.String);

    $.Property({Static:true , Public:false}, "StartEndMustBeOrdered", $.String);

    $.Property({Static:true , Public:false}, "FaultCannotHaveCatchOrFinally", $.String);

    $.Property({Static:true , Public:false}, "TryMustHaveCatchFinallyOrFault", $.String);

    $.Property({Static:true , Public:false}, "BodyOfCatchMustHaveSameTypeAsBodyOfTry", $.String);

    $.Property({Static:true , Public:false}, "ConversionIsNotSupportedForArithmeticTypes", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeArray", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeBoolean", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfo", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeInstanceMember", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeInteger", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeArrayIndexType", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeSingleDimensionalArrayType", $.String);

    $.Property({Static:true , Public:false}, "ArgumentTypesMustMatch", $.String);

    $.Property({Static:true , Public:false}, "CoalesceUsedOnNonNullType", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfIndexes", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfLambdaArguments", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfLambdaDeclarationParameters", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfConstructorArguments", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfMembersForGivenConstructor", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfArgumentsForMembers", $.String);

    $.Property({Static:true , Public:false}, "LambdaTypeMustBeDerivedFromSystemDelegate", $.String);

    $.Property({Static:true , Public:false}, "ListInitializerWithZeroMembers", $.String);

    $.Property({Static:true , Public:false}, "ElementInitializerMethodNotAdd", $.String);

    $.Property({Static:true , Public:false}, "ElementInitializerMethodWithZeroArgs", $.String);

    $.Property({Static:true , Public:false}, "ElementInitializerMethodStatic", $.String);

    $.Property({Static:true , Public:false}, "UnexpectedCoalesceOperator", $.String);

    $.Property({Static:true , Public:false}, "UnhandledBinding", $.String);

    $.Property({Static:true , Public:false}, "UnknownBindingType", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForFunc", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForAction", $.String);

    $.Property({Static:true , Public:false}, "ArgumentCannotBeOfTypeVoid", $.String);

    $.Property({Static:true , Public:false}, "NoOrInvalidRuleProduced", $.String);

    $.Property({Static:true , Public:false}, "FirstArgumentMustBeCallSite", $.String);

    $.Property({Static:true , Public:false}, "BindingCannotBeNull", $.String);

    $.Property({Static:true , Public:false}, "QueueEmpty", $.String);

    $.Property({Static:true , Public:false}, "ControlCannotLeaveFinally", $.String);

    $.Property({Static:true , Public:false}, "ControlCannotLeaveFilterTest", $.String);

    $.Property({Static:true , Public:false}, "ControlCannotEnterTry", $.String);

    $.Property({Static:true , Public:false}, "ControlCannotEnterExpression", $.String);

    $.Property({Static:true , Public:false}, "ExtensionNotReduced", $.String);

    $.Property({Static:true , Public:false}, "CannotCompileDynamic", $.String);

    $.Property({Static:true , Public:false}, "InvalidOutputDir", $.String);

    $.Property({Static:true , Public:false}, "InvalidAsmNameOrExtension", $.String);

    $.Property({Static:true , Public:false}, "CollectionReadOnly", $.String);

    $.Property({Static:true , Public:false}, "RethrowRequiresCatch", $.String);

    $.Property({Static:true , Public:false}, "TryNotAllowedInFilter", $.String);

    $.Property({Static:true , Public:false}, "CollectionModifiedWhileEnumerating", $.String);

    $.Property({Static:true , Public:false}, "EnumerationIsDone", $.String);

    $.Property({Static:true , Public:false}, "HomogenousAppDomainRequired", $.String);

    $.Property({Static:true , Public:false}, "PdbGeneratorNeedsExpressionCompiler", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Error */ 

(function Error$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Expressions.Error", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "AccessorsCannotHaveByRefArgs", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AccessorsCannotHaveVarArgs", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AmbiguousJump", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AmbiguousMatchInExpandoObject", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgCntMustBeGreaterThanNameCnt", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentCannotBeOfTypeVoid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMemberNotDeclOnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeArray", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeArrayIndexType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeBoolean", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfo", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeInstanceMember", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeInteger", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeSingleDimensionalArrayType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustNotHaveValueType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNull", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentOutOfRange", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentTypeCannotBeVoid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentTypeDoesNotMatchMember", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentTypesMustMatch", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArrayTypeMustBeArray", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BinaryOperatorNotDefined", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BinderNotCompatibleWithCallSite", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BindingCannotBeNull", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BodyOfCatchMustHaveSameTypeAsBodyOfTry", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BothAccessorsMustBeStatic", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BoundsCannotBeLessThanOne", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeElementThroughProperty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeMemberThroughProperty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCloseOverByRef", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCompileConstant", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCompileDynamic", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CoalesceUsedOnNonNullType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CoercionOperatorNotDefined", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionModifiedWhileEnumerating", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CollectionReadOnly", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ControlCannotEnterExpression", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ControlCannotEnterTry", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ControlCannotLeaveFilterTest", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ControlCannotLeaveFinally", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConversionIsNotSupportedForArithmeticTypes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CountCannotBeNegative", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DefaultBodyMustBeSupplied", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DuplicateVariable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicBinderResultNotAssignable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicBindingNeedsRestrictions", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DynamicObjectResultNotAssignable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object, $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodNoRefOutParam", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodNotAdd", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodStatic", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodWithZeroArgs", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EnumerationIsDone", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EqualityMustReturnBoolean", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeCannotInitializeArrayType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchAssignment", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchConstructorParameter", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchLabel", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchMethodParameter", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchParameter", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchReturn", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeNotInvocable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExtensionNodeMustOverrideProperty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExtensionNotReduced", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FaultCannotHaveCatchOrFinally", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldInfoNotDefinedForType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldNotDefinedForType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FirstArgumentMustBeCallSite", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenericMethodWithArgsDoesNotExistOnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HomogenousAppDomainRequired", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IllegalNewGenericParams", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfArgumentsForMembers", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfConstructorArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfIndexes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfLambdaArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfLambdaDeclarationParameters", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfMembersForGivenConstructor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfMethodCallArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForAction", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForFunc", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectTypeForTypeAs", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IndexesOfSetGetMustMatch", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstanceAndMethodTypeMismatch", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstanceFieldNotDefinedForType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstancePropertyNotDefinedForType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstancePropertyWithoutParameterNotDefinedForType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InstancePropertyWithSpecifiedParametersNotDefinedForType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidAsmNameOrExtension", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCast", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidLvalue", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMemberType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidMetaObjectCreated", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOperation", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidOutputDir", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidUnboxType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "KeyDoesNotExistInExpando", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LabelMustBeVoidOrHaveExpression", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LabelTargetAlreadyDefined", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LabelTargetUndefined", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LabelTypeMustBeVoid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LambdaTypeMustBeDerivedFromSystemDelegate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ListInitializerWithZeroMembers", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LogicalOperatorMustHaveBooleanOperators", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MemberNotFieldOrProperty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodBuilderDoesNotHaveTypeBuilder", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodContainsGenericParameters", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodDoesNotExistOnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodIsGeneric", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodNotPropertyAccessor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithArgsDoesNotExistOnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithMoreThanOneMatch", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustBeReducible", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustReduceToDifferent", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteChildToSameType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteToSameNode", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MustRewriteWithoutMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NonLocalJumpWithValue", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoOrInvalidRuleProduced", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotAMemberOfType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotImplemented", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupported", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OnlyStaticMethodsHaveNullInstance", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperandTypesDoNotMatchParameters", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperatorNotImplementedForType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OutOfRange", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OverloadOperatorTypeDoesNotMatchConversionType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterExpressionNotValidAsDelegate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PdbGeneratorNeedsExpressionCompiler", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyCannotHaveRefType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveAccessor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveGetter", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveSetter", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyNotDefinedForType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyTyepMustMatchSetter", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyTypeCannotBeVoid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyWithMoreThanOneMatch", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "QueueEmpty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "QuotedExpressionMustBeLambda", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReducedNotCompatible", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReducibleMustOverrideReduce", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReferenceEqualityNotDefined", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RethrowRequiresCatch", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SameKeyExistsInExpando", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetterHasNoParams", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetterMustBeVoid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StartEndMustBeOrdered", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SwitchValueTypeDoesNotMatchComparisonMethodParameter", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TestValueTypeDoesNotMatchComparisonMethodParameter", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryMustHaveCatchFinallyOrFault", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryNotAllowedInFilter", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryNotSupportedForMethodsWithRefArgs", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryNotSupportedForValueTypeInstances", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeContainsGenericParameters", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeDoesNotHaveConstructorForTheSignature", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeIsGeneric", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeMissingDefaultConstructor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeMustBeDerivedFromSystemDelegate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeMustNotBeByRef", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeNotIEnumerable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeParameterIsNotDelegate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnaryOperatorNotDefined", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UndefinedVariable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedCoalesceOperator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedVarArgsCall", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBinary", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBinding", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBindingType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledConvert", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledExpressionType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledUnary", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnknownBindingType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnknownLiftType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustBeStatic", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustNotBeVoid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOpMustHaveConsistentTypes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOpMustHaveValidReturnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "VariableMustNotBeByRef", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Linq.IQueryable */ 

JSIL.MakeInterface(
  "System.Linq.IQueryable", true, [], function ($) {
    $.Method({}, "get_Expression", new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], []));
    $.Method({}, "get_ElementType", new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], []));
    $.Method({}, "get_Provider", new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryProvider"), [], []));
    $.Property({}, "Expression");
    $.Property({}, "ElementType");
    $.Property({}, "Provider");
  }, [$asm09.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Linq.IQueryable`1 */ 

JSIL.MakeInterface(
  "System.Linq.IQueryable`1", true, ["out T"], function ($) {
  }, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.IQueryable`1").out()]), $asm0D.TypeRef("System.Linq.IQueryable"), $asm09.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Linq.IQueryProvider */ 

JSIL.MakeInterface(
  "System.Linq.IQueryProvider", true, [], function ($) {
    $.Method({}, "CreateQuery", new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable"), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], []));
    $.Method({}, "CreateQuery", new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], ["TElement"]));
    $.Method({}, "Execute", new JSIL.MethodSignature($.Object, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], []));
    $.Method({}, "Execute", new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.Expressions.Expression")], ["TResult"]));
  }, []);

/* interface System.Linq.IOrderedQueryable */ 

JSIL.MakeInterface(
  "System.Linq.IOrderedQueryable", true, [], function ($) {
  }, [$asm0D.TypeRef("System.Linq.IQueryable"), $asm09.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Linq.IOrderedQueryable`1 */ 

JSIL.MakeInterface(
  "System.Linq.IOrderedQueryable`1", true, ["out T"], function ($) {
  }, [$asm0D.TypeRef("System.Linq.IQueryable`1", [new JSIL.GenericParameter("T", "System.Linq.IOrderedQueryable`1").out()]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.IOrderedQueryable`1").out()]), $asm0D.TypeRef("System.Linq.IOrderedQueryable"), $asm0D.TypeRef("System.Linq.IQueryable"), $asm09.TypeRef("System.Collections.IEnumerable")]);

/* class System.Linq.Queryable */ 

(function Queryable$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Queryable", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
              "!!0", "!!0", 
              "!!0"
            ])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!1", [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!1", 
          $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
                "!!1", "!!0", 
                "!!1"
              ])])
        ], ["TSource", "TAccumulate"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!2", [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!1", 
          $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
                "!!1", "!!0", 
                "!!1"
              ])]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!1", "!!2"])])
        ], ["TSource", "TAccumulate", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "All", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsQueryable", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TElement"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsQueryable", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable"), [$asm09.TypeRef("System.Collections.IEnumerable")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.IQueryable`1", [$.Int32])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.IQueryable`1", [$asm09.TypeRef("System.Nullable`1", [$.Int32])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.IQueryable`1", [$.Int64])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.IQueryable`1", [$asm09.TypeRef("System.Nullable`1", [$.Int64])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm0D.TypeRef("System.Linq.IQueryable`1", [$.Single])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm0D.TypeRef("System.Linq.IQueryable`1", [$asm09.TypeRef("System.Nullable`1", [$.Single])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.IQueryable`1", [$.Double])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.IQueryable`1", [$asm09.TypeRef("System.Nullable`1", [$.Double])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm0D.TypeRef("System.Linq.IQueryable`1", [$asm09.TypeRef("System.Decimal")])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm0D.TypeRef("System.Linq.IQueryable`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Int32])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int32])])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Single])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Single])])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Int64])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int64])])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Double])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Double])])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Cast", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable")], ["TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!0", 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAt", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAtOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetSourceExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!2"])])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
                "!!1", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
                "!!3"
              ])])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
                "!!1", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
                "!!2"
              ])])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
                "!!1", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
                "!!2"
              ])]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
                "!!1", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
                "!!3"
              ])]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
                "!!0", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
                "!!3"
              ])])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
                "!!0", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
                "!!3"
              ])]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!3"
              ])])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!3"
              ])]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!1", [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!1", [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OfType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable")], ["TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm09.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm09.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Reverse", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              "!!1"
            ])])], ["TSource", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])])], ["TSource", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
            ])])], ["TSource", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
                "!!0", $.Int32, 
                $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
              ])]), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!2"
              ])])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])]), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!2"
              ])])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Skip", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $.Boolean
            ])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.IQueryable`1", [$.Int32])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [$asm0D.TypeRef("System.Linq.IQueryable`1", [$asm09.TypeRef("System.Nullable`1", [$.Int32])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm0D.TypeRef("System.Linq.IQueryable`1", [$.Int64])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [$asm0D.TypeRef("System.Linq.IQueryable`1", [$asm09.TypeRef("System.Nullable`1", [$.Int64])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm0D.TypeRef("System.Linq.IQueryable`1", [$.Single])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm0D.TypeRef("System.Linq.IQueryable`1", [$asm09.TypeRef("System.Nullable`1", [$.Single])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.IQueryable`1", [$.Double])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.IQueryable`1", [$asm09.TypeRef("System.Nullable`1", [$.Double])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm0D.TypeRef("System.Linq.IQueryable`1", [$asm09.TypeRef("System.Decimal")])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm0D.TypeRef("System.Linq.IQueryable`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Int32])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int32])])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Int64])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int64])])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Single])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Single])])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Double])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Double])])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Take", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $.Boolean
            ])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm0D.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm09.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm0D.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm09.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $.Boolean
            ])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Zip", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression`1", [$asm09.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!2"
              ])])
        ], ["TFirst", "TSecond", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Linq.Enumerable */ 

(function Enumerable$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Enumerable", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
            "!!0", "!!0", 
            "!!0"
          ])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!1", [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!1", 
          $asm09.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ])
        ], ["TSource", "TAccumulate"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!2", [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!1", 
          $asm09.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ]), $asm09.TypeRef("System.Func`2", ["!!1", "!!2"])
        ], ["TSource", "TAccumulate", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "All", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsEnumerable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Int32])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Int64])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Single])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Double])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Decimal")])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Cast", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CastIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CombinePredicates", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Func`2", ["!!0", $.Boolean]), [$asm09.TypeRef("System.Func`2", ["!!0", $.Boolean]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CombineSelectors", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), $asm09.TypeRef("System.Func`2", ["!!1", "!!2"])], ["TSource", "TMiddle", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ConcatIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0", 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DefaultIfEmptyIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DistinctIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "ElementAt", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAtOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Empty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ExceptIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!1", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
              "!!2"
            ])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`3", [
              "!!1", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
              "!!3"
            ])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!1", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
              "!!2"
            ]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`3", [
              "!!1", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
              "!!3"
            ]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GroupJoinIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IntersectIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "JoinIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Int32])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int64, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Int64])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Double, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Double])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Single, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Single])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Decimal")])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int64, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Single, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Double, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!1", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Int32])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int64, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Int64])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Single, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Single])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Double, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Double])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Decimal")])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int64, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Single, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Double, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!1", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OfType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OfTypeIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Range", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RangeIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Repeat", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), ["!!0", $.Int32], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "RepeatIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), ["!!0", $.Int32], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Reverse", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ReverseIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            "!!1"
          ])], ["TSource", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SelectIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            "!!1"
          ])], ["TSource", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
          ])], ["TSource", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
            ]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])], ["TSource", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
          ])], ["TSource", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
            ]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Skip", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SkipIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SkipWhileIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SkipWhileIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Int32])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Int64])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Single])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Double])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Decimal")])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Take", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TakeIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TakeWhileIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "TakeWhileIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm0D.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm0D.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToList", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UnionIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WhereIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Zip", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TFirst", "TSecond", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ZipIterator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TFirst", "TSecond", "TResult"])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Linq.Enumerable/Iterator`1 */ 

(function Iterator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/Iterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(4, "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Reset");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1")]), [$asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1"), $.Boolean])], [])
    );

    $.Field({Static:false, Public:false}, "threadId", $.Int32); 
    $.Field({Static:false, Public:false}, "state", $.Int32); 
    $.Field({Static:false, Public:false}, "current", $.GenericParameter("TSource")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/Iterator`1")]), 
      /* 3 */ $asm09.TypeRef("System.IDisposable"), 
      /* 4 */ $asm09.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable/WhereEnumerableIterator`1 */ 

(function WhereEnumerableIterator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1")]), 
      Name: "System.Linq.Enumerable/WhereEnumerableIterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1"), $.Boolean])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1")]), [$asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereEnumerableIterator`1"), $.Boolean])], [])
    );

    $.Field({Static:false, Public:false}, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:false}, "predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:false}, "enumerator", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable/WhereArrayIterator`1 */ 

(function WhereArrayIterator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1")]), 
      Name: "System.Linq.Enumerable/WhereArrayIterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1"), $.Boolean])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1")]), [$asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereArrayIterator`1"), $.Boolean])], [])
    );

    $.Field({Static:false, Public:false}, "source", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:false}, "predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:false}, "index", $.Int32); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable/WhereListIterator`1 */ 

(function WhereListIterator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1")]), 
      Name: "System.Linq.Enumerable/WhereListIterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1"), $.Boolean])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1")]), [$asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereListIterator`1"), $.Boolean])], [])
    );

    $.Field({Static:false, Public:false}, "source", $asm09.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:false}, "predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:false}, "enumerator", $asm09.TypeRef("System.Collections.Generic.List`1/Enumerator", [$.GenericParameter("TSource")])); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable/WhereSelectEnumerableIterator`2 */ 

(function WhereSelectEnumerableIterator$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2")]), 
      Name: "System.Linq.Enumerable/WhereSelectEnumerableIterator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2"), $.Boolean]), 
          $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2"), new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2"), "!!0"])], ["TResult2"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2")]), [$asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectEnumerableIterator`2"), $.Boolean])], [])
    );

    $.Field({Static:false, Public:false}, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:false}, "predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:false}, "selector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])); 
    $.Field({Static:false, Public:false}, "enumerator", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable/WhereSelectArrayIterator`2 */ 

(function WhereSelectArrayIterator$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectArrayIterator`2")]), 
      Name: "System.Linq.Enumerable/WhereSelectArrayIterator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectArrayIterator`2")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectArrayIterator`2"), $.Boolean]), 
          $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectArrayIterator`2"), new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectArrayIterator`2")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectArrayIterator`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectArrayIterator`2"), "!!0"])], ["TResult2"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectArrayIterator`2")]), [$asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectArrayIterator`2"), $.Boolean])], [])
    );

    $.Field({Static:false, Public:false}, "source", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:false}, "predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:false}, "selector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])); 
    $.Field({Static:false, Public:false}, "index", $.Int32); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable/WhereSelectListIterator`2 */ 

(function WhereSelectListIterator$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectListIterator`2")]), 
      Name: "System.Linq.Enumerable/WhereSelectListIterator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectListIterator`2")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectListIterator`2"), $.Boolean]), 
          $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/WhereSelectListIterator`2"), new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectListIterator`2")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Enumerable/Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectListIterator`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectListIterator`2"), "!!0"])], ["TResult2"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectListIterator`2")]), [$asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/WhereSelectListIterator`2"), $.Boolean])], [])
    );

    $.Field({Static:false, Public:false}, "source", $asm09.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:false}, "predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:false}, "selector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])); 
    $.Field({Static:false, Public:false}, "enumerator", $asm09.TypeRef("System.Collections.Generic.List`1/Enumerator", [$.GenericParameter("TSource")])); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable/<WhereIterator>d__0`1 */ 

(function $lWhereIterator$gd__0$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<WhereIterator>d__0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally4", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<WhereIterator>d__0`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<WhereIterator>d__0`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "predicate", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ])); 
    $.Field({Static:false, Public:true }, "$predicate", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ])); 
    $.Field({Static:false, Public:true }, "index", $.Int32); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap3", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<WhereIterator>d__0`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<WhereIterator>d__0`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<WhereIterator>d__0`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<SelectIterator>d__7`2 */ 

(function $lSelectIterator$gd__7$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<SelectIterator>d__7`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finallyb", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectIterator>d__7`2")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectIterator>d__7`2"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "selector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "$selector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "index", $.Int32); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrapa", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectIterator>d__7`2"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectIterator>d__7`2")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectIterator>d__7`2")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<>c__DisplayClassf`1 */ 

(function $l$gc__DisplayClassf$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<>c__DisplayClassf`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:true }, "predicate1", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:true }, "predicate2", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<>c__DisplayClass12`3 */ 

(function $l$gc__DisplayClass12$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<>c__DisplayClass12`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TMiddle", "TResult"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:true }, "selector1", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TMiddle")])); 
    $.Field({Static:false, Public:true }, "selector2", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TMiddle"), $.GenericParameter("TResult")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<SelectManyIterator>d__14`2 */ 

(function $lSelectManyIterator$gd__14$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<SelectManyIterator>d__14`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally18", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1a", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__14`2")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__14`2"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "selector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])])); 
    $.Field({Static:false, Public:true }, "$selector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])])); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "subElement", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:true }, "$wrap17", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$wrap19", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__14`2"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__14`2")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__14`2")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<SelectManyIterator>d__1d`2 */ 

(function $lSelectManyIterator$gd__1d$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<SelectManyIterator>d__1d`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally22", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally24", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__1d`2")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__1d`2"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "selector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])
        ])); 
    $.Field({Static:false, Public:true }, "$selector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])
        ])); 
    $.Field({Static:false, Public:true }, "index$1e", $.Int32); 
    $.Field({Static:false, Public:true }, "element$1f", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "subElement", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:true }, "$wrap21", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$wrap23", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__1d`2"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__1d`2")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__1d`2")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<SelectManyIterator>d__27`3 */ 

(function $lSelectManyIterator$gd__27$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<SelectManyIterator>d__27`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TCollection", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2c", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2e", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__27`3")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__27`3"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "collectionSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])
        ])); 
    $.Field({Static:false, Public:true }, "$collectionSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])
        ])); 
    $.Field({Static:false, Public:true }, "resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "$resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "index", $.Int32); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "subElement$2a", $.GenericParameter("TCollection")); 
    $.Field({Static:false, Public:true }, "$wrap2b", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$wrap2d", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TCollection")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__27`3"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__27`3")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__27`3")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<SelectManyIterator>d__31`3 */ 

(function $lSelectManyIterator$gd__31$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<SelectManyIterator>d__31`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TCollection", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally35", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally37", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__31`3")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__31`3"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "collectionSelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])])); 
    $.Field({Static:false, Public:true }, "$collectionSelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])])); 
    $.Field({Static:false, Public:true }, "resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "$resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "subElement", $.GenericParameter("TCollection")); 
    $.Field({Static:false, Public:true }, "$wrap34", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$wrap36", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TCollection")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__31`3"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__31`3")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<SelectManyIterator>d__31`3")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<TakeIterator>d__3a`1 */ 

(function $lTakeIterator$gd__3a$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<TakeIterator>d__3a`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally3d", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeIterator>d__3a`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeIterator>d__3a`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "count", $.Int32); 
    $.Field({Static:false, Public:true }, "$count", $.Int32); 
    $.Field({Static:false, Public:true }, "element$3b", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap3c", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeIterator>d__3a`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeIterator>d__3a`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeIterator>d__3a`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<TakeWhileIterator>d__40`1 */ 

(function $lTakeWhileIterator$gd__40$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<TakeWhileIterator>d__40`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally43", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__40`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__40`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:true }, "$predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap42", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__40`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__40`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__40`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<TakeWhileIterator>d__46`1 */ 

(function $lTakeWhileIterator$gd__46$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<TakeWhileIterator>d__46`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally4a", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__46`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__46`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "predicate", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ])); 
    $.Field({Static:false, Public:true }, "$predicate", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ])); 
    $.Field({Static:false, Public:true }, "index", $.Int32); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap49", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__46`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__46`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<TakeWhileIterator>d__46`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<SkipIterator>d__4d`1 */ 

(function $lSkipIterator$gd__4d$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<SkipIterator>d__4d`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally4f", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipIterator>d__4d`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipIterator>d__4d`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "count", $.Int32); 
    $.Field({Static:false, Public:true }, "$count", $.Int32); 
    $.Field({Static:false, Public:true }, "e$4e", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipIterator>d__4d`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipIterator>d__4d`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipIterator>d__4d`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<SkipWhileIterator>d__52`1 */ 

(function $lSkipWhileIterator$gd__52$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<SkipWhileIterator>d__52`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally56", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__52`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__52`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:true }, "$predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:true }, "yielding", $.Boolean); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap55", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__52`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__52`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__52`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<SkipWhileIterator>d__59`1 */ 

(function $lSkipWhileIterator$gd__59$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<SkipWhileIterator>d__59`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally5e", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__59`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__59`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "predicate", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ])); 
    $.Field({Static:false, Public:true }, "$predicate", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ])); 
    $.Field({Static:false, Public:true }, "index$5a", $.Int32); 
    $.Field({Static:false, Public:true }, "yielding$5b", $.Boolean); 
    $.Field({Static:false, Public:true }, "element$5c", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap5d", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__59`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__59`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<SkipWhileIterator>d__59`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<JoinIterator>d__61`4 */ 

(function $lJoinIterator$gd__61$b4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<JoinIterator>d__61`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOuter", "TInner", "TKey", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally67", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<JoinIterator>d__61`4")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<JoinIterator>d__61`4"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "outer", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")])); 
    $.Field({Static:false, Public:true }, "$outer", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")])); 
    $.Field({Static:false, Public:true }, "inner", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")])); 
    $.Field({Static:false, Public:true }, "$inner", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")])); 
    $.Field({Static:false, Public:true }, "outerKeySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "$outerKeySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "innerKeySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "$innerKeySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $.GenericParameter("TInner"), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "$resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $.GenericParameter("TInner"), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "$comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "lookup", $asm0D.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TInner")])); 
    $.Field({Static:false, Public:true }, "item", $.GenericParameter("TOuter")); 
    $.Field({Static:false, Public:true }, "g", $asm0D.TypeRef("System.Linq.Lookup`2/Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TInner")])); 
    $.Field({Static:false, Public:true }, "i", $.Int32); 
    $.Field({Static:false, Public:true }, "$wrap66", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOuter")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<JoinIterator>d__61`4"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<JoinIterator>d__61`4")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<JoinIterator>d__61`4")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<GroupJoinIterator>d__6a`4 */ 

(function $lGroupJoinIterator$gd__6a$b4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<GroupJoinIterator>d__6a`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOuter", "TInner", "TKey", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally6e", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<GroupJoinIterator>d__6a`4")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<GroupJoinIterator>d__6a`4"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "outer", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")])); 
    $.Field({Static:false, Public:true }, "$outer", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")])); 
    $.Field({Static:false, Public:true }, "inner", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")])); 
    $.Field({Static:false, Public:true }, "$inner", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")])); 
    $.Field({Static:false, Public:true }, "outerKeySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "$outerKeySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "innerKeySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "$innerKeySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "$resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "$comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:true }, "lookup$6b", $asm0D.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TInner")])); 
    $.Field({Static:false, Public:true }, "item$6c", $.GenericParameter("TOuter")); 
    $.Field({Static:false, Public:true }, "$wrap6d", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOuter")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<GroupJoinIterator>d__6a`4"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<GroupJoinIterator>d__6a`4")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<GroupJoinIterator>d__6a`4")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<ConcatIterator>d__71`1 */ 

(function $lConcatIterator$gd__71$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<ConcatIterator>d__71`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally75", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally77", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ConcatIterator>d__71`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ConcatIterator>d__71`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "first", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$first", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "second", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$second", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap74", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$wrap76", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ConcatIterator>d__71`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ConcatIterator>d__71`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ConcatIterator>d__71`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<ZipIterator>d__7a`3 */ 

(function $lZipIterator$gd__7a$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<ZipIterator>d__7a`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TFirst", "TSecond", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally7d", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally7e", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<ZipIterator>d__7a`3")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<ZipIterator>d__7a`3"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "first", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TFirst")])); 
    $.Field({Static:false, Public:true }, "$first", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TFirst")])); 
    $.Field({Static:false, Public:true }, "second", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSecond")])); 
    $.Field({Static:false, Public:true }, "$second", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSecond")])); 
    $.Field({Static:false, Public:true }, "resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TFirst"), $.GenericParameter("TSecond"), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "$resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TFirst"), $.GenericParameter("TSecond"), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "e1$7b", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TFirst")])); 
    $.Field({Static:false, Public:true }, "e2$7c", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSecond")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<ZipIterator>d__7a`3"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<ZipIterator>d__7a`3")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<ZipIterator>d__7a`3")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<DistinctIterator>d__81`1 */ 

(function $lDistinctIterator$gd__81$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<DistinctIterator>d__81`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally85", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DistinctIterator>d__81`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DistinctIterator>d__81`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "set", $asm0D.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap84", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DistinctIterator>d__81`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DistinctIterator>d__81`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DistinctIterator>d__81`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<UnionIterator>d__88`1 */ 

(function $lUnionIterator$gd__88$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<UnionIterator>d__88`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally8d", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally8f", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<UnionIterator>d__88`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<UnionIterator>d__88`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "first", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$first", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "second", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$second", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "set", $asm0D.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "element$8a", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "element$8b", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap8c", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$wrap8e", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<UnionIterator>d__88`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<UnionIterator>d__88`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<UnionIterator>d__88`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<IntersectIterator>d__92`1 */ 

(function $lIntersectIterator$gd__92$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<IntersectIterator>d__92`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally96", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<IntersectIterator>d__92`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<IntersectIterator>d__92`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "first", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$first", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "second", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$second", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "set", $asm0D.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap95", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<IntersectIterator>d__92`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<IntersectIterator>d__92`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<IntersectIterator>d__92`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<ExceptIterator>d__99`1 */ 

(function $lExceptIterator$gd__99$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<ExceptIterator>d__99`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally9d", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ExceptIterator>d__99`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ExceptIterator>d__99`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "first", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$first", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "second", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$second", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "set$9a", $asm0D.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "element$9b", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$wrap9c", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ExceptIterator>d__99`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ExceptIterator>d__99`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ExceptIterator>d__99`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<ReverseIterator>d__a0`1 */ 

(function $lReverseIterator$gd__a0$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<ReverseIterator>d__a0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ReverseIterator>d__a0`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ReverseIterator>d__a0`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "buffer$a1", $asm0D.TypeRef("System.Linq.Buffer`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "i$a2", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ReverseIterator>d__a0`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ReverseIterator>d__a0`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<ReverseIterator>d__a0`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<DefaultIfEmptyIterator>d__a5`1 */ 

(function $lDefaultIfEmptyIterator$gd__a5$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<DefaultIfEmptyIterator>d__a5`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finallya7", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DefaultIfEmptyIterator>d__a5`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DefaultIfEmptyIterator>d__a5`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:true }, "defaultValue", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "$defaultValue", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:true }, "e$a6", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DefaultIfEmptyIterator>d__a5`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DefaultIfEmptyIterator>d__a5`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable/<DefaultIfEmptyIterator>d__a5`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<OfTypeIterator>d__aa`1 */ 

(function $lOfTypeIterator$gd__aa$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<OfTypeIterator>d__aa`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finallyae", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<OfTypeIterator>d__aa`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<OfTypeIterator>d__aa`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Collections.IEnumerable")); 
    $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Collections.IEnumerable")); 
    $.Field({Static:false, Public:true }, "obj$ab", $.Object); 
    $.Field({Static:false, Public:true }, "$wrapac", $asm09.TypeRef("System.Collections.IEnumerator")); 
    $.Field({Static:false, Public:true }, "$wrapad", $asm09.TypeRef("System.IDisposable")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<OfTypeIterator>d__aa`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<OfTypeIterator>d__aa`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<OfTypeIterator>d__aa`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<CastIterator>d__b1`1 */ 

(function $lCastIterator$gd__b1$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<CastIterator>d__b1`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finallyb5", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<CastIterator>d__b1`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<CastIterator>d__b1`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Collections.IEnumerable")); 
    $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Collections.IEnumerable")); 
    $.Field({Static:false, Public:true }, "obj$b2", $.Object); 
    $.Field({Static:false, Public:true }, "$wrapb3", $asm09.TypeRef("System.Collections.IEnumerator")); 
    $.Field({Static:false, Public:true }, "$wrapb4", $asm09.TypeRef("System.IDisposable")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<CastIterator>d__b1`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<CastIterator>d__b1`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<CastIterator>d__b1`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<RepeatIterator>d__bc`1 */ 

(function $lRepeatIterator$gd__bc$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<RepeatIterator>d__bc`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<RepeatIterator>d__bc`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<RepeatIterator>d__bc`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:true }, "$element", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:true }, "count", $.Int32); 
    $.Field({Static:false, Public:true }, "$count", $.Int32); 
    $.Field({Static:false, Public:true }, "i$bd", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<RepeatIterator>d__bc`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<RepeatIterator>d__bc`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable/<RepeatIterator>d__bc`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable/<RangeIterator>d__b8 */ 

(function $lRangeIterator$gd__b8$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable/<RangeIterator>d__b8", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Int32$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Int32]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Int32$g.get_Current", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.Int32); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "start", $.Int32); 
    $.Field({Static:false, Public:true }, "$start", $.Int32); 
    $.Field({Static:false, Public:true }, "count", $.Int32); 
    $.Field({Static:false, Public:true }, "$count", $.Int32); 
    $.Field({Static:false, Public:true }, "i$b9", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Int32$g.Current", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Int32]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.EmptyEnumerable`1 */ 

(function EmptyEnumerable$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.EmptyEnumerable`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.EmptyEnumerable`1")]), [], [])
    );

    $.Field({Static:true , Public:false}, "instance", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")])); 
    $.GenericProperty({Static:true , Public:true }, "Instance", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.EmptyEnumerable`1")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.IdentityFunction`1 */ 

(function IdentityFunction$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.IdentityFunction`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.IdentityFunction`1"), new JSIL.GenericParameter("TElement", "System.Linq.IdentityFunction`1")]), [], [])
    );

    $.GenericProperty({Static:true , Public:true }, "Instance", $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.IdentityFunction`1"), new JSIL.GenericParameter("TElement", "System.Linq.IdentityFunction`1")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Linq.IOrderedEnumerable`1 */ 

JSIL.MakeInterface(
  "System.Linq.IOrderedEnumerable`1", true, ["TElement"], function ($) {
    $.Method({}, "CreateOrderedEnumerable", new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.IOrderedEnumerable`1"), "!!0"]), $asm09.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"]), 
          $.Boolean
        ], ["TKey"]));
  }, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.IOrderedEnumerable`1")]), $asm09.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Linq.IGrouping`2 */ 

JSIL.MakeInterface(
  "System.Linq.IGrouping`2", true, ["out TKey", "out TElement"], function ($) {
    $.Method({}, "get_Key", new JSIL.MethodSignature(new JSIL.GenericParameter("TKey", "System.Linq.IGrouping`2").out(), [], []));
    $.Property({}, "Key");
  }, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.IGrouping`2").out()]), $asm09.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Linq.ILookup`2 */ 

JSIL.MakeInterface(
  "System.Linq.ILookup`2", true, ["TKey", "TElement"], function ($) {
    $.Method({}, "get_Count", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "get_Item", new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.ILookup`2")]), [new JSIL.GenericParameter("TKey", "System.Linq.ILookup`2")], []));
    $.Method({}, "Contains", new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Linq.ILookup`2")], []));
    $.Property({}, "Count");
    $.Property({}, "Item");
  }, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.ILookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.ILookup`2")])]), $asm09.TypeRef("System.Collections.IEnumerable")]);

/* class System.Linq.Lookup`2 */ 

(function Lookup$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ApplyResultSelector", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]), 
            "!!0"
          ])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")]), 
          $asm09.TypeRef("System.Func`2", ["!!0", new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateForJoin", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2"), new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]), [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")])]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetGrouping", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Lookup`2/Grouping", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]), [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetHashCode", 
      new JSIL.MethodSignature($.Int32, [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Resize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(2, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "groupings", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Lookup`2/Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])])); 
    $.Field({Static:false, Public:false}, "lastGrouping", $asm0D.TypeRef("System.Linq.Lookup`2/Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "count", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]));

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.ILookup`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2")])]), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Linq.Lookup`2/Grouping */ 

(function Grouping$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2/Grouping", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2/Grouping"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
    )
      .Overrides(2, "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Clear", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
    )
      .Overrides(2, "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")]), $.Int32], [])
    )
      .Overrides(2, "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(2, "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(2, "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
    )
      .Overrides(2, "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.get_Item", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping"), [$.Int32], [])
    )
      .Overrides(1, "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.IndexOf", 
      new JSIL.MethodSignature($.Int32, [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
    )
      .Overrides(1, "IndexOf");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.Insert", 
      new JSIL.MethodSignature(null, [$.Int32, new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
    )
      .Overrides(1, "Insert");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.RemoveAt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Overrides(1, "RemoveAt");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")], [])
    )
      .Overrides(1, "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(4, "GetEnumerator");

    $.Field({Static:false, Public:false}, "key", $.GenericParameter("TKey")); 
    $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
    $.Field({Static:false, Public:false}, "elements", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "count", $.Int32); 
    $.Field({Static:false, Public:false}, "hashNext", $.Type); 
    $.Field({Static:false, Public:false}, "next", $.Type); 
    $.Property({Static:false, Public:true , Virtual:true }, "Key", new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2/Grouping"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.Item", new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping"));

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2/Grouping"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")]), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping")]), 
      /* 4 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Lookup`2/Grouping/<GetEnumerator>d__7 */ 

(function $lGetEnumerator$gd__7$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2/Grouping/<GetEnumerator>d__7", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping/<GetEnumerator>d__7"), [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TElement")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Linq.Lookup`2/Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "i", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping/<GetEnumerator>d__7"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/Grouping/<GetEnumerator>d__7")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Lookup`2/<GetEnumerator>d__0 */ 

(function $lGetEnumerator$gd__0$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2/<GetEnumerator>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.IGrouping$lTKey$cmTElement$g$g.get_Current", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/<GetEnumerator>d__0")]), [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $asm0D.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "g", $asm0D.TypeRef("System.Linq.Lookup`2/Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.IGrouping$lTKey$cmTElement$g$g.Current", $asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/<GetEnumerator>d__0")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Lookup`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TElement", "System.Linq.Lookup`2/<GetEnumerator>d__0")])]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Lookup`2/<ApplyResultSelector>d__3`1 */ 

(function $lApplyResultSelector$gd__3$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2/<ApplyResultSelector>d__3`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Lookup`2/<ApplyResultSelector>d__3`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Lookup`2/<ApplyResultSelector>d__3`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "$resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ])); 
    $.Field({Static:false, Public:true }, "g", $asm0D.TypeRef("System.Linq.Lookup`2/Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", new JSIL.GenericParameter("TResult", "System.Linq.Lookup`2/<ApplyResultSelector>d__3`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Lookup`2/<ApplyResultSelector>d__3`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Lookup`2/<ApplyResultSelector>d__3`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Set`1 */ 

(function Set$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Set`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TElement", "System.Linq.Set`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Set`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Set`1")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Find", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Set`1"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetHashCode", 
      new JSIL.MethodSignature($.Int32, [new JSIL.GenericParameter("TElement", "System.Linq.Set`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Set`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Resize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "buckets", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "slots", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Set`1/Slot", [$.GenericParameter("TElement")])])); 
    $.Field({Static:false, Public:false}, "count", $.Int32); 
    $.Field({Static:false, Public:false}, "freeList", $.Int32); 
    $.Field({Static:false, Public:false}, "comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TElement")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Set`1/Slot */ 

(function Slot$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Linq.Set`1/Slot", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
    $.Field({Static:false, Public:false}, "value", $.GenericParameter("TElement")); 
    $.Field({Static:false, Public:false}, "next", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.GroupedEnumerable`4 */ 

(function GroupedEnumerable$b4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.GroupedEnumerable`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TElement", "TResult"], 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.GroupedEnumerable`4")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.GroupedEnumerable`4"), new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`4")]), 
          $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.GroupedEnumerable`4"), new JSIL.GenericParameter("TElement", "System.Linq.GroupedEnumerable`4")]), $asm09.TypeRef("System.Func`3", [
              new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`4"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.GroupedEnumerable`4")]), 
              new JSIL.GenericParameter("TResult", "System.Linq.GroupedEnumerable`4")
            ]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`4")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.GroupedEnumerable`4")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:false}, "keySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "elementSelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ])); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.GroupedEnumerable`4")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.GroupedEnumerable`3 */ 

(function GroupedEnumerable$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.GroupedEnumerable`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TElement"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.GroupedEnumerable`3")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.GroupedEnumerable`3"), new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`3")]), 
          $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.GroupedEnumerable`3"), new JSIL.GenericParameter("TElement", "System.Linq.GroupedEnumerable`3")]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`3")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`3"), new JSIL.GenericParameter("TElement", "System.Linq.GroupedEnumerable`3")])]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:false}, "keySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "elementSelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.GroupedEnumerable`3"), new JSIL.GenericParameter("TElement", "System.Linq.GroupedEnumerable`3")])]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.OrderedEnumerable`1 */ 

(function OrderedEnumerable$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.OrderedEnumerable`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerableSorter", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1")]), [$asm0D.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(2, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IOrderedEnumerable$lTElement$g.CreateOrderedEnumerable", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IOrderedEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1")]), [
          $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1"), "!!0"]), $asm09.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"]), 
          $.Boolean
        ], ["TKey"])
    )
      .Overrides(0, "CreateOrderedEnumerable");

    $.Field({Static:false, Public:false}, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])); 
    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.IOrderedEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1")]), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.OrderedEnumerable`1/<GetEnumerator>d__0 */ 

(function $lGetEnumerator$gd__0$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.OrderedEnumerable`1/<GetEnumerator>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1/<GetEnumerator>d__0"), [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TElement")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Linq.OrderedEnumerable`1", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "buffer", $asm0D.TypeRef("System.Linq.Buffer`1", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "sorter", $asm0D.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "map", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:true }, "i", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1/<GetEnumerator>d__0"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`1/<GetEnumerator>d__0")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.OrderedEnumerable`2 */ 

(function OrderedEnumerable$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.OrderedEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`2")]), 
      Name: "System.Linq.OrderedEnumerable`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`2")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`2"), new JSIL.GenericParameter("TKey", "System.Linq.OrderedEnumerable`2")]), 
          $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.OrderedEnumerable`2")]), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerableSorter", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`2")]), [$asm0D.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`2")])], [])
    );

    $.Field({Static:false, Public:false}, "parent", $asm0D.TypeRef("System.Linq.OrderedEnumerable`1", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "keySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "comparer", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "descending", $.Boolean); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableSorter`1 */ 

(function EnumerableSorter$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableSorter`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompareKeys", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ComputeKeys", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`1")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "QuickSort", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Sort", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`1")]), $.Int32], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableSorter`2 */ 

(function EnumerableSorter$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`2")]), 
      Name: "System.Linq.EnumerableSorter`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`2"), new JSIL.GenericParameter("TKey", "System.Linq.EnumerableSorter`2")]), $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.EnumerableSorter`2")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`2")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompareKeys", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ComputeKeys", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`2")]), $.Int32], [])
    );

    $.Field({Static:false, Public:false}, "keySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "comparer", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "descending", $.Boolean); 
    $.Field({Static:false, Public:false}, "next", $asm0D.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "keys", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Buffer`1 */ 

(function Buffer$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Linq.Buffer`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Buffer`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TElement", "System.Linq.Buffer`1")]), [], [])
    );

    $.Field({Static:false, Public:false}, "items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "count", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.ParallelEnumerable */ 

(function ParallelEnumerable$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.ParallelEnumerable", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
            "!!0", "!!0", 
            "!!0"
          ])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "Aggregate", 
      new JSIL.MethodSignature("!!0", [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
              "!!0", "!!0", 
              "!!0"
            ]), 
          $asm0D.TypeRef("System.Linq.Parallel.QueryAggregationOptions")
        ], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!1", [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
          $asm09.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ])
        ], ["TSource", "TAccumulate"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "Aggregate", 
      new JSIL.MethodSignature("!!1", [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
          $asm09.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ]), $asm0D.TypeRef("System.Linq.Parallel.QueryAggregationOptions")
        ], ["TSource", "TAccumulate"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!2", [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
          $asm09.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ]), $asm09.TypeRef("System.Func`2", ["!!1", "!!2"])
        ], ["TSource", "TAccumulate", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!2", [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
          $asm09.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ]), $asm09.TypeRef("System.Func`3", [
              "!!1", "!!1", 
              "!!1"
            ]), 
          $asm09.TypeRef("System.Func`2", ["!!1", "!!2"])
        ], ["TSource", "TAccumulate", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!2", [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`1", ["!!1"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ]), $asm09.TypeRef("System.Func`3", [
              "!!1", "!!1", 
              "!!1"
            ]), 
          $asm09.TypeRef("System.Func`2", ["!!1", "!!2"])
        ], ["TSource", "TAccumulate", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "All", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsEnumerable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "AsOrdered", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsOrdered", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery"), [$asm0D.TypeRef("System.Linq.ParallelQuery")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsParallel", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsParallel", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Concurrent.Partitioner`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsParallel", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery"), [$asm09.TypeRef("System.Collections.IEnumerable")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsSequential", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsUnordered", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$.Int32])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$.Int32])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$.Int64])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$.Int64])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$.Single])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$.Single])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$.Double])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$.Double])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Decimal")])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Cast", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery")], ["TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; });

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!0", 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DisposeEnumerator", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerator`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Parallel.CancellationState")], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAt", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAtOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Empty", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; });

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ForAll", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Action`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetOneWithPossibleDefault", 
      new JSIL.MethodSignature("!!0", [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", ["!!0"]), $.Boolean, 
          $.Boolean
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!1", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
              "!!2"
            ])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!1", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
              "!!2"
            ]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`3", [
              "!!1", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
              "!!3"
            ])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`3", [
              "!!1", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
              "!!3"
            ]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; });

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; });

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; });

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!3"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$.Int32])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$.Int32])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int64, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$.Int64])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$.Int64])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Single, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$.Single])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$.Single])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$.Double])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$.Double])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Decimal")])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int64, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Single, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!1", [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$.Int32])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$.Int32])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int64, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$.Int64])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$.Int64])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Single, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$.Single])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$.Single])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$.Double])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$.Double])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Decimal")])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int64, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Single, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!1", [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OfType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery")], ["TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "PerformAggregation", 
      new JSIL.MethodSignature("!!0", [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
              "!!0", "!!0", 
              "!!0"
            ]), 
          "!!0", $.Boolean, 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QueryAggregationOptions")
        ], ["T"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "PerformSequentialAggregation", 
      new JSIL.MethodSignature("!!1", [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), "!!1", 
          $.Boolean, $asm09.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ])
        ], ["TSource", "TAccumulate"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Range", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", [$.Int32]), [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Repeat", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), ["!!0", $.Int32], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Reverse", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            "!!1"
          ])], ["TSource", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
          ])], ["TSource", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
            ]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; });

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Skip", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$.Int32])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$.Int32])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$.Int64])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$.Int64])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$.Single])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$.Single])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$.Double])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$.Double])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Decimal")])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Take", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [
          $asm0D.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), [
          $asm0D.TypeRef("System.Linq.OrderedParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToList", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "WithCancellation", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Threading.CancellationToken")], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "WithDegreeOfParallelism", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "WithExecutionMode", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0D.TypeRef("System.Linq.ParallelExecutionMode")], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "WithMergeOptions", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0D.TypeRef("System.Linq.ParallelMergeOptions")], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WithTaskScheduler", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Threading.Tasks.TaskScheduler")], ["TSource"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Zip", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!1"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TFirst", "TSecond", "TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Zip", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!2"]), [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm09.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TFirst", "TSecond", "TResult"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."]; })
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Constant({Static:true , Public:false}, "RIGHT_SOURCE_NOT_PARALLEL_STR", "The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>."); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Linq.ParallelEnumerable/<>c__DisplayClass3`3 */ 

(function $l$gc__DisplayClass3$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelEnumerable/<>c__DisplayClass3`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TResult"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:true }, "resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
          $.GenericParameter("TResult")
        ])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelEnumerable/<>c__DisplayClass6`3 */ 

(function $l$gc__DisplayClass6$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelEnumerable/<>c__DisplayClass6`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TResult"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:true }, "resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
          $.GenericParameter("TResult")
        ])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelEnumerable/<>c__DisplayClass9`4 */ 

(function $l$gc__DisplayClass9$b4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelEnumerable/<>c__DisplayClass9`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TElement", "TResult"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:true }, "resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelEnumerable/<>c__DisplayClassc`4 */ 

(function $l$gc__DisplayClassc$b4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelEnumerable/<>c__DisplayClassc`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TElement", "TResult"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:true }, "resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.DeclareNamespace("System.Runtime");
JSIL.DeclareNamespace("System.Runtime.CompilerServices");
/* class System.Runtime.CompilerServices.ExecutionScope */ 

(function ExecutionScope$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.ExecutionScope", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateDelegate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Delegate"), [$.Int32, $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateHoistedLocals", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsolateExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.Field({Static:false, Public:true }, "Parent", $.Type); 
    $.Field({Static:false, Public:true }, "Globals", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:true }, "Locals", $jsilcore.TypeRef("System.Array", [$.Object])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this type", true]; });

})();

/* class System.Linq.EnumerableQuery */ 

(function EnumerableQuery$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableQuery", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable"), [$asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable"), [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.IEnumerable")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Enumerable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerable"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Expression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Expression", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "Enumerable", $asm09.TypeRef("System.Collections.IEnumerable"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableQuery`1 */ 

(function EnumerableQuery$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.EnumerableQuery"), 
      Name: "System.Linq.EnumerableQuery`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.EnumerableQuery`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Enumerable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerable"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Expression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.EnumerableQuery`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.EnumerableQuery`1")]), [], [])
    )
      .Overrides(5, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(6, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.get_ElementType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Overrides(3, "get_ElementType");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.get_Expression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Overrides(3, "get_Expression");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.get_Provider", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryProvider"), [], [])
    )
      .Overrides(3, "get_Provider");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.CreateQuery", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable"), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    )
      .Overrides(4, "CreateQuery");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.CreateQuery", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], ["S"])
    )
      .Overrides(4, "CreateQuery");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.Execute", 
      new JSIL.MethodSignature($.Object, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    )
      .Overrides(4, "Execute");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.Execute", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Linq.Expressions.Expression")], ["S"])
    )
      .Overrides(4, "Execute");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "expression", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false}, "enumerable", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.Provider", $asm0D.TypeRef("System.Linq.IQueryProvider"));

    $.Property({Static:false, Public:false, Virtual:true }, "Expression", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "Enumerable", $asm09.TypeRef("System.Collections.IEnumerable"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.Expression", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.ElementType", $asm09.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.IOrderedQueryable`1", [new JSIL.GenericParameter("T", "System.Linq.EnumerableQuery`1")]), 
      /* 1 */ $asm0D.TypeRef("System.Linq.IQueryable`1", [new JSIL.GenericParameter("T", "System.Linq.EnumerableQuery`1")]), 
      /* 2 */ $asm0D.TypeRef("System.Linq.IOrderedQueryable"), 
      /* 3 */ $asm0D.TypeRef("System.Linq.IQueryable"), 
      /* 4 */ $asm0D.TypeRef("System.Linq.IQueryProvider"), 
      /* 5 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.EnumerableQuery`1")]), 
      /* 6 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableExecutor */ 

(function EnumerableExecutor$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableExecutor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteBoxed", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableExecutor`1 */ 

(function EnumerableExecutor$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.EnumerableExecutor"), 
      Name: "System.Linq.EnumerableExecutor`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Execute", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Linq.EnumerableExecutor`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteBoxed", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.Field({Static:false, Public:false}, "expression", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false}, "func", $asm09.TypeRef("System.Func`1", [$.GenericParameter("T")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableRewriter */ 

(function EnumerableRewriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.OldExpressionVisitor"), 
      Name: "System.Linq.EnumerableRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "ArgsMatch", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindEnumerableMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [
          $.String, $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [
          $asm09.TypeRef("System.Type"), $.String, 
          $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]), 
          $asm09.TypeRef("System.Reflection.BindingFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixupQuotedArgs", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [$asm09.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixupQuotedExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPublicType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StripExpression", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ConstantExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMethodCall", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.Field({Static:true , Public:false}, "_seqMethods", $asm0D.TypeRef("System.Linq.ILookup`2", [$.String, $asm09.TypeRef("System.Reflection.MethodInfo")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableRewriter/<>c__DisplayClass3 */ 

(function $l$gc__DisplayClass3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableRewriter/<>c__DisplayClass3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "args", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Field({Static:false, Public:true }, "typeArgs", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.EnumerableRewriter/<>c__DisplayClass7 */ 

(function $l$gc__DisplayClass7$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableRewriter/<>c__DisplayClass7", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "$name", $.String); 
    $.Field({Static:false, Public:true }, "args", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Field({Static:false, Public:true }, "typeArgs", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.TypeHelper */ 

(function TypeHelper$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.TypeHelper", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "FindGenericType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetElementType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNonNullableType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEnumerableType", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsKindOfGeneric", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullableType", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Error */ 

(function Error$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Error", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "ArgumentArrayHasTooManyElements", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotIEnumerableGeneric", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotLambda", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotSequence", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotValid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNull", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentOutOfRange", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncompatibleElementTypes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MoreThanOneElement", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MoreThanOneMatch", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoArgumentMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoElements", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMatch", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnTypeMatchingArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoNameMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotImplemented", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupported", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.DynamicAttribute */ 

(function DynamicAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.CompilerServices.DynamicAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TransformFlags", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$.Boolean]), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_transformFlags", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Property({Static:false, Public:true }, "TransformFlags", $asm09.TypeRef("System.Collections.Generic.IList`1", [$.Boolean]));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags(
          "Class", "Field", "Parameter", "Property", 
          "ReturnValue", "Struct"
      )]; });

})();

/* enum System.Linq.ParallelMergeOptions */ 

JSIL.MakeEnum(
  "System.Linq.ParallelMergeOptions", true, {
    Default: 0, 
    NotBuffered: 1, 
    AutoBuffered: 2, 
    FullyBuffered: 3
  }, false
);

/* enum System.Linq.ParallelExecutionMode */ 

JSIL.MakeEnum(
  "System.Linq.ParallelExecutionMode", true, {
    Default: 0, 
    ForceParallelism: 1
  }, false
);

JSIL.DeclareNamespace("System.Linq.Parallel");
/* class System.Linq.Parallel.AsynchronousChannel`1 */ 

(function AsynchronousChannel$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.AsynchronousChannel`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm09.TypeRef("System.Threading.CancellationToken")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoneWithDequeueWait", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Enqueue", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannel`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnqueueChunk", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannel`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushBuffers", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "FlushCachedChunk", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsChunkBufferEmpty", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDone", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsFull", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalDequeueChunk", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannel`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDone", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDequeue", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannel`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDequeue", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannel`1")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Threading.ManualResetEventSlim")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDequeueChunk", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannel`1")])])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDequeueChunk", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannel`1")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Threading.ManualResetEventSlim")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WaitUntilNonFull", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "m_buffer", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])])); 
    $.Field({Static:false, Public:false}, "m_producerBufferIndex", $asm09.TypeRef("System.Int32")); 
    $.Field({Static:false, Public:false}, "m_consumerBufferIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_done", $asm09.TypeRef("System.Boolean")); 
    $.Field({Static:false, Public:false}, "m_producerChunk", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "m_producerChunkIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_consumerChunk", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "m_consumerChunkIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_chunkSize", $.Int32); 
    $.Field({Static:false, Public:false}, "m_producerEvent", $asm09.TypeRef("System.Threading.ManualResetEventSlim")); 
    $.Field({Static:false, Public:false}, "m_consumerEvent", $asm09.TypeRef("System.Threading.ManualResetEventSlim")); 
    $.Field({Static:false, Public:false}, "m_producerIsWaiting", $asm09.TypeRef("System.Int32")); 
    $.Field({Static:false, Public:false}, "m_consumerIsWaiting", $asm09.TypeRef("System.Int32")); 
    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Property({Static:false, Public:false}, "IsFull", $.Boolean);

    $.Property({Static:false, Public:false}, "IsChunkBufferEmpty", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDone", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SynchronousChannel`1 */ 

(function SynchronousChannel$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SynchronousChannel`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.SynchronousChannel`1")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dequeue", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Linq.Parallel.SynchronousChannel`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Enqueue", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Linq.Parallel.SynchronousChannel`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDone", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "m_queue", $asm0B.TypeRef("System.Collections.Generic.Queue`1", [$.GenericParameter("T")])); 
    $.Property({Static:false, Public:false}, "Count", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.AggregationMinMaxHelpers`1 */ 

(function AggregationMinMaxHelpers$b1$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.AggregationMinMaxHelpers`1", false, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "MakeFinalReduceFunction", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Func`3", [
            $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")]), $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")]), 
            $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")])
          ]), [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeIntermediateReduceFunction", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Func`3", [
            $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")]), new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1"), 
            $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")])
          ]), [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeResultSelectorFunction", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Func`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Boolean, new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")]), new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Reduce", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1"), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReduceMax", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1"), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "ReduceMin", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1"), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.AggregationMinMaxHelpers`1")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.AggregationMinMaxHelpers`1/<>c__DisplayClass1 */ 

(function $l$gc__DisplayClass1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.AggregationMinMaxHelpers`1/<>c__DisplayClass1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:true }, "comparer", $asm09.TypeRef("System.Collections.Generic.Comparer`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "sign", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.AggregationMinMaxHelpers`1/<>c__DisplayClass4 */ 

(function $l$gc__DisplayClass4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.AggregationMinMaxHelpers`1/<>c__DisplayClass4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:true }, "comparer", $asm09.TypeRef("System.Collections.Generic.Comparer`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "sign", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.ParallelQuery */ 

(function ParallelQuery$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.ParallelQuery", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Cast", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [], ["TCastTo"])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SpecifiedQuerySettings", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumeratorUntyped", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OfType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.ParallelQuery`1", ["!!0"]), [], ["TCastTo"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "m_specifiedSettings", $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")); 
    $.Property({Static:false, Public:false}, "SpecifiedQuerySettings", $asm0D.TypeRef("System.Linq.Parallel.QuerySettings"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.ParallelQuery`1 */ 

(function ParallelQuery$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.ParallelQuery"), 
      Name: "System.Linq.ParallelQuery`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Cast", 
      new JSIL.MethodSignature($.Type, [], ["TCastTo"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.ParallelQuery`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumeratorUntyped", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OfType", 
      new JSIL.MethodSignature($.Type, [], ["TCastTo"])
    );

    $.ImplementInterfaces(
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.ParallelQuery`1")]), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.EmptyEnumerable`1 */ 

(function EmptyEnumerable$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.EmptyEnumerable`1")]), 
      Name: "System.Linq.Parallel.EmptyEnumerable`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Instance", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.EmptyEnumerable`1")]), [], [])
    );

    $.Field({Static:true , Public:false}, "s_instance", $.Type); 
    $.Field({Static:true , Public:false}, "s_enumeratorInstance", $asm0D.TypeRef("System.Linq.Parallel.EmptyEnumerator`1", [$.GenericParameter("T")])); 
    $.GenericProperty({Static:true , Public:false}, "Instance", $.Type);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryOperatorEnumerator`2 */ 

(function QueryOperatorEnumerator$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryOperatorEnumerator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "AsClassicEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.QueryOperatorEnumerator`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.QueryOperatorEnumerator`2")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.QueryOperatorEnumerator`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryOperatorEnumerator`2/QueryOperatorClassicEnumerator */ 

(function QueryOperatorClassicEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryOperatorEnumerator`2/QueryOperatorClassicEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TKey"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.QueryOperatorEnumerator`2/QueryOperatorClassicEnumerator"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.QueryOperatorEnumerator`2/QueryOperatorClassicEnumerator")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TElement", "System.Linq.Parallel.QueryOperatorEnumerator`2/QueryOperatorClassicEnumerator"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(2, "get_Current");

    $.Field({Static:false, Public:false}, "m_operatorEnumerator", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "m_current", $.GenericParameter("TElement")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("TElement", "System.Linq.Parallel.QueryOperatorEnumerator`2/QueryOperatorClassicEnumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.QueryOperatorEnumerator`2/QueryOperatorClassicEnumerator")]), 
      /* 1 */ $asm09.TypeRef("System.IDisposable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.EmptyEnumerator`1 */ 

(function EmptyEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.EmptyEnumerator`1"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.EmptyEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Linq.Parallel.EmptyEnumerator`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Linq.Parallel.EmptyEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(2, "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Reset");

    $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("T", "System.Linq.Parallel.EmptyEnumerator`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.EmptyEnumerator`1")]), 
      /* 1 */ $asm09.TypeRef("System.IDisposable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Linq.Parallel.IParallelPartitionable`1 */ 

JSIL.MakeInterface(
  "System.Linq.Parallel.IParallelPartitionable`1", false, ["T"], function ($) {
    $.Method({}, "GetPartitions", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.IParallelPartitionable`1"), $.Int32])]), [$.Int32], []));
  }, []);

/* class System.Linq.Parallel.ParallelEnumerableWrapper`1 */ 

(function ParallelEnumerableWrapper$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ParallelEnumerableWrapper`1")]), 
      Name: "System.Linq.Parallel.ParallelEnumerableWrapper`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ParallelEnumerableWrapper`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WrappedEnumerable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ParallelEnumerableWrapper`1")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ParallelEnumerableWrapper`1")]), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_wrappedEnumerable", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])); 
    $.Property({Static:false, Public:false}, "WrappedEnumerable", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ParallelEnumerableWrapper`1")]));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Parallel.QueryAggregationOptions */ 

JSIL.MakeEnum(
  "System.Linq.Parallel.QueryAggregationOptions", false, {
    None: 0, 
    Associative: 1, 
    Commutative: 2, 
    AssociativeCommutative: 3
  }, true
);

/* class System.Linq.Parallel.RepeatEnumerable`1 */ 

(function RepeatEnumerable$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1")]), 
      Name: "System.Linq.Parallel.RepeatEnumerable`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPartitions", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1"), $.Int32])]), [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "m_element", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false}, "m_count", $.Int32); 
    $.ImplementInterfaces(
      /* 3 */ $asm0D.TypeRef("System.Linq.Parallel.IParallelPartitionable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.RepeatEnumerable`1/RepeatEnumerator */ 

(function RepeatEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1/RepeatEnumerator"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.RepeatEnumerable`1/RepeatEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1/RepeatEnumerator"), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.RepeatEnumerable`1/RepeatEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_element", $.GenericParameter("TResult")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_indexOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "m_currentIndex", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.MergeEnumerator`1 */ 

(function MergeEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.MergeEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.MergeEnumerator`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(2, "get_Current");

    $.Field({Static:false, Public:false}, "m_taskGroupState", $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.MergeEnumerator`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.MergeEnumerator`1")]), 
      /* 1 */ $asm09.TypeRef("System.IDisposable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1 */ 

(function AsynchronousChannelMergeEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.MergeEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1")]), 
      Name: "System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1")])])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNextSlowPath", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WaitAny", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Threading.ManualResetEventSlim")])], [])
    );

    $.Field({Static:false, Public:false}, "m_channels", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("T")])])); 
    $.Field({Static:false, Public:false}, "m_channelEvents", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Threading.ManualResetEventSlim")])); 
    $.Field({Static:false, Public:false}, "m_done", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Field({Static:false, Public:false}, "m_channelIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_currentElement", $.GenericParameter("T")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("T", "System.Linq.Parallel.AsynchronousChannelMergeEnumerator`1"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Linq.Parallel.IMergeHelper`1 */ 

JSIL.MakeInterface(
  "System.Linq.Parallel.IMergeHelper`1", false, ["TInputOutput"], function ($) {
    $.Method({}, "Execute", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "GetEnumerator", new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IMergeHelper`1")]), [], []));
    $.Method({}, "GetResultsAsArray", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IMergeHelper`1")]), [], []));
  }, []);

/* class System.Linq.Parallel.ArrayMergeHelper`1 */ 

(function ArrayMergeHelper$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ArrayMergeHelper`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ArrayMergeHelper`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Execute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ArrayMergeHelper`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResultsAsArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ArrayMergeHelper`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArrayElement", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "m_queryResults", $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")])); 
    $.Field({Static:false, Public:false}, "m_outputArray", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])); 
    $.Field({Static:false, Public:false}, "m_settings", $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")); 
    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.Parallel.IMergeHelper`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ArrayMergeHelper`1")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DefaultMergeHelper`2 */ 

(function DefaultMergeHelper$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.DefaultMergeHelper`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DefaultMergeHelper`2"), new JSIL.GenericParameter("TIgnoreKey", "System.Linq.Parallel.DefaultMergeHelper`2")]), $.Boolean, 
          $asm0D.TypeRef("System.Linq.ParallelMergeOptions"), $asm09.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $asm0D.TypeRef("System.Linq.Parallel.CancellationState"), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResultsAsArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DefaultMergeHelper`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Parallel.IMergeHelper$lTInputOutput$g.Execute", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(0, "Execute");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Parallel.IMergeHelper$lTInputOutput$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DefaultMergeHelper`2")]), [], [])
    )
      .Overrides(0, "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_taskGroupState", $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
    $.Field({Static:false, Public:false}, "m_partitions", $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")])); 
    $.Field({Static:false, Public:false}, "m_asyncChannels", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("TInputOutput")])])); 
    $.Field({Static:false, Public:false}, "m_syncChannels", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("TInputOutput")])])); 
    $.Field({Static:false, Public:false}, "m_channelEnumerator", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TInputOutput")])); 
    $.Field({Static:false, Public:false}, "m_taskScheduler", $asm09.TypeRef("System.Threading.Tasks.TaskScheduler")); 
    $.Field({Static:false, Public:false}, "m_ignoreOutput", $.Boolean); 
    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.Parallel.IMergeHelper`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DefaultMergeHelper`2")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.MergeExecutor`1 */ 

(function MergeExecutor$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.MergeExecutor`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "Execute", 
      new JSIL.MethodSignature($.Type, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.MergeExecutor`1"), "!!0"]), $.Boolean, 
          $asm0D.TypeRef("System.Linq.ParallelMergeOptions"), $asm09.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.CancellationState"), 
          $.Int32
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "Execute", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.MergeExecutor`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResultsAsArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.MergeExecutor`1")]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeAsynchronousChannels", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.MergeExecutor`1")])]), [
          $.Int32, $asm0D.TypeRef("System.Linq.ParallelMergeOptions"), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeSynchronousChannels", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.MergeExecutor`1")])]), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_mergeHelper", $asm0D.TypeRef("System.Linq.Parallel.IMergeHelper`1", [$.GenericParameter("TInputOutput")])); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.MergeExecutor`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingMergeHelper`2 */ 

(function OrderPreservingMergeHelper$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderPreservingMergeHelper`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderPreservingMergeHelper`2"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.OrderPreservingMergeHelper`2")]), $asm09.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $asm0D.TypeRef("System.Linq.Parallel.CancellationState"), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResultsAsArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderPreservingMergeHelper`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Parallel.IMergeHelper$lTInputOutput$g.Execute", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(0, "Execute");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Parallel.IMergeHelper$lTInputOutput$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderPreservingMergeHelper`2")]), [], [])
    )
      .Overrides(0, "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_taskGroupState", $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
    $.Field({Static:false, Public:false}, "m_partitions", $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "m_results", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])])); 
    $.Field({Static:false, Public:false}, "m_taskScheduler", $asm09.TypeRef("System.Threading.Tasks.TaskScheduler")); 
    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.Parallel.IMergeHelper`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderPreservingMergeHelper`2")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1 */ 

(function OrderPreservingPipeliningMergeHelper$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput"], 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1"), $.Int32]), $asm09.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $asm0D.TypeRef("System.Linq.Parallel.CancellationState"), $.Boolean, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResultsAsArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Parallel.IMergeHelper$lTOutput$g.Execute", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(0, "Execute");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Parallel.IMergeHelper$lTOutput$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_taskGroupState", $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitions", $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TOutput"), $.Int32])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_taskScheduler", $asm09.TypeRef("System.Threading.Tasks.TaskScheduler")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_autoBuffered", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_buffers", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Collections.Generic.Queue`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, $.GenericParameter("TOutput")])])])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerDone", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_consumerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_bufferLocks", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:true , Public:false}, "s_producerComparer", $asm0D.TypeRef("System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/ProducerComparer", [$.GenericParameter("TOutput")])); 
    $.Constant({Static:true , Public:false}, "INITIAL_BUFFER_SIZE", 128); 
    $.Constant({Static:true , Public:false}, "STEAL_BUFFER_SIZE", 1024); 
    $.Constant({Static:true , Public:false}, "MAX_BUFFER_SIZE", 8192); 
    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.Parallel.IMergeHelper`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/Producer */ 

(function Producer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/Producer", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "MaxKey", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "ProducerIndex", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/ProducerComparer */ 

(function ProducerComparer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/ProducerComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/Producer", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/ProducerComparer")]), $asm0D.TypeRef("System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/Producer", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/ProducerComparer")])], [])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$asm0D.TypeRef("System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/Producer", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/ProducerComparer")])])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/OrderedPipeliningMergeEnumerator */ 

(function OrderedPipeliningMergeEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.MergeEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/OrderedPipeliningMergeEnumerator")]), 
      Name: "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/OrderedPipeliningMergeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/OrderedPipeliningMergeEnumerator")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/OrderedPipeliningMergeEnumerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowIfInTearDown", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetPrivateElement", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/OrderedPipeliningMergeEnumerator")])])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryWaitForElement", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/OrderedPipeliningMergeEnumerator")])])], [])
    );

    $.Field({Static:false, Public:false}, "m_mergeHelper", $asm0D.TypeRef("System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1", [$.GenericParameter("TOutput")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerHeap", $asm0D.TypeRef("System.Linq.Parallel.FixedMaxHeap`1", [$asm0D.TypeRef("System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/Producer", [$.GenericParameter("TOutput")])])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerNextElement", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TOutput")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_privateBuffer", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Collections.Generic.Queue`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, $.GenericParameter("TOutput")])])])); 
    $.Field({Static:false, Public:false}, "m_initialized", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningMergeHelper`1/OrderedPipeliningMergeEnumerator"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SynchronousChannelMergeEnumerator`1 */ 

(function SynchronousChannelMergeEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.MergeEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.SynchronousChannelMergeEnumerator`1")]), 
      Name: "System.Linq.Parallel.SynchronousChannelMergeEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.SynchronousChannelMergeEnumerator`1")])])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Linq.Parallel.SynchronousChannelMergeEnumerator`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "m_channels", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("T")])])); 
    $.Field({Static:false, Public:false}, "m_channelIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_currentElement", $.GenericParameter("T")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("T", "System.Linq.Parallel.SynchronousChannelMergeEnumerator`1"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.HashRepartitionEnumerator`3 */ 

(function HashRepartitionEnumerator$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionEnumerator`3")]), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.HashRepartitionEnumerator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TIgnoreKey"], 
      MaximumConstructorArguments: 8, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionEnumerator`3"), new JSIL.GenericParameter("TIgnoreKey", "System.Linq.Parallel.HashRepartitionEnumerator`3")]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionEnumerator`3")]), 
          $asm0D.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
              new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionEnumerator`3"), 
              $.Int32
            ]), $asm09.TypeRef("System.Threading.CountdownEvent"), 
          $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionEnumerator`3")])])]), $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnumerateAndRedistributeElements", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionEnumerator`3")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_repartitionStream", $asm0D.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
          $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
          $.Int32
        ])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_valueExchangeMatrix", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])])])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")])); 
    $.Field({Static:false, Public:false}, "m_barrier", $asm09.TypeRef("System.Threading.CountdownEvent")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:false}, "m_mutables", $asm0D.TypeRef("System.Linq.Parallel.HashRepartitionEnumerator`3/Mutables", [
          $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
          $.GenericParameter("TIgnoreKey")
        ])); 
    $.Constant({Static:true , Public:false}, "ENUMERATION_NOT_STARTED", -1); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.HashRepartitionEnumerator`3/Mutables */ 

(function Mutables$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.HashRepartitionEnumerator`3/Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TIgnoreKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "m_currentBufferIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_currentBuffer", $asm0D.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])])); 
    $.Field({Static:false, Public:false}, "m_currentIndex", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedStream`2 */ 

(function PartitionedStream$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PartitionedStream`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.PartitionedStream`2")]), 
          $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionedStream`2"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.PartitionedStream`2")]), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyComparer", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.PartitionedStream`2")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_OrdinalIndexState", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_PartitionCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionedStream`2"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.PartitionedStream`2")])], [])
    );

    $.Field({Static:false, Public:false}, "m_partitions", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")])])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_indexState", $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState")); 
    $.Property({Static:false, Public:false}, "Item", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionedStream`2"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.PartitionedStream`2")]));

    $.Property({Static:false, Public:true }, "PartitionCount", $.Int32);

    $.Property({Static:false, Public:false}, "KeyComparer", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.PartitionedStream`2")]));

    $.Property({Static:false, Public:false}, "OrdinalIndexState", $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Linq.Parallel.HashRepartitionStream`3 */ 

(function HashRepartitionStream$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionStream`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionStream`3")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.HashRepartitionStream`3")]), 
      Name: "System.Linq.Parallel.HashRepartitionStream`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TOrderKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.HashRepartitionStream`3")]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionStream`3")]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionStream`3")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.HashRepartitionStream`3")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashRepartitionStream`3")], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("THashKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementComparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_distributionMod", $.Int32); 
    $.Constant({Static:true , Public:false}, "NULL_ELEMENT_HASH_CODE", 0); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Linq.Parallel.IPartitionedStreamRecipient`1 */ 

JSIL.MakeInterface(
  "System.Linq.Parallel.IPartitionedStreamRecipient`1", false, ["TElement"], function ($) {
    $.Method({}, "Receive", new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.IPartitionedStreamRecipient`1"), "!!0"])], ["TKey"]));
  }, []);

/* class System.Linq.Parallel.OrderedHashRepartitionEnumerator`3 */ 

(function OrderedHashRepartitionEnumerator$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")]), 
      Name: "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TOrderKey"], 
      MaximumConstructorArguments: 9, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")]), 
          $asm0D.TypeRef("System.Linq.Parallel.OrderedHashRepartitionStream`3", [
              new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3"), 
              new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")
            ]), $asm09.TypeRef("System.Threading.CountdownEvent"), 
          $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")])])]), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.ListChunk`1", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")])]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnumerateAndRedistributeElements", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")])]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_repartitionStream", $asm0D.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
          $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
          $.GenericParameter("TOrderKey")
        ])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_valueExchangeMatrix", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])])])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyExchangeMatrix", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TOrderKey")])])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TOrderKey")])); 
    $.Field({Static:false, Public:false}, "m_barrier", $asm09.TypeRef("System.Threading.CountdownEvent")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:false}, "m_mutables", $asm0D.TypeRef("System.Linq.Parallel.OrderedHashRepartitionEnumerator`3/Mutables", [
          $.GenericParameter("TInputOutput"), $.GenericParameter("THashKey"), 
          $.GenericParameter("TOrderKey")
        ])); 
    $.Constant({Static:true , Public:false}, "ENUMERATION_NOT_STARTED", -1); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedHashRepartitionEnumerator`3/Mutables */ 

(function Mutables$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderedHashRepartitionEnumerator`3/Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TOrderKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "m_currentBufferIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_currentBuffer", $asm0D.TypeRef("System.Linq.Parallel.ListChunk`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("THashKey")])])); 
    $.Field({Static:false, Public:false}, "m_currentKeyBuffer", $asm0D.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TOrderKey")])); 
    $.Field({Static:false, Public:false}, "m_currentIndex", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedHashRepartitionStream`3 */ 

(function OrderedHashRepartitionStream$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionStream`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionStream`3"), 
          new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedHashRepartitionStream`3")
        ]), 
      Name: "System.Linq.Parallel.OrderedHashRepartitionStream`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TOrderKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionStream`3"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedHashRepartitionStream`3")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionStream`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionStream`3")]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.OrderedHashRepartitionStream`3")]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderedHashRepartitionStream`3")]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1 */ 

(function PartitionedDataSource$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1")]), $.Int32, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializePartitions", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1")]), $.Int32, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakePartitions", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1"), $.Int32])]), [$asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1")]), $.Int32], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1/ArrayIndexRangeEnumerator */ 

(function ArrayIndexRangeEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ArrayIndexRangeEnumerator"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1/ArrayIndexRangeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ArrayIndexRangeEnumerator")]), $.Int32, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ArrayIndexRangeEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNextSlowPath", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementCount", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_maxChunkSize", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sectionCount", $.Int32); 
    $.Field({Static:false, Public:false}, "m_mutables", $asm0D.TypeRef("System.Linq.Parallel.PartitionedDataSource`1/ArrayIndexRangeEnumerator/Mutables", [$.GenericParameter("T")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1/ArrayIndexRangeEnumerator/Mutables */ 

(function Mutables$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1/ArrayIndexRangeEnumerator/Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "m_currentSection", $.Int32); 
    $.Field({Static:false, Public:false}, "m_currentChunkSize", $.Int32); 
    $.Field({Static:false, Public:false}, "m_currentPositionInChunk", $.Int32); 
    $.Field({Static:false, Public:false}, "m_currentChunkOffset", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1/ArrayContiguousIndexRangeEnumerator */ 

(function ArrayContiguousIndexRangeEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ArrayContiguousIndexRangeEnumerator"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1/ArrayContiguousIndexRangeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ArrayContiguousIndexRangeEnumerator")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ArrayContiguousIndexRangeEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_startIndex", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_maximumIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_currentIndex", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1/ListIndexRangeEnumerator */ 

(function ListIndexRangeEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ListIndexRangeEnumerator"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1/ListIndexRangeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ListIndexRangeEnumerator")]), $.Int32, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ListIndexRangeEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNextSlowPath", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $asm09.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementCount", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_maxChunkSize", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sectionCount", $.Int32); 
    $.Field({Static:false, Public:false}, "m_mutables", $asm0D.TypeRef("System.Linq.Parallel.PartitionedDataSource`1/ListIndexRangeEnumerator/Mutables", [$.GenericParameter("T")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1/ListIndexRangeEnumerator/Mutables */ 

(function Mutables$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1/ListIndexRangeEnumerator/Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "m_currentSection", $.Int32); 
    $.Field({Static:false, Public:false}, "m_currentChunkSize", $.Int32); 
    $.Field({Static:false, Public:false}, "m_currentPositionInChunk", $.Int32); 
    $.Field({Static:false, Public:false}, "m_currentChunkOffset", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1/ListContiguousIndexRangeEnumerator */ 

(function ListContiguousIndexRangeEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ListContiguousIndexRangeEnumerator"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1/ListContiguousIndexRangeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ListContiguousIndexRangeEnumerator")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ListContiguousIndexRangeEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $asm09.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_startIndex", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_maximumIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_currentIndex", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1/ContiguousChunkLazyEnumerator */ 

(function ContiguousChunkLazyEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ContiguousChunkLazyEnumerator"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1/ContiguousChunkLazyEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ContiguousChunkLazyEnumerator")]), $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]), 
          $.Object, $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]), 
          $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PartitionedDataSource`1/ContiguousChunkLazyEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sourceSyncLock", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_currentIndex", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_activeEnumeratorsCount", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_exceptionTracker", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean])); 
    $.Field({Static:false, Public:false}, "m_mutables", $asm0D.TypeRef("System.Linq.Parallel.PartitionedDataSource`1/ContiguousChunkLazyEnumerator/Mutables", [$.GenericParameter("T")])); 
    $.Constant({Static:true , Public:false}, "chunksPerChunkSize", 7); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionedDataSource`1/ContiguousChunkLazyEnumerator/Mutables */ 

(function Mutables$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PartitionedDataSource`1/ContiguousChunkLazyEnumerator/Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_chunkBuffer", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "m_nextChunkMaxSize", $.Int32); 
    $.Field({Static:false, Public:false}, "m_currentChunkSize", $.Int32); 
    $.Field({Static:false, Public:false}, "m_currentChunkIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_chunkBaseIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_chunkCounter", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.UnorderedHashRepartitionStream`3 */ 

(function UnorderedHashRepartitionStream$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.HashRepartitionStream`3", [
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnorderedHashRepartitionStream`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.UnorderedHashRepartitionStream`3"), 
          $asm09.TypeRef("System.Int32")
        ]), 
      Name: "System.Linq.Parallel.UnorderedHashRepartitionStream`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "THashKey", "TIgnoreKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnorderedHashRepartitionStream`3"), new JSIL.GenericParameter("TIgnoreKey", "System.Linq.Parallel.UnorderedHashRepartitionStream`3")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnorderedHashRepartitionStream`3"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.UnorderedHashRepartitionStream`3")]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.UnorderedHashRepartitionStream`3")]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnorderedHashRepartitionStream`3")]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryOperator`1 */ 

(function QueryOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), 
      Name: "System.Linq.Parallel.QueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "AsQueryOperator", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExecuteAndCollectResults", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.ListQueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1"), "!!0"]), $.Int32, 
          $.Boolean, $.Boolean, 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExecuteAndGetResultsAsArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OutputOrdered", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), [$asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Linq.ParallelMergeOptions")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), [$asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Linq.ParallelMergeOptions")]), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOpenedEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), [
          $asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Linq.ParallelMergeOptions")]), $.Boolean, 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetQueryResults", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "m_outputOrdered", $.Boolean); 
    $.Property({Static:false, Public:false}, "OutputOrdered", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.UnaryQueryOperator`2 */ 

(function UnaryQueryOperator$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.UnaryQueryOperator`2")]), 
      Name: "System.Linq.Parallel.UnaryQueryOperator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2")]), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2")]), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2")]), $.Boolean, 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Child", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "SetOrdinalIndexState", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.UnaryQueryOperator`2")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_child", $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TInput")])); 
    $.Field({Static:false, Public:false}, "m_indexState", $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState")); 
    $.Property({Static:false, Public:false}, "Child", $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2")]));

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryResults`1 */ 

(function QueryResults$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryResults`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1"), [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")], [])
    )
      .Overrides(1, "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Clear", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")], [])
    )
      .Overrides(1, "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")]), $.Int32], [])
    )
      .Overrides(1, "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")], [])
    )
      .Overrides(1, "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")]), [], [])
    )
      .Overrides(2, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lT$g.IndexOf", 
      new JSIL.MethodSignature($.Int32, [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")], [])
    )
      .Overrides(0, "IndexOf");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lT$g.Insert", 
      new JSIL.MethodSignature(null, [$.Int32, new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")], [])
    )
      .Overrides(0, "Insert");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lT$g.RemoveAt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Overrides(0, "RemoveAt");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(3, "GetEnumerator");

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")]), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Linq.Parallel.QueryResults`1/GetEnumerator>d__0 */ 

(function GetEnumerator$gd__0$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryResults`1/GetEnumerator>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1/GetEnumerator>d__0"), [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("T")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "index", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.Current", new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1/GetEnumerator>d__0"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.QueryResults`1/GetEnumerator>d__0")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults */ 

(function UnaryQueryOperatorResults$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults")]), $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults")]), 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults")])], [])
    );

    $.Field({Static:false, Public:false}, "m_childQueryResults", $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInput")])); 
    $.Field({Static:false, Public:false}, "m_op", $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")])); 
    $.Field({Static:false, Public:false}, "m_settings", $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")); 
    $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults/ChildResultsRecipient */ 

(function ChildResultsRecipient$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults/ChildResultsRecipient", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults/ChildResultsRecipient")]), $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults/ChildResultsRecipient"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults/ChildResultsRecipient")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Receive", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults/ChildResultsRecipient"), "!!0"])], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_outputRecipient", $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")])); 
    $.Field({Static:false, Public:false}, "m_op", $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")])); 
    $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_settings", $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")); 
    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults/ChildResultsRecipient")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.AssociativeAggregationOperator`3 */ 

(function AssociativeAggregationOperator$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AssociativeAggregationOperator`3"), new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3")]), 
      Name: "System.Linq.Parallel.AssociativeAggregationOperator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TIntermediate", "TOutput"], 
      MaximumConstructorArguments: 9, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AssociativeAggregationOperator`3")]), new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3"), 
          $asm09.TypeRef("System.Func`1", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3")]), $.Boolean, 
          $asm09.TypeRef("System.Func`3", [
              new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3"), new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AssociativeAggregationOperator`3"), 
              new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3")
            ]), $asm09.TypeRef("System.Func`3", [
              new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3"), new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3"), 
              new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3")
            ]), 
          $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.AssociativeAggregationOperator`3")]), $.Boolean, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryAggregationOptions")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.AssociativeAggregationOperator`3"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AssociativeAggregationOperator`3"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_seed", $.GenericParameter("TIntermediate")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_seedIsSpecified", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_throwIfEmpty", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_intermediateReduce", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TIntermediate"), $.GenericParameter("TInput"), 
          $.GenericParameter("TIntermediate")
        ])); 
    $.Field({Static:false, Public:false}, "m_finalReduce", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TIntermediate"), $.GenericParameter("TIntermediate"), 
          $.GenericParameter("TIntermediate")
        ])); 
    $.Field({Static:false, Public:false}, "m_resultSelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TIntermediate"), $.GenericParameter("TOutput")])); 
    $.Field({Static:false, Public:false}, "m_seedFactory", $asm09.TypeRef("System.Func`1", [$.GenericParameter("TIntermediate")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.AssociativeAggregationOperator`3/AssociativeAggregationOperatorEnumerator`1 */ 

(function AssociativeAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3/AssociativeAggregationOperatorEnumerator`1"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.AssociativeAggregationOperator`3/AssociativeAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TIntermediate", "TOutput", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AssociativeAggregationOperator`3/AssociativeAggregationOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.AssociativeAggregationOperator`3/AssociativeAggregationOperatorEnumerator`1")]), $asm0D.TypeRef("System.Linq.Parallel.AssociativeAggregationOperator`3", [
              new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AssociativeAggregationOperator`3/AssociativeAggregationOperatorEnumerator`1"), new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3/AssociativeAggregationOperatorEnumerator`1"), 
              new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.AssociativeAggregationOperator`3/AssociativeAggregationOperatorEnumerator`1")
            ]), 
          $.Int32, $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.AssociativeAggregationOperator`3/AssociativeAggregationOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_reduceOperator", $asm0D.TypeRef("System.Linq.Parallel.AssociativeAggregationOperator`3", [
          $.GenericParameter("TInput"), $.GenericParameter("TIntermediate"), 
          $.GenericParameter("TOutput")
        ])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:false}, "m_accumulated", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionerQueryOperator`1 */ 

(function PartitionerQueryOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1")]), 
      Name: "System.Linq.Parallel.PartitionerQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Concurrent.Partitioner`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Orderable", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetOrdinalIndexState", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [$asm09.TypeRef("System.Collections.Concurrent.Partitioner`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "m_partitioner", $asm09.TypeRef("System.Collections.Concurrent.Partitioner`1", [$.GenericParameter("TElement")])); 
    $.Property({Static:false, Public:false}, "Orderable", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionerQueryOperator`1/PartitionerQueryOperatorResults */ 

(function PartitionerQueryOperatorResults$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/PartitionerQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.PartitionerQueryOperator`1/PartitionerQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Concurrent.Partitioner`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/PartitionerQueryOperatorResults")]), $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/PartitionerQueryOperatorResults")])], [])
    );

    $.Field({Static:false, Public:false}, "m_partitioner", $asm09.TypeRef("System.Collections.Concurrent.Partitioner`1", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "m_settings", $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionerQueryOperator`1/OrderablePartitionerEnumerator */ 

(function OrderablePartitionerEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/OrderablePartitionerEnumerator"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionerQueryOperator`1/OrderablePartitionerEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int64, new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/OrderablePartitionerEnumerator")])])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/OrderablePartitionerEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false}, "m_sourceEnumerator", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.Int64, $.GenericParameter("TElement")])])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionerQueryOperator`1/PartitionerEnumerator */ 

(function PartitionerEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/PartitionerEnumerator"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.PartitionerQueryOperator`1/PartitionerEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/PartitionerEnumerator")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/PartitionerEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false}, "m_sourceEnumerator", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PartitionerQueryOperator`1/<AsSequentialQuery>d__0 */ 

(function $lAsSequentialQuery$gd__0$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PartitionerQueryOperator`1/<AsSequentialQuery>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTElement$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/<AsSequentialQuery>d__0")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/<AsSequentialQuery>d__0"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TElement")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Linq.Parallel.PartitionerQueryOperator`1", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "enumerator", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/<AsSequentialQuery>d__0"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/<AsSequentialQuery>d__0")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.PartitionerQueryOperator`1/<AsSequentialQuery>d__0")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.ScanQueryOperator`1 */ 

(function ScanQueryOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1")]), 
      Name: "System.Linq.Parallel.ScanQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Data", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1")]), [$asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Linq.ParallelMergeOptions")]), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_data", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])); 
    $.Property({Static:false, Public:true }, "Data", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1")]));

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ScanQueryOperator`1/ScanEnumerableQueryOperatorResults */ 

(function ScanEnumerableQueryOperatorResults$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1/ScanEnumerableQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.ScanQueryOperator`1/ScanEnumerableQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1/ScanEnumerableQueryOperatorResults")]), $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ScanQueryOperator`1/ScanEnumerableQueryOperatorResults")])], [])
    );

    $.Field({Static:false, Public:false}, "m_data", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "m_settings", $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.BinaryQueryOperator`3 */ 

(function BinaryQueryOperator$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3")]), 
      Name: "System.Linq.Parallel.BinaryQueryOperator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3")]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3")]), $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LeftChild", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_RightChild", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "SetOrdinalIndex", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3"), "!!1"]), 
          $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3")]), $.Boolean, 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftChild", $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TLeftInput")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightChild", $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TRightInput")])); 
    $.Field({Static:false, Public:false}, "m_indexState", $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState")); 
    $.Property({Static:false, Public:false}, "LeftChild", $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3")]));

    $.Property({Static:false, Public:false}, "RightChild", $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3")]));

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults */ 

(function BinaryQueryOperatorResults$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults")]), $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults")]), 
          $asm0D.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
              new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults"), 
              new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults")
            ]), $asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), 
          $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults")])], [])
    );

    $.Field({Static:false, Public:false}, "m_leftChildQueryResults", $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TLeftInput")])); 
    $.Field({Static:false, Public:false}, "m_rightChildQueryResults", $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TRightInput")])); 
    $.Field({Static:false, Public:false}, "m_op", $asm0D.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ])); 
    $.Field({Static:false, Public:false}, "m_settings", $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")); 
    $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/LeftChildResultsRecipient */ 

(function LeftChildResultsRecipient$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/LeftChildResultsRecipient", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/LeftChildResultsRecipient")]), $asm0D.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults", [
              new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/LeftChildResultsRecipient"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/LeftChildResultsRecipient"), 
              new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/LeftChildResultsRecipient")
            ]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Receive", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/LeftChildResultsRecipient"), "!!0"])], ["TLeftKey"])
    );

    $.Field({Static:false, Public:false}, "m_outputRecipient", $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")])); 
    $.Field({Static:false, Public:false}, "m_results", $asm0D.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ])); 
    $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_settings", $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")); 
    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/LeftChildResultsRecipient")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/RightChildResultsRecipient`1 */ 

(function RightChildResultsRecipient$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/RightChildResultsRecipient`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput", "TLeftKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/RightChildResultsRecipient`1")]), $asm0D.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
              new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/RightChildResultsRecipient`1"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/RightChildResultsRecipient`1"), 
              new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/RightChildResultsRecipient`1")
            ]), 
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/RightChildResultsRecipient`1"), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/RightChildResultsRecipient`1")]), $.Boolean, 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Receive", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/RightChildResultsRecipient`1"), "!!0"])], ["TRightKey"])
    );

    $.Field({Static:false, Public:false}, "m_outputRecipient", $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TOutput")])); 
    $.Field({Static:false, Public:false}, "m_leftPartitionedStream", $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TLeftKey")])); 
    $.Field({Static:false, Public:false}, "m_op", $asm0D.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ])); 
    $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_settings", $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")); 
    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults/RightChildResultsRecipient`1")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ExceptQueryOperator`1 */ 

(function ExceptQueryOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1"), 
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1")
        ]), 
      Name: "System.Linq.Parallel.ExceptQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1")]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1")]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1"), "!!1"]), 
          $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1")]), $.Boolean, 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1"), "!!1"]), 
          $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1")]), $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ExceptQueryOperator`1/ExceptQueryOperatorEnumerator`1 */ 

(function ExceptQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/ExceptQueryOperatorEnumerator`1"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.ExceptQueryOperator`1/ExceptQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TLeftKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/ExceptQueryOperatorEnumerator`1"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ExceptQueryOperator`1/ExceptQueryOperatorEnumerator`1")]), $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/ExceptQueryOperatorEnumerator`1"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/ExceptQueryOperatorEnumerator`1")]), $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/ExceptQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false}, "m_leftSource", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")])); 
    $.Field({Static:false, Public:false}, "m_rightSource", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32])); 
    $.Field({Static:false, Public:false}, "m_comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
    $.Field({Static:false, Public:false}, "m_hashLookup", $asm0D.TypeRef("System.Linq.Parallel.Set`1", [$.GenericParameter("TInputOutput")])); 
    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1 */ 

(function OrderedExceptQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TLeftKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1")]), $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1")]), $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1")]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ExceptQueryOperator`1/OrderedExceptQueryOperatorEnumerator`1")])], [])
    );

    $.Field({Static:false, Public:false}, "m_leftSource", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")])); 
    $.Field({Static:false, Public:false}, "m_rightSource", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32])); 
    $.Field({Static:false, Public:false}, "m_comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
    $.Field({Static:false, Public:false}, "m_leftKeyComparer", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")])); 
    $.Field({Static:false, Public:false}, "m_outputEnumerator", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TLeftKey")])])])); 
    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupJoinQueryOperator`4 */ 

(function GroupJoinQueryOperator$b4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), 
          new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.GroupJoinQueryOperator`4")
        ]), 
      Name: "System.Linq.Parallel.GroupJoinQueryOperator`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TKey", "TOutput"], 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), 
          $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), 
          $asm09.TypeRef("System.Func`3", [
              new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), 
              new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.GroupJoinQueryOperator`4")
            ]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.GroupJoinQueryOperator`4")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), "!!1"]), 
          $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), $.Boolean, 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.GroupJoinQueryOperator`4"), "!!1"]), 
          $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.GroupJoinQueryOperator`4")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftKeySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightKeySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TRightInput"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")]), 
          $.GenericParameter("TOutput")
        ])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5 */ 

(function HashJoinQueryOperatorEnumerator$b5$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5"), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")]), 
      Name: "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: [
        "TLeftInput", "TLeftKey", "TRightInput", "THashKey", 
        "TOutput"
      ], 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")]), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")]), $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5"), new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")]), $.Int32]), 
          $asm09.TypeRef("System.Func`3", [
              new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5"), 
              new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")
            ]), $asm09.TypeRef("System.Func`3", [
              new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")]), 
              new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")
            ]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("THashKey", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")]), $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftSource", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("THashKey")]), $.GenericParameter("TLeftKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightSource", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TRightInput"), $.GenericParameter("THashKey")]), $.Int32])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_singleResultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_groupResultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")]), 
          $.GenericParameter("TOutput")
        ])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("THashKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:false}, "m_mutables", $asm0D.TypeRef("System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5/Mutables", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TLeftKey"), 
          $.GenericParameter("TRightInput"), $.GenericParameter("THashKey"), 
          $.GenericParameter("TOutput")
        ])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5/Mutables */ 

(function Mutables$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.HashJoinQueryOperatorEnumerator`5/Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: [
        "TLeftInput", "TLeftKey", "TRightInput", "THashKey", 
        "TOutput"
      ], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "m_currentLeft", $.GenericParameter("TLeftInput")); 
    $.Field({Static:false, Public:false}, "m_currentLeftKey", $.GenericParameter("TLeftKey")); 
    $.Field({Static:false, Public:false}, "m_rightHashLookup", $asm0D.TypeRef("System.Linq.Parallel.HashLookup`2", [$.GenericParameter("THashKey"), $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TRightInput"), $asm0D.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TRightInput")])])])); 
    $.Field({Static:false, Public:false}, "m_currentRightMatches", $asm0D.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TRightInput")])); 
    $.Field({Static:false, Public:false}, "m_currentRightMatchesIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_outputLoopCount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntersectQueryOperator`1 */ 

(function IntersectQueryOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1"), 
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1")
        ]), 
      Name: "System.Linq.Parallel.IntersectQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1")]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1")]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1"), "!!1"]), 
          $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1")]), $.Boolean, 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1"), "!!1"]), 
          $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1")]), $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntersectQueryOperator`1/IntersectQueryOperatorEnumerator`1 */ 

(function IntersectQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/IntersectQueryOperatorEnumerator`1"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.IntersectQueryOperator`1/IntersectQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TLeftKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/IntersectQueryOperatorEnumerator`1"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.IntersectQueryOperator`1/IntersectQueryOperatorEnumerator`1")]), $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/IntersectQueryOperatorEnumerator`1"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/IntersectQueryOperatorEnumerator`1")]), $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/IntersectQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false}, "m_leftSource", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")])); 
    $.Field({Static:false, Public:false}, "m_rightSource", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32])); 
    $.Field({Static:false, Public:false}, "m_comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
    $.Field({Static:false, Public:false}, "m_hashLookup", $asm0D.TypeRef("System.Linq.Parallel.Set`1", [$.GenericParameter("TInputOutput")])); 
    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1 */ 

(function OrderedIntersectQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TLeftKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1")]), $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1")]), $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1")]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.IntersectQueryOperator`1/OrderedIntersectQueryOperatorEnumerator`1")])], [])
    );

    $.Field({Static:false, Public:false}, "m_leftSource", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")])); 
    $.Field({Static:false, Public:false}, "m_rightSource", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.Int32])); 
    $.Field({Static:false, Public:false}, "m_comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")])])); 
    $.Field({Static:false, Public:false}, "m_leftKeyComparer", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")])); 
    $.Field({Static:false, Public:false}, "m_hashLookup", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TLeftKey")])])); 
    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.JoinQueryOperator`4 */ 

(function JoinQueryOperator$b4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.JoinQueryOperator`4"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.JoinQueryOperator`4"), 
          new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.JoinQueryOperator`4")
        ]), 
      Name: "System.Linq.Parallel.JoinQueryOperator`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TKey", "TOutput"], 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.JoinQueryOperator`4")]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.JoinQueryOperator`4")]), 
          $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.JoinQueryOperator`4"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.JoinQueryOperator`4")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.JoinQueryOperator`4"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.JoinQueryOperator`4")]), 
          $asm09.TypeRef("System.Func`3", [
              new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.JoinQueryOperator`4"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.JoinQueryOperator`4"), 
              new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.JoinQueryOperator`4")
            ]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.JoinQueryOperator`4")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.JoinQueryOperator`4")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.JoinQueryOperator`4")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.JoinQueryOperator`4"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.JoinQueryOperator`4"), "!!1"]), 
          $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.JoinQueryOperator`4")]), $.Boolean, 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.JoinQueryOperator`4"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.JoinQueryOperator`4")]), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.JoinQueryOperator`4"), "!!1"]), 
          $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.JoinQueryOperator`4")]), $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftKeySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightKeySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TRightInput"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.UnionQueryOperator`1 */ 

(function UnionQueryOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), 
          new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")
        ]), 
      Name: "System.Linq.Parallel.UnionQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), "!!1"]), 
          $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")]), $.Boolean, 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamFixedBothTypes", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!1"]), 
          $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TLeftKey", "TRightKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamFixedLeftType", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1"), "!!1"]), 
          $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.UnionQueryOperator`1/UnionQueryOperatorEnumerator`2 */ 

(function UnionQueryOperatorEnumerator$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/UnionQueryOperatorEnumerator`2"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.UnionQueryOperator`1/UnionQueryOperatorEnumerator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TLeftKey", "TRightKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/UnionQueryOperatorEnumerator`2"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.UnionQueryOperator`1/UnionQueryOperatorEnumerator`2")]), $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/UnionQueryOperatorEnumerator`2"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.UnionQueryOperator`1/UnionQueryOperatorEnumerator`2")]), 
          $.Int32, $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/UnionQueryOperatorEnumerator`2")]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/UnionQueryOperatorEnumerator`2")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false}, "m_leftSource", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")])); 
    $.Field({Static:false, Public:false}, "m_rightSource", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TRightKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_hashLookup", $asm0D.TypeRef("System.Linq.Parallel.Set`1", [$.GenericParameter("TInputOutput")])); 
    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2 */ 

(function OrderedUnionQueryOperatorEnumerator$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2"), $asm0D.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2")])]), 
      Name: "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TLeftKey", "TRightKey"], 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2")]), $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2")]), 
          $.Boolean, $.Boolean, 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2")]), $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$asm0D.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2")])]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.UnionQueryOperator`1/OrderedUnionQueryOperatorEnumerator`2")])])], [])
    );

    $.Field({Static:false, Public:false}, "m_leftSource", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TLeftKey")])); 
    $.Field({Static:false, Public:false}, "m_rightSource", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TRightKey")])); 
    $.Field({Static:false, Public:false}, "m_keyComparer", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$asm0D.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])])); 
    $.Field({Static:false, Public:false}, "m_outputEnumerator", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm0D.TypeRef("System.Linq.Parallel.ConcatKey`2", [$.GenericParameter("TLeftKey"), $.GenericParameter("TRightKey")])])])])); 
    $.Field({Static:false, Public:false}, "m_leftOrdered", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_rightOrdered", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ZipQueryOperator`3 */ 

(function ZipQueryOperator$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3")]), 
      Name: "System.Linq.Parallel.ZipQueryOperator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.ZipQueryOperator`3")]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.ZipQueryOperator`3")]), 
          $asm09.TypeRef("System.Func`3", [
              new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.ZipQueryOperator`3"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.ZipQueryOperator`3"), 
              new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3")
            ])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.ZipQueryOperator`3")]), $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.ZipQueryOperator`3")]), 
          $asm09.TypeRef("System.Func`3", [
              new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.ZipQueryOperator`3"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.ZipQueryOperator`3"), 
              new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3")
            ])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftChild", $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TLeftInput")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightChild", $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TRightInput")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeLeft", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeRight", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ZipQueryOperator`3/ZipQueryOperatorResults */ 

(function ZipQueryOperatorResults$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3/ZipQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.ZipQueryOperator`3/ZipQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.ZipQueryOperator`3/ZipQueryOperatorResults")]), $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.ZipQueryOperator`3/ZipQueryOperatorResults")]), 
          $asm09.TypeRef("System.Func`3", [
              new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.ZipQueryOperator`3/ZipQueryOperatorResults"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.ZipQueryOperator`3/ZipQueryOperatorResults"), 
              new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3/ZipQueryOperatorResults")
            ]), $.Int32, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3/ZipQueryOperatorResults"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3/ZipQueryOperatorResults")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftChildResults", $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TLeftInput")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightChildResults", $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TRightInput")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionCount", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_preferStriping", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ZipQueryOperator`3/<AsSequentialQuery>d__0 */ 

(function $lAsSequentialQuery$gd__0$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ZipQueryOperator`3/<AsSequentialQuery>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally3", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally4", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTOutput$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3/<AsSequentialQuery>d__0")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTOutput$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3/<AsSequentialQuery>d__0"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TOutput")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Linq.Parallel.ZipQueryOperator`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ])); 
    $.Field({Static:false, Public:true }, "token", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:true }, "$token", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:true }, "leftEnumerator", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TLeftInput")])); 
    $.Field({Static:false, Public:true }, "rightEnumerator", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TRightInput")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTOutput$g.Current", new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3/<AsSequentialQuery>d__0"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3/<AsSequentialQuery>d__0")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.ZipQueryOperator`3/<AsSequentialQuery>d__0")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.PartitionedStreamMerger`1 */ 

(function PartitionedStreamMerger$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PartitionedStreamMerger`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput"], 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm0D.TypeRef("System.Linq.ParallelMergeOptions"), 
          $asm09.TypeRef("System.Threading.Tasks.TaskScheduler"), $.Boolean, 
          $asm0D.TypeRef("System.Linq.Parallel.CancellationState"), $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_MergeExecutor", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.MergeExecutor`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.PartitionedStreamMerger`1")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Receive", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.PartitionedStreamMerger`1"), "!!0"])], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_forEffectMerge", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_mergeOptions", $asm0D.TypeRef("System.Linq.ParallelMergeOptions")); 
    $.Field({Static:false, Public:false}, "m_isOrdered", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_mergeExecutor", $asm0D.TypeRef("System.Linq.Parallel.MergeExecutor`1", [$.GenericParameter("TOutput")])); 
    $.Field({Static:false, Public:false}, "m_taskScheduler", $asm09.TypeRef("System.Threading.Tasks.TaskScheduler")); 
    $.Field({Static:false, Public:false}, "m_queryId", $.Int32); 
    $.Field({Static:false, Public:false}, "m_cancellationState", $asm0D.TypeRef("System.Linq.Parallel.CancellationState")); 
    $.Property({Static:false, Public:false}, "MergeExecutor", $asm0D.TypeRef("System.Linq.Parallel.MergeExecutor`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.PartitionedStreamMerger`1")]));

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.PartitionedStreamMerger`1")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryOpeningEnumerator`1 */ 

(function QueryOpeningEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryOpeningEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOpeningEnumerator`1")]), $asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Linq.ParallelMergeOptions")]), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOpeningEnumerator`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenQuery", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(2, "get_Current");

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_queryOperator", $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TOutput")])); 
    $.Field({Static:false, Public:false}, "m_openedQueryEnumerator", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")])); 
    $.Field({Static:false, Public:false}, "m_querySettings", $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_mergeOptions", $asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Linq.ParallelMergeOptions")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_suppressOrderPreservation", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_moveNextIteration", $.Int32); 
    $.Field({Static:false, Public:false}, "m_hasQueryOpeningFailed", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_topLevelDisposedFlag", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_topLevelCancellationTokenSource", $asm09.TypeRef("System.Threading.CancellationTokenSource")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOpeningEnumerator`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.QueryOpeningEnumerator`1")]), 
      /* 1 */ $asm09.TypeRef("System.IDisposable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.InlinedAggregationOperator`3 */ 

(function InlinedAggregationOperator$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.InlinedAggregationOperator`3"), new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperator`3")]), 
      Name: "System.Linq.Parallel.InlinedAggregationOperator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TIntermediate", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.InlinedAggregationOperator`3")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Parallel.InlinedAggregationOperator`3"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperator`3")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperator`3"), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.InlinedAggregationOperator`3"), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Parallel.InlinedAggregationOperator`3"), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperator`3")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.InlinedAggregationOperator`3"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperator`3")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.CountAggregationOperator`1 */ 

(function CountAggregationOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.CountAggregationOperator`1"), $asm09.TypeRef("System.Int32"), 
          $asm09.TypeRef("System.Int32")
        ]), 
      Name: "System.Linq.Parallel.CountAggregationOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.CountAggregationOperator`1")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.CountAggregationOperator`1"), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1 */ 

(function InlinedAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TIntermediate"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm09.TypeRef("System.Threading.CancellationToken")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TIntermediate", "System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1")])], [])
    );

    $.Field({Static:false, Public:false}, "m_partitionIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.CountAggregationOperator`1/CountAggregationOperatorEnumerator`1 */ 

(function CountAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.CountAggregationOperator`1/CountAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.CountAggregationOperator`1/CountAggregationOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.CountAggregationOperator`1/CountAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongCountAggregationOperator`1 */ 

(function LongCountAggregationOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LongCountAggregationOperator`1"), $asm09.TypeRef("System.Int64"), 
          $asm09.TypeRef("System.Int64")
        ]), 
      Name: "System.Linq.Parallel.LongCountAggregationOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LongCountAggregationOperator`1")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LongCountAggregationOperator`1"), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongCountAggregationOperator`1/LongCountAggregationOperatorEnumerator`1 */ 

(function LongCountAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Int64")]), 
      Name: "System.Linq.Parallel.LongCountAggregationOperator`1/LongCountAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LongCountAggregationOperator`1/LongCountAggregationOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.LongCountAggregationOperator`1/LongCountAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ListQueryResults`1 */ 

(function ListQueryResults$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ListQueryResults`1")]), 
      Name: "System.Linq.Parallel.ListQueryResults`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ListQueryResults`1")]), $.Int32, 
          $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Linq.Parallel.ListQueryResults`1"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPartitionedStream", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ListQueryResults`1"), $.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ListQueryResults`1")])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm09.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "m_partitionCount", $.Int32); 
    $.Field({Static:false, Public:false}, "m_useStriping", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Parallel.OrdinalIndexState */ 

JSIL.MakeEnum(
  "System.Linq.Parallel.OrdinalIndexState", false, {
    Indexible: 0, 
    Correct: 1, 
    Increasing: 2, 
    Shuffled: 3
  }, false
);

/* struct System.Linq.Parallel.QuerySettings */ 

(function QuerySettings$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.QuerySettings", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Threading.Tasks.TaskScheduler"), $asm09.TypeRef("System.Nullable`1", [$.Int32]), 
          $asm09.TypeRef("System.Threading.CancellationToken"), $asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Linq.ParallelExecutionMode")]), 
          $asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Linq.ParallelMergeOptions")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CleanStateAtQueryEnd", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CancellationState", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.CancellationState"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_DegreeOfParallelism", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "get_Empty", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExecutionMode", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Linq.ParallelExecutionMode")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_MergeOptions", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Linq.ParallelMergeOptions")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_QueryId", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_TaskScheduler", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.Tasks.TaskScheduler"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Merge", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CancellationState", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.CancellationState")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_DegreeOfParallelism", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Nullable`1", [$.Int32])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_ExecutionMode", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Linq.ParallelExecutionMode")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_MergeOptions", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Linq.ParallelMergeOptions")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_TaskScheduler", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Threading.Tasks.TaskScheduler")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "WithDefaults", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WithPerExecutionSettings", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WithPerExecutionSettings", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.Threading.CancellationTokenSource"), $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean])], [])
    );

    $.Field({Static:false, Public:false}, "m_taskScheduler", $asm09.TypeRef("System.Threading.Tasks.TaskScheduler")); 
    $.Field({Static:false, Public:false}, "m_degreeOfParallelism", $asm09.TypeRef("System.Nullable`1", [$.Int32])); 
    $.Field({Static:false, Public:false}, "m_cancellationState", $asm0D.TypeRef("System.Linq.Parallel.CancellationState")); 
    $.Field({Static:false, Public:false}, "m_executionMode", $asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Linq.ParallelExecutionMode")])); 
    $.Field({Static:false, Public:false}, "m_mergeOptions", $asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Linq.ParallelMergeOptions")])); 
    $.Field({Static:false, Public:false}, "m_queryId", $.Int32); 
    $.Property({Static:false, Public:false}, "CancellationState", $asm0D.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Property({Static:false, Public:false}, "TaskScheduler", $asm09.TypeRef("System.Threading.Tasks.TaskScheduler"));

    $.Property({Static:false, Public:false}, "DegreeOfParallelism", $asm09.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:false}, "ExecutionMode", $asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Linq.ParallelExecutionMode")]));

    $.Property({Static:false, Public:false}, "MergeOptions", $asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Linq.ParallelMergeOptions")]));

    $.Property({Static:false, Public:false}, "QueryId", $.Int32);

    $.Property({Static:true , Public:false}, "Empty", $.Type);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderingQueryOperator`1 */ 

(function OrderingQueryOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderingQueryOperator`1")]), 
      Name: "System.Linq.Parallel.OrderingQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderingQueryOperator`1")]), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderingQueryOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderingQueryOperator`1")]), [$asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Linq.ParallelMergeOptions")]), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderingQueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "m_orderOn", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_child", $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:false}, "m_ordinalIndexState", $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState")); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryExecutionOption`1 */ 

(function QueryExecutionOption$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.QueryExecutionOption`1")]), 
      Name: "System.Linq.Parallel.QueryExecutionOption`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.QueryExecutionOption`1")]), $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.QueryExecutionOption`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_OrdinalIndexState", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.QueryExecutionOption`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "m_child", $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:false}, "m_indexState", $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState")); 
    $.Property({Static:false, Public:false, Virtual:true }, "OrdinalIndexState", $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.AnyAllSearchOperator`1 */ 

(function AnyAllSearchOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AnyAllSearchOperator`1"), $asm09.TypeRef("System.Boolean")]), 
      Name: "System.Linq.Parallel.AnyAllSearchOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AnyAllSearchOperator`1")]), $.Boolean, 
          $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AnyAllSearchOperator`1"), $.Boolean])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Boolean]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [$.Boolean]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AnyAllSearchOperator`1"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.Boolean]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.Boolean])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_qualification", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.AnyAllSearchOperator`1/AnyAllSearchOperatorEnumerator`1 */ 

(function AnyAllSearchOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Boolean"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.AnyAllSearchOperator`1/AnyAllSearchOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TKey"], 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AnyAllSearchOperator`1/AnyAllSearchOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.AnyAllSearchOperator`1/AnyAllSearchOperatorEnumerator`1")]), $.Boolean, 
          $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.AnyAllSearchOperator`1/AnyAllSearchOperatorEnumerator`1"), $.Boolean]), $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]), $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.Boolean])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_qualification", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultFoundFlag", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ConcatQueryOperator`1 */ 

(function ConcatQueryOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1"), 
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1")
        ]), 
      Name: "System.Linq.Parallel.ConcatQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1")]), $asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1"), "!!1"]), 
          $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1")]), $.Boolean, 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey", "TRightKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeLeft", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeRight", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2 */ 

(function ConcatQueryOperatorEnumerator$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2"), $asm0D.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2")])]), 
      Name: "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TLeftKey", "TRightKey"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2"), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2")]), $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorEnumerator`2")])])], [])
    );

    $.Field({Static:false, Public:false}, "m_firstSource", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TLeftKey")])); 
    $.Field({Static:false, Public:false}, "m_secondSource", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TRightKey")])); 
    $.Field({Static:false, Public:false}, "m_begunSecond", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults */ 

(function ConcatQueryOperatorResults$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.BinaryQueryOperator`3/BinaryQueryOperatorResults", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults"), 
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults")
        ]), 
      Name: "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults")]), $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults")]), 
          $asm0D.TypeRef("System.Linq.Parallel.ConcatQueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults")]), $asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults"), [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewResults", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults")]), [
          $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults")]), $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults")]), 
          $asm0D.TypeRef("System.Linq.Parallel.ConcatQueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ConcatQueryOperator`1/ConcatQueryOperatorResults")]), $asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), 
          $.Boolean
        ], [])
    );

    $.Field({Static:false, Public:false}, "m_concatOp", $asm0D.TypeRef("System.Linq.Parallel.ConcatQueryOperator`1", [$.GenericParameter("TSource")])); 
    $.Field({Static:false, Public:false}, "m_leftChildCount", $.Int32); 
    $.Field({Static:false, Public:false}, "m_rightChildCount", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Parallel.ConcatKey`2 */ 

(function ConcatKey$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.ConcatKey`2", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TLeftKey", "TRightKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatKey`2"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatKey`2"), 
          $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "MakeComparer", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IComparer`1", [$.Type]), [$asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatKey`2")]), $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatKey`2")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeLeft", 
      new JSIL.MethodSignature($.Type, [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatKey`2")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeRight", 
      new JSIL.MethodSignature($.Type, [new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatKey`2")], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftKey", $.GenericParameter("TLeftKey")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightKey", $.GenericParameter("TRightKey")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_isLeft", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ConcatKey`2/ConcatKeyComparer */ 

(function ConcatKeyComparer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ConcatKey`2/ConcatKeyComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftKey", "TRightKey"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatKey`2/ConcatKeyComparer")]), $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatKey`2/ConcatKeyComparer")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatKey`2/ConcatKeyComparer"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatKey`2/ConcatKeyComparer")]), $asm0D.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatKey`2/ConcatKeyComparer"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatKey`2/ConcatKeyComparer")])], [])
    );

    $.Field({Static:false, Public:false}, "m_leftComparer", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TLeftKey")])); 
    $.Field({Static:false, Public:false}, "m_rightComparer", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TRightKey")])); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$asm0D.TypeRef("System.Linq.Parallel.ConcatKey`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.ConcatKey`2/ConcatKeyComparer"), new JSIL.GenericParameter("TRightKey", "System.Linq.Parallel.ConcatKey`2/ConcatKeyComparer")])])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ContainsSearchOperator`1 */ 

(function ContainsSearchOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ContainsSearchOperator`1"), $asm09.TypeRef("System.Boolean")]), 
      Name: "System.Linq.Parallel.ContainsSearchOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ContainsSearchOperator`1")]), new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ContainsSearchOperator`1"), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ContainsSearchOperator`1")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Boolean]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [$.Boolean]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ContainsSearchOperator`1"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.Boolean]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_searchValue", $.GenericParameter("TInput")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInput")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ContainsSearchOperator`1/ContainsSearchOperatorEnumerator`1 */ 

(function ContainsSearchOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Boolean"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.ContainsSearchOperator`1/ContainsSearchOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TKey"], 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ContainsSearchOperator`1/ContainsSearchOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.ContainsSearchOperator`1/ContainsSearchOperatorEnumerator`1")]), new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ContainsSearchOperator`1/ContainsSearchOperatorEnumerator`1"), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ContainsSearchOperator`1/ContainsSearchOperatorEnumerator`1")]), $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]), $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_searchValue", $.GenericParameter("TInput")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInput")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultFoundFlag", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean])); 
    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DefaultIfEmptyQueryOperator`1 */ 

(function DefaultIfEmptyQueryOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1")]), 
      Name: "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1")]), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_defaultValue", $.GenericParameter("TSource")); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DefaultIfEmptyQueryOperator`1/DefaultIfEmptyQueryOperatorEnumerator`1 */ 

(function DefaultIfEmptyQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1/DefaultIfEmptyQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1/DefaultIfEmptyQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1/DefaultIfEmptyQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1/DefaultIfEmptyQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1/DefaultIfEmptyQueryOperatorEnumerator`1")]), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1/DefaultIfEmptyQueryOperatorEnumerator`1"), 
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]), $asm09.TypeRef("System.Threading.CountdownEvent"), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1/DefaultIfEmptyQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DefaultIfEmptyQueryOperator`1/DefaultIfEmptyQueryOperatorEnumerator`1")])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "m_lookedForEmpty", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_partitionIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_partitionCount", $.Int32); 
    $.Field({Static:false, Public:false}, "m_defaultValue", $.GenericParameter("TSource")); 
    $.Field({Static:false, Public:false}, "m_sharedEmptyCount", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    $.Field({Static:false, Public:false}, "m_sharedLatch", $asm09.TypeRef("System.Threading.CountdownEvent")); 
    $.Field({Static:false, Public:false}, "m_cancelToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DistinctQueryOperator`1 */ 

(function DistinctQueryOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1")]), 
      Name: "System.Linq.Parallel.DistinctQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1")]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1")]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TInputOutput")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DistinctQueryOperator`1/DistinctQueryOperatorEnumerator`1 */ 

(function DistinctQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1/DistinctQueryOperatorEnumerator`1"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.DistinctQueryOperator`1/DistinctQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1/DistinctQueryOperatorEnumerator`1"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DistinctQueryOperator`1/DistinctQueryOperatorEnumerator`1")]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1/DistinctQueryOperatorEnumerator`1")]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1/DistinctQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "m_hashLookup", $asm0D.TypeRef("System.Linq.Parallel.Set`1", [$.GenericParameter("TInputOutput")])); 
    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DistinctQueryOperator`1/OrderedDistinctQueryOperatorEnumerator`1 */ 

(function OrderedDistinctQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1/OrderedDistinctQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DistinctQueryOperator`1/OrderedDistinctQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.DistinctQueryOperator`1/OrderedDistinctQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1/OrderedDistinctQueryOperatorEnumerator`1"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DistinctQueryOperator`1/OrderedDistinctQueryOperatorEnumerator`1")]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1/OrderedDistinctQueryOperatorEnumerator`1")]), 
          $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DistinctQueryOperator`1/OrderedDistinctQueryOperatorEnumerator`1")]), $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.DistinctQueryOperator`1/OrderedDistinctQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DistinctQueryOperator`1/OrderedDistinctQueryOperatorEnumerator`1")])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TInputOutput"), $asm0D.TypeRef("System.Linq.Parallel.NoKeyMemoizationRequired")]), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "m_hashLookup", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "m_keyComparer", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "m_hashLookupEnumerator", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TInputOutput")]), $.GenericParameter("TKey")])])); 
    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ElementAtQueryOperator`1 */ 

(function ElementAtQueryOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1")]), 
      Name: "System.Linq.Parallel.ElementAtQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Aggregate", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1")]), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_index", $.Int32); 
    $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ElementAtQueryOperator`1/ElementAtQueryOperatorEnumerator */ 

(function ElementAtQueryOperatorEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1/ElementAtQueryOperatorEnumerator"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.ElementAtQueryOperator`1/ElementAtQueryOperatorEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1/ElementAtQueryOperatorEnumerator"), $.Int32]), $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean]), $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ElementAtQueryOperator`1/ElementAtQueryOperatorEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.Int32])); 
    $.Field({Static:false, Public:false}, "m_index", $.Int32); 
    $.Field({Static:false, Public:false}, "m_resultFoundFlag", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean])); 
    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FirstQueryOperator`1 */ 

(function FirstQueryOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1")]), 
      Name: "System.Linq.Parallel.FirstQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1"), $.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeNeeded", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FirstQueryOperator`1/FirstQueryOperatorEnumerator */ 

(function FirstQueryOperatorEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1/FirstQueryOperatorEnumerator"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.FirstQueryOperator`1/FirstQueryOperatorEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1/FirstQueryOperatorEnumerator"), $.Int32]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1/FirstQueryOperatorEnumerator"), $.Boolean]), 
          $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]), $asm09.TypeRef("System.Threading.CountdownEvent"), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.FirstQueryOperator`1/FirstQueryOperatorEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.Int32])); 
    $.Field({Static:false, Public:false}, "m_predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:false}, "m_alreadySearched", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_sharedFirstCandidate", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    $.Field({Static:false, Public:false}, "m_sharedBarrier", $asm09.TypeRef("System.Threading.CountdownEvent")); 
    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ForAllOperator`1 */ 

(function ForAllOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1"), new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1")]), 
      Name: "System.Linq.Parallel.ForAllOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1")]), $asm09.TypeRef("System.Action`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RunSynchronously", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementAction", $asm09.TypeRef("System.Action`1", [$.GenericParameter("TInput")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ForAllOperator`1/ForAllEnumerator`1 */ 

(function ForAllEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1/ForAllEnumerator`1"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.ForAllOperator`1/ForAllEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1/ForAllEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.ForAllOperator`1/ForAllEnumerator`1")]), $asm09.TypeRef("System.Action`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1/ForAllEnumerator`1")]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.ForAllOperator`1/ForAllEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementAction", $asm09.TypeRef("System.Action`1", [$.GenericParameter("TInput")])); 
    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupByQueryOperator`3 */ 

(function GroupByQueryOperator$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByQueryOperator`3"), $asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperator`3")])]), 
      Name: "System.Linq.Parallel.GroupByQueryOperator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByQueryOperator`3")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3")]), 
          $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperator`3")]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperator`3")])]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperator`3")])]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByQueryOperator`3"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperator`3")])]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelper", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3")]), "!!1"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperator`3")])]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TIgnoreKey", "TKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamHelperOrdered", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3")]), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperator`3"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperator`3")])]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementSelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupByQueryOperatorEnumerator`4 */ 

(function GroupByQueryOperatorEnumerator$b4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")]), 
      Name: "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildHashLookup", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")]), $asm0D.TypeRef("System.Linq.Parallel.ListChunk`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")])]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")])]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:false}, "m_mutables", $asm0D.TypeRef("System.Linq.Parallel.GroupByQueryOperatorEnumerator`4/Mutables", [
          $.GenericParameter("TSource"), $.GenericParameter("TGroupKey"), 
          $.GenericParameter("TElement"), $.GenericParameter("TOrderKey")
        ])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupByQueryOperatorEnumerator`4/Mutables */ 

(function Mutables$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.GroupByQueryOperatorEnumerator`4/Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "m_hashLookup", $asm0D.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm0D.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TElement")])])); 
    $.Field({Static:false, Public:false}, "m_hashLookupIndex", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3 */ 

(function GroupByIdentityQueryOperatorEnumerator$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.GroupByQueryOperatorEnumerator`4", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3"), 
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3")
        ]), 
      Name: "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TOrderKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3")]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3")]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildHashLookup", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3")]), $asm0D.TypeRef("System.Linq.Parallel.ListChunk`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByIdentityQueryOperatorEnumerator`3")])]), [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4 */ 

(function GroupByElementSelectorQueryOperatorEnumerator$b4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.GroupByQueryOperatorEnumerator`4", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4"), 
          new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4")
        ]), 
      Name: "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4")]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4")]), 
          $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4")]), $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildHashLookup", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4")]), $asm0D.TypeRef("System.Linq.Parallel.ListChunk`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByElementSelectorQueryOperatorEnumerator`4")])]), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementSelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4 */ 

(function OrderedGroupByQueryOperatorEnumerator$b4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), 
      Name: "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildHashLookup", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")]), $asm0D.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/GroupKeyData", [
              new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4"), 
              new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")
            ])]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")])]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")]), $.GenericParameter("TOrderKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TGroupKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TGroupKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_orderComparer", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:false}, "m_mutables", $asm0D.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/Mutables", [
          $.GenericParameter("TSource"), $.GenericParameter("TGroupKey"), 
          $.GenericParameter("TElement"), $.GenericParameter("TOrderKey")
        ])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/Mutables */ 

(function Mutables$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "m_hashLookup", $asm0D.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm0D.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/GroupKeyData", [
            $.GenericParameter("TSource"), $.GenericParameter("TGroupKey"), 
            $.GenericParameter("TElement"), $.GenericParameter("TOrderKey")
          ])])); 
    $.Field({Static:false, Public:false}, "m_hashLookupIndex", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/GroupKeyData */ 

(function GroupKeyData$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/GroupKeyData", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/GroupKeyData"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/GroupKeyData"), 
          $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/GroupKeyData")])
        ], [])
    );

    $.Field({Static:false, Public:false}, "m_orderKey", $.GenericParameter("TOrderKey")); 
    $.Field({Static:false, Public:false}, "m_grouping", $asm0D.TypeRef("System.Linq.Parallel.OrderedGroupByGrouping`3", [
          $.GenericParameter("TGroupKey"), $.GenericParameter("TOrderKey"), 
          $.GenericParameter("TElement")
        ])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3 */ 

(function OrderedGroupByIdentityQueryOperatorEnumerator$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), 
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3")
        ]), 
      Name: "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TOrderKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3")]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3")]), $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3")]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildHashLookup", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3")]), $asm0D.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/GroupKeyData", [
              new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), 
              new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByIdentityQueryOperatorEnumerator`3")
            ])]), [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4 */ 

(function OrderedGroupByElementSelectorQueryOperatorEnumerator$b4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4", [
          new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), 
          new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")
        ]), 
      Name: "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TGroupKey", "TElement", "TOrderKey"], 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")]), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")]), 
          $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")]), 
          $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")]), $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildHashLookup", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.HashLookup`2", [$asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")]), $asm0D.TypeRef("System.Linq.Parallel.OrderedGroupByQueryOperatorEnumerator`4/GroupKeyData", [
              new JSIL.GenericParameter("TSource", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), 
              new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByElementSelectorQueryOperatorEnumerator`4")
            ])]), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_elementSelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GroupByGrouping`2 */ 

(function GroupByGrouping$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.GroupByGrouping`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TGroupKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByGrouping`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByGrouping`2")]), $asm0D.TypeRef("System.Linq.Parallel.ListChunk`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByGrouping`2")])])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByGrouping`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTElement$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByGrouping`2")]), [], [])
    )
      .Overrides(1, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(2, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IGrouping$lTGroupKey$cmTElement$g.get_Key", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByGrouping`2"), [], [])
    )
      .Overrides(0, "get_Key");

    $.Field({Static:false, Public:false}, "m_keyValues", $asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [$.GenericParameter("TGroupKey")]), $asm0D.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TElement")])])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IGrouping$lTGroupKey$cmTElement$g.Key", new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByGrouping`2"));

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.GroupByGrouping`2"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByGrouping`2")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.GroupByGrouping`2")]), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByGrouping`3 */ 

(function OrderedGroupByGrouping$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderedGroupByGrouping`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TGroupKey", "TOrderKey", "TElement"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByGrouping`3"), $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByGrouping`3")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByGrouping`3"), new JSIL.GenericParameter("TOrderKey", "System.Linq.Parallel.OrderedGroupByGrouping`3")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DoneAdding", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTElement$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByGrouping`3")]), [], [])
    )
      .Overrides(1, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(2, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IGrouping$lTGroupKey$cmTElement$g.get_Key", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByGrouping`3"), [], [])
    )
      .Overrides(0, "get_Key");

    $.Field({Static:false, Public:false}, "m_groupKey", $.GenericParameter("TGroupKey")); 
    $.Field({Static:false, Public:false}, "m_values", $asm0D.TypeRef("System.Linq.Parallel.GrowingArray`1", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "m_orderKeys", $asm0D.TypeRef("System.Linq.Parallel.GrowingArray`1", [$.GenericParameter("TOrderKey")])); 
    $.Field({Static:false, Public:false}, "m_orderComparer", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TOrderKey")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IGrouping$lTGroupKey$cmTElement$g.Key", new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByGrouping`3"));

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TGroupKey", "System.Linq.Parallel.OrderedGroupByGrouping`3"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByGrouping`3")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByGrouping`3")]), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderedGroupByGrouping`3/GetEnumerator>d__0 */ 

(function GetEnumerator$gd__0$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderedGroupByGrouping`3/GetEnumerator>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TGroupKey", "TOrderKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByGrouping`3/GetEnumerator>d__0"), [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TElement")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Linq.Parallel.OrderedGroupByGrouping`3", [
          $.GenericParameter("TGroupKey"), $.GenericParameter("TOrderKey"), 
          $.GenericParameter("TElement")
        ])); 
    $.Field({Static:false, Public:true }, "valueCount", $.Int32); 
    $.Field({Static:false, Public:true }, "valueArray", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "i", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByGrouping`3/GetEnumerator>d__0"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.OrderedGroupByGrouping`3/GetEnumerator>d__0")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.IndexedSelectQueryOperator`2 */ 

(function IndexedSelectQueryOperator$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2")]), 
      Name: "System.Linq.Parallel.IndexedSelectQueryOperator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2")]), $asm09.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2"), $.Int32, 
            new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2")
          ])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "InitOrdinalIndexState", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_selector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TInput"), $.Int32, 
          $.GenericParameter("TOutput")
        ])); 
    $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorEnumerator */ 

(function IndexedSelectQueryOperatorEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorEnumerator"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorEnumerator"), $.Int32]), $asm09.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorEnumerator"), $.Int32, 
            new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorEnumerator")
          ])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.Int32])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_selector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TInput"), $.Int32, 
          $.GenericParameter("TOutput")
        ])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults */ 

(function IndexedSelectQueryOperatorResults$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults")]), $asm0D.TypeRef("System.Linq.Parallel.IndexedSelectQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults")]), 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults"), [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewResults", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults")]), [
          $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults")]), $asm0D.TypeRef("System.Linq.Parallel.IndexedSelectQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.IndexedSelectQueryOperator`2/IndexedSelectQueryOperatorResults")]), 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ], [])
    );

    $.Field({Static:false, Public:false}, "m_selectOp", $asm0D.TypeRef("System.Linq.Parallel.IndexedSelectQueryOperator`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")])); 
    $.Field({Static:false, Public:false}, "m_childCount", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IndexedWhereQueryOperator`1 */ 

(function IndexedWhereQueryOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1")]), 
      Name: "System.Linq.Parallel.IndexedWhereQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1")]), $asm09.TypeRef("System.Func`3", [
            new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1"), $.Int32, 
            $.Boolean
          ])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "InitOrdinalIndexState", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_predicate", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TInputOutput"), $.Int32, 
          $.Boolean
        ])); 
    $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IndexedWhereQueryOperator`1/IndexedWhereQueryOperatorEnumerator */ 

(function IndexedWhereQueryOperatorEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1/IndexedWhereQueryOperatorEnumerator"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.IndexedWhereQueryOperator`1/IndexedWhereQueryOperatorEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1/IndexedWhereQueryOperatorEnumerator"), $.Int32]), $asm09.TypeRef("System.Func`3", [
              new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1/IndexedWhereQueryOperatorEnumerator"), $.Int32, 
              $.Boolean
            ]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.IndexedWhereQueryOperator`1/IndexedWhereQueryOperatorEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.Int32])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TInputOutput"), $.Int32, 
          $.Boolean
        ])); 
    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LastQueryOperator`1 */ 

(function LastQueryOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1")]), 
      Name: "System.Linq.Parallel.LastQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1"), $.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_prematureMergeNeeded", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LastQueryOperator`1/LastQueryOperatorEnumerator`1 */ 

(function LastQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1/LastQueryOperatorEnumerator`1"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.LastQueryOperator`1/LastQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1/LastQueryOperatorEnumerator`1"), $.Int32]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1/LastQueryOperatorEnumerator`1"), $.Boolean]), 
          $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]), $asm09.TypeRef("System.Threading.CountdownEvent"), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.LastQueryOperator`1/LastQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.Int32])); 
    $.Field({Static:false, Public:false}, "m_predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:false}, "m_alreadySearched", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_sharedLastCandidate", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    $.Field({Static:false, Public:false}, "m_sharedBarrier", $asm09.TypeRef("System.Threading.CountdownEvent")); 
    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ReverseQueryOperator`1 */ 

(function ReverseQueryOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1")]), 
      Name: "System.Linq.Parallel.ReverseQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorEnumerator`1 */ 

(function ReverseQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorEnumerator`1")]), $asm09.TypeRef("System.Threading.CancellationToken")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorEnumerator`1")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:false}, "m_buffer", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])])); 
    $.Field({Static:false, Public:false}, "m_bufferIndex", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorResults */ 

(function ReverseQueryOperatorResults$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorResults"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorResults")]), $asm0D.TypeRef("System.Linq.Parallel.ReverseQueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorResults")]), 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorResults"), [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewResults", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorResults")]), [
          $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorResults")]), $asm0D.TypeRef("System.Linq.Parallel.ReverseQueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.ReverseQueryOperator`1/ReverseQueryOperatorResults")]), 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ], [])
    );

    $.Field({Static:false, Public:false}, "m_count", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectManyQueryOperator`3 */ 

(function SelectManyQueryOperator$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3")]), 
      Name: "System.Linq.Parallel.SelectManyQueryOperator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.SelectManyQueryOperator`3")])]), 
          $asm09.TypeRef("System.Func`3", [
              new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3"), $.Int32, 
              $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.SelectManyQueryOperator`3")])
            ]), $asm09.TypeRef("System.Func`3", [
              new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.SelectManyQueryOperator`3"), 
              new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3")
            ])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "InitOrderIndex", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey"])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamIndexed", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3"), $.Int32]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3")]), 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WrapPartitionedStreamNotIndexed", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3")]), 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TLeftKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_rightChildSelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TLeftInput"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")])])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_indexedRightChildSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $.Int32, 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TRightInput")])
        ])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_resultSelector", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ])); 
    $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator */ 

(function IndexedSelectManyQueryOperatorEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator"), $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Int32"), $asm09.TypeRef("System.Int32")])]), 
      Name: "System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator"), $.Int32]), $asm0D.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3", [
              new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator"), 
              new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator")
            ]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, $.Int32])])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftSource", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TLeftInput"), $.Int32])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_selectManyOperator", $asm0D.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ])); 
    $.Field({Static:false, Public:false}, "m_currentRightSource", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TRightInput")])); 
    $.Field({Static:false, Public:false}, "m_currentRightSourceAsOutput", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")])); 
    $.Field({Static:false, Public:false}, "m_mutables", $asm0D.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator/Mutables", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator/Mutables */ 

(function Mutables$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SelectManyQueryOperator`3/IndexedSelectManyQueryOperatorEnumerator/Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "m_currentRightSourceIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_currentLeftElement", $.GenericParameter("TLeftInput")); 
    $.Field({Static:false, Public:false}, "m_currentLeftSourceIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_lhsCount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1 */ 

(function SelectManyQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1"), $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1"), $asm09.TypeRef("System.Int32")])]), 
      Name: "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput", "TLeftKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1")]), $asm0D.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3", [
              new JSIL.GenericParameter("TLeftInput", "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TRightInput", "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1"), 
              new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1")
            ]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TLeftKey", "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1"), $.Int32])])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_leftSource", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TLeftInput"), $.GenericParameter("TLeftKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_selectManyOperator", $asm0D.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput")
        ])); 
    $.Field({Static:false, Public:false}, "m_currentRightSource", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TRightInput")])); 
    $.Field({Static:false, Public:false}, "m_currentRightSourceAsOutput", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOutput")])); 
    $.Field({Static:false, Public:false}, "m_mutables", $asm0D.TypeRef("System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1/Mutables", [
          $.GenericParameter("TLeftInput"), $.GenericParameter("TRightInput"), 
          $.GenericParameter("TOutput"), $.GenericParameter("TLeftKey")
        ])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1/Mutables */ 

(function Mutables$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SelectManyQueryOperator`3/SelectManyQueryOperatorEnumerator`1/Mutables", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TLeftInput", "TRightInput", "TOutput", "TLeftKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "m_currentRightSourceIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_currentLeftElement", $.GenericParameter("TLeftInput")); 
    $.Field({Static:false, Public:false}, "m_currentLeftKey", $.GenericParameter("TLeftKey")); 
    $.Field({Static:false, Public:false}, "m_lhsCount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectQueryOperator`2 */ 

(function SelectQueryOperator$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2")]), 
      Name: "System.Linq.Parallel.SelectQueryOperator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_selector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorEnumerator`1 */ 

(function SelectQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput", "TKey"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorEnumerator`1")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorEnumerator`1")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorEnumerator`1")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInput"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_selector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults */ 

(function SelectQueryOperatorResults$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInput", "TOutput"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults")]), $asm0D.TypeRef("System.Linq.Parallel.SelectQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults")]), 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults"), [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewResults", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults")]), [
          $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults")]), $asm0D.TypeRef("System.Linq.Parallel.SelectQueryOperator`2", [new JSIL.GenericParameter("TInput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults"), new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.SelectQueryOperator`2/SelectQueryOperatorResults")]), 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ], [])
    );

    $.Field({Static:false, Public:false}, "m_selector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TInput"), $.GenericParameter("TOutput")])); 
    $.Field({Static:false, Public:false}, "m_childCount", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SingleQueryOperator`1 */ 

(function SingleQueryOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1"), new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1")]), 
      Name: "System.Linq.Parallel.SingleQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1"), $.Boolean])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SingleQueryOperator`1/SingleQueryOperatorEnumerator`1 */ 

(function SingleQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1/SingleQueryOperatorEnumerator`1"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.SingleQueryOperator`1/SingleQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1/SingleQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SingleQueryOperator`1/SingleQueryOperatorEnumerator`1")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1/SingleQueryOperatorEnumerator`1"), $.Boolean]), 
          $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TSource", "System.Linq.Parallel.SingleQueryOperator`1/SingleQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "m_predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])); 
    $.Field({Static:false, Public:false}, "m_alreadySearched", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_yieldExtra", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_totalElementCount", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SortQueryOperator`2 */ 

(function SortQueryOperator$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2")]), 
      Name: "System.Linq.Parallel.SortQueryOperator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TSortKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2"), new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperator`2")]), 
          $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperator`2")]), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_KeyComparer", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperator`2")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_KeySelector", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2"), new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperator`2")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IOrderedEnumerable$lTInputOutput$g.CreateOrderedEnumerable", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IOrderedEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2")]), [
          $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2"), "!!0"]), $asm09.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"]), 
          $.Boolean
        ], ["TKey2"])
    )
      .Overrides(3, "CreateOrderedEnumerable");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_comparer", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")])); 
    $.Property({Static:false, Public:false}, "KeySelector", $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2"), new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperator`2")]));

    $.Property({Static:false, Public:false}, "KeyComparer", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperator`2")]));

    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
      /* 3 */ $asm0D.TypeRef("System.Linq.IOrderedEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2")]), 
      /* 4 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2")]), 
      /* 5 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SortQueryOperator`2/<>c__DisplayClass1`1 */ 

(function $l$gc__DisplayClass1$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SortQueryOperator`2/<>c__DisplayClass1`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TSortKey", "TKey2"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "$lSystem.Linq.IOrderedEnumerable$lTInputOutput$g.CreateOrderedEnumerable$gb__0", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperator`2/<>c__DisplayClass1`1"), new JSIL.GenericParameter("TKey2", "System.Linq.Parallel.SortQueryOperator`2/<>c__DisplayClass1`1")]), [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperator`2/<>c__DisplayClass1`1")], [])
    );

    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")])); 
    $.Field({Static:false, Public:true }, "key2Selector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey2")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.SortQueryOperatorResults`2 */ 

(function SortQueryOperatorResults$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorResults`2")]), 
      Name: "System.Linq.Parallel.SortQueryOperatorResults`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TSortKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorResults`2")]), $asm0D.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorResults`2"), new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperatorResults`2")]), 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GivePartitionedStream", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorResults`2")])], [])
    );

    $.Field({Static:false, Public:false}, "m_childQueryResults", $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [$.GenericParameter("TInputOutput")])); 
    $.Field({Static:false, Public:false}, "m_op", $asm0D.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")])); 
    $.Field({Static:false, Public:false}, "m_settings", $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")); 
    $.Field({Static:false, Public:false}, "m_preferStriping", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SortQueryOperatorResults`2/ChildResultsRecipient */ 

(function ChildResultsRecipient$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SortQueryOperatorResults`2/ChildResultsRecipient", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TSortKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorResults`2/ChildResultsRecipient")]), $asm0D.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorResults`2/ChildResultsRecipient"), new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperatorResults`2/ChildResultsRecipient")]), 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Receive", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorResults`2/ChildResultsRecipient"), "!!0"])], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_outputRecipient", $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [$.GenericParameter("TInputOutput")])); 
    $.Field({Static:false, Public:false}, "m_op", $asm0D.TypeRef("System.Linq.Parallel.SortQueryOperator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")])); 
    $.Field({Static:false, Public:false}, "m_settings", $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")); 
    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorResults`2/ChildResultsRecipient")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SortQueryOperatorEnumerator`3 */ 

(function SortQueryOperatorEnumerator$b3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperatorEnumerator`3")]), 
      Name: "System.Linq.Parallel.SortQueryOperatorEnumerator`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey", "TSortKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SortQueryOperatorEnumerator`3")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorEnumerator`3"), new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperatorEnumerator`3")]), 
          $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperatorEnumerator`3")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyComparer", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperatorEnumerator`3")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortQueryOperatorEnumerator`3")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperatorEnumerator`3")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keySelector", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TSortKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_keyComparer", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TSortKey")])); 
    $.Property({Static:false, Public:true }, "KeyComparer", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TSortKey", "System.Linq.Parallel.SortQueryOperatorEnumerator`3")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TakeOrSkipQueryOperator`1 */ 

(function TakeOrSkipQueryOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1"), new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1")]), 
      Name: "System.Linq.Parallel.TakeOrSkipQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1")]), $.Int32, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OutputOrdinalIndexState", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_take", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorEnumerator */ 

(function TakeOrSkipQueryOperatorEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorEnumerator"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorEnumerator"), $.Int32]), $.Int32, 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.FixedMaxHeap`1", [$.Int32]), 
          $asm09.TypeRef("System.Threading.CountdownEvent"), $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TResult"), $.Int32])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_take", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sharedIndices", $asm0D.TypeRef("System.Linq.Parallel.FixedMaxHeap`1", [$.Int32])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sharedBarrier", $asm09.TypeRef("System.Threading.CountdownEvent")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:false}, "m_buffer", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TResult"), $.Int32])])); 
    $.Field({Static:false, Public:false}, "m_bufferIndex", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorResults */ 

(function TakeOrSkipQueryOperatorResults$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2/UnaryQueryOperatorResults", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorResults"), new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorResults")]), 
      Name: "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorResults", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorResults")]), $asm0D.TypeRef("System.Linq.Parallel.TakeOrSkipQueryOperator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorResults")]), 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ElementsCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsIndexible", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElement", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorResults"), [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewResults", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorResults")]), [
          $asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorResults")]), $asm0D.TypeRef("System.Linq.Parallel.TakeOrSkipQueryOperator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipQueryOperator`1/TakeOrSkipQueryOperatorResults")]), 
          $asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean
        ], [])
    );

    $.Field({Static:false, Public:false}, "m_takeOrSkipOp", $asm0D.TypeRef("System.Linq.Parallel.TakeOrSkipQueryOperator`1", [$.GenericParameter("TResult")])); 
    $.Field({Static:false, Public:false}, "m_childCount", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "IsIndexible", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ElementsCount", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1 */ 

(function TakeOrSkipWhileQueryOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1"), new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1")]), 
      Name: "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1"), $.Boolean]), 
          $asm09.TypeRef("System.Func`3", [
              new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1"), $.Int32, 
              $.Boolean
            ]), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OutputOrderIndexState", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean])); 
    $.Field({Static:false, Public:false}, "m_indexedPredicate", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TResult"), $.Int32, 
          $.Boolean
        ])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_take", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_prematureMerge", $.Boolean); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1/TakeOrSkipWhileQueryOperatorEnumerator */ 

(function TakeOrSkipWhileQueryOperatorEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1/TakeOrSkipWhileQueryOperatorEnumerator"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1/TakeOrSkipWhileQueryOperatorEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1/TakeOrSkipWhileQueryOperatorEnumerator"), $.Int32]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1/TakeOrSkipWhileQueryOperatorEnumerator"), $.Boolean]), 
          $asm09.TypeRef("System.Func`3", [
              new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1/TakeOrSkipWhileQueryOperatorEnumerator"), $.Int32, 
              $.Boolean
            ]), $.Boolean, 
          $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32]), $asm09.TypeRef("System.Threading.CountdownEvent"), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TResult", "System.Linq.Parallel.TakeOrSkipWhileQueryOperator`1/TakeOrSkipWhileQueryOperatorEnumerator")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TResult"), $.Int32])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_indexedPredicate", $asm09.TypeRef("System.Func`3", [
          $.GenericParameter("TResult"), $.Int32, 
          $.Boolean
        ])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_take", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sharedLowFalse", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sharedBarrier", $asm09.TypeRef("System.Threading.CountdownEvent")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:false}, "m_buffer", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.GenericParameter("TResult"), $.Int32])])); 
    $.Field({Static:false, Public:false}, "m_bufferIndex", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.WhereQueryOperator`1 */ 

(function WhereQueryOperator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.UnaryQueryOperator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1"), new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1")]), 
      Name: "System.Linq.Parallel.WhereQueryOperator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1"), $.Boolean])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsSequentialQuery", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1")]), [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LimitsParallelism", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Open", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryResults`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1")]), [$asm0D.TypeRef("System.Linq.Parallel.QuerySettings"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WrapPartitionedStream", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1"), "!!0"]), $asm0D.TypeRef("System.Linq.Parallel.IPartitionedStreamRecipient`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1")]), 
          $.Boolean, $asm0D.TypeRef("System.Linq.Parallel.QuerySettings")
        ], ["TKey"])
    );

    $.Field({Static:false, Public:false}, "m_predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.Boolean])); 
    $.Property({Static:false, Public:false, Virtual:true }, "LimitsParallelism", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.WhereQueryOperator`1/WhereQueryOperatorEnumerator`1 */ 

(function WhereQueryOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1/WhereQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.WhereQueryOperator`1/WhereQueryOperatorEnumerator`1")]), 
      Name: "System.Linq.Parallel.WhereQueryOperator`1/WhereQueryOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1/WhereQueryOperatorEnumerator`1"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.WhereQueryOperator`1/WhereQueryOperatorEnumerator`1")]), $asm09.TypeRef("System.Func`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1/WhereQueryOperatorEnumerator`1"), $.Boolean]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.WhereQueryOperator`1/WhereQueryOperatorEnumerator`1")]), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.WhereQueryOperator`1/WhereQueryOperatorEnumerator`1")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_predicate", $asm09.TypeRef("System.Func`2", [$.GenericParameter("TInputOutput"), $.Boolean])); 
    $.Field({Static:false, Public:false}, "m_cancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:false}, "m_outputLoopCount", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.CancellationState */ 

(function CancellationState$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.CancellationState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MergedCancellationToken", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.CancellationToken"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowIfCanceled", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowWithStandardMessageIfCanceled", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Threading.CancellationToken")], [])
    );

    $.Field({Static:false, Public:false}, "InternalCancellationTokenSource", $asm09.TypeRef("System.Threading.CancellationTokenSource")); 
    $.Field({Static:false, Public:false}, "ExternalCancellationToken", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:false}, "MergedCancellationTokenSource", $asm09.TypeRef("System.Threading.CancellationTokenSource")); 
    $.Field({Static:false, Public:false}, "TopLevelDisposedFlag", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Boolean])); 
    $.Constant({Static:true , Public:false}, "POLL_INTERVAL", 63); 
    $.Property({Static:false, Public:false}, "MergedCancellationToken", $asm09.TypeRef("System.Threading.CancellationToken"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryTask */ 

(function QueryTask$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryTask", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "BaseWork", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RunAsynchronously", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.Tasks.Task"), [$asm09.TypeRef("System.Threading.Tasks.TaskScheduler")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RunSynchronously", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.Tasks.Task"), [$asm09.TypeRef("System.Threading.Tasks.TaskScheduler")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RunTaskSynchronously", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Work", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "m_taskIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_groupState", $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
    $.Field({Static:true , Public:false}, "s_runTaskSynchronouslyDelegate", $asm09.TypeRef("System.Action`1", [$.Object]), function ($pi) {
        return $asm09.System.Action$b1.Of($asm09.System.Object).New($pi, $pi.RunTaskSynchronously);
      }); 
    $.Field({Static:true , Public:false}, "s_baseWorkDelegate", $asm09.TypeRef("System.Action`1", [$.Object])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SpoolingTaskBase */ 

(function SpoolingTaskBase$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryTask"), 
      Name: "System.Linq.Parallel.SpoolingTaskBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingFinally", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingWork", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Work", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingSpoolingTask`2 */ 

(function OrderPreservingSpoolingTask$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), 
      Name: "System.Linq.Parallel.OrderPreservingSpoolingTask`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
          $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderPreservingSpoolingTask`2")])]), $asm0D.TypeRef("System.Linq.Parallel.SortHelper`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderPreservingSpoolingTask`2")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "Spool", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderPreservingSpoolingTask`2"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.OrderPreservingSpoolingTask`2")]), 
          $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.OrderPreservingSpoolingTask`2")])]), $asm09.TypeRef("System.Threading.Tasks.TaskScheduler")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingWork", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "m_results", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])])); 
    $.Field({Static:false, Public:false}, "m_sortHelper", $asm0D.TypeRef("System.Linq.Parallel.SortHelper`1", [$.GenericParameter("TInputOutput")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingSpoolingTask`2/<>c__DisplayClass3 */ 

(function $l$gc__DisplayClass3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderPreservingSpoolingTask`2/<>c__DisplayClass3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:true }, "maxToRunInParallel", $.Int32); 
    $.Field({Static:false, Public:true }, "sortHelpers", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.SortHelper`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")])])); 
    $.Field({Static:false, Public:true }, "groupState", $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
    $.Field({Static:false, Public:true }, "results", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])])); 
    $.Field({Static:false, Public:true }, "taskScheduler", $asm09.TypeRef("System.Threading.Tasks.TaskScheduler")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`1 */ 

(function OrderPreservingPipeliningSpoolingTask$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), 
      Name: "System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput"], 
      MaximumConstructorArguments: 10, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`1"), $.Int32]), $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Collections.Generic.Queue`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`1")])])]), $.Object, 
          $asm09.TypeRef("System.Threading.Tasks.TaskScheduler"), $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Spool", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`1"), $.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $jsilcore.TypeRef("System.Array", [$.Boolean]), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Collections.Generic.Queue`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, new JSIL.GenericParameter("TOutput", "System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`1")])])]), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm09.TypeRef("System.Threading.Tasks.TaskScheduler"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingFinally", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingWork", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_taskGroupState", $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_taskScheduler", $asm09.TypeRef("System.Threading.Tasks.TaskScheduler")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partition", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TOutput"), $.Int32])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_consumerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_producerDone", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_partitionIndex", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_buffers", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Collections.Generic.Queue`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, $.GenericParameter("TOutput")])])])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_bufferLock", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_autoBuffered", $.Boolean); 
    $.Constant({Static:true , Public:false}, "PRODUCER_BUFFER_AUTO_SIZE", 16); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`1/<>c__DisplayClass2 */ 

(function $l$gc__DisplayClass2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.OrderPreservingPipeliningSpoolingTask`1/<>c__DisplayClass2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOutput"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:true }, "degreeOfParallelism", $.Int32); 
    $.Field({Static:false, Public:true }, "groupState", $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
    $.Field({Static:false, Public:true }, "partitions", $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TOutput"), $.Int32])); 
    $.Field({Static:false, Public:true }, "consumerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Field({Static:false, Public:true }, "producerWaiting", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Field({Static:false, Public:true }, "producerDone", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    $.Field({Static:false, Public:true }, "buffers", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Collections.Generic.Queue`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Int32, $.GenericParameter("TOutput")])])])); 
    $.Field({Static:false, Public:true }, "bufferLocks", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:true }, "taskScheduler", $asm09.TypeRef("System.Threading.Tasks.TaskScheduler")); 
    $.Field({Static:false, Public:true }, "autoBuffered", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.QueryLifecycle */ 

(function QueryLifecycle$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Parallel.QueryLifecycle", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "LogicalQueryExecutionBegin", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "LogicalQueryExecutionEnd", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.QueryTaskGroupState */ 

(function QueryTaskGroupState$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.QueryTaskGroupState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.CancellationState"), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_CancellationState", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.CancellationState"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_IsAlreadyEnded", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_QueryId", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "QueryBegin", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Threading.Tasks.Task")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "QueryEnd", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:false}, "m_rootTask", $asm09.TypeRef("System.Threading.Tasks.Task")); 
    $.Field({Static:false, Public:false}, "m_alreadyEnded", $.Int32); 
    $.Field({Static:false, Public:false}, "m_cancellationState", $asm0D.TypeRef("System.Linq.Parallel.CancellationState")); 
    $.Field({Static:false, Public:false}, "m_queryId", $.Int32); 
    $.Property({Static:false, Public:false}, "IsAlreadyEnded", $.Boolean);

    $.Property({Static:false, Public:false}, "CancellationState", $asm0D.TypeRef("System.Linq.Parallel.CancellationState"));

    $.Property({Static:false, Public:false}, "QueryId", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Scheduling */ 

(function Scheduling$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Parallel.Scheduling", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultChunkSize", 
      new JSIL.MethodSignature($.Int32, [], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultDegreeOfParallelism", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:true , Public:false}, "DefaultDegreeOfParallelism", $.Int32); 
    $.Constant({Static:true , Public:false}, "DefaultPreserveOrder", false); 
    $.Constant({Static:true , Public:false}, "DEFAULT_BOUNDED_BUFFER_CAPACITY", 512); 
    $.Constant({Static:true , Public:false}, "DEFAULT_BYTES_PER_CHUNK", 512); 
    $.Constant({Static:true , Public:false}, "ZOMBIED_PRODUCER_TIMEOUT", -1); 
    $.Constant({Static:true , Public:false}, "MAX_SUPPORTED_DOP", 63); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SpoolingTask */ 

(function SpoolingTask$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Parallel.SpoolingTask", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "SpoolForAll", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Threading.Tasks.TaskScheduler")
        ], ["TInputOutput", "TIgnoreKey"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SpoolPipeline", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!1"]), 
          $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", ["!!0"])]), $asm09.TypeRef("System.Threading.Tasks.TaskScheduler")
        ], ["TInputOutput", "TIgnoreKey"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SpoolStopAndGo", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!1"]), 
          $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.SynchronousChannel`1", ["!!0"])]), $asm09.TypeRef("System.Threading.Tasks.TaskScheduler")
        ], ["TInputOutput", "TIgnoreKey"])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SpoolingTask/<>c__DisplayClass1`2 */ 

(function $l$gc__DisplayClass1$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SpoolingTask/<>c__DisplayClass1`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:true }, "groupState", $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
    $.Field({Static:false, Public:true }, "partitions", $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")])); 
    $.Field({Static:false, Public:true }, "channels", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("TInputOutput")])])); 
    $.Field({Static:false, Public:true }, "taskScheduler", $asm09.TypeRef("System.Threading.Tasks.TaskScheduler")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.SpoolingTask/<>c__DisplayClass4`2 */ 

(function $l$gc__DisplayClass4$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SpoolingTask/<>c__DisplayClass4`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:true }, "groupState", $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
    $.Field({Static:false, Public:true }, "partitions", $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")])); 
    $.Field({Static:false, Public:true }, "channels", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("TInputOutput")])])); 
    $.Field({Static:false, Public:true }, "taskScheduler", $asm09.TypeRef("System.Threading.Tasks.TaskScheduler")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.SpoolingTask/<>c__DisplayClass7`2 */ 

(function $l$gc__DisplayClass7$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SpoolingTask/<>c__DisplayClass7`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:true }, "groupState", $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
    $.Field({Static:false, Public:true }, "partitions", $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")])); 
    $.Field({Static:false, Public:true }, "taskScheduler", $asm09.TypeRef("System.Threading.Tasks.TaskScheduler")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.StopAndGoSpoolingTask`2 */ 

(function StopAndGoSpoolingTask$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), 
      Name: "System.Linq.Parallel.StopAndGoSpoolingTask`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.StopAndGoSpoolingTask`2"), new JSIL.GenericParameter("TIgnoreKey", "System.Linq.Parallel.StopAndGoSpoolingTask`2")]), $asm0D.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.StopAndGoSpoolingTask`2")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingFinally", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingWork", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")])); 
    $.Field({Static:false, Public:false}, "m_destination", $asm0D.TypeRef("System.Linq.Parallel.SynchronousChannel`1", [$.GenericParameter("TInputOutput")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PipelineSpoolingTask`2 */ 

(function PipelineSpoolingTask$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), 
      Name: "System.Linq.Parallel.PipelineSpoolingTask`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.PipelineSpoolingTask`2"), new JSIL.GenericParameter("TIgnoreKey", "System.Linq.Parallel.PipelineSpoolingTask`2")]), $asm0D.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.PipelineSpoolingTask`2")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingFinally", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingWork", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")])); 
    $.Field({Static:false, Public:false}, "m_destination", $asm0D.TypeRef("System.Linq.Parallel.AsynchronousChannel`1", [$.GenericParameter("TInputOutput")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ForAllSpoolingTask`2 */ 

(function ForAllSpoolingTask$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.SpoolingTaskBase"), 
      Name: "System.Linq.Parallel.ForAllSpoolingTask`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TIgnoreKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ForAllSpoolingTask`2"), new JSIL.GenericParameter("TIgnoreKey", "System.Linq.Parallel.ForAllSpoolingTask`2")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingFinally", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SpoolingWork", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TIgnoreKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.CancellableEnumerable */ 

(function CancellableEnumerable$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Parallel.CancellableEnumerable", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "Wrap", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Threading.CancellationToken")], ["TElement"])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.CancellableEnumerable/<Wrap>d__0`1 */ 

(function $lWrap$gd__0$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.CancellableEnumerable/<Wrap>d__0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally4", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTElement$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.CancellableEnumerable/<Wrap>d__0`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TElement", "System.Linq.Parallel.CancellableEnumerable/<Wrap>d__0`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TElement")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "token", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:true }, "$token", $asm09.TypeRef("System.Threading.CancellationToken")); 
    $.Field({Static:false, Public:true }, "count", $.Int32); 
    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TElement")); 
    $.Field({Static:false, Public:true }, "$wrap3", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", new JSIL.GenericParameter("TElement", "System.Linq.Parallel.CancellableEnumerable/<Wrap>d__0`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.CancellableEnumerable/<Wrap>d__0`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.CancellableEnumerable/<Wrap>d__0`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.ExchangeUtilities */ 

(function ExchangeUtilities$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Parallel.ExchangeUtilities", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "HashRepartition", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", ["!!0", "!!1"]), $.Int32]), [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TElement", "THashKey", "TIgnoreKey"])
    );

    $.ExternalMethod({Static:true , Public:false}, "HashRepartitionOrdered", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", ["!!0", "!!1"]), "!!2"]), [
          $asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", "!!2"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TElement", "THashKey", "TOrderKey"])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWorseThan", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"), $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "PartitionDataSource", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", ["!!0", $.Int32]), [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32, 
          $.Boolean
        ], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "Worse", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"), [$asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"), $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* struct System.Linq.Parallel.NoKeyMemoizationRequired */ 

(function NoKeyMemoizationRequired$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.NoKeyMemoizationRequired", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FixedMaxHeap`1 */ 

(function FixedMaxHeap$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.FixedMaxHeap`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.FixedMaxHeap`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_MaxValue", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TElement", "System.Linq.Parallel.FixedMaxHeap`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Size", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HeapifyLastLeaf", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "HeapifyRoot", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Insert", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.FixedMaxHeap`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveMax", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceMax", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.FixedMaxHeap`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Swap", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.Field({Static:false, Public:false}, "m_elements", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "m_count", $.Int32); 
    $.Field({Static:false, Public:false}, "m_comparer", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TElement")])); 
    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "Size", $.Int32);

    $.Property({Static:false, Public:false}, "MaxValue", new JSIL.GenericParameter("TElement", "System.Linq.Parallel.FixedMaxHeap`1"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.GrowingArray`1 */ 

(function GrowingArray$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.GrowingArray`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Linq.Parallel.GrowingArray`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyFrom", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.GrowingArray`1")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_InternalArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.GrowingArray`1")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "GrowArray", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "m_array", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "m_count", $.Int32); 
    $.Constant({Static:true , Public:false}, "DEFAULT_ARRAY_SIZE", 1024); 
    $.Property({Static:false, Public:false}, "InternalArray", $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Parallel.GrowingArray`1")]));

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.HashLookup`2 */ 

(function HashLookup$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.HashLookup`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2"), new JSIL.GenericParameter("TValue", "System.Linq.Parallel.HashLookup`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AreKeysEqual", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Find", 
      new JSIL.MethodSignature($.Boolean, [
          new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2"), $.Boolean, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TValue", "System.Linq.Parallel.HashLookup`2")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2"), new JSIL.GenericParameter("TValue", "System.Linq.Parallel.HashLookup`2")]), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetKeyHashCode", 
      new JSIL.MethodSignature($.Int32, [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Resize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2"), new JSIL.GenericParameter("TValue", "System.Linq.Parallel.HashLookup`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TValue", "System.Linq.Parallel.HashLookup`2")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "buckets", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "slots", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.HashLookup`2/Slot", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])); 
    $.Field({Static:false, Public:false}, "count", $.Int32); 
    $.Field({Static:false, Public:false}, "freeList", $.Int32); 
    $.Field({Static:false, Public:false}, "comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $.Property({Static:false, Public:false}, "Item", new JSIL.GenericParameter("TValue", "System.Linq.Parallel.HashLookup`2"));

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "Item", $asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.HashLookup`2"), new JSIL.GenericParameter("TValue", "System.Linq.Parallel.HashLookup`2")]));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct System.Linq.Parallel.HashLookup`2/Slot */ 

(function Slot$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.HashLookup`2/Slot", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
    $.Field({Static:false, Public:false}, "key", $.GenericParameter("TKey")); 
    $.Field({Static:false, Public:false}, "value", $.GenericParameter("TValue")); 
    $.Field({Static:false, Public:false}, "next", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ListChunk`1 */ 

(function ListChunk$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ListChunk`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ListChunk`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Next", 
      new JSIL.MethodSignature($.Type, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ListChunk`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_chunk", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])); 
    $.Field({Static:false, Public:false}, "m_chunkCount", $.Int32); 
    $.Field({Static:false, Public:false}, "m_nextChunk", $.Type); 
    $.Field({Static:false, Public:false}, "m_tailChunk", $.Type); 
    $.Property({Static:false, Public:false}, "Next", $.Type);

    $.Property({Static:false, Public:false}, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ListChunk`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ListChunk`1/<GetEnumerator>d__0 */ 

(function $lGetEnumerator$gd__0$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ListChunk`1/<GetEnumerator>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTInputOutput$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ListChunk`1/<GetEnumerator>d__0"), [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TInputOutput")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TInputOutput")])); 
    $.Field({Static:false, Public:true }, "curr", $asm0D.TypeRef("System.Linq.Parallel.ListChunk`1", [$.GenericParameter("TInputOutput")])); 
    $.Field({Static:false, Public:true }, "i", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTInputOutput$g.Current", new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ListChunk`1/<GetEnumerator>d__0"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.ListChunk`1/<GetEnumerator>d__0")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.Lookup`2 */ 

(function Lookup$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.Lookup`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Lookup`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Lookup`2")]), [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Lookup`2")])]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(2, "GetEnumerator");

    $.Field({Static:false, Public:false}, "m_dict", $asm09.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("TKey"), $asm0D.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])])); 
    $.Field({Static:false, Public:false}, "m_comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "m_defaultKeyGrouping", $asm0D.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Lookup`2")]));

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.ILookup`2", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Lookup`2")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Lookup`2")])]), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Linq.Parallel.Lookup`2/<GetEnumerator>d__0 */ 

(function $lGetEnumerator$gd__0$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.Lookup`2/<GetEnumerator>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally3", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.IGrouping$lTKey$cmTElement$g$g.get_Current", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Lookup`2/<GetEnumerator>d__0")]), [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $asm0D.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Linq.Parallel.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "grouping", $asm0D.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "$wrap2", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.IGrouping$lTKey$cmTElement$g$g.Current", $asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Lookup`2/<GetEnumerator>d__0")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0D.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.Lookup`2/<GetEnumerator>d__0"), new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Lookup`2/<GetEnumerator>d__0")])]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* struct System.Linq.Parallel.Pair`2 */ 

(function Pair$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.Pair`2", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T", "U"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Linq.Parallel.Pair`2"), new JSIL.GenericParameter("U", "System.Linq.Parallel.Pair`2")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_First", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Linq.Parallel.Pair`2"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Second", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("U", "System.Linq.Parallel.Pair`2"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_First", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Linq.Parallel.Pair`2")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Second", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("U", "System.Linq.Parallel.Pair`2")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "m_first", $.GenericParameter("T")); 
    $.Field({Static:false, Public:false}, "m_second", $.GenericParameter("U")); 
    $.Property({Static:false, Public:true }, "First", new JSIL.GenericParameter("T", "System.Linq.Parallel.Pair`2"));

    $.Property({Static:false, Public:true }, "Second", new JSIL.GenericParameter("U", "System.Linq.Parallel.Pair`2"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PairComparer`2 */ 

(function PairComparer$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.PairComparer`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T", "U"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PairComparer`2")]), $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("U", "System.Linq.Parallel.PairComparer`2")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PairComparer`2"), new JSIL.GenericParameter("U", "System.Linq.Parallel.PairComparer`2")]), $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PairComparer`2"), new JSIL.GenericParameter("U", "System.Linq.Parallel.PairComparer`2")])], [])
    );

    $.Field({Static:false, Public:false}, "m_comparer1", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "m_comparer2", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("U")])); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [new JSIL.GenericParameter("T", "System.Linq.Parallel.PairComparer`2"), new JSIL.GenericParameter("U", "System.Linq.Parallel.PairComparer`2")])])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ReverseComparer`1 */ 

(function ReverseComparer$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ReverseComparer`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ReverseComparer`1")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [new JSIL.GenericParameter("T", "System.Linq.Parallel.ReverseComparer`1"), new JSIL.GenericParameter("T", "System.Linq.Parallel.ReverseComparer`1")], [])
    );

    $.Field({Static:false, Public:false}, "m_comparer", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("T")])); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.ReverseComparer`1")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Set`1 */ 

(function Set$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.Set`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Set`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Set`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Set`1")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Find", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Set`1"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.Set`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Resize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false}, "buckets", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "slots", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.Set`1/Slot", [$.GenericParameter("TElement")])])); 
    $.Field({Static:false, Public:false}, "count", $.Int32); 
    $.Field({Static:false, Public:false}, "freeList", $.Int32); 
    $.Field({Static:false, Public:false}, "comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TElement")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Parallel.Set`1/Slot */ 

(function Slot$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.Set`1/Slot", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
    $.Field({Static:false, Public:false}, "value", $.GenericParameter("TElement")); 
    $.Field({Static:false, Public:false}, "next", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Shared`1 */ 

(function Shared$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.Shared`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Linq.Parallel.Shared`1")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "Value", $.GenericParameter("T")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SortHelper`1 */ 

(function SortHelper$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.SortHelper`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Sort", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortHelper`1")]), [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.SortHelper`2 */ 

(function SortHelper$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.SortHelper`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortHelper`2")]), 
      Name: "System.Linq.Parallel.SortHelper`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TInputOutput", "TKey"], 
      MaximumConstructorArguments: 10, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortHelper`2"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SortHelper`2")]), $.Int32, 
          $.Int32, $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState"), 
          $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])]), $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState"), 
          $asm09.TypeRef("System.Collections.Generic.IComparer`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SortHelper`2")]), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.GrowingArray`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SortHelper`2")])]), 
          $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortHelper`2")])]), $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Threading.Barrier")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "BuildKeysFromSource", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Parallel.GrowingArray`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SortHelper`2")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortHelper`2")])])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputePartnerIndex", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateSortHelpers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$asm0D.TypeRef("System.Linq.Parallel.PartitionedStream`2", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortHelper`2"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SortHelper`2")]), $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeSortCooperatively", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "QuickSort", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SortHelper`2")]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "QuickSortIndicesInPlace", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.GrowingArray`1", [new JSIL.GenericParameter("TKey", "System.Linq.Parallel.SortHelper`2")]), $asm09.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortHelper`2")]), 
          $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Sort", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("TInputOutput", "System.Linq.Parallel.SortHelper`2")]), [], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TInputOutput"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "m_partitionCount", $.Int32); 
    $.Field({Static:false, Public:false}, "m_partitionIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_groupState", $asm0D.TypeRef("System.Linq.Parallel.QueryTaskGroupState")); 
    $.Field({Static:false, Public:false}, "m_sharedIndices", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])])); 
    $.Field({Static:false, Public:false}, "m_sharedKeys", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.GrowingArray`1", [$.GenericParameter("TKey")])])); 
    $.Field({Static:false, Public:false}, "m_sharedValues", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TInputOutput")])])); 
    $.Field({Static:false, Public:false}, "m_sharedBarriers", $jsilcore.TypeRef("System.Array", [$asm0B.TypeRef("System.Threading.Barrier")])); 
    $.Field({Static:false, Public:false}, "m_indexState", $asm0D.TypeRef("System.Linq.Parallel.OrdinalIndexState")); 
    $.Field({Static:false, Public:false}, "m_keyComparer", $asm09.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")])); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Util */ 

(function Util$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Parallel.Util", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultComparer", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Comparer`1", ["!!0"]), [], ["TKey"])
    );

    $.ExternalMethod({Static:true , Public:false}, "Sign", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.Field({Static:true , Public:false}, "s_fastIntComparer", $asm0D.TypeRef("System.Linq.Parallel.Util/FastIntComparer")); 
    $.Field({Static:true , Public:false}, "s_fastLongComparer", $asm0D.TypeRef("System.Linq.Parallel.Util/FastLongComparer")); 
    $.Field({Static:true , Public:false}, "s_fastFloatComparer", $asm0D.TypeRef("System.Linq.Parallel.Util/FastFloatComparer")); 
    $.Field({Static:true , Public:false}, "s_fastDoubleComparer", $asm0D.TypeRef("System.Linq.Parallel.Util/FastDoubleComparer")); 
    $.Field({Static:true , Public:false}, "s_fastDateTimeComparer", $asm0D.TypeRef("System.Linq.Parallel.Util/FastDateTimeComparer")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Util/FastIntComparer */ 

(function FastIntComparer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Collections.Generic.Comparer`1", [$asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.Util/FastIntComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Util/FastLongComparer */ 

(function FastLongComparer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Collections.Generic.Comparer`1", [$asm09.TypeRef("System.Int64")]), 
      Name: "System.Linq.Parallel.Util/FastLongComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Int64, $.Int64], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Util/FastFloatComparer */ 

(function FastFloatComparer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Collections.Generic.Comparer`1", [$asm09.TypeRef("System.Single")]), 
      Name: "System.Linq.Parallel.Util/FastFloatComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Single, $.Single], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Util/FastDoubleComparer */ 

(function FastDoubleComparer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Collections.Generic.Comparer`1", [$asm09.TypeRef("System.Double")]), 
      Name: "System.Linq.Parallel.Util/FastDoubleComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Double, $.Double], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.Util/FastDateTimeComparer */ 

(function FastDateTimeComparer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Collections.Generic.Comparer`1", [$asm09.TypeRef("System.DateTime")]), 
      Name: "System.Linq.Parallel.Util/FastDateTimeComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.DateTime"), $asm09.TypeRef("System.DateTime")], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Parallel.Wrapper`1 */ 

(function Wrapper$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.Wrapper`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Linq.Parallel.Wrapper`1")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "Value", $.GenericParameter("T")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Parallel.WrapperEqualityComparer`1 */ 

(function WrapperEqualityComparer$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Linq.Parallel.WrapperEqualityComparer`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.WrapperEqualityComparer`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.WrapperEqualityComparer`1")]), $asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.WrapperEqualityComparer`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.WrapperEqualityComparer`1")])], [])
    );

    $.Field({Static:false, Public:false}, "m_comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm0D.TypeRef("System.Linq.Parallel.Wrapper`1", [new JSIL.GenericParameter("T", "System.Linq.Parallel.WrapperEqualityComparer`1")])])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Win32");
JSIL.DeclareNamespace("Microsoft.Win32.SafeHandles");
/* class Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle */ 

(function SafeBCryptAlgorithmHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BCryptCloseAlgorithmProvider", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [$asm09.TypeRef("System.IntPtr"), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm09.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeBCryptHashHandle */ 

(function SafeBCryptHashHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeBCryptHashHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BCryptDestroyHash", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [$asm09.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm09.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_HashObject", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HashObject", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IntPtr")], [])
    );

    $.Field({Static:false, Public:false}, "m_hashObject", $asm09.TypeRef("System.IntPtr")); 
    $.Property({Static:false, Public:false}, "HashObject", $asm09.TypeRef("System.IntPtr"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeAxlBufferHandle */ 

(function SafeAxlBufferHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeAxlBufferHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProcessHeap", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "HeapFree", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.IntPtr"), $.Int32, 
          $asm09.TypeRef("System.IntPtr")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeCapiHashHandle */ 

(function SafeCapiHashHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeCapiHashHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CryptDestroyHash", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "get_InvalidHandle", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Property({Static:true , Public:true }, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeCapiKeyHandle */ 

(function SafeCapiKeyHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeCapiKeyHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CryptDestroyKey", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidHandle", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Property({Static:true , Public:false}, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeCspHandle */ 

(function SafeCspHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeCspHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CryptContextAddRef", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $asm09.TypeRef("System.IntPtr"), 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm09.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CryptReleaseContext", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.IntPtr"), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm09.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Duplicate", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeNCryptHandle */ 

(function SafeNCryptHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeNCryptHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
      new JSIL.MethodSignature("!!0", [], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "DuplicateDuplicatedHandle", 
      new JSIL.MethodSignature("!!0", [], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "DuplicateOwnerHandle", 
      new JSIL.MethodSignature("!!0", [], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Holder", 
      new JSIL.MethodSignature($.Type, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseNativeHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "set_Holder", 
      new JSIL.MethodSignature(null, [$.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.Field({Static:false, Public:false}, "m_ownershipState", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle/OwnershipState")); 
    $.Field({Static:false, Public:false}, "m_holder", $.Type); 
    $.Property({Static:false, Public:false}, "Holder", $.Type);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* enum Microsoft.Win32.SafeHandles.SafeNCryptHandle/OwnershipState */ 

JSIL.MakeEnum(
  "Microsoft.Win32.SafeHandles.SafeNCryptHandle/OwnershipState", false, {
    Owner: 0, 
    Duplicate: 1, 
    Holder: 2
  }, false
);

/* class Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle */ 

(function SafeNCryptKeyHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), 
      Name: "Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptFreeObject", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm09.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseNativeHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle */ 

(function SafeNCryptProviderHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), 
      Name: "Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptFreeObject", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm09.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseNativeHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetHandleValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle */ 

(function SafeNCryptSecretHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), 
      Name: "Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "NCryptFreeObject", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm09.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseNativeHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

JSIL.DeclareNamespace("System.Security");
/* enum System.Security.ManifestKinds */ 

JSIL.MakeEnum(
  "System.Security.ManifestKinds", true, {
    None: 0, 
    Deployment: 1, 
    Application: 2, 
    ApplicationAndDeployment: 3
  }, true
);

JSIL.DeclareNamespace("System.Security.Cryptography");
/* class System.Security.Cryptography.AesCryptoServiceProvider */ 

(function AesCryptoServiceProvider$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Security.Cryptography.Aes"), 
      Name: "System.Security.Cryptography.AesCryptoServiceProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.Cryptography.ICryptoTransform"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CreateDecryptor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.Cryptography.ICryptoTransform"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CreateEncryptor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "FindSupportedKeySizes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Security.Cryptography.KeySizes")]), [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateIV", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateKey", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeySize", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAlgorithmId", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Key", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_KeySize", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_supportedKeySizes", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Security.Cryptography.KeySizes")])); 
    $.Field({Static:true , Public:false}, "s_defaultKeySize", $.Int32); 
    $.Field({Static:false, Public:false}, "m_cspHandle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle")); 
    $.Field({Static:false, Public:false}, "m_key", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Key", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "KeySize", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.AesManaged */ 

(function AesManaged$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Security.Cryptography.Aes"), 
      Name: "System.Security.Cryptography.AesManaged", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.Cryptography.ICryptoTransform"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.Cryptography.ICryptoTransform"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateIV", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateKey", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FeedbackSize", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IV", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeySize", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Mode", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.Cryptography.CipherMode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Padding", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.Cryptography.PaddingMode"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_FeedbackSize", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_IV", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Key", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_KeySize", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Mode", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Security.Cryptography.CipherMode")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Padding", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Security.Cryptography.PaddingMode")], [])
    );

    $.Field({Static:false, Public:false}, "m_rijndael", $asm09.TypeRef("System.Security.Cryptography.RijndaelManaged")); 
    $.Property({Static:false, Public:true , Virtual:true }, "FeedbackSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IV", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "KeySize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Mode", $asm09.TypeRef("System.Security.Cryptography.CipherMode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Padding", $asm09.TypeRef("System.Security.Cryptography.PaddingMode"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.BCryptNative */ 

(function BCryptNative$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "get_BCryptSupported", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetInt32Property", 
      new JSIL.MethodSignature($.Int32, ["!!0", $.String], ["T"])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetProperty", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), ["!!0", $.String], ["T"])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MapAlgorithmIdToMagic", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Security.Cryptography.BCryptNative/KeyBlobMagicNumber")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OpenAlgorithm", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), [$.String, $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_bcryptSupported", $asm09.TypeRef("System.Nullable`1", [$.Boolean])); 
    function BCryptNative__cctor () {
      $thisType.s_bcryptSupported = new ($asm09.System.Nullable$b1.Of($asm09.System.Boolean)) ();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      BCryptNative__cctor
    );

    $.Property({Static:true , Public:false}, "BCryptSupported", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.BCryptNative/ErrorCode */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.BCryptNative/ErrorCode", false, {
    BufferToSmall: -1073741789, 
    ObjectNameNotFound: -1073741772, 
    Success: 0
  }, false
);

/* class System.Security.Cryptography.BCryptNative/UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative/UnsafeNativeMethods", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "BCryptCreateHash", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle")]), 
          $asm09.TypeRef("System.IntPtr"), $.Int32, 
          $asm09.TypeRef("System.IntPtr"), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BCryptFinishHash", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BCryptGetAlgorithmProperty", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BCryptGetHashProperty", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BCryptGetProperty", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BCryptHashData", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BCryptOpenAlgorithmProvider", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.BCryptNative/ErrorCode"), [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle")]), $.String, 
          $.String, $.Int32
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* delegate System.Security.Cryptography.BCryptNative/BCryptPropertyGetter`1 */ 

JSIL.MakeDelegate("System.Security.Cryptography.BCryptNative/BCryptPropertyGetter`1", false, ["T"]);

/* class System.Security.Cryptography.BCryptNative/AlgorithmName */ 

(function AlgorithmName$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative/AlgorithmName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "ECDHP256", "ECDH_P256"); 
    $.Constant({Static:true , Public:true }, "ECDHP384", "ECDH_P384"); 
    $.Constant({Static:true , Public:true }, "ECDHP521", "ECDH_P521"); 
    $.Constant({Static:true , Public:true }, "ECDsaP256", "ECDSA_P256"); 
    $.Constant({Static:true , Public:true }, "ECDsaP384", "ECDSA_P384"); 
    $.Constant({Static:true , Public:true }, "ECDsaP521", "ECDSA_P521"); 
    $.Constant({Static:true , Public:true }, "MD5", "MD5"); 
    $.Constant({Static:true , Public:true }, "Sha1", "SHA1"); 
    $.Constant({Static:true , Public:true }, "Sha256", "SHA256"); 
    $.Constant({Static:true , Public:true }, "Sha384", "SHA384"); 
    $.Constant({Static:true , Public:true }, "Sha512", "SHA512"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.BCryptNative/HashPropertyName */ 

(function HashPropertyName$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative/HashPropertyName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "HashLength", "HashDigestLength"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.BCryptNative/KeyBlobMagicNumber */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.BCryptNative/KeyBlobMagicNumber", false, {
    ECDHPublicP256: 827016005, 
    ECDsaPublicP256: 827540293, 
    ECDHPublicP384: 860570437, 
    ECDsaPublicP384: 861094725, 
    ECDHPublicP521: 894124869, 
    ECDsaPublicP521: 894649157
  }, false
);

/* class System.Security.Cryptography.BCryptNative/KeyDerivationFunction */ 

(function KeyDerivationFunction$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative/KeyDerivationFunction", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "Hash", "HASH"); 
    $.Constant({Static:true , Public:true }, "Hmac", "HMAC"); 
    $.Constant({Static:true , Public:true }, "Tls", "TLS_PRF"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.BCryptNative/ProviderName */ 

(function ProviderName$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative/ProviderName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "MicrosoftPrimitiveProvider", "Microsoft Primitive Provider"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.BCryptNative/ObjectPropertyName */ 

(function ObjectPropertyName$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative/ObjectPropertyName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "ObjectLength", "ObjectLength"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.BCryptHashAlgorithm */ 

(function BCryptHashAlgorithm$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.BCryptHashAlgorithm", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Security.Cryptography.CngAlgorithm"), $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashStream", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_algorithmHandle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle")); 
    $.Field({Static:false, Public:false}, "m_hashHandle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle")); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngAlgorithm */ 

(function CngAlgorithm$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngAlgorithm", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Algorithm", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellmanP256", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellmanP384", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellmanP521", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDsaP256", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDsaP384", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDsaP521", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MD5", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sha1", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sha256", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sha384", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sha512", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:true , Public:false}, "s_ecdhp256", $.Type); 
    $.Field({Static:true , Public:false}, "s_ecdhp384", $.Type); 
    $.Field({Static:true , Public:false}, "s_ecdhp521", $.Type); 
    $.Field({Static:true , Public:false}, "s_ecdsap256", $.Type); 
    $.Field({Static:true , Public:false}, "s_ecdsap384", $.Type); 
    $.Field({Static:true , Public:false}, "s_ecdsap521", $.Type); 
    $.Field({Static:true , Public:false}, "s_md5", $.Type); 
    $.Field({Static:true , Public:false}, "s_sha1", $.Type); 
    $.Field({Static:true , Public:false}, "s_sha256", $.Type); 
    $.Field({Static:true , Public:false}, "s_sha384", $.Type); 
    $.Field({Static:true , Public:false}, "s_sha512", $.Type); 
    $.Field({Static:false, Public:false}, "m_algorithm", $.String); 
    $.Property({Static:false, Public:true }, "Algorithm", $.String);

    $.Property({Static:true , Public:true }, "ECDiffieHellmanP256", $.Type);

    $.Property({Static:true , Public:true }, "ECDiffieHellmanP384", $.Type);

    $.Property({Static:true , Public:true }, "ECDiffieHellmanP521", $.Type);

    $.Property({Static:true , Public:true }, "ECDsaP256", $.Type);

    $.Property({Static:true , Public:true }, "ECDsaP384", $.Type);

    $.Property({Static:true , Public:true }, "ECDsaP521", $.Type);

    $.Property({Static:true , Public:true }, "MD5", $.Type);

    $.Property({Static:true , Public:true }, "Sha1", $.Type);

    $.Property({Static:true , Public:true }, "Sha256", $.Type);

    $.Property({Static:true , Public:true }, "Sha384", $.Type);

    $.Property({Static:true , Public:true }, "Sha512", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngAlgorithmGroup */ 

(function CngAlgorithmGroup$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngAlgorithmGroup", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AlgorithmGroup", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_DiffieHellman", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Dsa", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellman", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDsa", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Rsa", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:true , Public:false}, "s_dh", $.Type); 
    $.Field({Static:true , Public:false}, "s_dsa", $.Type); 
    $.Field({Static:true , Public:false}, "s_ecdh", $.Type); 
    $.Field({Static:true , Public:false}, "s_ecdsa", $.Type); 
    $.Field({Static:true , Public:false}, "s_rsa", $.Type); 
    $.Field({Static:false, Public:false}, "m_algorithmGroup", $.String); 
    $.Property({Static:false, Public:true }, "AlgorithmGroup", $.String);

    $.Property({Static:true , Public:true }, "DiffieHellman", $.Type);

    $.Property({Static:true , Public:true }, "Dsa", $.Type);

    $.Property({Static:true , Public:true }, "ECDiffieHellman", $.Type);

    $.Property({Static:true , Public:true }, "ECDsa", $.Type);

    $.Property({Static:true , Public:true }, "Rsa", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.CngKeyHandleOpenOptions */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CngKeyHandleOpenOptions", true, {
    None: 0, 
    EphemeralKey: 1
  }, true
);

/* class System.Security.Cryptography.CngKey */ 

(function CngKey$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "BuildKeyContainerPermission", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.Permissions.KeyContainerPermission"), [$asm09.TypeRef("System.Security.Permissions.KeyContainerPermissionFlags")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Security.Cryptography.CngAlgorithm")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Security.Cryptography.CngAlgorithm"), $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm0D.TypeRef("System.Security.Cryptography.CngAlgorithm"), $.String, 
          $asm0D.TypeRef("System.Security.Cryptography.CngKeyCreationParameters")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Delete", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm0D.TypeRef("System.Security.Cryptography.CngProvider")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm0D.TypeRef("System.Security.Cryptography.CngProvider"), 
          $asm0D.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Export", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm0D.TypeRef("System.Security.Cryptography.CngKeyBlobFormat")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Algorithm", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngAlgorithm"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_AlgorithmGroup", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngAlgorithmGroup"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ExportPolicy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngExportPolicies"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Handle", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsEphemeral", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsMachineKey", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_KeyName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_KeySize", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_KeyUsage", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngKeyUsages"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ParentWindowHandle", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Provider", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngProvider"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderHandle", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_UIPolicy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngUIPolicy"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_UniqueName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetProperty", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngProperty"), [$.String, $asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HasProperty", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Import", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm0D.TypeRef("System.Security.Cryptography.CngKeyBlobFormat")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Import", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm0D.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"), 
          $asm0D.TypeRef("System.Security.Cryptography.CngProvider")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Open", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Open", 
      new JSIL.MethodSignature($.Type, [$.String, $asm0D.TypeRef("System.Security.Cryptography.CngProvider")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Open", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm0D.TypeRef("System.Security.Cryptography.CngProvider"), 
          $asm0D.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Open", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm0D.TypeRef("System.Security.Cryptography.CngKeyHandleOpenOptions")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsEphemeral", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ParentWindowHandle", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetKeyProperties", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm0D.TypeRef("System.Security.Cryptography.CngKeyCreationParameters")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SetProperty", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Security.Cryptography.CngProperty")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_keyHandle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")); 
    $.Field({Static:false, Public:false}, "m_kspHandle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle")); 
    $.Property({Static:false, Public:true }, "AlgorithmGroup", $asm0D.TypeRef("System.Security.Cryptography.CngAlgorithmGroup"));

    $.Property({Static:false, Public:true }, "Algorithm", $asm0D.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Property({Static:false, Public:true }, "ExportPolicy", $asm0D.TypeRef("System.Security.Cryptography.CngExportPolicies"));

    $.Property({Static:false, Public:true }, "Handle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"));

    $.Property({Static:false, Public:true }, "IsEphemeral", $.Boolean);

    $.Property({Static:false, Public:true }, "IsMachineKey", $.Boolean);

    $.Property({Static:false, Public:true }, "KeyName", $.String);

    $.Property({Static:false, Public:true }, "KeySize", $.Int32);

    $.Property({Static:false, Public:true }, "KeyUsage", $asm0D.TypeRef("System.Security.Cryptography.CngKeyUsages"));

    $.Property({Static:false, Public:true }, "ParentWindowHandle", $asm09.TypeRef("System.IntPtr"));

    $.Property({Static:false, Public:true }, "Provider", $asm0D.TypeRef("System.Security.Cryptography.CngProvider"));

    $.Property({Static:false, Public:true }, "ProviderHandle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"));

    $.Property({Static:false, Public:true }, "UniqueName", $.String);

    $.Property({Static:false, Public:true }, "UIPolicy", $asm0D.TypeRef("System.Security.Cryptography.CngUIPolicy"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngKeyBlobFormat */ 

(function CngKeyBlobFormat$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngKeyBlobFormat", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_EccPrivateBlob", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_EccPublicBlob", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Format", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_GenericPrivateBlob", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GenericPublicBlob", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OpaqueTransportBlob", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Pkcs8PrivateBlob", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:true , Public:false}, "s_eccPrivate", $.Type); 
    $.Field({Static:true , Public:false}, "s_eccPublic", $.Type); 
    $.Field({Static:true , Public:false}, "s_genericPrivate", $.Type); 
    $.Field({Static:true , Public:false}, "s_genericPublic", $.Type); 
    $.Field({Static:true , Public:false}, "s_opaqueTransport", $.Type); 
    $.Field({Static:true , Public:false}, "s_pkcs8Private", $.Type); 
    $.Field({Static:false, Public:false}, "m_format", $.String); 
    $.Property({Static:false, Public:true }, "Format", $.String);

    $.Property({Static:true , Public:true }, "EccPrivateBlob", $.Type);

    $.Property({Static:true , Public:true }, "EccPublicBlob", $.Type);

    $.Property({Static:true , Public:true }, "GenericPrivateBlob", $.Type);

    $.Property({Static:true , Public:true }, "GenericPublicBlob", $.Type);

    $.Property({Static:true , Public:true }, "OpaqueTransportBlob", $.Type);

    $.Property({Static:true , Public:true }, "Pkcs8PrivateBlob", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngKeyCreationParameters */ 

(function CngKeyCreationParameters$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngKeyCreationParameters", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExportPolicy", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Security.Cryptography.CngExportPolicies")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_KeyCreationOptions", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngKeyCreationOptions"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_KeyUsage", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Security.Cryptography.CngKeyUsages")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngPropertyCollection"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_ParametersNoDemand", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngPropertyCollection"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentWindowHandle", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Provider", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngProvider"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_UIPolicy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngUIPolicy"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_ExportPolicy", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Security.Cryptography.CngExportPolicies")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_KeyCreationOptions", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Security.Cryptography.CngKeyCreationOptions")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_KeyUsage", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Security.Cryptography.CngKeyUsages")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_ParentWindowHandle", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Provider", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Security.Cryptography.CngProvider")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UIPolicy", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Security.Cryptography.CngUIPolicy")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "m_exportPolicy", $asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Security.Cryptography.CngExportPolicies")])); 
    $.Field({Static:false, Public:false}, "m_keyCreationOptions", $asm0D.TypeRef("System.Security.Cryptography.CngKeyCreationOptions")); 
    $.Field({Static:false, Public:false}, "m_keyUsage", $asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Security.Cryptography.CngKeyUsages")])); 
    $.Field({Static:false, Public:false}, "m_parameters", $asm0D.TypeRef("System.Security.Cryptography.CngPropertyCollection")); 
    $.Field({Static:false, Public:false}, "m_parentWindowHandle", $asm09.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:false}, "m_provider", $asm0D.TypeRef("System.Security.Cryptography.CngProvider")); 
    $.Field({Static:false, Public:false}, "m_uiPolicy", $asm0D.TypeRef("System.Security.Cryptography.CngUIPolicy")); 
    $.Property({Static:false, Public:true }, "ExportPolicy", $asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Security.Cryptography.CngExportPolicies")]));

    $.Property({Static:false, Public:true }, "KeyCreationOptions", $asm0D.TypeRef("System.Security.Cryptography.CngKeyCreationOptions"));

    $.Property({Static:false, Public:true }, "KeyUsage", $asm09.TypeRef("System.Nullable`1", [$asm0D.TypeRef("System.Security.Cryptography.CngKeyUsages")]));

    $.Property({Static:false, Public:true }, "ParentWindowHandle", $asm09.TypeRef("System.IntPtr"));

    $.Property({Static:false, Public:true }, "Parameters", $asm0D.TypeRef("System.Security.Cryptography.CngPropertyCollection"));

    $.Property({Static:false, Public:false}, "ParametersNoDemand", $asm0D.TypeRef("System.Security.Cryptography.CngPropertyCollection"));

    $.Property({Static:false, Public:true }, "Provider", $asm0D.TypeRef("System.Security.Cryptography.CngProvider"));

    $.Property({Static:false, Public:true }, "UIPolicy", $asm0D.TypeRef("System.Security.Cryptography.CngUIPolicy"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CngProperty */ 

(function CngProperty$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CngProperty", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Options", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetValue", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.Field({Static:false, Public:false}, "m_name", $.String); 
    $.Field({Static:false, Public:false}, "m_propertyOptions", $asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions")); 
    $.Field({Static:false, Public:false}, "m_value", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "m_hashCode", $asm09.TypeRef("System.Nullable`1", [$.Int32])); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Options", $asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions"));

    $.Property({Static:false, Public:false}, "Value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngPropertyCollection */ 

(function CngPropertyCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm0D.TypeRef("System.Security.Cryptography.CngProperty")]), 
      Name: "System.Security.Cryptography.CngPropertyCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngProvider */ 

(function CngProvider$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MicrosoftSmartCardKeyStorageProvider", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MicrosoftSoftwareKeyStorageProvider", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Provider", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:true , Public:false}, "s_msSmartCardKsp", $.Type); 
    $.Field({Static:true , Public:false}, "s_msSoftwareKsp", $.Type); 
    $.Field({Static:false, Public:false}, "m_provider", $.String); 
    $.Property({Static:false, Public:true }, "Provider", $.String);

    $.Property({Static:true , Public:true }, "MicrosoftSmartCardKeyStorageProvider", $.Type);

    $.Property({Static:true , Public:true }, "MicrosoftSoftwareKeyStorageProvider", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngUIPolicy */ 

(function CngUIPolicy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngUIPolicy", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Security.Cryptography.CngUIProtectionLevels")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String, 
          $.String, $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String, 
          $.String, $.String, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_CreationTitle", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_FriendlyName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ProtectionLevel", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_UseContext", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "m_creationTitle", $.String); 
    $.Field({Static:false, Public:false}, "m_description", $.String); 
    $.Field({Static:false, Public:false}, "m_friendlyName", $.String); 
    $.Field({Static:false, Public:false}, "m_protectionLevel", $asm0D.TypeRef("System.Security.Cryptography.CngUIProtectionLevels")); 
    $.Field({Static:false, Public:false}, "m_useContext", $.String); 
    $.Property({Static:false, Public:true }, "CreationTitle", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "FriendlyName", $.String);

    $.Property({Static:false, Public:true }, "ProtectionLevel", $asm0D.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"));

    $.Property({Static:false, Public:true }, "UseContext", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CapiHashAlgorithm */ 

(function CapiHashAlgorithm$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CapiHashAlgorithm", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0D.TypeRef("System.Security.Cryptography.CapiNative/ProviderType"), 
          $asm0D.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_algorithmId", $asm0D.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
    $.Field({Static:false, Public:false}, "m_cspHandle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle")); 
    $.Field({Static:false, Public:false}, "m_hashHandle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle")); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CapiNative */ 

(function CapiNative$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.CapiNative", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "AcquireCsp", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), [
          $.String, $.String, 
          $asm0D.TypeRef("System.Security.Cryptography.CapiNative/ProviderType"), $asm0D.TypeRef("System.Security.Cryptography.CapiNative/CryptAcquireContextFlags"), 
          $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ExportSymmetricKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetAlgorithmName", 
      new JSIL.MethodSignature($.String, [$asm0D.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHashParameter", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), $asm0D.TypeRef("System.Security.Cryptography.CapiNative/HashParameter")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetProviderParameterStruct", 
      new JSIL.MethodSignature("!!0", [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm0D.TypeRef("System.Security.Cryptography.CapiNative/ProviderParameter"), 
          $asm0D.TypeRef("System.Security.Cryptography.CapiNative/ProviderParameterFlags")
        ], ["T"])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "HResultForVerificationResult", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Security.Cryptography.SignatureVerificationResult")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ImportSymmetricKey", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm0D.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetKeyParameter", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm0D.TypeRef("System.Security.Cryptography.CapiNative/KeyParameter"), 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetKeyParameter", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm0D.TypeRef("System.Security.Cryptography.CapiNative/KeyParameter"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.CapiNative/AlgorithmId */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/AlgorithmId", false, {
    None: 0, 
    Aes128: 26126, 
    Aes192: 26127, 
    Aes256: 26128, 
    MD5: 32771, 
    Sha1: 32772, 
    Sha256: 32780, 
    Sha384: 32781, 
    Sha512: 32782
  }, false
);

/* enum System.Security.Cryptography.CapiNative/ProviderParameter */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/ProviderParameter", false, {
    None: 0, 
    EnumerateAlgorithms: 1
  }, false
);

/* enum System.Security.Cryptography.CapiNative/ProviderParameterFlags */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/ProviderParameterFlags", false, {
    None: 0, 
    RestartEnumeration: 1
  }, true
);

/* class System.Security.Cryptography.CapiNative/UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.CapiNative/UnsafeNativeMethods", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "_AxlPublicKeyBlobToPublicKeyToken", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Security.Cryptography.CapiNative/CRYPTOAPI_BLOB")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeAxlBufferHandle")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptAcquireContext", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle")]), $.String, 
          $.String, $asm0D.TypeRef("System.Security.Cryptography.CapiNative/ProviderType"), 
          $asm0D.TypeRef("System.Security.Cryptography.CapiNative/CryptAcquireContextFlags")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptCreateHash", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm0D.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId"), 
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptDecrypt", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), 
          $.Boolean, $.Int32, 
          $asm09.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptDuplicateKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm09.TypeRef("System.IntPtr"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm09.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CryptEncrypt", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), 
          $.Boolean, $.Int32, 
          $asm09.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptExportKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptGenKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm0D.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId"), 
          $asm0D.TypeRef("System.Security.Cryptography.CapiNative/KeyFlags"), $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptGenRandom", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptGetHashParam", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), $asm0D.TypeRef("System.Security.Cryptography.CapiNative/HashParameter"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptGetProvParam", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm0D.TypeRef("System.Security.Cryptography.CapiNative/ProviderParameter"), 
          $asm09.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm0D.TypeRef("System.Security.Cryptography.CapiNative/ProviderParameterFlags")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptHashData", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptImportKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), 
          $asm0D.TypeRef("System.Security.Cryptography.CapiNative/KeyFlags"), $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CryptSetKeyParam", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm0D.TypeRef("System.Security.Cryptography.CapiNative/KeyParameter"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* enum System.Security.Cryptography.CapiNative/AlgorithmClass */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/AlgorithmClass", false, {
    DataEncryption: 24576, 
    Hash: 32768
  }, false
);

/* enum System.Security.Cryptography.CapiNative/AlgorithmType */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/AlgorithmType", false, {
    Any: 0, 
    Block: 1536
  }, false
);

/* enum System.Security.Cryptography.CapiNative/AlgorithmSubId */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/AlgorithmSubId", false, {
    MD5: 3, 
    Sha1: 4, 
    Sha256: 12, 
    Sha384: 13, 
    Aes128: 14, 
    Sha512: 14, 
    Aes192: 15, 
    Aes256: 16
  }, false
);

/* enum System.Security.Cryptography.CapiNative/CryptAcquireContextFlags */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/CryptAcquireContextFlags", false, {
    VerifyContext: -268435456, 
    None: 0
  }, true
);

/* enum System.Security.Cryptography.CapiNative/ErrorCode */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/ErrorCode", false, {
    BadData: -2146893819, 
    BadAlgorithmId: -2146893816, 
    ProviderTypeNotDefined: -2146893801, 
    KeysetNotDefined: -2146893799, 
    Success: 0, 
    MoreData: 234, 
    NoMoreItems: 259
  }, false
);

/* enum System.Security.Cryptography.CapiNative/HashParameter */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/HashParameter", false, {
    None: 0, 
    AlgorithmId: 1, 
    HashValue: 2, 
    HashSize: 4
  }, false
);

/* enum System.Security.Cryptography.CapiNative/KeyBlobType */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/KeyBlobType", false, {
    PlainText: 8
  }, false
);

/* enum System.Security.Cryptography.CapiNative/KeyFlags */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/KeyFlags", false, {
    None: 0, 
    Exportable: 1
  }, true
);

/* enum System.Security.Cryptography.CapiNative/KeyParameter */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/KeyParameter", false, {
    None: 0, 
    IV: 1, 
    Mode: 4, 
    ModeBits: 5
  }, false
);

/* class System.Security.Cryptography.CapiNative/ProviderNames */ 

(function ProviderNames$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.CapiNative/ProviderNames", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "MicrosoftEnhancedRsaAes", "Microsoft Enhanced RSA and AES Cryptographic Provider"); 
    $.Constant({Static:true , Public:true }, "MicrosoftEnhancedRsaAesPrototype", "Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.CapiNative/ProviderType */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CapiNative/ProviderType", false, {
    None: 0, 
    RsaAes: 24
  }, false
);

/* struct System.Security.Cryptography.CapiNative/BLOBHEADER */ 

(function BLOBHEADER$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CapiNative/BLOBHEADER", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "bType", $asm0D.TypeRef("System.Security.Cryptography.CapiNative/KeyBlobType")); 
    $.Field({Static:false, Public:true }, "bVersion", $.Byte); 
    $.Field({Static:false, Public:true }, "reserved", $.Int16); 
    $.Field({Static:false, Public:true }, "aiKeyAlg", $asm0D.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CapiNative/CRYPTOAPI_BLOB */ 

(function CRYPTOAPI_BLOB$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CapiNative/CRYPTOAPI_BLOB", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "cbData", $.Int32); 
    $.Field({Static:false, Public:true }, "pbData", $asm09.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CapiNative/PROV_ENUMALGS */ 

(function PROV_ENUMALGS$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CapiNative/PROV_ENUMALGS", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "aiAlgId", $asm0D.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
    $.Field({Static:false, Public:true }, "dwBitLen", $.Int32); 
    $.Field({Static:false, Public:true }, "dwNameLen", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.ECDiffieHellman */ 

(function ECDiffieHellman$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), 
      Name: "System.Security.Cryptography.ECDiffieHellman", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm0D.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeyExchangeAlgorithm", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PublicKey", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SignatureAlgorithm", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "KeyExchangeAlgorithm", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SignatureAlgorithm", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "PublicKey", $asm0D.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.ECDiffieHellmanPublicKey */ 

(function ECDiffieHellmanPublicKey$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.ECDiffieHellmanPublicKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToByteArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "m_keyBlob", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction", true, {
    Hash: 0, 
    Hmac: 1, 
    Tls: 2
  }, false
);

/* class System.Security.Cryptography.ECDiffieHellmanCng */ 

(function ECDiffieHellmanCng$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Security.Cryptography.ECDiffieHellman"), 
      Name: "System.Security.Cryptography.ECDiffieHellmanCng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Security.Cryptography.CngKey")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm0D.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm0D.TypeRef("System.Security.Cryptography.CngKey")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "DeriveSecretAgreementHandle", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), [$asm0D.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeriveSecretAgreementHandle", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), [$asm0D.TypeRef("System.Security.Cryptography.CngKey")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXmlString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "FromXmlString", 
      new JSIL.MethodSignature(null, [$.String, $asm0D.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngAlgorithm"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_HmacKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngKey"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyDerivationFunction", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Label", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PublicKey", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SecretAppend", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_SecretPrepend", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Seed", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_UseSecretAgreementAsHmacKey", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HashAlgorithm", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Security.Cryptography.CngAlgorithm")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HmacKey", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "set_Key", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Security.Cryptography.CngKey")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyDerivationFunction", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Label", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_SecretAppend", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_SecretPrepend", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_Seed", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [$asm0D.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")], [])
    );

    $.Field({Static:true , Public:false}, "s_legalKeySizes", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Security.Cryptography.KeySizes")])); 
    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm0D.TypeRef("System.Security.Cryptography.CngAlgorithm")); 
    $.Field({Static:false, Public:false}, "m_hmacKey", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "m_key", $asm0D.TypeRef("System.Security.Cryptography.CngKey")); 
    $.Field({Static:false, Public:false}, "m_kdf", $asm0D.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction")); 
    $.Field({Static:false, Public:false}, "m_label", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "m_secretAppend", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "m_secretPrepend", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "m_seed", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Property({Static:false, Public:true }, "HashAlgorithm", $asm0D.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Property({Static:false, Public:true }, "HmacKey", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "KeyDerivationFunction", $asm0D.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction"));

    $.Property({Static:false, Public:true }, "Label", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "SecretAppend", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "SecretPrepend", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Seed", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Key", $asm0D.TypeRef("System.Security.Cryptography.CngKey"));

    $.Property({Static:false, Public:true , Virtual:true }, "PublicKey", $asm0D.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"));

    $.Property({Static:false, Public:true }, "UseSecretAgreementAsHmacKey", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.ECDiffieHellmanCngPublicKey */ 

(function ECDiffieHellmanCngPublicKey$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), 
      Name: "System.Security.Cryptography.ECDiffieHellmanCngPublicKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Security.Cryptography.CngKey")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromByteArray", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm0D.TypeRef("System.Security.Cryptography.CngKeyBlobFormat")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FromXmlString", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_BlobFormat", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Import", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngKey"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "m_key", $asm0D.TypeRef("System.Security.Cryptography.CngKey")); 
    $.Field({Static:false, Public:false}, "m_format", $asm0D.TypeRef("System.Security.Cryptography.CngKeyBlobFormat")); 
    $.Property({Static:false, Public:true }, "BlobFormat", $asm0D.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.ECDsa */ 

(function ECDsa$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), 
      Name: "System.Security.Cryptography.ECDsa", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeyExchangeAlgorithm", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SignatureAlgorithm", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SignHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "VerifyHash", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "KeyExchangeAlgorithm", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SignatureAlgorithm", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.ECDsaCng */ 

(function ECDsaCng$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Security.Cryptography.ECDsa"), 
      Name: "System.Security.Cryptography.ECDsaCng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Security.Cryptography.CngKey")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXmlString", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "FromXmlString", 
      new JSIL.MethodSignature(null, [$.String, $asm0D.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngAlgorithm"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngKey"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HashAlgorithm", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Security.Cryptography.CngAlgorithm")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Key", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Security.Cryptography.CngKey")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SignData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SignData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SignData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm09.TypeRef("System.IO.Stream")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SignHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [$asm0D.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "VerifyData", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "VerifyData", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "VerifyData", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "VerifyHash", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_legalKeySizes", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Security.Cryptography.KeySizes")])); 
    $.Field({Static:false, Public:false}, "m_key", $asm0D.TypeRef("System.Security.Cryptography.CngKey")); 
    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm0D.TypeRef("System.Security.Cryptography.CngAlgorithm")); 
    $.Property({Static:false, Public:true }, "HashAlgorithm", $asm0D.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Property({Static:false, Public:true }, "Key", $asm0D.TypeRef("System.Security.Cryptography.CngKey"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.ECKeyXmlFormat */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.ECKeyXmlFormat", true, {
    Rfc4050: 0
  }, false
);

/* class System.Security.Cryptography.ManifestSignatureInformation */ 

(function ManifestSignatureInformation$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.ManifestSignatureInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Security.ManifestKinds"), $asm0D.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"), 
          $asm0D.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticodeSignature", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Manifest", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.ManifestKinds"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_StrongNameSignature", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "GetManifestXml", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Xml.XmlDocument"), [$asm09.TypeRef("System.ActivationContext"), $asm0D.TypeRef("System.Security.ManifestKinds")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "VerifySignature", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.ManifestSignatureInformationCollection"), [$asm09.TypeRef("System.ActivationContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "VerifySignature", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.ManifestSignatureInformationCollection"), [$asm09.TypeRef("System.ActivationContext"), $asm0D.TypeRef("System.Security.ManifestKinds")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "VerifySignature", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.ManifestSignatureInformationCollection"), [
          $asm09.TypeRef("System.ActivationContext"), $asm0D.TypeRef("System.Security.ManifestKinds"), 
          $asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_manifest", $asm0D.TypeRef("System.Security.ManifestKinds")); 
    $.Field({Static:false, Public:false}, "m_strongNameSignature", $asm0D.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation")); 
    $.Field({Static:false, Public:false}, "m_authenticodeSignature", $asm0D.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation")); 
    $.Property({Static:false, Public:true }, "AuthenticodeSignature", $asm0D.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation"));

    $.Property({Static:false, Public:true }, "Manifest", $asm0D.TypeRef("System.Security.ManifestKinds"));

    $.Property({Static:false, Public:true }, "StrongNameSignature", $asm0D.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.ManifestSignatureInformationCollection */ 

(function ManifestSignatureInformationCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Security.Cryptography.ManifestSignatureInformation")]), 
      Name: "System.Security.Cryptography.ManifestSignatureInformationCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Security.Cryptography.ManifestSignatureInformation")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.MD5Cng */ 

(function MD5Cng$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Security.Cryptography.MD5"), 
      Name: "System.Security.Cryptography.MD5Cng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm0D.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.CngExportPolicies */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CngExportPolicies", true, {
    None: 0, 
    AllowExport: 1, 
    AllowPlaintextExport: 2, 
    AllowArchiving: 4, 
    AllowPlaintextArchiving: 8
  }, true
);

/* enum System.Security.Cryptography.CngKeyCreationOptions */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CngKeyCreationOptions", true, {
    None: 0, 
    MachineKey: 32, 
    OverwriteExistingKey: 128
  }, true
);

/* enum System.Security.Cryptography.CngKeyOpenOptions */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CngKeyOpenOptions", true, {
    UserKey: 0, 
    None: 0, 
    MachineKey: 32, 
    Silent: 64
  }, true
);

/* enum System.Security.Cryptography.CngKeyUsages */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CngKeyUsages", true, {
    None: 0, 
    Decryption: 1, 
    Signing: 2, 
    KeyAgreement: 4, 
    AllUsages: 16777215
  }, true
);

/* enum System.Security.Cryptography.CngPropertyOptions */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CngPropertyOptions", true, {
    Persist: -2147483648, 
    None: 0, 
    CustomProperty: 1073741824
  }, true
);

/* enum System.Security.Cryptography.CngUIProtectionLevels */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CngUIProtectionLevels", true, {
    None: 0, 
    ProtectKey: 1, 
    ForceHighProtection: 2
  }, true
);

/* class System.Security.Cryptography.NCryptNative */ 

(function NCryptNative$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "BuildEccPublicBlob", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $asm10.TypeRef("System.Numerics.BigInteger"), 
          $asm10.TypeRef("System.Numerics.BigInteger")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreatePersistedKey", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $.String, 
          $.String, $asm0D.TypeRef("System.Security.Cryptography.CngKeyCreationOptions")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeleteKey", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm0D.TypeRef("System.Security.Cryptography.NCryptNative/SecretAgreementFlags")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Security.Cryptography.NCryptNative/NCryptBuffer")]), $asm0D.TypeRef("System.Security.Cryptography.NCryptNative/SecretAgreementFlags")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterialHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm0D.TypeRef("System.Security.Cryptography.NCryptNative/SecretAgreementFlags")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterialHmac", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm0D.TypeRef("System.Security.Cryptography.NCryptNative/SecretAgreementFlags")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterialTls", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm0D.TypeRef("System.Security.Cryptography.NCryptNative/SecretAgreementFlags")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveSecretAgreement", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ExportKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "FillKeyParameter", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FinalizeKey", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_NCryptSupported", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetProperty", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsDWord", 
      new JSIL.MethodSignature($.Int32, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsIntPtr", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsString", 
      new JSIL.MethodSignature($.String, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsStruct", 
      new JSIL.MethodSignature("!!0", [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], ["T"])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ImportKey", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OpenKey", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $.String, 
          $asm0D.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OpenStorageProvider", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ReverseBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReverseBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReverseBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          "!!0", $asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], ["T"])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $.Int32, $asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $.String, $asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SignHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UnpackEccPublicBlob", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$asm10.TypeRef("System.Numerics.BigInteger")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm10.TypeRef("System.Numerics.BigInteger")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifySignature", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_ncryptSupported", $asm09.TypeRef("System.Nullable`1", [$.Boolean])); 
    function NCryptNative__cctor () {
      $thisType.s_ncryptSupported = new ($asm09.System.Nullable$b1.Of($asm09.System.Boolean)) ();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      NCryptNative__cctor
    );

    $.Property({Static:true , Public:false}, "NCryptSupported", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.NCryptNative/ErrorCode */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.NCryptNative/ErrorCode", false, {
    BadSignature: -2146893818, 
    NotFound: -2146893807, 
    KeyDoesNotExist: -2146893802, 
    BufferTooSmall: -2146893784, 
    Success: 0
  }, false
);

/* class System.Security.Cryptography.NCryptNative/UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative/UnsafeNativeMethods", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "NCryptCreatePersistedKey", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")]), 
          $.String, $.String, 
          $.Int32, $asm0D.TypeRef("System.Security.Cryptography.CngKeyCreationOptions")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptDeleteKey", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptDeriveKey", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Security.Cryptography.NCryptNative/NCryptBufferDesc")]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm0D.TypeRef("System.Security.Cryptography.NCryptNative/SecretAgreementFlags")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptExportKey", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm09.TypeRef("System.IntPtr"), 
          $.String, $asm09.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptFinalizeKey", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptGetProperty", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.IntPtr")]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:true , Public:false}, "NCryptGetProperty", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptImportKey", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $asm09.TypeRef("System.IntPtr"), 
          $.String, $asm09.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptOpenKey", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")]), 
          $.String, $.Int32, 
          $asm0D.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptOpenStorageProvider", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle")]), $.String, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptSecretAgreement", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle")]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptSetProperty", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptSetProperty", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $.String, $.Int32, 
          $asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptSetProperty", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm09.TypeRef("System.IntPtr"), $.Int32, 
          $asm0D.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptSignHash", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm09.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NCryptVerifySignature", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.NCryptNative/ErrorCode"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm09.TypeRef("System.IntPtr"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* enum System.Security.Cryptography.NCryptNative/BufferType */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.NCryptNative/BufferType", false, {
    KdfHashAlgorithm: 0, 
    KdfSecretPrepend: 1, 
    KdfSecretAppend: 2, 
    KdfHmacKey: 3, 
    KdfTlsLabel: 4, 
    KdfTlsSeed: 5
  }, false
);

/* class System.Security.Cryptography.NCryptNative/KeyPropertyName */ 

(function KeyPropertyName$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative/KeyPropertyName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Algorithm", "Algorithm Name"); 
    $.Constant({Static:true , Public:false}, "AlgorithmGroup", "Algorithm Group"); 
    $.Constant({Static:true , Public:false}, "ExportPolicy", "Export Policy"); 
    $.Constant({Static:true , Public:false}, "KeyType", "Key Type"); 
    $.Constant({Static:true , Public:false}, "KeyUsage", "Key Usage"); 
    $.Constant({Static:true , Public:false}, "Length", "Length"); 
    $.Constant({Static:true , Public:false}, "Name", "Name"); 
    $.Constant({Static:true , Public:false}, "ParentWindowHandle", "HWND Handle"); 
    $.Constant({Static:true , Public:false}, "ProviderHandle", "Provider Handle"); 
    $.Constant({Static:true , Public:false}, "UIPolicy", "UI Policy"); 
    $.Constant({Static:true , Public:false}, "UniqueName", "Unique Name"); 
    $.Constant({Static:true , Public:false}, "UseContext", "Use Context"); 
    $.Constant({Static:true , Public:false}, "ClrIsEphemeral", "CLR IsEphemeral"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.NCryptNative/ProviderPropertyName */ 

(function ProviderPropertyName$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative/ProviderPropertyName", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Name", "Name"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.NCryptNative/SecretAgreementFlags */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.NCryptNative/SecretAgreementFlags", false, {
    None: 0, 
    UseSecretAsHmacKey: 1
  }, true
);

/* struct System.Security.Cryptography.NCryptNative/NCRYPT_UI_POLICY */ 

(function NCRYPT_UI_POLICY$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.NCryptNative/NCRYPT_UI_POLICY", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "dwVersion", $.Int32); 
    $.Field({Static:false, Public:true }, "dwFlags", $asm0D.TypeRef("System.Security.Cryptography.CngUIProtectionLevels")); 
    $.Field({Static:false, Public:true }, "pszCreationTitle", $.String); 
    $.Field({Static:false, Public:true }, "pszFriendlyName", $.String); 
    $.Field({Static:false, Public:true }, "pszDescription", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.NCryptNative/NCryptBuffer */ 

(function NCryptBuffer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.NCryptNative/NCryptBuffer", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "cbBuffer", $.Int32); 
    $.Field({Static:false, Public:true }, "BufferType", $asm0D.TypeRef("System.Security.Cryptography.NCryptNative/BufferType")); 
    $.Field({Static:false, Public:true }, "pvBuffer", $asm09.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.NCryptNative/NCryptBufferDesc */ 

(function NCryptBufferDesc$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.NCryptNative/NCryptBufferDesc", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "ulVersion", $.Int32); 
    $.Field({Static:false, Public:true }, "cBuffers", $.Int32); 
    $.Field({Static:false, Public:true }, "pBuffers", $asm09.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA1Cng */ 

(function SHA1Cng$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Security.Cryptography.SHA1"), 
      Name: "System.Security.Cryptography.SHA1Cng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm0D.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA256Cng */ 

(function SHA256Cng$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Security.Cryptography.SHA256"), 
      Name: "System.Security.Cryptography.SHA256Cng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm0D.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA256CryptoServiceProvider */ 

(function SHA256CryptoServiceProvider$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Security.Cryptography.SHA256"), 
      Name: "System.Security.Cryptography.SHA256CryptoServiceProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm0D.TypeRef("System.Security.Cryptography.CapiHashAlgorithm")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA384Cng */ 

(function SHA384Cng$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Security.Cryptography.SHA384"), 
      Name: "System.Security.Cryptography.SHA384Cng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm0D.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA384CryptoServiceProvider */ 

(function SHA384CryptoServiceProvider$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Security.Cryptography.SHA384"), 
      Name: "System.Security.Cryptography.SHA384CryptoServiceProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm0D.TypeRef("System.Security.Cryptography.CapiHashAlgorithm")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA512Cng */ 

(function SHA512Cng$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Security.Cryptography.SHA512"), 
      Name: "System.Security.Cryptography.SHA512Cng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm0D.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA512CryptoServiceProvider */ 

(function SHA512CryptoServiceProvider$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Security.Cryptography.SHA512"), 
      Name: "System.Security.Cryptography.SHA512CryptoServiceProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm0D.TypeRef("System.Security.Cryptography.CapiHashAlgorithm")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.SignatureVerificationResult */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.SignatureVerificationResult", true, {
    SystemError: -2146869247, 
    InvalidSignerCertificate: -2146869246, 
    InvalidCountersignature: -2146869245, 
    InvalidCertificateSignature: -2146869244, 
    InvalidTimestamp: -2146869243, 
    BadDigest: -2146869232, 
    BasicConstraintsNotObserved: -2146869223, 
    UnknownTrustProvider: -2146762751, 
    UnknownVerificationAction: -2146762750, 
    BadSignatureFormat: -2146762749, 
    CertificateNotExplicitlyTrusted: -2146762748, 
    MissingSignature: -2146762496, 
    CertificateExpired: -2146762495, 
    InvalidTimePeriodNesting: -2146762494, 
    InvalidCertificateRole: -2146762493, 
    PathLengthConstraintViolated: -2146762492, 
    UnknownCriticalExtension: -2146762491, 
    CertificateUsageNotAllowed: -2146762490, 
    IssuerChainingError: -2146762489, 
    CertificateMalformed: -2146762488, 
    UntrustedRootCertificate: -2146762487, 
    CouldNotBuildChain: -2146762486, 
    GenericTrustFailure: -2146762485, 
    CertificateRevoked: -2146762484, 
    UntrustedTestRootCertificate: -2146762483, 
    RevocationCheckFailure: -2146762482, 
    InvalidCertificateUsage: -2146762480, 
    CertificateExplicitlyDistrusted: -2146762479, 
    UntrustedCertificationAuthority: -2146762478, 
    InvalidCertificatePolicy: -2146762477, 
    InvalidCertificateName: -2146762476, 
    Valid: 0, 
    AssemblyIdentityMismatch: 1, 
    ContainingSignatureInvalid: 2, 
    PublicKeyTokenMismatch: 3, 
    PublisherMismatch: 4
  }, false
);

/* class System.Security.Cryptography.StrongNameSignatureInformation */ 

(function StrongNameSignatureInformation$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.StrongNameSignatureInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Security.Cryptography.SignatureVerificationResult")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_HResult", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsValid", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PublicKey", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_VerificationResult", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "m_verificationResult", $asm0D.TypeRef("System.Security.Cryptography.SignatureVerificationResult")); 
    $.Field({Static:false, Public:false}, "m_publicKey", $asm09.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "StrongNameHashAlgorithm", $.String); 
    $.Property({Static:false, Public:true }, "HashAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "HResult", $.Int32);

    $.Property({Static:false, Public:true }, "IsValid", $.Boolean);

    $.Property({Static:false, Public:true }, "PublicKey", $asm09.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"));

    $.Property({Static:false, Public:true }, "VerificationResult", $asm0D.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Security.Cryptography.X509Certificates");
/* class System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation */ 

(function AuthenticodeSignatureInformation$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_SIGNER_INFO"), $asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), 
          $asm0D.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Security.Cryptography.SignatureVerificationResult")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_DescriptionUrl", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Uri"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HResult", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SignatureChain", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_SigningCertificate", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Timestamp", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_TrustStatus", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.X509Certificates.TrustStatus"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VerificationResult", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "m_description", $.String); 
    $.Field({Static:false, Public:false}, "m_descriptionUrl", $asm0B.TypeRef("System.Uri")); 
    $.Field({Static:false, Public:false}, "m_hashAlgorithmId", $asm0D.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
    $.Field({Static:false, Public:false}, "m_signatureChain", $asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain")); 
    $.Field({Static:false, Public:false}, "m_timestamp", $asm0D.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation")); 
    $.Field({Static:false, Public:false}, "m_verificationResult", $asm0D.TypeRef("System.Security.Cryptography.SignatureVerificationResult")); 
    $.Field({Static:false, Public:false}, "m_signingCertificate", $asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")); 
    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "DescriptionUrl", $asm0B.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "HashAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "HResult", $.Int32);

    $.Property({Static:false, Public:true }, "SignatureChain", $asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));

    $.Property({Static:false, Public:true }, "SigningCertificate", $asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Property({Static:false, Public:true }, "Timestamp", $asm0D.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation"));

    $.Property({Static:false, Public:true }, "TrustStatus", $asm0D.TypeRef("System.Security.Cryptography.X509Certificates.TrustStatus"));

    $.Property({Static:false, Public:true }, "VerificationResult", $asm0D.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.X509Certificates.TimestampInformation */ 

(function TimestampInformation$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.X509Certificates.TimestampInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_TIMESTAMPER_INFO")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Security.Cryptography.SignatureVerificationResult")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HResult", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsValid", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SignatureChain", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_SigningCertificate", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Timestamp", 
      new JSIL.MethodSignature($asm09.TypeRef("System.DateTime"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VerificationResult", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "m_hashAlgorithmId", $asm0D.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
    $.Field({Static:false, Public:false}, "m_timestamp", $asm09.TypeRef("System.DateTime")); 
    $.Field({Static:false, Public:false}, "m_timestampChain", $asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain")); 
    $.Field({Static:false, Public:false}, "m_verificationResult", $asm0D.TypeRef("System.Security.Cryptography.SignatureVerificationResult")); 
    $.Field({Static:false, Public:false}, "m_timestamper", $asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")); 
    $.Property({Static:false, Public:true }, "HashAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "HResult", $.Int32);

    $.Property({Static:false, Public:true }, "IsValid", $.Boolean);

    $.Property({Static:false, Public:true }, "SignatureChain", $asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));

    $.Property({Static:false, Public:true }, "SigningCertificate", $asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Property({Static:false, Public:true }, "Timestamp", $asm09.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "VerificationResult", $asm0D.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.X509Certificates.TrustStatus */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.X509Certificates.TrustStatus", true, {
    Untrusted: 0, 
    UnknownIdentity: 1, 
    KnownIdentity: 2, 
    Trusted: 3
  }, false
);

/* class System.Security.Cryptography.X509Certificates.X509Native */ 

(function X509Native$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.X509Certificates.X509Native", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_SIGNER_INFO */ 

(function AXL_AUTHENTICODE_SIGNER_INFO$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_SIGNER_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "cbSize", $.Int32); 
    $.Field({Static:false, Public:true }, "dwError", $.Int32); 
    $.Field({Static:false, Public:true }, "algHash", $asm0D.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
    $.Field({Static:false, Public:true }, "pwszHash", $asm09.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "pwszDescription", $asm09.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "pwszDescriptionUrl", $asm09.TypeRef("System.IntPtr")); 
    $.Field({Static:false, Public:true }, "pChainContext", $asm09.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_TIMESTAMPER_INFO */ 

(function AXL_AUTHENTICODE_TIMESTAMPER_INFO$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_TIMESTAMPER_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "cbsize", $.Int32); 
    $.Field({Static:false, Public:true }, "dwError", $.Int32); 
    $.Field({Static:false, Public:true }, "algHash", $asm0D.TypeRef("System.Security.Cryptography.CapiNative/AlgorithmId")); 
    $.Field({Static:false, Public:true }, "ftTimestamp", $asm09.TypeRef("System.Runtime.InteropServices.ComTypes.FILETIME")); 
    $.Field({Static:false, Public:true }, "pChainContext", $asm09.TypeRef("System.IntPtr")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.X509Certificates.X509Native/UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.X509Certificates.X509Native/UnsafeNativeMethods", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "_AxlGetIssuerPublicKeyHash", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.IntPtr"), $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeAxlBufferHandle")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CertFreeAuthenticodeSignerInfo", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_SIGNER_INFO")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "CertFreeAuthenticodeTimestamperInfo", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_TIMESTAMPER_INFO")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "CertVerifyAuthenticodeLicense", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Security.Cryptography.CapiNative/CRYPTOAPI_BLOB")]), $asm0D.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AxlVerificationFlags"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_SIGNER_INFO")]), $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_TIMESTAMPER_INFO")])
        ], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* enum System.Security.Cryptography.X509Certificates.X509Native/AxlVerificationFlags */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.X509Certificates.X509Native/AxlVerificationFlags", false, {
    None: 0, 
    NoRevocationCheck: 1, 
    RevocationCheckEndCertOnly: 2, 
    RevocationCheckEntireChain: 4, 
    UrlOnlyCacheRetrieval: 8, 
    LifetimeSigning: 16, 
    TrustMicrosoftRootOnly: 32
  }, true
);

/* class Microsoft.Win32.SafeHandles.SafePipeHandle */ 

(function SafePipeHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafePipeHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IntPtr"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafePerfProviderHandle */ 

(function SafePerfProviderHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafePerfProviderHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Runtime.CompilerServices.CallSiteBinder */ 

(function CallSiteBinder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.CallSiteBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
          $asm0D.TypeRef("System.Linq.Expressions.LabelTarget")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindCore", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"]), $jsilcore.TypeRef("System.Array", [$.Object])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindDelegate", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"]), $jsilcore.TypeRef("System.Array", [$.Object])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "CacheTarget", 
      new JSIL.MethodSignature(null, ["!!0"], ["T"])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_UpdateLabel", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "GetRuleCache", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Runtime.CompilerServices.RuleCache`1", ["!!0"]), [], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "Stitch", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder/LambdaSignature`1", ["!!0"])], ["T"])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_updateLabel", $asm0D.TypeRef("System.Linq.Expressions.LabelTarget")); 
    $.Field({Static:false, Public:false}, "Cache", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Type"), $.Object])); 
    $.Property({Static:true , Public:true }, "UpdateLabel", $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.CallSiteBinder/LambdaSignature`1 */ 

(function LambdaSignature$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.CallSiteBinder/LambdaSignature`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Instance", $.Type); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Parameters", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "ReturnLabel", $asm0D.TypeRef("System.Linq.Expressions.LabelTarget")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Dynamic");
/* class System.Dynamic.DynamicMetaObjectBinder */ 

(function DynamicMetaObjectBinder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
      Name: "System.Dynamic.DynamicMetaObjectBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "AddRemoteObjectRestrictions", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.BindingRestrictions"), [
          $asm0D.TypeRef("System.Dynamic.BindingRestrictions"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [
          $jsilcore.TypeRef("System.Array", [$.Object]), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
          $asm0D.TypeRef("System.Linq.Expressions.LabelTarget")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateArgumentMetaObjects", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")]), [$jsilcore.TypeRef("System.Array", [$.Object]), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Defer", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Defer", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUpdateExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsComObject", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeDeferred", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.BindingRestrictions"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ComObjectType", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BinaryOperationBinder */ 

(function BinaryOperationBinder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.BinaryOperationBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.ExpressionType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackBinaryOperation", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackBinaryOperation", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), 
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operation", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperationIsValid", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.ExpressionType")], [])
    );

    $.Field({Static:false, Public:false}, "_operation", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Operation", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BindingRestrictions */ 

(function BindingRestrictions$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.BindingRestrictions", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Combine", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetExpressionRestriction", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetInstanceRestriction", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTypeRestriction", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeRestriction", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Merge", 
      new JSIL.MethodSignature($.Type, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type); 
    $.Constant({Static:true , Public:false}, "TypeRestrictionHash", 268435456); 
    $.Constant({Static:true , Public:false}, "InstanceRestrictionHash", 536870912); 
    $.Constant({Static:true , Public:false}, "CustomRestrictionHash", 1073741824); 
    $.Property({Static:false, Public:false}, "DebugView", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{DebugView}"]; })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Dynamic.BindingRestrictions_BindingRestrictionsProxy.__Type__]; });

})();

/* class System.Dynamic.BindingRestrictions/TestBuilder */ 

(function TestBuilder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.BindingRestrictions/TestBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Append", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Dynamic.BindingRestrictions")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_unique", $asm0D.TypeRef("System.Linq.Expressions.Set`1", [$asm0D.TypeRef("System.Dynamic.BindingRestrictions")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_tests", $asm0B.TypeRef("System.Collections.Generic.Stack`1", [$asm0D.TypeRef("System.Dynamic.BindingRestrictions/TestBuilder/AndNode")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Dynamic.BindingRestrictions/TestBuilder/AndNode */ 

(function AndNode$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Dynamic.BindingRestrictions/TestBuilder/AndNode", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "Depth", $.Int32); 
    $.Field({Static:false, Public:false}, "Node", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BindingRestrictions/MergedRestriction */ 

(function MergedRestriction$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Dynamic.BindingRestrictions"), 
      Name: "System.Dynamic.BindingRestrictions/MergedRestriction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Dynamic.BindingRestrictions"), $asm0D.TypeRef("System.Dynamic.BindingRestrictions")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Left", $asm0D.TypeRef("System.Dynamic.BindingRestrictions")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Right", $asm0D.TypeRef("System.Dynamic.BindingRestrictions")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BindingRestrictions/CustomRestriction */ 

(function CustomRestriction$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Dynamic.BindingRestrictions"), 
      Name: "System.Dynamic.BindingRestrictions/CustomRestriction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BindingRestrictions/TypeRestriction */ 

(function TypeRestriction$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Dynamic.BindingRestrictions"), 
      Name: "System.Dynamic.BindingRestrictions/TypeRestriction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm09.TypeRef("System.Type")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BindingRestrictions/InstanceRestriction */ 

(function InstanceRestriction$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Dynamic.BindingRestrictions"), 
      Name: "System.Dynamic.BindingRestrictions/InstanceRestriction", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.BindingRestrictions/BindingRestrictionsProxy */ 

(function BindingRestrictionsProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.BindingRestrictions/BindingRestrictionsProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Dynamic.BindingRestrictions")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Restrictions", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.BindingRestrictions")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Test", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Dynamic.BindingRestrictions")); 
    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:true }, "Test", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Restrictions", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.BindingRestrictions")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.CallInfo */ 

(function CallInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.CallInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ArgumentNames", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_argCount", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_argNames", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String])); 
    $.Property({Static:false, Public:true }, "ArgumentCount", $.Int32);

    $.Property({Static:false, Public:true }, "ArgumentNames", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.String]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.CallSite */ 

(function CallSite$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.CallSite", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Binder", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:true , Public:false}, "_SiteCtors", $asm0D.TypeRef("System.Dynamic.Utils.CacheDict`2", [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Func`2", [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $.Type])])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_binder", $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")); 
    $.Field({Static:false, Public:false}, "_match", $.Boolean); 
    $.Property({Static:false, Public:true }, "Binder", $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.CallSite`1 */ 

(function CallSite$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), 
      Name: "System.Runtime.CompilerServices.CallSite`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRule", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.CallSite`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearRuleCache", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Convert", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateCustomNoMatchDelegate", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.CallSite`1"), [$asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateCustomUpdateDelegate", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.CallSite`1"), [$asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateMatchMaker", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Update", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.CallSite`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUpdateDelegate", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.CallSite`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUpdateDelegate", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.CallSite`1"), [$jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.CallSite`1")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSimpleSignature", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeUpdateDelegate", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.CallSite`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveRule", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:false, Public:true }, "Target", $.GenericParameter("T")); 
    $.Field({Static:false, Public:false}, "Rules", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $.Field({Static:true , Public:false}, "_CachedUpdate", $.GenericParameter("T")); 
    $.Field({Static:true , Public:false}, "_CachedNoMatch", $.GenericParameter("T")); 
    $.Constant({Static:true , Public:false}, "MaxRules", 10); 
    $.Property({Static:false, Public:true }, "Update", new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.CallSite`1"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.CallSiteHelpers */ 

(function CallSiteHelpers$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.CompilerServices.CallSiteHelpers", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "IsInternalFrame", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.MethodBase")], [])
    );

    $.Field({Static:true , Public:false}, "_knownNonDynamicMethodType", $asm09.TypeRef("System.Type")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.CallSiteOps */ 

(function CallSiteOps$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.CompilerServices.CallSiteOps", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "AddRule", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"]), "!!0"], ["T"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:true }, "Bind", 
      new JSIL.MethodSignature("!!0", [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"]), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ], ["T"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:true }, "ClearMatch", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSite")], [])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateMatchmaker", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"]), [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"])], ["T"])
    )
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; });

    $.ExternalMethod({Static:true , Public:true }, "GetCachedRules", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm0D.TypeRef("System.Runtime.CompilerServices.RuleCache`1", ["!!0"])], ["T"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:true }, "GetMatch", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSite")], [])
    )
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; });

    $.ExternalMethod({Static:true , Public:true }, "GetRuleCache", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Runtime.CompilerServices.RuleCache`1", ["!!0"]), [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"])], ["T"])
    )
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; });

    $.ExternalMethod({Static:true , Public:true }, "GetRules", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"])], ["T"])
    )
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; });

    $.ExternalMethod({Static:true , Public:true }, "MoveRule", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.RuleCache`1", ["!!0"]), "!!0", 
          $.Int32
        ], ["T"])
    )
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; });

    $.ExternalMethod({Static:true , Public:true }, "SetNotMatched", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSite")], [])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:true }, "UpdateRules", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSite`1", ["!!0"]), $.Int32], ["T"])
    )
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; });

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

})();

/* class System.Dynamic.ConvertBinder */ 

(function ConvertBinder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.ConvertBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackConvert", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackConvert", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Explicit", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_explicit", $.Boolean); 
    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Explicit", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.CreateInstanceBinder */ 

(function CreateInstanceBinder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.CreateInstanceBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Dynamic.CallInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackCreateInstance", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackCreateInstance", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CallInfo", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.CallInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_callInfo", $asm0D.TypeRef("System.Dynamic.CallInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "CallInfo", $asm0D.TypeRef("System.Dynamic.CallInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.DeleteIndexBinder */ 

(function DeleteIndexBinder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.DeleteIndexBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Dynamic.CallInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackDeleteIndex", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackDeleteIndex", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CallInfo", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.CallInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_callInfo", $asm0D.TypeRef("System.Dynamic.CallInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "CallInfo", $asm0D.TypeRef("System.Dynamic.CallInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.DeleteMemberBinder */ 

(function DeleteMemberBinder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.DeleteMemberBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackDeleteMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackDeleteMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreCase", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_ignoreCase", $.Boolean); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "IgnoreCase", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.DynamicMetaObject */ 

(function DynamicMetaObject$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicMetaObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Dynamic.BindingRestrictions")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Dynamic.BindingRestrictions"), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindBinaryOperation", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Dynamic.BinaryOperationBinder"), $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindConvert", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Dynamic.ConvertBinder")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindCreateInstance", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Dynamic.CreateInstanceBinder"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindDeleteIndex", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Dynamic.DeleteIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindDeleteMember", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Dynamic.DeleteMemberBinder")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindGetIndex", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Dynamic.GetIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindGetMember", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Dynamic.GetMemberBinder")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindInvoke", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Dynamic.InvokeBinder"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindInvokeMember", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Dynamic.InvokeMemberBinder"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindSetIndex", 
      new JSIL.MethodSignature($.Type, [
          $asm0D.TypeRef("System.Dynamic.SetIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindSetMember", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Dynamic.SetMemberBinder"), $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindUnaryOperation", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Dynamic.UnaryOperationBinder")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.Object, $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_LimitType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Restrictions", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.BindingRestrictions"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_RuntimeType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDynamicMemberNames", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetExpressions", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [$jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_restrictions", $asm0D.TypeRef("System.Dynamic.BindingRestrictions")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_value", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_hasValue", $.Boolean); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "EmptyMetaObjects", $jsilcore.TypeRef("System.Array", [$.Type]), function ($pi) {
        return JSIL.Array.New($thisType, 0);
      }); 
    $.Property({Static:false, Public:true }, "Expression", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Restrictions", $asm0D.TypeRef("System.Dynamic.BindingRestrictions"));

    $.Property({Static:false, Public:true }, "Value", $.Object);

    $.Property({Static:false, Public:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true }, "RuntimeType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "LimitType", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Dynamic.IDynamicMetaObjectProvider */ 

JSIL.MakeInterface(
  "System.Dynamic.IDynamicMetaObjectProvider", true, [], function ($) {
    $.Method({}, "GetMetaObject", new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], []));
  }, []);

/* class System.Dynamic.DynamicObject */ 

(function DynamicObject$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDynamicMemberNames", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMetaObject", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryBinaryOperation", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("System.Dynamic.BinaryOperationBinder"), $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryConvert", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Dynamic.ConvertBinder"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryCreateInstance", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("System.Dynamic.CreateInstanceBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryDeleteIndex", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Dynamic.DeleteIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryDeleteMember", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Dynamic.DeleteMemberBinder")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetIndex", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("System.Dynamic.GetIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetMember", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Dynamic.GetMemberBinder"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryInvoke", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("System.Dynamic.InvokeBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryInvokeMember", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("System.Dynamic.InvokeMemberBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TrySetIndex", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("System.Dynamic.SetIndexBinder"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TrySetMember", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Dynamic.SetMemberBinder"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryUnaryOperation", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Dynamic.UnaryOperationBinder"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])], [])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Dynamic.IDynamicMetaObjectProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.DynamicObject/MetaDynamic */ 

(function MetaDynamic$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), 
      Name: "System.Dynamic.DynamicObject/MetaDynamic", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Dynamic.DynamicObject")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindBinaryOperation", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.BinaryOperationBinder"), $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindConvert", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.ConvertBinder")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindCreateInstance", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.CreateInstanceBinder"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindDeleteIndex", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DeleteIndexBinder"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindDeleteMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DeleteMemberBinder")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindGetIndex", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.GetIndexBinder"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindGetMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.GetMemberBinder")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindInvoke", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.InvokeBinder"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindInvokeMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.InvokeMemberBinder"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindSetIndex", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm0D.TypeRef("System.Dynamic.SetIndexBinder"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindSetMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.SetMemberBinder"), $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindUnaryOperation", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.UnaryOperationBinder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildCallMethodWithResult", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $.String, $asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
          $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), $asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), 
          $asm0D.TypeRef("System.Dynamic.DynamicObject/MetaDynamic/Fallback")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallMethodNoResult", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $.String, $asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
          $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), $asm0D.TypeRef("System.Dynamic.DynamicObject/MetaDynamic/Fallback")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallMethodReturnLast", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $.String, $asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
          $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), $asm0D.TypeRef("System.Dynamic.DynamicObject/MetaDynamic/Fallback")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallMethodWithResult", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $.String, $asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
          $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), $asm0D.TypeRef("System.Dynamic.DynamicObject/MetaDynamic/Fallback")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallMethodWithResult", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $.String, $asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
          $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), $asm0D.TypeRef("System.Dynamic.DynamicObject/MetaDynamic/Fallback"), 
          $asm0D.TypeRef("System.Dynamic.DynamicObject/MetaDynamic/Fallback")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Constant", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ConstantExpression"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicObject"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetArgArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [$jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetArgArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [$jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")]), $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetArgs", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [$jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDynamicMemberNames", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLimitedSelf", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRestrictions", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.BindingRestrictions"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsOverridden", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "NoArgs", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), function ($pi) {
        return JSIL.Array.New($asm0D.System.Linq.Expressions.Expression, 0);
      }); 
    $.Property({Static:false, Public:false}, "Value", $asm0D.TypeRef("System.Dynamic.DynamicObject"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Dynamic.DynamicObject/MetaDynamic/Fallback */ 

JSIL.MakeDelegate("System.Dynamic.DynamicObject/MetaDynamic/Fallback", false, []);

/* class System.Dynamic.GetMemberBinder */ 

(function GetMemberBinder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.GetMemberBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackGetMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackGetMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreCase", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_ignoreCase", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "IgnoreCase", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.DynamicObject/MetaDynamic/GetBinderAdapter */ 

(function GetBinderAdapter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Dynamic.GetMemberBinder"), 
      Name: "System.Dynamic.DynamicObject/MetaDynamic/GetBinderAdapter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Dynamic.InvokeMemberBinder")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackGetMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass2 */ 

(function $l$gc__DisplayClass2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
    $.Field({Static:false, Public:true }, "binder", $asm0D.TypeRef("System.Dynamic.GetMemberBinder")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass6 */ 

(function $l$gc__DisplayClass6$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass6", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
    $.Field({Static:false, Public:true }, "binder", $asm0D.TypeRef("System.Dynamic.SetMemberBinder")); 
    $.Field({Static:false, Public:true }, "value", $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClassa */ 

(function $l$gc__DisplayClassa$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClassa", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
    $.Field({Static:false, Public:true }, "binder", $asm0D.TypeRef("System.Dynamic.DeleteMemberBinder")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClasse */ 

(function $l$gc__DisplayClasse$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClasse", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
    $.Field({Static:false, Public:true }, "binder", $asm0D.TypeRef("System.Dynamic.ConvertBinder")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass12 */ 

(function $l$gc__DisplayClass12$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass12", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
    $.Field({Static:false, Public:true }, "binder", $asm0D.TypeRef("System.Dynamic.InvokeMemberBinder")); 
    $.Field({Static:false, Public:true }, "args", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass16 */ 

(function $l$gc__DisplayClass16$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass16", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
    $.Field({Static:false, Public:true }, "binder", $asm0D.TypeRef("System.Dynamic.CreateInstanceBinder")); 
    $.Field({Static:false, Public:true }, "args", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass1a */ 

(function $l$gc__DisplayClass1a$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass1a", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
    $.Field({Static:false, Public:true }, "binder", $asm0D.TypeRef("System.Dynamic.InvokeBinder")); 
    $.Field({Static:false, Public:true }, "args", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass1e */ 

(function $l$gc__DisplayClass1e$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass1e", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
    $.Field({Static:false, Public:true }, "binder", $asm0D.TypeRef("System.Dynamic.BinaryOperationBinder")); 
    $.Field({Static:false, Public:true }, "arg", $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass22 */ 

(function $l$gc__DisplayClass22$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass22", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
    $.Field({Static:false, Public:true }, "binder", $asm0D.TypeRef("System.Dynamic.UnaryOperationBinder")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass26 */ 

(function $l$gc__DisplayClass26$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass26", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
    $.Field({Static:false, Public:true }, "binder", $asm0D.TypeRef("System.Dynamic.GetIndexBinder")); 
    $.Field({Static:false, Public:true }, "indexes", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass2a */ 

(function $l$gc__DisplayClass2a$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass2a", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
    $.Field({Static:false, Public:true }, "binder", $asm0D.TypeRef("System.Dynamic.SetIndexBinder")); 
    $.Field({Static:false, Public:true }, "indexes", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])); 
    $.Field({Static:false, Public:true }, "value", $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass2e */ 

(function $l$gc__DisplayClass2e$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.DynamicObject/MetaDynamic/<>c__DisplayClass2e", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Dynamic.DynamicObject/MetaDynamic")); 
    $.Field({Static:false, Public:true }, "binder", $asm0D.TypeRef("System.Dynamic.DeleteIndexBinder")); 
    $.Field({Static:false, Public:true }, "indexes", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.ExpandoClass */ 

(function ExpandoClass$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoClass", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNewClass", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Keys", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTransitionList", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.WeakReference")]), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueIndex", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Boolean, 
          $asm0D.TypeRef("System.Dynamic.ExpandoObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueIndexCaseInsensitive", 
      new JSIL.MethodSignature($.Int32, [$.String, $asm0D.TypeRef("System.Dynamic.ExpandoObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueIndexCaseSensitive", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_keys", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_hashCode", $.Int32); 
    $.Field({Static:false, Public:false}, "_transitions", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm09.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.WeakReference")])])); 
    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.Constant({Static:true , Public:false}, "EmptyHashCode", 6551); 
    $.Property({Static:false, Public:false}, "Keys", $jsilcore.TypeRef("System.Array", [$.String]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject */ 

(function ExpandoObject$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExpandoContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Class", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.ExpandoClass"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExpandoEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), [$asm0D.TypeRef("System.Dynamic.ExpandoObject/ExpandoData"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsDeletedMember", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PromoteClass", 
      new JSIL.MethodSignature(null, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PromoteClassCore", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.ExpandoObject/ExpandoData"), [$asm0D.TypeRef("System.Dynamic.ExpandoClass"), $asm0D.TypeRef("System.Dynamic.ExpandoClass")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Add", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])], [])
    )
      .Overrides(2, "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Clear", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])], [])
    )
      .Overrides(2, "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), $.Int32], [])
    )
      .Overrides(2, "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(2, "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(2, "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])], [])
    )
      .Overrides(2, "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Add", 
      new JSIL.MethodSignature(null, [$.String, $.Object], [])
    )
      .Overrides(1, "Add")
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    )
      .Overrides(1, "ContainsKey");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.get_Item", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    )
      .Overrides(1, "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.get_Keys", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.ICollection`1", [$.String]), [], [])
    )
      .Overrides(1, "get_Keys");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.get_Values", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]), [], [])
    )
      .Overrides(1, "get_Values");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    )
      .Overrides(1, "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.set_Item", 
      new JSIL.MethodSignature(null, [$.String, $.Object], [])
    )
      .Overrides(1, "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])], [])
    )
      .Overrides(1, "TryGetValue")
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), [], [])
    )
      .Overrides(3, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(4, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.ComponentModel.PropertyChangedEventHandler")], [])
    )
      .Overrides(5, "add_PropertyChanged");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged", 
      new JSIL.MethodSignature(null, [$asm0B.TypeRef("System.ComponentModel.PropertyChangedEventHandler")], [])
    )
      .Overrides(5, "remove_PropertyChanged");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    )
      .Overrides(0, "GetMetaObject");

    $.ExternalMethod({Static:false, Public:false}, "TryAddMember", 
      new JSIL.MethodSignature(null, [$.String, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDeleteValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Int32, 
          $.String, $.Boolean, 
          $.Object
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $.Int32, 
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetValueForKey", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Object])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "TrySetValue", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $.Object, $.String, 
          $.Boolean, $.Boolean
        ], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "LockObject", $.Object); 
    $.Field({Static:false, Public:false}, "_data", $asm0D.TypeRef("System.Dynamic.ExpandoObject/ExpandoData")); 
    $.Field({Static:false, Public:false}, "_count", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Uninitialized", $.Object); 
    $.Field({Static:false, Public:false}, "_propertyChanged", $asm0B.TypeRef("System.ComponentModel.PropertyChangedEventHandler")); 
    $.Constant({Static:true , Public:false}, "AmbiguousMatchFound", -2); 
    $.Constant({Static:true , Public:false}, "NoMatch", -1); 
    $.Property({Static:false, Public:false}, "Class", $asm0D.TypeRef("System.Dynamic.ExpandoClass"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Keys", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$.String]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Values", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lSystem.String$cmSystem.Object$g.Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Dynamic.IDynamicMetaObjectProvider"), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.Object]), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      /* 3 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      /* 4 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 5 */ $asm0B.TypeRef("System.ComponentModel.INotifyPropertyChanged")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject/ExpandoData */ 

(function ExpandoData$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject/ExpandoData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Dynamic.ExpandoClass"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Version", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAlignedSize", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateClass", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Dynamic.ExpandoClass")], [])
    );

    $.Field({Static:true , Public:false}, "Empty", $.Type); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Class", $asm0D.TypeRef("System.Dynamic.ExpandoClass")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_dataArray", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:false}, "_version", $.Int32); 
    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:false}, "Version", $.Int32);

    $.Property({Static:false, Public:false}, "Length", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Dynamic.ExpandoObject/KeyCollectionDebugView */ 

(function KeyCollectionDebugView$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject/KeyCollectionDebugView", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.ICollection`1", [$.String])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [], [])
    );

    $.Field({Static:false, Public:false}, "collection", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$.String])); 
    $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$.String]))
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm09.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject/KeyCollection */ 

(function KeyCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject/KeyCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Dynamic.ExpandoObject")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckVersion", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.String]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(2, "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expando", $asm0D.TypeRef("System.Dynamic.ExpandoObject")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoVersion", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoCount", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoData", $asm0D.TypeRef("System.Dynamic.ExpandoObject/ExpandoData")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$.String]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Dynamic.ExpandoObject_KeyCollectionDebugView.__Type__]; });

})();

/* class System.Dynamic.ExpandoObject/KeyCollection/<GetEnumerator>d__c */ 

(function $lGetEnumerator$gd__c$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject/KeyCollection/<GetEnumerator>d__c", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.String$g.get_Current", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.String); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Dynamic.ExpandoObject/KeyCollection")); 
    $.Field({Static:false, Public:true }, "i$d", $.Int32); 
    $.Field({Static:false, Public:true }, "n$e", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.String$g.Current", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.ExpandoObject/ValueCollectionDebugView */ 

(function ValueCollectionDebugView$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject/ValueCollectionDebugView", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.ICollection`1", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [], [])
    );

    $.Field({Static:false, Public:false}, "collection", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$.Object])); 
    $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$.Object]))
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm09.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject/ValueCollection */ 

(function ValueCollection$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject/ValueCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Dynamic.ExpandoObject")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckVersion", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(2, "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expando", $asm0D.TypeRef("System.Dynamic.ExpandoObject")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoVersion", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoCount", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_expandoData", $asm0D.TypeRef("System.Dynamic.ExpandoObject/ExpandoData")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$.Object]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object]), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Dynamic.ExpandoObject_ValueCollectionDebugView.__Type__]; })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; });

})();

/* class System.Dynamic.ExpandoObject/ValueCollection/<GetEnumerator>d__13 */ 

(function $lGetEnumerator$gd__13$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject/ValueCollection/<GetEnumerator>d__13", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.Object); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Dynamic.ExpandoObject/ValueCollection")); 
    $.Field({Static:false, Public:true }, "data", $asm0D.TypeRef("System.Dynamic.ExpandoObject/ExpandoData")); 
    $.Field({Static:false, Public:true }, "i", $.Int32); 
    $.Field({Static:false, Public:true }, "temp", $.Object); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.ExpandoObject/MetaExpando */ 

(function MetaExpando$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), 
      Name: "System.Dynamic.ExpandoObject/MetaExpando", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Dynamic.ExpandoObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDynamicTestAndDefer", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $asm0D.TypeRef("System.Dynamic.ExpandoClass"), 
          $asm0D.TypeRef("System.Dynamic.ExpandoClass"), $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindDeleteMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DeleteMemberBinder")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindGetMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.GetMemberBinder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BindGetOrInvokeMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), $.String, 
          $.Boolean, $asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), 
          $asm09.TypeRef("System.Func`2", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindInvokeMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.InvokeMemberBinder"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BindSetMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.SetMemberBinder"), $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.ExpandoObject"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetClassEnsureIndex", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.ExpandoClass"), [
          $.String, $.Boolean, 
          $asm0D.TypeRef("System.Dynamic.ExpandoObject"), $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Dynamic.ExpandoClass")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDynamicMemberNames", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLimitedSelf", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRestrictions", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.BindingRestrictions"), [], [])
    );

    $.Property({Static:false, Public:true }, "Value", $asm0D.TypeRef("System.Dynamic.ExpandoObject"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.ExpandoObject/MetaExpando/<>c__DisplayClass19 */ 

(function $l$gc__DisplayClass19$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject/MetaExpando/<>c__DisplayClass19", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "binder", $asm0D.TypeRef("System.Dynamic.InvokeMemberBinder")); 
    $.Field({Static:false, Public:true }, "args", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.ExpandoObject/MetaExpando/<GetDynamicMemberNames>d__1b */ 

(function $lGetDynamicMemberNames$gd__1b$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject/MetaExpando/<GetDynamicMemberNames>d__1b", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.String$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.String$g.get_Current", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.String); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Dynamic.ExpandoObject/MetaExpando")); 
    $.Field({Static:false, Public:true }, "expandoData$1c", $asm0D.TypeRef("System.Dynamic.ExpandoObject/ExpandoData")); 
    $.Field({Static:false, Public:true }, "klass$1d", $asm0D.TypeRef("System.Dynamic.ExpandoClass")); 
    $.Field({Static:false, Public:true }, "i$1e", $.Int32); 
    $.Field({Static:false, Public:true }, "val$1f", $.Object); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.String$g.Current", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.String]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.ExpandoObject/<GetExpandoEnumerator>d__5 */ 

(function $lGetExpandoEnumerator$gd__5$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.ExpandoObject/<GetExpandoEnumerator>d__5", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.get_Current", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]), [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Dynamic.ExpandoObject")); 
    $.Field({Static:false, Public:true }, "data", $asm0D.TypeRef("System.Dynamic.ExpandoObject/ExpandoData")); 
    $.Field({Static:false, Public:true }, "version", $.Int32); 
    $.Field({Static:false, Public:true }, "i", $.Int32); 
    $.Field({Static:false, Public:true }, "temp", $.Object); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Collections.Generic.KeyValuePair$lSystem.String$cmSystem.Object$g$g.Current", $asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [$.String, $.Object])]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Runtime.CompilerServices.RuntimeOps */ 

(function RuntimeOps$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Runtime.CompilerServices.RuntimeOps", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "CreateRuntimeVariables", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), [$jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.Int64])], [])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateRuntimeVariables", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), [], [])
    )
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; });

    $.ExternalMethod({Static:true , Public:true }, "ExpandoCheckVersion", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Dynamic.ExpandoObject"), $.Object], [])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:true }, "ExpandoPromoteClass", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Dynamic.ExpandoObject"), $.Object, 
          $.Object
        ], [])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:true }, "ExpandoTryDeleteValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("System.Dynamic.ExpandoObject"), $.Object, 
          $.Int32, $.String, 
          $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:true }, "ExpandoTryGetValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm0D.TypeRef("System.Dynamic.ExpandoObject"), $.Object, 
          $.Int32, $.String, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; });

    $.ExternalMethod({Static:true , Public:true }, "ExpandoTrySetValue", 
      new JSIL.MethodSignature($.Object, [
          $asm0D.TypeRef("System.Dynamic.ExpandoObject"), $.Object, 
          $.Int32, $.Object, 
          $.String, $.Boolean
        ], [])
    )
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; });

    $.ExternalMethod({Static:true , Public:true }, "MergeRuntimeVariables", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), [
          $asm0D.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), $asm0D.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ], [])
    )
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; })
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; });

    $.ExternalMethod({Static:true , Public:true }, "Quote", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $.Object, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["do not use this method", true]; })
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; });

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

})();

/* class System.Linq.Expressions.ExpressionVisitor */ 

(function ExpressionVisitor$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ExpressionVisitor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "ValidateBinary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm0D.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateChildType", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSwitch", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.SwitchExpression"), [$asm0D.TypeRef("System.Linq.Expressions.SwitchExpression"), $asm0D.TypeRef("System.Linq.Expressions.SwitchExpression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateUnary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm0D.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Visit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Visit", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Visit", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "VisitAndConvert", 
      new JSIL.MethodSignature("!!0", ["!!0", $.String], ["T"])
    );

    $.ExternalMethod({Static:false, Public:true }, "VisitAndConvert", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), $.String], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitArguments", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [$asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBinary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBlock", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.BlockExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCatchBlock", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConditional", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ConditionalExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ConstantExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDebugInfo", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.DebugInfoExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDefault", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.DefaultExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDynamic", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.DynamicExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitElementInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ElementInit"), [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitExtension", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitGoto", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.GotoExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitIndex", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.IndexExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitInvocation", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.InvocationExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLabel", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.LabelExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLabelTarget", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitListInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ListInitExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLoop", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.LoopExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.MemberExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberAssignment", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm0D.TypeRef("System.Linq.Expressions.MemberAssignment")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberBinding", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberBinding"), [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.MemberInitExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberListBinding", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm0D.TypeRef("System.Linq.Expressions.MemberListBinding")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberMemberBinding", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm0D.TypeRef("System.Linq.Expressions.MemberMemberBinding")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMethodCall", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNew", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.NewExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNewArray", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.NewArrayExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitRuntimeVariables", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSwitch", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.SwitchExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSwitchCase", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.SwitchCase"), [$asm0D.TypeRef("System.Linq.Expressions.SwitchCase")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTry", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.TryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTypeBinary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.TypeBinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUnary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.RuntimeOps/ExpressionQuoter */ 

(function ExpressionQuoter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor"), 
      Name: "System.Runtime.CompilerServices.RuntimeOps/ExpressionQuoter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals"), $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetBox", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Runtime.CompilerServices.IStrongBox"), [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBlock", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.BlockExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCatchBlock", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitRuntimeVariables", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_scope", $asm0D.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_locals", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_shadowedVars", $asm0B.TypeRef("System.Collections.Generic.Stack`1", [$asm0D.TypeRef("System.Linq.Expressions.Set`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.RuntimeOps/RuntimeVariables */ 

(function RuntimeVariables$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.RuntimeOps/RuntimeVariables", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Runtime.CompilerServices.IStrongBox")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32], [])
    )
      .Overrides(0, "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], [])
    )
      .Overrides(0, "set_Item");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_boxes", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Runtime.CompilerServices.IStrongBox")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.RuntimeOps/MergedRuntimeVariables */ 

(function MergedRuntimeVariables$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.RuntimeOps/MergedRuntimeVariables", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), $asm0D.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables"), 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_first", $asm0D.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_second", $asm0D.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_indexes", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Runtime.CompilerServices.RuntimeOps/EmptyRuntimeVariables */ 

(function EmptyRuntimeVariables$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.RuntimeOps/EmptyRuntimeVariables", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32], [])
    )
      .Overrides(0, "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], [])
    )
      .Overrides(0, "set_Item");

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IRuntimeVariables.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.RuntimeOps/RuntimeVariableList */ 

(function RuntimeVariableList$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.RuntimeOps/RuntimeVariableList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.Int64])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStrongBox", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Runtime.CompilerServices.IStrongBox"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_data", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_indexes", $jsilcore.TypeRef("System.Array", [$.Int64])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Runtime.CompilerServices.IRuntimeVariables")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* interface System.Runtime.CompilerServices.IRuntimeVariables */ 

JSIL.MakeInterface(
  "System.Runtime.CompilerServices.IRuntimeVariables", true, [], function ($) {
    $.Method({}, "get_Count", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "get_Item", new JSIL.MethodSignature($.Object, [$.Int32], []));
    $.Method({}, "set_Item", new JSIL.MethodSignature(null, [$.Int32, $.Object], []));
    $.Property({}, "Count");
    $.Property({}, "Item");
  }, []);

/* class System.Dynamic.GetIndexBinder */ 

(function GetIndexBinder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.GetIndexBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Dynamic.CallInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackGetIndex", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackGetIndex", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CallInfo", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.CallInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_callInfo", $asm0D.TypeRef("System.Dynamic.CallInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "CallInfo", $asm0D.TypeRef("System.Dynamic.CallInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Dynamic.IInvokeOnGetBinder */ 

JSIL.MakeInterface(
  "System.Dynamic.IInvokeOnGetBinder", true, [], function ($) {
    $.Method({}, "get_InvokeOnGet", new JSIL.MethodSignature($.Boolean, [], []));
    $.Property({}, "InvokeOnGet");
  }, []);

/* class System.Dynamic.InvokeBinder */ 

(function InvokeBinder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.InvokeBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Dynamic.CallInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackInvoke", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackInvoke", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CallInfo", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.CallInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_callInfo", $asm0D.TypeRef("System.Dynamic.CallInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "CallInfo", $asm0D.TypeRef("System.Dynamic.CallInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.InvokeMemberBinder */ 

(function InvokeMemberBinder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.InvokeMemberBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $asm0D.TypeRef("System.Dynamic.CallInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackInvoke", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackInvokeMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackInvokeMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CallInfo", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.CallInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreCase", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_ignoreCase", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_callInfo", $asm0D.TypeRef("System.Dynamic.CallInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "IgnoreCase", $.Boolean);

    $.Property({Static:false, Public:true }, "CallInfo", $asm0D.TypeRef("System.Dynamic.CallInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.RuleCache`1 */ 

(function RuleCache$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.RuleCache`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddOrInsert", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.RuleCache`1")]), [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.RuleCache`1")]), new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.RuleCache`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRule", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.RuleCache`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRules", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.RuleCache`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveRule", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.RuleCache`1"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceRule", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.RuleCache`1"), new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.RuleCache`1")], [])
    );

    $.Field({Static:false, Public:false}, "_rules", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "cacheLock", $.Object); 
    $.Constant({Static:true , Public:false}, "MaxRules", 128); 
    $.Constant({Static:true , Public:false}, "InsertPosition", 64); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

})();

/* class System.Dynamic.SetIndexBinder */ 

(function SetIndexBinder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.SetIndexBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Dynamic.CallInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackSetIndex", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackSetIndex", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")]), 
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CallInfo", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.CallInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_callInfo", $asm0D.TypeRef("System.Dynamic.CallInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "CallInfo", $asm0D.TypeRef("System.Dynamic.CallInfo"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.SetMemberBinder */ 

(function SetMemberBinder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.SetMemberBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackSetMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackSetMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), 
          $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreCase", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_ignoreCase", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "IgnoreCase", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.UnaryOperationBinder */ 

(function UnaryOperationBinder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Dynamic.DynamicMetaObjectBinder"), 
      Name: "System.Dynamic.UnaryOperationBinder", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.ExpressionType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Bind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "FallbackUnaryOperation", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FallbackUnaryOperation", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject"), $asm0D.TypeRef("System.Dynamic.DynamicMetaObject")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsStandardBinder", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operation", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperationIsValid", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.ExpressionType")], [])
    );

    $.Field({Static:false, Public:false}, "_operation", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType")); 
    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Operation", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsStandardBinder", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.UpdateDelegates */ 

(function UpdateDelegates$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Dynamic.UpdateDelegates", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "NoMatch0", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSite")], ["TRet"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch1", 
      new JSIL.MethodSignature("!!1", [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0"], ["T0", "TRet"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch10", 
      new JSIL.MethodSignature("!!10", [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7", "!!8", 
          "!!9"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "TRet"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch2", 
      new JSIL.MethodSignature("!!2", [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1"
        ], ["T0", "T1", "TRet"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch3", 
      new JSIL.MethodSignature("!!3", [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2"
        ], ["T0", "T1", "T2", "TRet"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch4", 
      new JSIL.MethodSignature("!!4", [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3"
        ], [
          "T0", "T1", "T2", "T3", 
          "TRet"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch5", 
      new JSIL.MethodSignature("!!5", [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "TRet"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch6", 
      new JSIL.MethodSignature("!!6", [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "TRet"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch7", 
      new JSIL.MethodSignature("!!7", [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "TRet"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch8", 
      new JSIL.MethodSignature("!!8", [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "TRet"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatch9", 
      new JSIL.MethodSignature("!!9", [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7", "!!8"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "TRet"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid1", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0"], ["T0"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid10", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7", "!!8", 
          "!!9"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid2", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1"
        ], ["T0", "T1"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid3", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2"
        ], ["T0", "T1", "T2"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid4", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3"
        ], ["T0", "T1", "T2", "T3"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid5", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid6", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid7", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid8", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "NoMatchVoid9", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7", "!!8"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute0", 
      new JSIL.MethodSignature("!!0", [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSite")], ["TRet"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute1", 
      new JSIL.MethodSignature("!!1", [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0"], ["T0", "TRet"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute10", 
      new JSIL.MethodSignature("!!10", [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7", "!!8", 
          "!!9"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9", "TRet"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute2", 
      new JSIL.MethodSignature("!!2", [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1"
        ], ["T0", "T1", "TRet"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute3", 
      new JSIL.MethodSignature("!!3", [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2"
        ], ["T0", "T1", "T2", "TRet"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute4", 
      new JSIL.MethodSignature("!!4", [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3"
        ], [
          "T0", "T1", "T2", "T3", 
          "TRet"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute5", 
      new JSIL.MethodSignature("!!5", [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "TRet"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute6", 
      new JSIL.MethodSignature("!!6", [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "TRet"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute7", 
      new JSIL.MethodSignature("!!7", [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "TRet"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute8", 
      new JSIL.MethodSignature("!!8", [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "TRet"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecute9", 
      new JSIL.MethodSignature("!!9", [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7", "!!8"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "TRet"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid1", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0"], ["T0"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid10", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7", "!!8", 
          "!!9"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8", "T9"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid2", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1"
        ], ["T0", "T1"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid3", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2"
        ], ["T0", "T1", "T2"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid4", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3"
        ], ["T0", "T1", "T2", "T3"])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid5", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid6", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid7", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid8", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    $.ExternalMethod({Static:true , Public:false}, "UpdateAndExecuteVoid9", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSite"), "!!0", 
          "!!1", "!!2", 
          "!!3", "!!4", 
          "!!5", "!!6", 
          "!!7", "!!8"
        ], [
          "T0", "T1", "T2", "T3", 
          "T4", "T5", "T6", "T7", 
          "T8"
        ])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["pregenerated CallSite<T>.Update delegate", true]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression */ 

(function Expression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["use a different constructor that does not take ExpressionType. Then override NodeType and Type properties to provide the values that would be specified to this constructor."]; });

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "AddAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "AddAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddAssignChecked", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "AddAssignChecked", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "AddAssignChecked", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddChecked", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "AddChecked", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "And", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "And", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "AndAlso", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "AndAlso", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "AndAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "AndAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "AndAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ApplyTypeArgs", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [$asm09.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArrayAccess", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.IndexExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArrayAccess", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.IndexExpression"), [$.Type, $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArrayIndex", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArrayIndex", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArrayIndex", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$.Type, $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArrayLength", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Assign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Bind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm09.TypeRef("System.Reflection.MemberInfo"), $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Bind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm09.TypeRef("System.Reflection.MethodInfo"), $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [
          $.Type, $.Type, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [
          $.Type, $.Type, 
          $.Type, $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [
          $.Type, $.Type, 
          $.Type, $.Type, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [$jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm09.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Block", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Break", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Break", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Break", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Break", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.GotoExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type, 
          $asm09.TypeRef("System.Type")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm09.TypeRef("System.Reflection.MethodInfo"), $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $asm09.TypeRef("System.Reflection.MethodInfo"), $.Type, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $asm09.TypeRef("System.Reflection.MethodInfo"), $.Type, 
          $.Type, $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $asm09.TypeRef("System.Reflection.MethodInfo"), $.Type, 
          $.Type, $.Type, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $asm09.TypeRef("System.Reflection.MethodInfo"), $.Type, 
          $.Type, $.Type, 
          $.Type, $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm09.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm09.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$.Type, $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $.Type, $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $.Type, $.Type, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $asm09.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Catch", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm09.TypeRef("System.Type"), $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Catch", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Catch", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.CatchBlock"), [
          $asm09.TypeRef("System.Type"), $.Type, 
          $.Type
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Catch", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.CatchBlock"), [
          $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Type, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ClearDebugInfo", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DebugInfoExpression"), [$asm0D.TypeRef("System.Linq.Expressions.SymbolDocumentInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Coalesce", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Coalesce", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Condition", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ConditionalExpression"), [
          $.Type, $.Type, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Condition", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ConditionalExpression"), [
          $.Type, $.Type, 
          $.Type, $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Constant", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ConstantExpression"), [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Constant", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ConstantExpression"), [$.Object, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Continue", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Continue", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Convert", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Convert", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $.Type, $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertChecked", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ConvertChecked", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $.Type, $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateLambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm09.TypeRef("System.Type"), $.Type, 
          $.String, $.Boolean, 
          $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "DebugInfo", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DebugInfoExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Decrement", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Decrement", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Default", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DefaultExpression"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "DivideAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "DivideAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "DivideAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm09.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm09.TypeRef("System.Type"), 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm09.TypeRef("System.Type"), 
          $.Type, $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm09.TypeRef("System.Type"), 
          $.Type, $.Type, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm09.TypeRef("System.Type"), 
          $.Type, $.Type, 
          $.Type, $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Dynamic", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ElementInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ElementInit"), [$asm09.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ElementInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ElementInit"), [$asm09.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Empty", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DefaultExpression"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equal", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Equal", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExclusiveOr", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ExclusiveOr", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExclusiveOrAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ExclusiveOrAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ExclusiveOrAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Field", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm09.TypeRef("System.Reflection.FieldInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Field", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Field", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberExpression"), [
          $.Type, $asm09.TypeRef("System.Type"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindBestMethod", 
      new JSIL.MethodSignature($.Int32, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Reflection.MethodInfo")]), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Reflection.MethodInfo")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindBestProperty", 
      new JSIL.MethodSignature($.Int32, [
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Reflection.PropertyInfo")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Reflection.PropertyInfo")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindInstanceProperty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.PropertyInfo"), [
          $asm09.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [
          $asm09.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $asm09.TypeRef("System.Reflection.BindingFlags")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindProperty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.PropertyInfo"), [
          $asm09.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Type]), $asm09.TypeRef("System.Reflection.BindingFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetActionType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetArgTypesString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetComparisonOperator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDelegateType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEqualityComparisonOperator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFuncType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetInvokeMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedAssignOperator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type, $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedBinaryOperator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type, $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedCoercionOperator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedUnaryOperator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParametersForValidation", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.ParameterInfo")]), [$asm09.TypeRef("System.Reflection.MethodBase"), $asm0D.TypeRef("System.Linq.Expressions.ExpressionType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProperty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.PropertyInfo"), [$asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetResultTypeOfShift", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedAssignOperatorOrThrow", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedBinaryOperator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedBinaryOperator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type"), $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedBinaryOperatorOrThrow", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedCoercion", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedCoercionOrThrow", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedUnaryOperator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedUnaryOperatorOrThrow", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetValidMethodForDynamic", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Goto", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Goto", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Goto", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Goto", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.GotoExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type, 
          $asm09.TypeRef("System.Type")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "IfThen", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ConditionalExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "IfThenElse", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ConditionalExpression"), [
          $.Type, $.Type, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Increment", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Increment", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Invoke", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.InvocationExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Invoke", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.InvocationExpression"), [$.Type, $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCompatible", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.PropertyInfo"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCompatible", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.MethodBase"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsFalse", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "IsFalse", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsLiftingConditionalLogicalOperator", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.ExpressionType")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullComparison", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullConstant", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSimpleShift", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsTrue", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "IsTrue", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidLiftedConditionalLogicalOperator", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.ParameterInfo")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LabelExpression"), [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LabelExpression"), [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Label", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), [$asm09.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [$.Type, $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])], ["TDelegate"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [
          $.Type, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], ["TDelegate"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [$.Type, $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])], ["TDelegate"])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [
          $.Type, $.Boolean, 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], ["TDelegate"])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [
          $.Type, $.String, 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], ["TDelegate"])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [
          $.Type, $.String, 
          $.Boolean, $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], ["TDelegate"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $.Type, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [$.Type, $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $.Type, $.Boolean, 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm09.TypeRef("System.Type"), $.Type, 
          $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm09.TypeRef("System.Type"), $.Type, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm09.TypeRef("System.Type"), $.Type, 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm09.TypeRef("System.Type"), $.Type, 
          $.Boolean, $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $.Type, $.String, 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $.Type, $.String, 
          $.Boolean, $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm09.TypeRef("System.Type"), $.Type, 
          $.String, $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm09.TypeRef("System.Type"), $.Type, 
          $.String, $.Boolean, 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "LeftShift", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "LeftShift", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "LeftShiftAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "LeftShiftAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "LeftShiftAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm09.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm09.TypeRef("System.Reflection.MemberInfo"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm09.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm09.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm0D.TypeRef("System.Linq.Expressions.NewExpression"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm0D.TypeRef("System.Linq.Expressions.NewExpression"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ListInitExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.NewExpression"), $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ListInitExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.NewExpression"), $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm0D.TypeRef("System.Linq.Expressions.NewExpression"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm0D.TypeRef("System.Linq.Expressions.NewExpression"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Loop", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LoopExpression"), [$.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Loop", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LoopExpression"), [$.Type, $asm0D.TypeRef("System.Linq.Expressions.LabelTarget")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Loop", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LoopExpression"), [
          $.Type, $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), 
          $asm0D.TypeRef("System.Linq.Expressions.LabelTarget")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeBinary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "MakeBinary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type, $.Boolean, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "MakeBinary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type, $.Boolean, 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeCatchBlock", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.CatchBlock"), [
          $asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), 
          $.Type, $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $.Type, $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $.Type, $.Type, 
          $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeDynamic", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $.Type, $.Type, 
          $.Type, $.Type
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeDynamic", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), [
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeGoto", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.GotoExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.GotoExpressionKind"), $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), 
          $.Type, $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeIndex", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.IndexExpression"), [
          $.Type, $asm09.TypeRef("System.Reflection.PropertyInfo"), 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeMemberAccess", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm09.TypeRef("System.Reflection.MemberInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeOpAssignUnary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeTry", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.TryExpression"), [
          $asm09.TypeRef("System.Type"), $.Type, 
          $.Type, $.Type, 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeUnary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm09.TypeRef("System.Type")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "MakeUnary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm09.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm09.TypeRef("System.Reflection.MemberInfo"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm09.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm09.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MemberInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberInitExpression"), [$asm0D.TypeRef("System.Linq.Expressions.NewExpression"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MemberInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberInitExpression"), [$asm0D.TypeRef("System.Linq.Expressions.NewExpression"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Modulo", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Modulo", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ModuloAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ModuloAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "ModuloAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "MultiplyAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "MultiplyAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyAssignChecked", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "MultiplyAssignChecked", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "MultiplyAssignChecked", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyChecked", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "MultiplyChecked", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NegateChecked", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "NegateChecked", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.NewExpression"), [$asm09.TypeRef("System.Reflection.ConstructorInfo")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.NewExpression"), [$asm09.TypeRef("System.Reflection.ConstructorInfo"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.NewExpression"), [$asm09.TypeRef("System.Reflection.ConstructorInfo"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.NewExpression"), [
          $asm09.TypeRef("System.Reflection.ConstructorInfo"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type]), 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Reflection.MemberInfo")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.NewExpression"), [
          $asm09.TypeRef("System.Reflection.ConstructorInfo"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type]), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.MemberInfo")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.NewExpression"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewArrayBounds", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm09.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewArrayBounds", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewArrayInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm09.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewArrayInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Not", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Not", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEqual", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "NotEqual", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "OnesComplement", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "OnesComplement", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Or", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Or", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "OrAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "OrAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "OrAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "OrElse", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "OrElse", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parameter", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Parameter", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm09.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterIsAssignable", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.ParameterInfo"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "PostDecrementAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "PostDecrementAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "PostIncrementAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "PostIncrementAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Power", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Power", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "PowerAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "PowerAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "PowerAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "PreDecrementAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "PreDecrementAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "PreIncrementAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "PreIncrementAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.IndexExpression"), [
          $.Type, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.IndexExpression"), [
          $.Type, $asm09.TypeRef("System.Reflection.PropertyInfo"), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.IndexExpression"), [
          $.Type, $asm09.TypeRef("System.Reflection.PropertyInfo"), 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberExpression"), [
          $.Type, $asm09.TypeRef("System.Type"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm09.TypeRef("System.Reflection.PropertyInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "PropertyOrField", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Quote", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reduce", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReduceAndCheck", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReduceExtensions", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReferenceEqual", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "ReferenceNotEqual", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresCanRead", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresCanRead", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type]), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresCanWrite", 
      new JSIL.MethodSignature(null, [$.Type, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Rethrow", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Rethrow", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Return", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Return", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Return", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.GotoExpression"), [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Return", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.GotoExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $.Type, 
          $asm09.TypeRef("System.Type")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "ReturnObject", 
      new JSIL.MethodSignature("!!0", [$.Object], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReturnReadOnly", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Collections.Generic.IList`1", ["!!0"])])], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReturnReadOnly", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type]), [$asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "RightShift", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "RightShift", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "RightShiftAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "RightShiftAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "RightShiftAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "RuntimeVariables", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression"), [$jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "RuntimeVariables", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression"), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SubtractAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "SubtractAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "SubtractAssign", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SubtractAssignChecked", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "SubtractAssignChecked", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "SubtractAssignChecked", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SubtractChecked", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "SubtractChecked", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Switch", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.SwitchExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.SwitchCase")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Switch", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.SwitchExpression"), [
          $.Type, $.Type, 
          $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.SwitchCase")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Switch", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.SwitchExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.SwitchCase")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Switch", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.SwitchExpression"), [
          $asm09.TypeRef("System.Type"), $.Type, 
          $.Type, $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.SwitchCase")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Switch", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.SwitchExpression"), [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.SwitchCase")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Switch", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.SwitchExpression"), [
          $asm09.TypeRef("System.Type"), $.Type, 
          $.Type, $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.SwitchCase")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SwitchCase", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.SwitchCase"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SwitchCase", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.SwitchCase"), [$.Type, $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SymbolDocument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SymbolDocument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [$.String, $asm09.TypeRef("System.Guid")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SymbolDocument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [
          $.String, $asm09.TypeRef("System.Guid"), 
          $asm09.TypeRef("System.Guid")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "SymbolDocument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [
          $.String, $asm09.TypeRef("System.Guid"), 
          $asm09.TypeRef("System.Guid"), $asm09.TypeRef("System.Guid")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Throw", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Throw", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryCatch", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.TryExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "TryCatchFinally", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.TryExpression"), [
          $.Type, $.Type, 
          $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "TryFault", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.TryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "TryFinally", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.TryExpression"), [$.Type, $.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "TryGetActionType", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryGetFuncType", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TypeAs", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TypeEqual", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.TypeBinaryExpression"), [$.Type, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "TypeIs", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.TypeBinaryExpression"), [$.Type, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "UnaryPlus", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "UnaryPlus", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Unbox", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateAccessor", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.ParameterInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateAccessorArgumentTypes", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.ParameterInfo")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateAnonymousTypeMember", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Reflection.MemberInfo")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateArgumentCount", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.MethodBase"), $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.ParameterInfo")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateArgumentTypes", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.MethodBase"), $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCallInstanceType", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCoalesceArgTypes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateDynamicArgument", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateElementInitAddMethodInfo", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateGettableFieldOrPropertyMember", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateGoto", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.String, $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateGotoType", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateIndexedProperty", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm09.TypeRef("System.Reflection.PropertyInfo"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateLambdaArgs", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateListInitArgs", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateMemberInitArgs", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateMethodAndGetParameters", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.ParameterInfo")]), [$.Type, $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateMethodInfo", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateNewArgs", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.ConstructorInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Reflection.MemberInfo")])])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateOneArgument", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.Reflection.MethodBase"), $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $.Type, $asm09.TypeRef("System.Reflection.ParameterInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateOpAssignConversionLambda", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Type, 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.ExpressionType")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateOperator", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateParamswithOperandsOrThrow", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSettableFieldOrPropertyMember", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSpan", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateStaticOrInstanceMethod", 
      new JSIL.MethodSignature(null, [$.Type, $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSwitchCaseType", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Boolean, 
          $asm09.TypeRef("System.Type"), $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateTryAndCatchHaveSameType", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $.Type, 
          $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateTryGetFuncActionArgs", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateUserDefinedConditionalLogicOperator", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateVariables", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "Variable", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Variable", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm09.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyOpTrueFalse", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitChildren", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_LambdaDelegateCache", $asm0D.TypeRef("System.Dynamic.Utils.CacheDict`2", [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Reflection.MethodInfo")])); 
    $.Field({Static:true , Public:false}, "_LambdaFactories", $asm0D.TypeRef("System.Dynamic.Utils.CacheDict`2", [$asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Linq.Expressions.Expression/LambdaFactory")])); 
    $.Field({Static:true , Public:false}, "_legacyCtorSupportTable", $asm09.TypeRef("System.Runtime.CompilerServices.ConditionalWeakTable`2", [$.Type, $asm0D.TypeRef("System.Linq.Expressions.Expression/ExtensionInfo")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:false}, "DebugView", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Linq.Expressions.Expression/LambdaFactory */ 

JSIL.MakeDelegate("System.Linq.Expressions.Expression/LambdaFactory", false, []);

/* class System.Linq.Expressions.Expression/ExtensionInfo */ 

(function ExtensionInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/ExtensionInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Type", $asm09.TypeRef("System.Type")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/BinaryExpressionProxy */ 

(function BinaryExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/BinaryExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Conversion", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Left", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Right", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.BinaryExpression")); 
    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "Conversion", $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "IsLifted", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Left", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Method", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Right", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/BlockExpressionProxy */ 

(function BlockExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/BlockExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.BlockExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expressions", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Variables", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.BlockExpression")); 
    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Expressions", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Result", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Variables", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/CatchBlockProxy */ 

(function CatchBlockProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/CatchBlockProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Filter", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Test", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Variable", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.CatchBlock")); 
    $.Property({Static:false, Public:true }, "Body", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Filter", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Test", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Variable", $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/ConditionalExpressionProxy */ 

(function ConditionalExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/ConditionalExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.ConditionalExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IfFalse", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IfTrue", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Test", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.ConditionalExpression")); 
    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "IfFalse", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "IfTrue", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Test", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/ConstantExpressionProxy */ 

(function ConstantExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/ConstantExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.ConstantExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.ConstantExpression")); 
    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Value", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/DebugInfoExpressionProxy */ 

(function DebugInfoExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/DebugInfoExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.DebugInfoExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Document", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EndColumn", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EndLine", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsClear", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StartColumn", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StartLine", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.DebugInfoExpression")); 
    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Document", $asm0D.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"));

    $.Property({Static:false, Public:true }, "EndColumn", $.Int32);

    $.Property({Static:false, Public:true }, "EndLine", $.Int32);

    $.Property({Static:false, Public:true }, "IsClear", $.Boolean);

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "StartColumn", $.Int32);

    $.Property({Static:false, Public:true }, "StartLine", $.Int32);

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/DefaultExpressionProxy */ 

(function DefaultExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/DefaultExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.DefaultExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.DefaultExpression")); 
    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/DynamicExpressionProxy */ 

(function DynamicExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/DynamicExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.DynamicExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Binder", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DelegateType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.DynamicExpression")); 
    $.Property({Static:false, Public:true }, "Arguments", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "Binder", $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "DelegateType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/GotoExpressionProxy */ 

(function GotoExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/GotoExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.GotoExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.GotoExpressionKind"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.GotoExpression")); 
    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Kind", $asm0D.TypeRef("System.Linq.Expressions.GotoExpressionKind"));

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Target", $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Value", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/IndexExpressionProxy */ 

(function IndexExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/IndexExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.IndexExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Indexer", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.PropertyInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Object", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.IndexExpression")); 
    $.Property({Static:false, Public:true }, "Arguments", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Indexer", $asm09.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Object", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/InvocationExpressionProxy */ 

(function InvocationExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/InvocationExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.InvocationExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.InvocationExpression")); 
    $.Property({Static:false, Public:true }, "Arguments", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Expression", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/LabelExpressionProxy */ 

(function LabelExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/LabelExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.LabelExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.LabelExpression")); 
    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "DefaultValue", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Target", $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/LambdaExpressionProxy */ 

(function LambdaExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/LambdaExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TailCall", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")); 
    $.Property({Static:false, Public:true }, "Body", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Parameters", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Property({Static:false, Public:true }, "ReturnType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "TailCall", $.Boolean);

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/ListInitExpressionProxy */ 

(function ListInitExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/ListInitExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.ListInitExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Initializers", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.NewExpression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.ListInitExpression")); 
    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Initializers", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")]));

    $.Property({Static:false, Public:true }, "NewExpression", $asm0D.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/LoopExpressionProxy */ 

(function LoopExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/LoopExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.LoopExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BreakLabel", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContinueLabel", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.LoopExpression")); 
    $.Property({Static:false, Public:true }, "Body", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "BreakLabel", $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "ContinueLabel", $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/MemberExpressionProxy */ 

(function MemberExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/MemberExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.MemberExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Member", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MemberInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.MemberExpression")); 
    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Expression", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Member", $asm09.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/MemberInitExpressionProxy */ 

(function MemberInitExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/MemberInitExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.MemberInitExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bindings", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.NewExpression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.MemberInitExpression")); 
    $.Property({Static:false, Public:true }, "Bindings", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")]));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "NewExpression", $asm0D.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/MethodCallExpressionProxy */ 

(function MethodCallExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/MethodCallExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Object", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression")); 
    $.Property({Static:false, Public:true }, "Arguments", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Method", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Object", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/NewArrayExpressionProxy */ 

(function NewArrayExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/NewArrayExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.NewArrayExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expressions", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.NewArrayExpression")); 
    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Expressions", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/NewExpressionProxy */ 

(function NewExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/NewExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.NewExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Constructor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.ConstructorInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Members", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Reflection.MemberInfo")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.NewExpression")); 
    $.Property({Static:false, Public:true }, "Arguments", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "Constructor", $asm09.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Members", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Reflection.MemberInfo")]));

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/ParameterExpressionProxy */ 

(function ParameterExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/ParameterExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsByRef", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")); 
    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "IsByRef", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/RuntimeVariablesExpressionProxy */ 

(function RuntimeVariablesExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/RuntimeVariablesExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Variables", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")); 
    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Variables", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/SwitchCaseProxy */ 

(function SwitchCaseProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/SwitchCaseProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.SwitchCase")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TestValues", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.SwitchCase")); 
    $.Property({Static:false, Public:true }, "Body", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "TestValues", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/SwitchExpressionProxy */ 

(function SwitchExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/SwitchExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.SwitchExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Cases", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.SwitchCase")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Comparison", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultBody", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SwitchValue", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.SwitchExpression")); 
    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "Cases", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.SwitchCase")]));

    $.Property({Static:false, Public:true }, "Comparison", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "DefaultBody", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "SwitchValue", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/TryExpressionProxy */ 

(function TryExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/TryExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.TryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Fault", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Finally", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Handlers", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.TryExpression")); 
    $.Property({Static:false, Public:true }, "Body", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Fault", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Finally", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Handlers", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")]));

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/TypeBinaryExpressionProxy */ 

(function TypeBinaryExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/TypeBinaryExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.TypeBinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeOperand", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.TypeBinaryExpression")); 
    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "Expression", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "TypeOperand", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression/UnaryExpressionProxy */ 

(function UnaryExpressionProxy$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression/UnaryExpressionProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DebugView", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operand", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.UnaryExpression")); 
    $.Property({Static:false, Public:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugView", $.String);

    $.Property({Static:false, Public:true }, "IsLifted", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Method", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Operand", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.BinaryExpression */ 

(function BinaryExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.BinaryExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Conversion", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLiftedLogical", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReferenceComparison", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Left", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Right", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "GetBinaryOpFromAssignmentOp", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionType")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetConversion", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsOpAssignment", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.ExpressionType")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reduce", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceIndex", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceUserdefinedLifted", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceVariable", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_left", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_right", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "Right", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Left", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Method", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "Conversion", $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.Property({Static:false, Public:true }, "IsLifted", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean);

    $.Property({Static:false, Public:false}, "IsLiftedLogical", $.Boolean);

    $.Property({Static:false, Public:false}, "IsReferenceComparison", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_BinaryExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.BlockExpression */ 

(function BlockExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.BlockExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expressions", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Result", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_VariableCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Variables", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeVariables", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetVariable", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReturnReadOnlyExpressions", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [$.Type, $jsilcore.TypeRef("JSIL.Reference", [$.Object])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.Property({Static:false, Public:true }, "Expressions", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "Variables", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Property({Static:false, Public:true }, "Result", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "VariableCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_BlockExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.CatchBlock */ 

(function CatchBlock$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.CatchBlock", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Filter", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Test", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Variable", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [
          $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_test", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_var", $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_filter", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:true }, "Variable", $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"));

    $.Property({Static:false, Public:true }, "Test", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Body", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Filter", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_CatchBlockProxy.__Type__]; });

})();

/* class System.Linq.Expressions.ConditionalExpression */ 

(function ConditionalExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.ConditionalExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IfFalse", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IfTrue", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Test", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFalse", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_test", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_true", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Test", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "IfTrue", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "IfFalse", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_ConditionalExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.ConstantExpression */ 

(function ConstantExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.ConstantExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [$.Object, $asm09.TypeRef("System.Type")], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_value", $.Object); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Value", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_ConstantExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.DebugInfoExpression */ 

(function DebugInfoExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.DebugInfoExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.SymbolDocumentInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Document", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndColumn", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndLine", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsClear", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartColumn", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartLine", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_document", $asm0D.TypeRef("System.Linq.Expressions.SymbolDocumentInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "StartLine", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "StartColumn", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EndLine", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EndColumn", $.Int32);

    $.Property({Static:false, Public:true }, "Document", $asm0D.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsClear", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_DebugInfoExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.DefaultExpression */ 

(function DefaultExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.DefaultExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_DefaultExpressionProxy.__Type__]; });

})();

/* interface System.Linq.Expressions.IArgumentProvider */ 

JSIL.MakeInterface(
  "System.Linq.Expressions.IArgumentProvider", false, [], function ($) {
    $.Method({}, "GetArgument", new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], []));
    $.Method({}, "get_ArgumentCount", new JSIL.MethodSignature($.Int32, [], []));
    $.Property({}, "ArgumentCount");
  }, []);

/* class System.Linq.Expressions.DynamicExpression */ 

(function DynamicExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.DynamicExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Binder", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_DelegateType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_binder", $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_delegateType", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Binder", $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"));

    $.Property({Static:false, Public:true }, "DelegateType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Arguments", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_DynamicExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.ElementInit */ 

(function ElementInit$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ElementInit", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AddMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.Field({Static:false, Public:false}, "_addMethod", $asm09.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "_arguments", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Property({Static:false, Public:true }, "AddMethod", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "Arguments", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.ExpressionType */ 

JSIL.MakeEnum(
  "System.Linq.Expressions.ExpressionType", true, {
    Add: 0, 
    AddChecked: 1, 
    And: 2, 
    AndAlso: 3, 
    ArrayLength: 4, 
    ArrayIndex: 5, 
    Call: 6, 
    Coalesce: 7, 
    Conditional: 8, 
    Constant: 9, 
    Convert: 10, 
    ConvertChecked: 11, 
    Divide: 12, 
    Equal: 13, 
    ExclusiveOr: 14, 
    GreaterThan: 15, 
    GreaterThanOrEqual: 16, 
    Invoke: 17, 
    Lambda: 18, 
    LeftShift: 19, 
    LessThan: 20, 
    LessThanOrEqual: 21, 
    ListInit: 22, 
    MemberAccess: 23, 
    MemberInit: 24, 
    Modulo: 25, 
    Multiply: 26, 
    MultiplyChecked: 27, 
    Negate: 28, 
    UnaryPlus: 29, 
    NegateChecked: 30, 
    New: 31, 
    NewArrayInit: 32, 
    NewArrayBounds: 33, 
    Not: 34, 
    NotEqual: 35, 
    Or: 36, 
    OrElse: 37, 
    Parameter: 38, 
    Power: 39, 
    Quote: 40, 
    RightShift: 41, 
    Subtract: 42, 
    SubtractChecked: 43, 
    TypeAs: 44, 
    TypeIs: 45, 
    Assign: 46, 
    Block: 47, 
    DebugInfo: 48, 
    Decrement: 49, 
    Dynamic: 50, 
    Default: 51, 
    Extension: 52, 
    Goto: 53, 
    Increment: 54, 
    Index: 55, 
    Label: 56, 
    RuntimeVariables: 57, 
    Loop: 58, 
    Switch: 59, 
    Throw: 60, 
    Try: 61, 
    Unbox: 62, 
    AddAssign: 63, 
    AndAssign: 64, 
    DivideAssign: 65, 
    ExclusiveOrAssign: 66, 
    LeftShiftAssign: 67, 
    ModuloAssign: 68, 
    MultiplyAssign: 69, 
    OrAssign: 70, 
    PowerAssign: 71, 
    RightShiftAssign: 72, 
    SubtractAssign: 73, 
    AddAssignChecked: 74, 
    MultiplyAssignChecked: 75, 
    SubtractAssignChecked: 76, 
    PreIncrementAssign: 77, 
    PreDecrementAssign: 78, 
    PostIncrementAssign: 79, 
    PostDecrementAssign: 80, 
    TypeEqual: 81, 
    OnesComplement: 82, 
    IsTrue: 83, 
    IsFalse: 84
  }, false
);

/* enum System.Linq.Expressions.GotoExpressionKind */ 

JSIL.MakeEnum(
  "System.Linq.Expressions.GotoExpressionKind", true, {
    Goto: 0, 
    Return: 1, 
    Break: 2, 
    Continue: 3
  }, false
);

/* class System.Linq.Expressions.GotoExpression */ 

(function GotoExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.GotoExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.GotoExpressionKind"), $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.GotoExpressionKind"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_kind", $asm0D.TypeRef("System.Linq.Expressions.GotoExpressionKind")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_value", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm0D.TypeRef("System.Linq.Expressions.LabelTarget")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Value", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Target", $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true }, "Kind", $asm0D.TypeRef("System.Linq.Expressions.GotoExpressionKind"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_GotoExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.IndexExpression */ 

(function IndexExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.IndexExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Reflection.PropertyInfo"), 
          $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Indexer", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.PropertyInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Object", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_indexer", $asm09.TypeRef("System.Reflection.PropertyInfo")); 
    $.Field({Static:false, Public:false}, "_arguments", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Object", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Indexer", $asm09.TypeRef("System.Reflection.PropertyInfo"));

    $.Property({Static:false, Public:true }, "Arguments", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_IndexExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.InvocationExpression */ 

(function InvocationExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.InvocationExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_LambdaOperand", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.Field({Static:false, Public:false}, "_arguments", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_lambda", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_returnType", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Expression", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Arguments", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.Property({Static:false, Public:false}, "LambdaOperand", $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_InvocationExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.LabelExpression */ 

(function LabelExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.LabelExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_defaultValue", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_target", $asm0D.TypeRef("System.Linq.Expressions.LabelTarget")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Target", $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true }, "DefaultValue", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_LabelExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.LabelTarget */ 

(function LabelTarget$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.LabelTarget", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.LambdaExpression */ 

(function LambdaExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.LambdaExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $.String, 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $.Boolean, 
          $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Delegate"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Delegate"), [$asm0D.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompileToMethod", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.MethodBuilder")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "CompileToMethod", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.MethodBuilder"), $asm0D.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileToMethodInternal", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.MethodBuilder"), $asm0D.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ReturnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TailCall", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_parameters", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_delegateType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_tailCall", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Parameters", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Body", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "ReturnType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "TailCall", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_LambdaExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.Expression`1 */ 

(function Expression$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), 
      Name: "System.Linq.Expressions.Expression`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TDelegate"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $.String, 
          $.Boolean, $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [$asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TDelegate", "System.Linq.Expressions.Expression`1"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TDelegate", "System.Linq.Expressions.Expression`1"), [$asm0D.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $.String, 
          $.Boolean, $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ListInitExpression */ 

(function ListInitExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.ListInitExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.NewExpression"), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Initializers", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.NewExpression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reduce", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.NewExpression"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_newExpression", $asm0D.TypeRef("System.Linq.Expressions.NewExpression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_initializers", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true }, "NewExpression", $asm0D.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Property({Static:false, Public:true }, "Initializers", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")]));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_ListInitExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.LoopExpression */ 

(function LoopExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.LoopExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), 
          $asm0D.TypeRef("System.Linq.Expressions.LabelTarget")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_BreakLabel", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_ContinueLabel", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [
          $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_break", $asm0D.TypeRef("System.Linq.Expressions.LabelTarget")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_continue", $asm0D.TypeRef("System.Linq.Expressions.LabelTarget")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Body", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "BreakLabel", $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"));

    $.Property({Static:false, Public:true }, "ContinueLabel", $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_LoopExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.MemberBinding */ 

(function MemberBinding$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.MemberBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.MemberBindingType"), $asm09.TypeRef("System.Reflection.MemberInfo")], [])
    )
      .Attribute($asm09.TypeRef("System.ObsoleteAttribute"), function () { return ["Do not use this constructor. It will be removed in future releases."]; })
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_BindingType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberBindingType"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Member", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MemberInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "_type", $asm0D.TypeRef("System.Linq.Expressions.MemberBindingType")); 
    $.Field({Static:false, Public:false}, "_member", $asm09.TypeRef("System.Reflection.MemberInfo")); 
    $.Property({Static:false, Public:true }, "BindingType", $asm0D.TypeRef("System.Linq.Expressions.MemberBindingType"));

    $.Property({Static:false, Public:true }, "Member", $asm09.TypeRef("System.Reflection.MemberInfo"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MemberAssignment */ 

(function MemberAssignment$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.MemberBinding"), 
      Name: "System.Linq.Expressions.MemberAssignment", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MemberInfo"), $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.Field({Static:false, Public:false}, "_expression", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:true }, "Expression", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.MemberBindingType */ 

JSIL.MakeEnum(
  "System.Linq.Expressions.MemberBindingType", true, {
    Assignment: 0, 
    MemberBinding: 1, 
    ListBinding: 2
  }, false
);

/* class System.Linq.Expressions.MemberExpression */ 

(function MemberExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.MemberExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Member", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MemberInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMember", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MemberInfo"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Reflection.MemberInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:true }, "Member", $asm09.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:true }, "Expression", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_MemberExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.MemberInitExpression */ 

(function MemberInitExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.MemberInitExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.NewExpression"), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bindings", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.NewExpression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reduce", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReduceListInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")]), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReduceMemberBinding", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm0D.TypeRef("System.Linq.Expressions.MemberBinding")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReduceMemberInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")]), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.NewExpression"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_newExpression", $asm0D.TypeRef("System.Linq.Expressions.NewExpression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_bindings", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "NewExpression", $asm0D.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Property({Static:false, Public:true }, "Bindings", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")]));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_MemberInitExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.MemberListBinding */ 

(function MemberListBinding$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.MemberBinding"), 
      Name: "System.Linq.Expressions.MemberListBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MemberInfo"), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Initializers", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")])], [])
    );

    $.Field({Static:false, Public:false}, "_initializers", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")])); 
    $.Property({Static:false, Public:true }, "Initializers", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MemberMemberBinding */ 

(function MemberMemberBinding$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.MemberBinding"), 
      Name: "System.Linq.Expressions.MemberMemberBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MemberInfo"), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bindings", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")])], [])
    );

    $.Field({Static:false, Public:false}, "_bindings", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")])); 
    $.Property({Static:false, Public:true }, "Bindings", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpression */ 

(function MethodCallExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.MethodCallExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Object", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInstance", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_method", $asm09.TypeRef("System.Reflection.MethodInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Method", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "Object", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Arguments", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_MethodCallExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.NewArrayExpression */ 

(function NewArrayExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.NewArrayExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expressions", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expressions", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Expressions", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_NewArrayExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.NewExpression */ 

(function NewExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.NewExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.ConstructorInfo"), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), 
          $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Reflection.MemberInfo")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Constructor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.ConstructorInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Members", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Reflection.MemberInfo")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_constructor", $asm09.TypeRef("System.Reflection.ConstructorInfo")); 
    $.Field({Static:false, Public:false}, "_arguments", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_members", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Reflection.MemberInfo")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Constructor", $asm09.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:true }, "Arguments", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.Property({Static:false, Public:true }, "Members", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Reflection.MemberInfo")]));

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_NewExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.ParameterExpression */ 

(function ParameterExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.ParameterExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsByRef", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetIsByRef", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Make", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.Type"), $.String, 
          $.Boolean
        ], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_name", $.String); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "IsByRef", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_ParameterExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.RuntimeVariablesExpression */ 

(function RuntimeVariablesExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.RuntimeVariablesExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Variables", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_variables", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Variables", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_RuntimeVariablesExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.SwitchCase */ 

(function SwitchCase$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.SwitchCase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_TestValues", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_testValues", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:true }, "TestValues", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "Body", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_SwitchCaseProxy.__Type__]; });

})();

/* class System.Linq.Expressions.SwitchExpression */ 

(function SwitchExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.SwitchExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.SwitchCase")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Cases", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.SwitchCase")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Comparison", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultBody", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "get_IsLifted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SwitchValue", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.SwitchCase")]), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_switchValue", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_cases", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.SwitchCase")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_defaultBody", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_comparison", $asm09.TypeRef("System.Reflection.MethodInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "SwitchValue", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Cases", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.SwitchCase")]));

    $.Property({Static:false, Public:true }, "DefaultBody", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Comparison", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:false}, "IsLifted", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_SwitchExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.SymbolDocumentInfo */ 

(function SymbolDocumentInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.SymbolDocumentInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DocumentType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_FileName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Language", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LanguageVendor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "_fileName", $.String); 
    $.Property({Static:false, Public:true }, "FileName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Language", $asm09.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true , Virtual:true }, "LanguageVendor", $asm09.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true , Virtual:true }, "DocumentType", $asm09.TypeRef("System.Guid"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TryExpression */ 

(function TryExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.TryExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Fault", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Finally", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Handlers", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")]), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_body", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_handlers", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_finally", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_fault", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Body", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Handlers", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")]));

    $.Property({Static:false, Public:true }, "Finally", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Fault", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_TryExpressionProxy.__Type__]; });

})();

/* class System.Linq.Expressions.TypeBinaryExpression */ 

(function TypeBinaryExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.TypeBinaryExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Type"), 
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ByValParameterTypeEqual", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeOperand", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "ReduceConstantTypeEqual", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceTypeEqual", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_expression", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_typeOperand", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_nodeKind", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Expression", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "TypeOperand", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_TypeBinaryExpressionProxy.__Type__]; });

})();

JSIL.DeclareNamespace("System.Dynamic.Utils");
/* class System.Dynamic.Utils.TypeUtils */ 

(function TypeUtils$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Dynamic.Utils.TypeUtils", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "AreEquivalent", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AreReferenceAssignable", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanCache", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "FindConversionOperator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.MethodInfo")]), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type"), $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindGenericType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBooleanOperator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [$asm09.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNonNullableType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetNonRefType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetNullableType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedCoercionMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasBuiltInEqualityOperator", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasIdentityPrimitiveOrNullableConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasReferenceConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasReferenceEquality", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsArithmetic", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsBool", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsContravariant", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsConvertible", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCovariant", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDelegate", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsFloatingPoint", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitBoxingConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitlyConvertible", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitNullableConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitNumericConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitReferenceConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsInteger", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsIntegerOrBool", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsInvariant", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsLegalExplicitVariantDelegateConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullableType", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsNumeric", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSameOrSubclass", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUnsigned", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUnsignedInt", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidInstanceType", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.MemberInfo"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateType", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_mscorlib", $asm09.TypeRef("System.Reflection.Assembly")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_systemCore", $asm09.TypeRef("System.Reflection.Assembly")); 
    $.Constant({Static:true , Public:false}, "AnyStatic", 56); 
    $.Constant({Static:true , Public:false}, "PublicStatic", 22); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Linq.Expressions.UnaryExpression */ 

(function UnaryExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.UnaryExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FunctionalOp", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReduce", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsPrefix", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Operand", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reduce", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceIndex", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReduceVariable", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_operand", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_method", $asm09.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_nodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Operand", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Method", $asm09.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "IsLifted", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReduce", $.Boolean);

    $.Property({Static:false, Public:false}, "IsPrefix", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Linq.Expressions.Expression_UnaryExpressionProxy.__Type__]; });

})();

JSIL.DeclareNamespace("System.Linq.Expressions.Compiler");
/* class System.Linq.Expressions.Compiler.AnalyzedTree */ 

(function AnalyzedTree$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0D.System.Runtime.CompilerServices.DebugInfoGenerator)) ();
  };

  function AnalyzedTree_get_DebugInfoGenerator () {
    return this.AnalyzedTree$DebugInfoGenerator$value;
  };

  function AnalyzedTree_set_DebugInfoGenerator (value) {
    this.AnalyzedTree$DebugInfoGenerator$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.AnalyzedTree", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Method({Static:false, Public:false}, "get_DebugInfoGenerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator"), [], []), 
      AnalyzedTree_get_DebugInfoGenerator
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_DebugInfoGenerator", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")], []), 
      AnalyzedTree_set_DebugInfoGenerator
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "Scopes", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $asm0D.TypeRef("System.Linq.Expressions.Compiler.CompilerScope")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Constants", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.BoundConstants")])); 
    $.Field({Static:false, Public:false}, "AnalyzedTree$DebugInfoGenerator$value", $asm0D.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:false}, "DebugInfoGenerator", $asm0D.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.SymbolGuids */ 

(function SymbolGuids$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Expressions.Compiler.SymbolGuids", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:true , Public:false, ReadOnly:true }, "DocumentType_Text", $asm09.TypeRef("System.Guid")); 
    function SymbolGuids__cctor () {
      $thisType.DocumentType_Text = new $asm09.System.Guid();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      SymbolGuids__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.BoundConstants */ 

(function BoundConstants$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.BoundConstants", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReference", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitCacheConstants", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConstant", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $.Object, 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConstantFromArray", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $.Object, 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmitConstantsArray", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldCache", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_values", $asm09.TypeRef("System.Collections.Generic.List`1", [$.Object])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_indexes", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $.Int32])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_references", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0D.TypeRef("System.Linq.Expressions.Compiler.BoundConstants/TypedConstant"), $.Int32])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_cache", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0D.TypeRef("System.Linq.Expressions.Compiler.BoundConstants/TypedConstant"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")])); 
    $.Property({Static:false, Public:false}, "Count", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Expressions.Compiler.BoundConstants/TypedConstant */ 

(function TypedConstant$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Linq.Expressions.Compiler.BoundConstants/TypedConstant", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Value", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Type", $asm09.TypeRef("System.Type")); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.Closure */ 

(function Closure$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.Closure", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.Object])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:true , ReadOnly:true }, "Constants", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "Locals", $jsilcore.TypeRef("System.Array", [$.Object])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Never]; })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerStepThroughAttribute"));

})();

/* enum System.Linq.Expressions.Compiler.VariableStorageKind */ 

JSIL.MakeEnum(
  "System.Linq.Expressions.Compiler.VariableStorageKind", false, {
    Local: 0, 
    Hoisted: 1
  }, false
);

/* class System.Linq.Expressions.Compiler.CompilerScope */ 

(function CompilerScope$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.CompilerScope", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddLocal", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AllocateLocals", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CacheBoxToLocal", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAddressOf", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitCachedVariables", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitClosureAccess", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitClosureToVariable", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitGet", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitNewHoistedLocals", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSet", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitVariableAccess", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Enter", 
      new JSIL.MethodSignature($.Type, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Exit", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentLambdaName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NearestHoistedLocals", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetVariables", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetVariables", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveVariable", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage"), [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveVariable", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage"), [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldCache", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ShouldCache", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.Field({Static:false, Public:false}, "_parent", $.Type); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Node", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "IsMethod", $.Boolean); 
    $.Field({Static:false, Public:false}, "NeedsClosure", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Definitions", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.VariableStorageKind")])); 
    $.Field({Static:false, Public:false}, "ReferenceCount", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Int32])); 
    $.Field({Static:false, Public:false}, "MergedScopes", $asm0D.TypeRef("System.Linq.Expressions.Set`1", [$.Object])); 
    $.Field({Static:false, Public:false}, "_hoistedLocals", $asm0D.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals")); 
    $.Field({Static:false, Public:false}, "_closureHoistedLocals", $asm0D.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_locals", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage")])); 
    $.Property({Static:false, Public:false}, "NearestHoistedLocals", $asm0D.TypeRef("System.Linq.Expressions.Compiler.HoistedLocals"));

    $.Property({Static:false, Public:false}, "CurrentLambdaName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.CompilerScope/Storage */ 

(function Storage$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.CompilerScope/Storage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitAddress", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitLoad", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FreeLocal", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Compiler", $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Variable", $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.CompilerScope/LocalStorage */ 

(function LocalStorage$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage"), 
      Name: "System.Linq.Expressions.Compiler.CompilerScope/LocalStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitAddress", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitLoad", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_local", $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.CompilerScope/ArgumentStorage */ 

(function ArgumentStorage$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage"), 
      Name: "System.Linq.Expressions.Compiler.CompilerScope/ArgumentStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitAddress", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitLoad", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_argument", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.CompilerScope/ElementBoxStorage */ 

(function ElementBoxStorage$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage"), 
      Name: "System.Linq.Expressions.Compiler.CompilerScope/ElementBoxStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage"), $.Int32, 
          $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitAddress", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitLoad", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLoadBox", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage")], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_index", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_array", $asm0D.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_boxType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_boxValueField", $asm09.TypeRef("System.Reflection.FieldInfo")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.CompilerScope/LocalBoxStorage */ 

(function LocalBoxStorage$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage"), 
      Name: "System.Linq.Expressions.Compiler.CompilerScope/LocalBoxStorage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler"), $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitAddress", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitLoad", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EmitStore", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.CompilerScope/Storage")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitStoreBox", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_boxLocal", $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_boxType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_boxValueField", $asm09.TypeRef("System.Reflection.FieldInfo")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.DebugInfoGenerator */ 

(function DebugInfoGenerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.DebugInfoGenerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreatePdbGenerator", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MarkSequencePoint", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Int32, 
          $asm0D.TypeRef("System.Linq.Expressions.DebugInfoExpression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MarkSequencePoint", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm09.TypeRef("System.Reflection.MethodBase"), 
          $asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0D.TypeRef("System.Linq.Expressions.DebugInfoExpression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetLocalName", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), $.String], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.DelegateHelpers */ 

(function DelegateHelpers$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Expressions.Compiler.DelegateHelpers", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "GetActionType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFuncType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNextTypeInfo", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers/TypeInfo"), [$asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers/TypeInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsByRef", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeCallSiteDelegate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeDeferredSiteDelegate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Dynamic.DynamicMetaObject")]), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeDelegateType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeNewCustomDelegate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeNewDelegate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NextTypeInfo", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers/TypeInfo"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NextTypeInfo", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers/TypeInfo"), [$asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers/TypeInfo")], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "_DelegateCtorSignature", $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])); 
    $.Field({Static:true , Public:false}, "_DelegateCache", $asm0D.TypeRef("System.Linq.Expressions.Compiler.DelegateHelpers/TypeInfo")); 
    $.Constant({Static:true , Public:false}, "CtorAttributes", 4230); 
    $.Constant({Static:true , Public:false}, "ImplAttributes", 3); 
    $.Constant({Static:true , Public:false}, "InvokeAttributes", 454); 
    $.Constant({Static:true , Public:false}, "MaximumArity", 17); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.DelegateHelpers/TypeInfo */ 

(function TypeInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.DelegateHelpers/TypeInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeDelegateType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeDelegateType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.Field({Static:false, Public:true }, "DelegateType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "TypeChain", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Type"), $.Type])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.HoistedLocals */ 

(function HoistedLocals$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.HoistedLocals", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParentVariable", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParent", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Parent", $.Type); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Indexes", $asm0D.TypeRef("System.Dynamic.Utils.ReadOnlyDictionary`2", [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $.Int32])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Variables", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "SelfVariable", $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")); 
    $.Property({Static:false, Public:false}, "ParentVariable", $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.ILGen */ 

(function ILGen$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Expressions.Compiler.ILGen", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "CanEmitConstant", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanEmitILConstant", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Emit", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Reflection.Emit.OpCode"), 
          $asm09.TypeRef("System.Reflection.MethodBase")
        ], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitArray", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Collections.Generic.IList`1", ["!!0"])], ["T"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitArray", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type"), 
          $.Int32, $asm09.TypeRef("System.Action`1", [$.Int32])
        ], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitArray", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitBoolean", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $.Boolean], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitByte", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $.Byte], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitCastToType", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type")
        ], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitChar", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $.Char], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitConstant", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $.Object, 
          $asm09.TypeRef("System.Type")
        ], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitConstant", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $.Object], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitConvertToType", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type"), $.Boolean
        ], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitDecimal", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Decimal")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitDecimalBits", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Decimal")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitDefault", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitDouble", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $.Double], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitFieldAddress", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Reflection.FieldInfo")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitFieldGet", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Reflection.FieldInfo")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitFieldSet", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Reflection.FieldInfo")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitGetValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitGetValueOrDefault", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitHasValue", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitInt", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitLoadArg", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitLoadArgAddress", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitLoadElement", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitLoadValueIndirect", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitLong", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int64], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNew", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Reflection.ConstructorInfo")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNew", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])
        ], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNonNullableToNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type"), $.Boolean
        ], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNull", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type"), $.Boolean
        ], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNullableToNonNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type"), $.Boolean
        ], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNullableToNonNullableStructConversion", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type"), $.Boolean
        ], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNullableToNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type"), $.Boolean
        ], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNullableToReferenceConversion", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitNumericConversion", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type"), $.Boolean
        ], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitSByte", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $.SByte], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitShort", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int16], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitSingle", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $.Single], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitStoreArg", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitStoreElement", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitStoreValueIndirect", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitString", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $.String], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitType", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitUInt", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $.UInt32], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitULong", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $.UInt64], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EmitUShort", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $.UInt16], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ShouldLdtoken", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldLdtoken", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.MethodBase")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryEmitILConstant", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $.Object, 
          $asm09.TypeRef("System.Type")
        ], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Linq.Expressions.Compiler.KeyedQueue`2 */ 

(function KeyedQueue$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.KeyedQueue`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K", "V"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dequeue", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("V", "System.Linq.Expressions.Compiler.KeyedQueue`2"), [new JSIL.GenericParameter("K", "System.Linq.Expressions.Compiler.KeyedQueue`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Enqueue", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("K", "System.Linq.Expressions.Compiler.KeyedQueue`2"), new JSIL.GenericParameter("V", "System.Linq.Expressions.Compiler.KeyedQueue`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCount", 
      new JSIL.MethodSignature($.Int32, [new JSIL.GenericParameter("K", "System.Linq.Expressions.Compiler.KeyedQueue`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Peek", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("V", "System.Linq.Expressions.Compiler.KeyedQueue`2"), [new JSIL.GenericParameter("K", "System.Linq.Expressions.Compiler.KeyedQueue`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryDequeue", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("K", "System.Linq.Expressions.Compiler.KeyedQueue`2"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("V", "System.Linq.Expressions.Compiler.KeyedQueue`2")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_data", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("K"), $asm0B.TypeRef("System.Collections.Generic.Queue`1", [$.GenericParameter("V")])])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.LabelInfo */ 

(function LabelInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LabelInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Define", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitJump", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureLabelAndValue", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanBranch", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanReturn", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Label", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.Label"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Mark", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MarkWithEmptyStack", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reference", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "StoreValue", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateFinish", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateJump", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_node", $asm0D.TypeRef("System.Linq.Expressions.LabelTarget")); 
    $.Field({Static:false, Public:false}, "_label", $asm09.TypeRef("System.Reflection.Emit.Label")); 
    $.Field({Static:false, Public:false}, "_labelDefined", $.Boolean); 
    $.Field({Static:false, Public:false}, "_value", $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_definitions", $asm0D.TypeRef("System.Linq.Expressions.Set`1", [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_references", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_canReturn", $.Boolean); 
    $.Field({Static:false, Public:false}, "_acrossBlockJump", $.Boolean); 
    $.Field({Static:false, Public:false}, "_opCode", $asm09.TypeRef("System.Reflection.Emit.OpCode")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_ilg", $asm09.TypeRef("System.Reflection.Emit.ILGenerator")); 
    $.Property({Static:false, Public:false}, "Label", $asm09.TypeRef("System.Reflection.Emit.Label"));

    $.Property({Static:false, Public:false}, "CanReturn", $.Boolean);

    $.Property({Static:false, Public:false}, "CanBranch", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.Compiler.LabelScopeKind */ 

JSIL.MakeEnum(
  "System.Linq.Expressions.Compiler.LabelScopeKind", false, {
    Statement: 0, 
    Block: 1, 
    Switch: 2, 
    Lambda: 3, 
    Try: 4, 
    Catch: 5, 
    Finally: 6, 
    Filter: 7, 
    Expression: 8
  }, false
);

/* class System.Linq.Expressions.Compiler.LabelScopeInfo */ 

(function LabelScopeInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LabelScopeInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm0D.TypeRef("System.Linq.Expressions.Compiler.LabelScopeKind")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddLabelInfo", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LabelInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsTarget", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanJumpInto", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryGetLabelInfo", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LabelInfo")])], [])
    );

    $.Field({Static:false, Public:false}, "Labels", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LabelInfo")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Kind", $asm0D.TypeRef("System.Linq.Expressions.Compiler.LabelScopeKind")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Parent", $.Type); 
    $.Property({Static:false, Public:false}, "CanJumpInto", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.LambdaCompiler */ 

(function LambdaCompiler$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), 
          $asm09.TypeRef("System.Reflection.Emit.MethodBuilder")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.MemberExpression"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.IndexExpression"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOf", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOfWriteBack", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/WriteBack"), [$asm0D.TypeRef("System.Linq.Expressions.MemberExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddressOfWriteBack", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/WriteBack"), [$asm0D.TypeRef("System.Linq.Expressions.IndexExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReturnLabel", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddToBuckets", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Collections.Generic.List`1", [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/SwitchLabel")])]), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/SwitchLabel")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AnalyzeLambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"), [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanOptimizeSwitchType", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRethrow", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckTry", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Compile", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Delegate"), [$asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm0D.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Compile", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm09.TypeRef("System.Reflection.Emit.MethodBuilder"), 
          $asm0D.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertSwitchValue", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateDelegate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Delegate"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateLazyInitializedField", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberExpression"), [$.String], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateStaticField", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.FieldBuilder"), [$.String, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DefineBlockLabels", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DefineLabel", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.LabelInfo"), [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DefineSwitchCaseLabel", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.SwitchCase"), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Reflection.Emit.Label")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Emit", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAddress", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAddress", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Type"), 
          $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAddressWriteBack", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/WriteBack"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAndAlsoBinaryExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/WriteBack")]), [$asm09.TypeRef("System.Reflection.MethodBase"), $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/WriteBack")]), [
          $asm09.TypeRef("System.Reflection.MethodBase"), $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAssign", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitAssignBinaryExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBinaryExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBinaryExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBinaryMethod", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBinaryOperator", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBinding", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBlockExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchAnd", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm09.TypeRef("System.Reflection.Emit.Label")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchBlock", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), 
          $asm09.TypeRef("System.Reflection.Emit.Label")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchComparison", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm09.TypeRef("System.Reflection.Emit.Label")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchLogical", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm09.TypeRef("System.Reflection.Emit.Label")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchNot", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), 
          $asm09.TypeRef("System.Reflection.Emit.Label")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchOp", 
      new JSIL.MethodSignature(null, [$.Boolean, $asm09.TypeRef("System.Reflection.Emit.Label")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitBranchOr", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm09.TypeRef("System.Reflection.Emit.Label")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitCall", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitCatchStart", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitClosureArgument", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitClosureCreation", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitCoalesceBinaryExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConditionalExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConstant", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConstantArray", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConstantExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConstantOne", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConvert", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConvertArithmeticResult", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitConvertUnaryExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitDebugInfoExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitDefaultExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitDelegateConstruction", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitDelegateConstruction", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitDynamicExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAddress", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAndBranch", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm09.TypeRef("System.Reflection.Emit.Label")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAsType", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Type"), 
          $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAsVoid", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionAsVoid", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionEnd", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitExpressionStart", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags"), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmitExtensionExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitGetIndexCall", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.IndexExpression"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitGotoExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitIndexAssignment", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitIndexExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitInlinedInvoke", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.InvocationExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitInstance", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitInvocationExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLabelExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLambdaArgument", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLambdaBody", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLambdaBody", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Compiler.CompilerScope"), $.Boolean, 
          $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLambdaExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLambdaReferenceCoalesce", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLift", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Type"), 
          $asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), 
          $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedAndAlso", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedBinaryArithmetic", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedBinaryOp", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedBooleanAnd", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedBooleanOr", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedOrElse", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLiftedRelational", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitListInit", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.ListInitExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitListInit", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")]), $.Boolean, 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitListInitExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitLoopExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberAddress", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MemberInfo"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberAssignment", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberAssignment", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.MemberAssignment"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberGet", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MemberInfo"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberInit", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.MemberInitExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberInit", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")]), $.Boolean, 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberInitExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberListBinding", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.MemberListBinding")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMemberMemberBinding", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.MemberMemberBinding")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodAndAlso", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodCall", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodCall", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Reflection.MethodInfo"), 
          $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodCall", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodCall", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider"), 
          $asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodCallExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodCallExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitMethodOrElse", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitNewArrayExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitNewExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitNullableCoalesce", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitNullEquality", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitOrElseBinaryExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitParameterExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitQuote", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitQuoteUnaryExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitReferenceCoalesceWithoutConversion", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitRuntimeVariablesExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSaveExceptionOrPop", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSetIndexCall", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.IndexExpression"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSwitchBucket", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/SwitchInfo"), $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/SwitchLabel")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSwitchBuckets", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/SwitchInfo"), $asm09.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Collections.Generic.List`1", [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/SwitchLabel")])]), 
          $.Int32, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSwitchCases", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.SwitchExpression"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.Emit.Label")]), 
          $jsilcore.TypeRef("System.Array", [$.Boolean]), $asm09.TypeRef("System.Reflection.Emit.Label"), 
          $asm09.TypeRef("System.Reflection.Emit.Label"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitSwitchExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitThrow", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitThrowUnaryExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitTryExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitTypeBinaryExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnary", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnaryExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnaryMethod", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.UnaryExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnaryOperator", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnboxUnaryExpression", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnliftedAndAlso", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnliftedBinaryOp", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnliftedEquality", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnliftedOrElse", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitUnreachable", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EmitVariableAssignment", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EmitWriteBack", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/WriteBack")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureLabel", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.LabelInfo"), [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterScope", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitScope", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FitsInBucket", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/SwitchLabel")]), $asm09.TypeRef("System.Decimal"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FreeLocal", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.LocalBuilder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanEmitBoundConstants", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EmitDebugSymbols", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IL", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.ILGenerator"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Parameters", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEqualityOperand", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLambdaArgument", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLocal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMemberType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Reflection.MemberInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamedLocal", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), [$asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParameterTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]), [$asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTestValueType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm0D.TypeRef("System.Linq.Expressions.SwitchExpression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUniqueMethodName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasVariables", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeMethod", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsChecked", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.ExpressionType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MergeBuckets", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Collections.Generic.List`1", [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/SwitchLabel")])])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodHasByRefParameter", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotEmpty", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopLabelBlock", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LabelScopeKind")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushLabelBlock", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LabelScopeKind")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReferenceLabel", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.LabelInfo"), [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Significant", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEmitHashtableSwitch", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.SwitchExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEmitSwitchInstruction", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.SwitchExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryPushLabelBlock", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateEmitAsTailCallFlag", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags"), [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateEmitAsTypeFlag", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags"), [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateEmitExpressionStartFlag", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags"), [$asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "UseVirtual", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.MethodInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateLift", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tree", $asm0D.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_ilg", $asm09.TypeRef("System.Reflection.Emit.ILGenerator")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_typeBuilder", $asm09.TypeRef("System.Reflection.Emit.TypeBuilder")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_method", $asm09.TypeRef("System.Reflection.MethodInfo")); 
    $.Field({Static:false, Public:false}, "_labelBlock", $asm0D.TypeRef("System.Linq.Expressions.Compiler.LabelScopeInfo")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_labelInfo", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.LabelInfo")])); 
    $.Field({Static:false, Public:false}, "_scope", $asm0D.TypeRef("System.Linq.Expressions.Compiler.CompilerScope")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_lambda", $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_hasClosureArgument", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_boundConstants", $asm0D.TypeRef("System.Linq.Expressions.Compiler.BoundConstants")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_freeLocals", $asm0D.TypeRef("System.Linq.Expressions.Compiler.KeyedQueue`2", [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")])); 
    $.Field({Static:false, Public:false}, "_sequencePointCleared", $.Boolean); 
    $.Field({Static:true , Public:false}, "_Counter", $.Int32); 
    $.Property({Static:false, Public:false}, "EmitDebugSymbols", $.Boolean);

    $.Property({Static:false, Public:false}, "IL", $asm09.TypeRef("System.Reflection.Emit.ILGenerator"));

    $.Property({Static:false, Public:false}, "Parameters", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Property({Static:false, Public:false}, "CanEmitBoundConstants", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.LambdaCompiler/SwitchLabel */ 

(function SwitchLabel$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler/SwitchLabel", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Decimal"), $.Object, 
          $asm09.TypeRef("System.Reflection.Emit.Label")
        ], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Key", $asm09.TypeRef("System.Decimal")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Label", $asm09.TypeRef("System.Reflection.Emit.Label")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Constant", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Linq.Expressions.Compiler.LambdaCompiler/WriteBack */ 

JSIL.MakeDelegate("System.Linq.Expressions.Compiler.LambdaCompiler/WriteBack", false, []);

/* enum System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags */ 

JSIL.MakeEnum(
  "System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags", false, {
    EmitExpressionStart: 1, 
    EmitNoExpressionStart: 2, 
    EmitExpressionStartMask: 15, 
    EmitAsDefaultType: 16, 
    EmitAsVoidType: 32, 
    EmitAsTypeMask: 240, 
    EmitAsTail: 256, 
    EmitAsMiddle: 512, 
    EmitAsNoTail: 1024, 
    EmitAsTailCallMask: 3840
  }, true
);

/* class System.Linq.Expressions.Compiler.LambdaCompiler/SwitchInfo */ 

(function SwitchInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler/SwitchInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.SwitchExpression"), $asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), 
          $asm09.TypeRef("System.Reflection.Emit.Label")
        ], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Node", $asm0D.TypeRef("System.Linq.Expressions.SwitchExpression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Value", $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Default", $asm09.TypeRef("System.Reflection.Emit.Label")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Type", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "IsUnsigned", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Is64BitSwitch", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.LambdaCompiler/<>c__DisplayClass1 */ 

(function $l$gc__DisplayClass1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler/<>c__DisplayClass1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "instanceLocal", $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")); 
    $.Field({Static:false, Public:true }, "instanceType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "pi", $asm09.TypeRef("System.Reflection.PropertyInfo")); 
    $.Field({Static:false, Public:true }, "valueLocal", $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.Compiler.LambdaCompiler/<>c__DisplayClass4 */ 

(function $l$gc__DisplayClass4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler/<>c__DisplayClass4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "instanceLocal", $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")); 
    $.Field({Static:false, Public:true }, "instanceType", $asm09.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "args", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Reflection.Emit.LocalBuilder")])); 
    $.Field({Static:false, Public:true }, "valueLocal", $asm09.TypeRef("System.Reflection.Emit.LocalBuilder")); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler")); 
    $.Field({Static:false, Public:true }, "node", $asm0D.TypeRef("System.Linq.Expressions.IndexExpression")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.Compiler.LambdaCompiler/<>c__DisplayClassc */ 

(function $l$gc__DisplayClassc$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.LambdaCompiler/<>c__DisplayClassc", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "node", $asm0D.TypeRef("System.Linq.Expressions.NewArrayExpression")); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Linq.Expressions.Compiler.LambdaCompiler")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.Set`1 */ 

(function Set$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Set`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(2, "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_data", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("T"), $.Object])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.Expressions.Set`1")]), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller */ 

(function StackSpiller$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AnalyzeLambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [$asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Clone", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), $.Int32], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "Free", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeBlock", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeBlock", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeTemp", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Mark", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequireNoRefArgs", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MethodBase")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequireNotRefInstance", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteAssignBinaryExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteBinaryExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteBlockExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteConditionalExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteDynamicExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteExpressionFreeTemps", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteExtensionAssignment", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteExtensionExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteGotoExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteIndexAssignment", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteIndexExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteInvocationExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteLabelExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RewriteLambdaExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteListInitExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteLogicalBinaryExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteLoopExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteMemberAssignment", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteMemberExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteMemberInitExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteMethodCallExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteNewArrayExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteNewExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteReducibleExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteSwitchExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteThrowUnaryExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteTryExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteTypeBinaryExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteUnaryExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RewriteVariableAssignment", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToTemp", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyRewrite", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:false}, "VerifyTemps", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tm", $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/TempMaker")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_startingStack", $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")); 
    $.Field({Static:false, Public:false}, "_lambdaRewrite", $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/RewriteAction")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.Compiler.StackSpiller/Stack */ 

JSIL.MakeEnum(
  "System.Linq.Expressions.Compiler.StackSpiller/Stack", false, {
    Empty: 0, 
    NonEmpty: 1
  }, false
);

/* enum System.Linq.Expressions.Compiler.StackSpiller/RewriteAction */ 

JSIL.MakeEnum(
  "System.Linq.Expressions.Compiler.StackSpiller/RewriteAction", false, {
    None: 0, 
    Copy: 1, 
    SpillStack: 3
  }, true
);

/* struct System.Linq.Expressions.Compiler.StackSpiller/Result */ 

(function Result$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller/Result", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/RewriteAction"), $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "Action", $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/RewriteAction")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "Node", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller/TempMaker */ 

(function TempMaker$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller/TempMaker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Free", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FreeTemp", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Temps", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Mark", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Temp", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UseTemp", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyTemps", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Field({Static:false, Public:false}, "_temp", $.Int32); 
    $.Field({Static:false, Public:false}, "_freeTemps", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
    $.Field({Static:false, Public:false}, "_usedTemps", $asm0B.TypeRef("System.Collections.Generic.Stack`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
    $.Field({Static:false, Public:false}, "_temps", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
    $.Property({Static:false, Public:false}, "Temps", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller/BindingRewriter */ 

(function BindingRewriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller/BindingRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsBinding", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberBinding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm0D.TypeRef("System.Linq.Expressions.MemberBinding"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), 
          $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Action", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/RewriteAction"), [], [])
    );

    $.Field({Static:false, Public:false}, "_binding", $asm0D.TypeRef("System.Linq.Expressions.MemberBinding")); 
    $.Field({Static:false, Public:false}, "_action", $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/RewriteAction")); 
    $.Field({Static:false, Public:false}, "_spiller", $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller")); 
    $.Property({Static:false, Public:false}, "Action", $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/RewriteAction"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller/MemberMemberBindingRewriter */ 

(function MemberMemberBindingRewriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/BindingRewriter"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller/MemberMemberBindingRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.MemberMemberBinding"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), 
          $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsBinding", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberBinding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.Field({Static:false, Public:false}, "_bindings", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")])); 
    $.Field({Static:false, Public:false}, "_bindingRewriters", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/BindingRewriter")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller/ListBindingRewriter */ 

(function ListBindingRewriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/BindingRewriter"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller/ListBindingRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.MemberListBinding"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), 
          $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsBinding", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberBinding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.Field({Static:false, Public:false}, "_inits", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")])); 
    $.Field({Static:false, Public:false}, "_childRewriters", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/ChildRewriter")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller/MemberAssignmentRewriter */ 

(function MemberAssignmentRewriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/BindingRewriter"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller/MemberAssignmentRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.MemberAssignment"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), 
          $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsBinding", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberBinding"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AsExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.Field({Static:false, Public:false}, "_rhs", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.StackSpiller/ChildRewriter */ 

(function ChildRewriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.StackSpiller/ChildRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddArguments", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureDone", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Finish", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Result"), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Action", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/RewriteAction"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Rewrite", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_self", $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_expressions", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Field({Static:false, Public:false}, "_expressionsCount", $.Int32); 
    $.Field({Static:false, Public:false}, "_comma", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Field({Static:false, Public:false}, "_action", $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/RewriteAction")); 
    $.Field({Static:false, Public:false}, "_stack", $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/Stack")); 
    $.Field({Static:false, Public:false}, "_done", $.Boolean); 
    $.Property({Static:false, Public:false}, "Rewrite", $.Boolean);

    $.Property({Static:false, Public:false}, "Action", $asm0D.TypeRef("System.Linq.Expressions.Compiler.StackSpiller/RewriteAction"));

    $.Property({Static:false, Public:false}, "Item", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false}, "Item", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* delegate System.Action`9 */ 

JSIL.MakeDelegate("System.Action`9", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9"
  ]);

/* delegate System.Action`10 */ 

JSIL.MakeDelegate("System.Action`10", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10"
  ]);

/* delegate System.Action`11 */ 

JSIL.MakeDelegate("System.Action`11", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11"
  ]);

/* delegate System.Action`12 */ 

JSIL.MakeDelegate("System.Action`12", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12"
  ]);

/* delegate System.Action`13 */ 

JSIL.MakeDelegate("System.Action`13", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13"
  ]);

/* delegate System.Action`14 */ 

JSIL.MakeDelegate("System.Action`14", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "in T14"
  ]);

/* delegate System.Action`15 */ 

JSIL.MakeDelegate("System.Action`15", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "in T14", "in T15"
  ]);

/* delegate System.Action`16 */ 

JSIL.MakeDelegate("System.Action`16", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "in T14", "in T15", "in T16"
  ]);

/* class System.Dynamic.Utils.CacheDict`2 */ 

(function CacheDict$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.Utils.CacheDict`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TKey", "System.Dynamic.Utils.CacheDict`2"), new JSIL.GenericParameter("TValue", "System.Dynamic.Utils.CacheDict`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TValue", "System.Dynamic.Utils.CacheDict`2"), [new JSIL.GenericParameter("TKey", "System.Dynamic.Utils.CacheDict`2")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TKey", "System.Dynamic.Utils.CacheDict`2"), new JSIL.GenericParameter("TValue", "System.Dynamic.Utils.CacheDict`2")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("TKey", "System.Dynamic.Utils.CacheDict`2"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("TValue", "System.Dynamic.Utils.CacheDict`2")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dict", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.GenericParameter("TKey"), $asm0D.TypeRef("System.Dynamic.Utils.CacheDict`2/KeyInfo", [$.GenericParameter("TKey"), $.GenericParameter("TValue")])])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_list", $asm0B.TypeRef("System.Collections.Generic.LinkedList`1", [$.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_maxSize", $.Int32); 
    $.Property({Static:false, Public:false}, "Item", new JSIL.GenericParameter("TValue", "System.Dynamic.Utils.CacheDict`2"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct System.Dynamic.Utils.CacheDict`2/KeyInfo */ 

(function KeyInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Dynamic.Utils.CacheDict`2/KeyInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TKey", "TValue"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("TValue", "System.Dynamic.Utils.CacheDict`2/KeyInfo"), $asm0B.TypeRef("System.Collections.Generic.LinkedListNode`1", [new JSIL.GenericParameter("TKey", "System.Dynamic.Utils.CacheDict`2/KeyInfo")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false, ReadOnly:true }, "Value", $.GenericParameter("TValue")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "List", $asm0B.TypeRef("System.Collections.Generic.LinkedListNode`1", [$.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.Utils.CollectionExtensions */ 

(function CollectionExtensions$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Dynamic.Utils.CollectionExtensions", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "AddFirst", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), "!!0"], ["T"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AddLast", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), "!!0"], ["T"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "All", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["T"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["T"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Copy", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "First", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Last", 
      new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IList`1", ["!!0"])], ["T"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ListEquals", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $asm09.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"])], ["T"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ListHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Map", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!1"]), [$asm09.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["T", "U"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "RemoveFirst", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "RemoveLast", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Select", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", "!!1"])], ["T", "U"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToReadOnly", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Where", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["T"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Dynamic.Utils.CollectionExtensions/<Select>d__0`2 */ 

(function $lSelect$gd__0$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.Utils.CollectionExtensions/<Select>d__0`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T", "U"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally3", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lU$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("U", "System.Dynamic.Utils.CollectionExtensions/<Select>d__0`2")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lU$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("U", "System.Dynamic.Utils.CollectionExtensions/<Select>d__0`2"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("U")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "enumerable", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "$enumerable", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "select", $asm09.TypeRef("System.Func`2", [$.GenericParameter("T"), $.GenericParameter("U")])); 
    $.Field({Static:false, Public:true }, "$select", $asm09.TypeRef("System.Func`2", [$.GenericParameter("T"), $.GenericParameter("U")])); 
    $.Field({Static:false, Public:true }, "t", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "$wrap2", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lU$g.Current", new JSIL.GenericParameter("U", "System.Dynamic.Utils.CollectionExtensions/<Select>d__0`2"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("U", "System.Dynamic.Utils.CollectionExtensions/<Select>d__0`2")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("U", "System.Dynamic.Utils.CollectionExtensions/<Select>d__0`2")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.Utils.CollectionExtensions/<Where>d__6`1 */ 

(function $lWhere$gd__6$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.Utils.CollectionExtensions/<Where>d__6`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally9", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Dynamic.Utils.CollectionExtensions/<Where>d__6`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Dynamic.Utils.CollectionExtensions/<Where>d__6`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("T")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "enumerable", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "$enumerable", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:true }, "where", $asm09.TypeRef("System.Func`2", [$.GenericParameter("T"), $.Boolean])); 
    $.Field({Static:false, Public:true }, "$where", $asm09.TypeRef("System.Func`2", [$.GenericParameter("T"), $.Boolean])); 
    $.Field({Static:false, Public:true }, "t", $.GenericParameter("T")); 
    $.Field({Static:false, Public:true }, "$wrap8", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lT$g.Current", new JSIL.GenericParameter("T", "System.Dynamic.Utils.CollectionExtensions/<Where>d__6`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Dynamic.Utils.CollectionExtensions/<Where>d__6`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Dynamic.Utils.CollectionExtensions/<Where>d__6`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Dynamic.Utils.EmptyReadOnlyCollection`1 */ 

(function EmptyReadOnlyCollection$b1$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Dynamic.Utils.EmptyReadOnlyCollection`1", false, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:true , Public:false}, "Instance", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.Utils.ContractUtils */ 

(function ContractUtils$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Dynamic.Utils.ContractUtils", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "get_Unreachable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Exception"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Requires", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Requires", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresArrayRange", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $.Int32, 
          $.Int32, $.String, 
          $.String
        ], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresNotEmpty", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.ICollection`1", ["!!0"]), $.String], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresNotNull", 
      new JSIL.MethodSignature(null, [$.Object, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RequiresNotNullItems", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $.String], ["T"])
    );

    $.Property({Static:true , Public:false}, "Unreachable", $asm09.TypeRef("System.Exception"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.ExtensionAttribute */ 

(function ExtensionAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Attribute"), 
      Name: "System.Runtime.CompilerServices.ExtensionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags("Assembly", "Class", "Method")]; });

})();

/* delegate System.Func`10 */ 

JSIL.MakeDelegate("System.Func`10", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "out TResult"
  ]);

/* delegate System.Func`11 */ 

JSIL.MakeDelegate("System.Func`11", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "out TResult"
  ]);

/* delegate System.Func`12 */ 

JSIL.MakeDelegate("System.Func`12", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "out TResult"
  ]);

/* delegate System.Func`13 */ 

JSIL.MakeDelegate("System.Func`13", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "out TResult"
  ]);

/* delegate System.Func`14 */ 

JSIL.MakeDelegate("System.Func`14", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "out TResult"
  ]);

/* delegate System.Func`15 */ 

JSIL.MakeDelegate("System.Func`15", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "in T14", "out TResult"
  ]);

/* delegate System.Func`16 */ 

JSIL.MakeDelegate("System.Func`16", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "in T14", "in T15", "out TResult"
  ]);

/* delegate System.Func`17 */ 

JSIL.MakeDelegate("System.Func`17", true, [
    "in T1", "in T2", "in T3", "in T4", 
    "in T5", "in T6", "in T7", "in T8", 
    "in T9", "in T10", "in T11", "in T12", 
    "in T13", "in T14", "in T15", "in T16", 
    "out TResult"
  ]);

/* class System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1 */ 

(function ReadOnlyCollectionBuilder$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureCapacity", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Capacity", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCompatibleObject", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reverse", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reverse", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Capacity", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Array"), $.Int32], [])
    )
      .Overrides(4, "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(4, "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(4, "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(5, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Add", 
      new JSIL.MethodSignature($.Int32, [$.Object], [])
    )
      .Overrides(3, "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    )
      .Overrides(3, "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsFixedSize", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "get_IsFixedSize");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32], [])
    )
      .Overrides(3, "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object], [])
    )
      .Overrides(3, "IndexOf");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], [])
    )
      .Overrides(3, "Insert");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Remove", 
      new JSIL.MethodSignature(null, [$.Object], [])
    )
      .Overrides(3, "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], [])
    )
      .Overrides(3, "set_Item");

    $.ExternalMethod({Static:true , Public:false}, "ThrowInvalidTypeException", 
      new JSIL.MethodSignature(null, [$.Object, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToReadOnlyCollection", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateNullValue", 
      new JSIL.MethodSignature(null, [$.Object, $.String], [])
    );

    $.Field({Static:false, Public:false}, "_items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "_size", $.Int32); 
    $.Field({Static:false, Public:false}, "_version", $.Int32); 
    $.Field({Static:false, Public:false}, "_syncRoot", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_emptyArray", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])); 
    $.Constant({Static:true , Public:false}, "DefaultCapacity", 4); 
    $.Property({Static:false, Public:true }, "Capacity", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IList`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")]), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IList"), 
      /* 4 */ $asm09.TypeRef("System.Collections.ICollection"), 
      /* 5 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1/Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1/Enumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1/Enumerator")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1/Enumerator"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(2, "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Reset");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_builder", $asm0D.TypeRef("System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_version", $.Int32); 
    $.Field({Static:false, Public:false}, "_index", $.Int32); 
    $.Field({Static:false, Public:false}, "_current", $.GenericParameter("T")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1/Enumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1/Enumerator")]), 
      /* 1 */ $asm09.TypeRef("System.IDisposable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.Utils.ReadOnlyDictionary`2 */ 

(function ReadOnlyDictionary$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.Utils.ReadOnlyDictionary`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K", "V"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IDictionary`2", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ContainsKey", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")])]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2"), [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keys", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Values", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")])]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lK$cmV$g$g.Add", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")])], [])
    )
      .Overrides(1, "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lK$cmV$g$g.Clear", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lSystem.Collections.Generic.KeyValuePair$lK$cmV$g$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")])], [])
    )
      .Overrides(1, "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lK$cmV$g.Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")], [])
    )
      .Overrides(0, "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lK$cmV$g.get_Item", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2"), [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2")], [])
    )
      .Overrides(0, "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lK$cmV$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2")], [])
    )
      .Overrides(0, "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lK$cmV$g.set_Item", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")], [])
    )
      .Overrides(0, "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(3, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), $jsilcore.TypeRef("JSIL.Reference", [new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_dict", $asm09.TypeRef("System.Collections.Generic.IDictionary`2", [$.GenericParameter("K"), $.GenericParameter("V")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Keys", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Values", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")]));

    $.Property({Static:false, Public:true }, "Item", new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IDictionary$lK$cmV$g.Item", new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IDictionary`2", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")])]), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Collections.Generic.KeyValuePair`2", [new JSIL.GenericParameter("K", "System.Dynamic.Utils.ReadOnlyDictionary`2"), new JSIL.GenericParameter("V", "System.Dynamic.Utils.ReadOnlyDictionary`2")])]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Dynamic.Utils.ReadOnlyDictionary`2/ReadOnlyWrapper`1 */ 

(function ReadOnlyWrapper$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.Utils.ReadOnlyDictionary`2/ReadOnlyWrapper`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["K", "V", "T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReadOnlyDictionary`2/ReadOnlyWrapper`1")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReadOnlyDictionary`2/ReadOnlyWrapper`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReadOnlyDictionary`2/ReadOnlyWrapper`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReadOnlyDictionary`2/ReadOnlyWrapper`1")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReadOnlyDictionary`2/ReadOnlyWrapper`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReadOnlyDictionary`2/ReadOnlyWrapper`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(2, "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_collection", $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")])); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReadOnlyDictionary`2/ReadOnlyWrapper`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReadOnlyDictionary`2/ReadOnlyWrapper`1")]), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Runtime.CompilerServices.IStrongBox */ 

JSIL.MakeInterface(
  "System.Runtime.CompilerServices.IStrongBox", true, [], function ($) {
    $.Method({}, "get_Value", new JSIL.MethodSignature($.Object, [], []));
    $.Method({}, "set_Value", new JSIL.MethodSignature(null, [$.Object], []));
    $.Property({}, "Value");
  }, []);

/* class System.Runtime.CompilerServices.StrongBox`1 */ 

(function StrongBox$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.StrongBox`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.StrongBox`1")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IStrongBox.get_Value", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_Value");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IStrongBox.set_Value", 
      new JSIL.MethodSignature(null, [$.Object], [])
    )
      .Overrides(0, "set_Value");

    $.Field({Static:false, Public:true }, "Value", $.GenericParameter("T")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IStrongBox.Value", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm0D.TypeRef("System.Runtime.CompilerServices.IStrongBox")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.TrueReadOnlyCollection`1 */ 

(function TrueReadOnlyCollection$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.TrueReadOnlyCollection`1")]), 
      Name: "System.Runtime.CompilerServices.TrueReadOnlyCollection`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Runtime.CompilerServices.TrueReadOnlyCollection`1")])], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.Utils.TypeExtensions */ 

(function TypeExtensions$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Dynamic.Utils.TypeExtensions", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "CreateDelegate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Delegate"), [$asm09.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Type")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CreateDelegate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Delegate"), [
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Type"), 
          $.Object
        ], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetMethodValidated", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [
          $asm09.TypeRef("System.Type"), $.String, 
          $asm09.TypeRef("System.Reflection.BindingFlags"), $asm09.TypeRef("System.Reflection.Binder"), 
          $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.ParameterModifier")])
        ], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetParametersCached", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.ParameterInfo")]), [$asm09.TypeRef("System.Reflection.MethodBase")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetReturnType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [$asm09.TypeRef("System.Reflection.MethodBase")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IsByRefParameter", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.ParameterInfo")], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MatchesArgumentTypes", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Type")])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_ParamInfoCache", $asm0D.TypeRef("System.Dynamic.Utils.CacheDict`2", [$asm09.TypeRef("System.Reflection.MethodBase"), $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Reflection.ParameterInfo")])])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Diagnostics.EventSchemaTraceListener */ 

(function EventSchemaTraceListener$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Diagnostics.TextWriterTraceListener"), 
      Name: "System.Diagnostics.EventSchemaTraceListener", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $asm0D.TypeRef("System.Diagnostics.TraceLogRetentionOption")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $asm0D.TypeRef("System.Diagnostics.TraceLogRetentionOption"), 
          $.Int64
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $asm0D.TypeRef("System.Diagnostics.TraceLogRetentionOption"), 
          $.Int64, $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "_InternalBuildRaw", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Text.StringBuilder"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "_InternalWriteRaw", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Text.StringBuilder")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "_SetMaxFileSize", 
      new JSIL.MethodSignature(null, [$.Int64, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetMaxNumberOfFiles", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildEscaped", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Text.StringBuilder"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildFooter", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Text.StringBuilder"), $asm0B.TypeRef("System.Diagnostics.TraceEventType"), 
          $asm0B.TypeRef("System.Diagnostics.TraceEventCache"), $.Boolean, 
          $asm0B.TypeRef("System.Diagnostics.TraceOptions")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildHeader", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Text.StringBuilder"), $.String, 
          $asm0B.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $asm0B.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $.Boolean, $asm0B.TypeRef("System.Diagnostics.TraceOptions")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "BuildMessage", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Text.StringBuilder"), $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildUserData", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Text.StringBuilder"), $.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureWriter", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fail", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_BufferSize", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsThreadSafe", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumFileSize", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumNumberOfFiles", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TraceLogRetentionOption", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.TraceLogRetentionOption"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Writer", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IO.TextWriter"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSupportedAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Writer", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.TextWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm0B.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.Object
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm0B.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm0B.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm0B.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceTransfer", 
      new JSIL.MethodSignature(null, [
          $asm0B.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $.Int32, $.String, 
          $asm09.TypeRef("System.Guid")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteLine", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "machineName", $.String); 
    $.Field({Static:false, Public:false}, "traceWriter", $asm0D.TypeRef("System.Diagnostics.EventSchemaTraceListener/TraceWriter")); 
    $.Field({Static:false, Public:false}, "fileName", $.String); 
    $.Field({Static:false, Public:false}, "_initialized", $.Boolean); 
    $.Field({Static:false, Public:false}, "_bufferSize", $.Int32); 
    $.Field({Static:false, Public:false}, "_retention", $asm0D.TypeRef("System.Diagnostics.TraceLogRetentionOption")); 
    $.Field({Static:false, Public:false}, "_maxFileSize", $.Int64); 
    $.Field({Static:false, Public:false}, "_maxNumberOfFiles", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_lockObject", $.Object); 
    $.Constant({Static:true , Public:false}, "s_optionBufferSize", "bufferSize"); 
    $.Constant({Static:true , Public:false}, "s_optionLogRetention", "logRetentionOption"); 
    $.Constant({Static:true , Public:false}, "s_optionMaximumFileSize", "maximumFileSize"); 
    $.Constant({Static:true , Public:false}, "s_optionMaximumNumberOfFiles", "maximumNumberOfFiles"); 
    $.Constant({Static:true , Public:false}, "s_userDataHeader", "<System.Diagnostics.UserData xmlns=\"http://schemas.microsoft.com/win/2006/09/System.Diagnostics/UserData/\">"); 
    $.Constant({Static:true , Public:false}, "s_eventHeader", "<Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\"><System><Provider Guid=\""); 
    $.Constant({Static:true , Public:false}, "s_defaultPayloadSize", 512); 
    $.Constant({Static:true , Public:false}, "_retryThreshold", 2); 
    $.Property({Static:false, Public:true }, "Writer", $asm09.TypeRef("System.IO.TextWriter"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsThreadSafe", $.Boolean);

    $.Property({Static:false, Public:true }, "BufferSize", $.Int32);

    $.Property({Static:false, Public:true }, "TraceLogRetentionOption", $asm0D.TypeRef("System.Diagnostics.TraceLogRetentionOption"));

    $.Property({Static:false, Public:true }, "MaximumFileSize", $.Int64);

    $.Property({Static:false, Public:true }, "MaximumNumberOfFiles", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.EventSchemaTraceListener/TraceWriter */ 

(function TraceWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.IO.TextWriter"), 
      Name: "System.Diagnostics.EventSchemaTraceListener/TraceWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm0D.TypeRef("System.Diagnostics.TraceLogRetentionOption"), $.Int64, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Encoding", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Text.Encoding"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEncodingWithFallback", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Text.Encoding"), [$asm09.TypeRef("System.Text.Encoding")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.Field({Static:false, Public:false}, "encNoBOMwithFallback", $asm09.TypeRef("System.Text.Encoding")); 
    $.Field({Static:false, Public:false}, "stream", $asm09.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "m_lockObject", $.Object); 
    $.Property({Static:false, Public:true , Virtual:true }, "Encoding", $asm09.TypeRef("System.Text.Encoding"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.TraceLogRetentionOption */ 

JSIL.MakeEnum(
  "System.Diagnostics.TraceLogRetentionOption", true, {
    UnlimitedSequentialFiles: 0, 
    LimitedCircularFiles: 1, 
    SingleFileUnboundedSize: 2, 
    LimitedSequentialFiles: 3, 
    SingleFileBoundedSize: 4
  }, false
);

/* class System.Diagnostics.UnescapedXmlDiagnosticData */ 

(function UnescapedXmlDiagnosticData$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.UnescapedXmlDiagnosticData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnescapedXml", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "set_UnescapedXml", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "_xmlString", $.String); 
    $.Property({Static:false, Public:true }, "UnescapedXml", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Diagnostics.PerformanceData");
/* class System.Diagnostics.PerformanceData.CounterData */ 

(function CounterData$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.PerformanceData.CounterData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Int64])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Decrement", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_RawValue", 
      new JSIL.MethodSignature($.Int64, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Int64, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Increment", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "IncrementBy", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_RawValue", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_offset", $jsilcore.TypeRef("JSIL.Pointer", [$.Int64])); 
    $.Property({Static:false, Public:true }, "Value", $.Int64);

    $.Property({Static:false, Public:true }, "RawValue", $.Int64);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet */ 

(function CounterSetInstanceCounterDataSet$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstance")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterData"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterData"), [$.String], [])
    );

    $.Field({Static:false, Public:false}, "m_instance", $asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstance")); 
    $.Field({Static:false, Public:false}, "m_counters", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterData")])); 
    $.Field({Static:false, Public:false}, "m_disposed", $.Int32); 
    $.Field({Static:false, Public:false}, "m_dataBlock", $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])); 
    $.Property({Static:false, Public:true }, "Item", $asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterData"));

    $.Property({Static:false, Public:true }, "Item", $asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterData"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Diagnostics.PerformanceData.CounterSet */ 

(function CounterSet$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.PerformanceData.CounterSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Guid"), $asm09.TypeRef("System.Guid"), 
          $asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "AddCounter", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddCounter", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterType"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateCounterSetInstance", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstance"), [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_platformNotSupported", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_provider", $asm0D.TypeRef("System.Diagnostics.PerformanceData.PerfProvider")); 
    $.Field({Static:false, Public:false}, "m_providerGuid", $asm09.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false}, "m_counterSet", $asm09.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false}, "m_instType", $asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_lockObject", $.Object); 
    $.Field({Static:false, Public:false}, "m_instanceCreated", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_stringToId", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32])); 
    $.Field({Static:false, Public:false}, "m_idToCounter", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterType")])); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.PerformanceData.CounterSetInstance */ 

(function CounterSetInstance$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.PerformanceData.CounterSetInstance", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterSet"), $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Counters", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:false}, "m_counterSet", $asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterSet")); 
    $.Field({Static:false, Public:false}, "m_instName", $.String); 
    $.Field({Static:false, Public:false}, "m_active", $.Int32); 
    $.Field({Static:false, Public:false}, "m_counters", $asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet")); 
    $.Property({Static:false, Public:true }, "Counters", $asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.PerformanceData.CounterSetInstanceType */ 

JSIL.MakeEnum(
  "System.Diagnostics.PerformanceData.CounterSetInstanceType", true, {
    Single: 0, 
    Multiple: 2, 
    GlobalAggregate: 4, 
    MultipleAggregate: 6, 
    GlobalAggregateWithHistory: 11, 
    InstanceAggregate: 22
  }, false
);

/* enum System.Diagnostics.PerformanceData.CounterType */ 

JSIL.MakeEnum(
  "System.Diagnostics.PerformanceData.CounterType", true, {
    RawDataHex32: 0, 
    RawDataHex64: 256, 
    RawData32: 65536, 
    RawData64: 65792, 
    Delta32: 4195328, 
    Delta64: 4195584, 
    SampleCounter: 4260864, 
    QueueLength: 4523008, 
    LargeQueueLength: 4523264, 
    QueueLength100Ns: 5571840, 
    QueueLengthObjectTime: 6620416, 
    RateOfCountPerSecond32: 272696320, 
    RateOfCountPerSecond64: 272696576, 
    RawFraction32: 537003008, 
    RawFraction64: 537003264, 
    PercentageActive: 541132032, 
    PrecisionSystemTimer: 541525248, 
    PercentageActive100Ns: 542180608, 
    PrecisionTimer100Ns: 542573824, 
    ObjectSpecificTimer: 543229184, 
    PrecisionObjectSpecificTimer: 543622400, 
    SampleFraction: 549585920, 
    PercentageNotActive: 557909248, 
    PercentageNotActive100Ns: 558957824, 
    MultiTimerPercentageActive: 574686464, 
    MultiTimerPercentageActive100Ns: 575735040, 
    MultiTimerPercentageNotActive: 591463680, 
    MultiTimerPercentageNotActive100Ns: 592512256, 
    AverageTimer32: 805438464, 
    ElapsedTime: 807666944, 
    AverageCount64: 1073874176, 
    SampleBase: 1073939457, 
    AverageBase: 1073939458, 
    RawBase32: 1073939459, 
    RawBase64: 1073939712, 
    MultiTimerBase: 1107494144
  }, false
);

/* class System.Diagnostics.PerformanceData.PerfProvider */ 

(function PerfProvider$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.PerformanceData.PerfProvider", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_providerGuid", $asm09.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false}, "m_counterSet", $.Int32); 
    $.Field({Static:false, Public:false}, "m_hProvider", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Collections");
JSIL.DeclareNamespace("System.Collections.Generic");
/* class System.Collections.Generic.BitHelper */ 

(function BitHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.BitHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Int32]), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "IsMarked", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "MarkBit", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToIntArrayLength", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "m_length", $.Int32); 
    $.Field({Static:false, Public:false}, "m_arrayPtr", $jsilcore.TypeRef("JSIL.Pointer", [$.Int32])); 
    $.Field({Static:false, Public:false}, "m_array", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "useStackAlloc", $.Boolean); 
    $.Constant({Static:true , Public:false}, "MarkedBitFlag", 1); 
    $.Constant({Static:true , Public:false}, "IntSize", 32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.HashHelpers */ 

(function HashHelpers$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Collections.Generic.HashHelpers", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "GetMinPrime", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPrime", 
      new JSIL.MethodSignature($.Int32, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "IsPrime", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm09.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm09.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.Field({Static:true , Public:false, ReadOnly:true }, "primes", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.HashSet`1 */ 

(function HashSet$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.HashSet`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "AddIfNotPresent", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddOrGetLocation", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AreEqualityComparersEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckUniqueAndUnfoundElements", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Collections.Generic.HashSet`1/ElementCount", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), $.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsAllElements", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateSetComparer", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.Type]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExceptWith", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Comparer", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Collections.Generic.HashSet`1/Enumerator", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HashSetEquals", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $.Type, 
          $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncreaseCapacity", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetHashCode", 
      new JSIL.MethodSignature($.Int32, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalIndexOf", 
      new JSIL.MethodSignature($.Int32, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IntersectWith", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IntersectWithEnumerable", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IntersectWithHashSetWithSameEC", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsProperSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsProperSupersetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IsSubsetOfHashSetWithSameEC", 
      new JSIL.MethodSignature($.Boolean, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSupersetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnDeserialization", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Overlaps", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveWhere", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.Predicate`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetEquals", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SymmetricExceptWith", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SymmetricExceptWithEnumerable", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SymmetricExceptWithUniqueHashSet", 
      new JSIL.MethodSignature(null, [$.Type], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Add", 
      new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")], [])
    )
      .Overrides(3, "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), [], [])
    )
      .Overrides(4, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(5, "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TrimExcess", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "UnionWith", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")])], [])
    );

    $.Field({Static:false, Public:false}, "m_buckets", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "m_slots", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Collections.Generic.HashSet`1/Slot", [$.GenericParameter("T")])])); 
    $.Field({Static:false, Public:false}, "m_count", $.Int32); 
    $.Field({Static:false, Public:false}, "m_lastIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_freeList", $.Int32); 
    $.Field({Static:false, Public:false}, "m_comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "m_version", $.Int32); 
    $.Field({Static:false, Public:false}, "m_siInfo", $asm09.TypeRef("System.Runtime.Serialization.SerializationInfo")); 
    $.Constant({Static:true , Public:false}, "Lower31BitMask", 2147483647); 
    $.Constant({Static:true , Public:false}, "GrowthFactor", 2); 
    $.Constant({Static:true , Public:false}, "StackAllocThreshold", 100); 
    $.Constant({Static:true , Public:false}, "ShrinkThreshold", 3); 
    $.Constant({Static:true , Public:false}, "CapacityName", "Capacity"); 
    $.Constant({Static:true , Public:false}, "ElementsName", "Elements"); 
    $.Constant({Static:true , Public:false}, "ComparerName", "Comparer"); 
    $.Constant({Static:true , Public:false}, "VersionName", "Version"); 
    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "Comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 1 */ $asm09.TypeRef("System.Runtime.Serialization.IDeserializationCallback"), 
      /* 2 */ $asm0B.TypeRef("System.Collections.Generic.ISet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.Generic.ICollection`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), 
      /* 4 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1")]), 
      /* 5 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 6 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm0D.System.Collections.Generic.HashSetDebugView$b1.__Type__]; });

})();

/* struct System.Collections.Generic.HashSet`1/ElementCount */ 

(function ElementCount$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.HashSet`1/ElementCount", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "uniqueCount", $.Int32); 
    $.Field({Static:false, Public:false}, "unfoundCount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Generic.HashSet`1/Slot */ 

(function Slot$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.HashSet`1/Slot", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:false}, "hashCode", $.Int32); 
    $.Field({Static:false, Public:false}, "value", $.GenericParameter("T")); 
    $.Field({Static:false, Public:false}, "next", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Generic.HashSet`1/Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.HashSet`1/Enumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Collections.Generic.HashSet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1/Enumerator")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1/Enumerator"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(2, "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Reset");

    $.Field({Static:false, Public:false}, "set", $asm0D.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])); 
    $.Field({Static:false, Public:false}, "index", $.Int32); 
    $.Field({Static:false, Public:false}, "version", $.Int32); 
    $.Field({Static:false, Public:false}, "current", $.GenericParameter("T")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1/Enumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSet`1/Enumerator")]), 
      /* 1 */ $asm09.TypeRef("System.IDisposable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.HashSetEqualityComparer`1 */ 

(function HashSetEqualityComparer$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.HashSetEqualityComparer`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetEqualityComparer`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Collections.Generic.HashSet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetEqualityComparer`1")]), $asm0D.TypeRef("System.Collections.Generic.HashSet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetEqualityComparer`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Collections.Generic.HashSet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetEqualityComparer`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false}, "m_comparer", $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm0D.TypeRef("System.Collections.Generic.HashSet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetEqualityComparer`1")])])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.IO");
/* enum System.IO.HandleInheritability */ 

JSIL.MakeEnum(
  "System.IO.HandleInheritability", true, {
    None: 0, 
    Inheritable: 1
  }, false
);

JSIL.DeclareNamespace("System.IO.Pipes");
/* enum System.IO.Pipes.PipeDirection */ 

JSIL.MakeEnum(
  "System.IO.Pipes.PipeDirection", true, {
    In: 1, 
    Out: 2, 
    InOut: 3
  }, false
);

/* enum System.IO.Pipes.PipeTransmissionMode */ 

JSIL.MakeEnum(
  "System.IO.Pipes.PipeTransmissionMode", true, {
    Byte: 0, 
    Message: 1
  }, false
);

/* enum System.IO.Pipes.PipeOptions */ 

JSIL.MakeEnum(
  "System.IO.Pipes.PipeOptions", true, {
    WriteThrough: -2147483648, 
    None: 0, 
    Asynchronous: 1073741824
  }, true
);

/* class System.IO.Pipes.PipeStream */ 

(function PipeStream$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.IO.Stream"), 
      Name: "System.IO.Pipes.PipeStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeDirection"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.IO.Pipes.PipeDirection"), $asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AsyncPSCallback", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Threading.NativeOverlapped")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "BeginReadCore", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.Pipes.PipeStreamAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "BeginWriteCore", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.Pipes.PipeStreamAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.AsyncCallback"), 
          $.Object
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckPipePropertyOperations", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckReadOperations", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckWriteOperations", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.IAsyncResult")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IAsyncResult")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InBufferSize", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_InternalHandle", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsAsync", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IsConnected", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsHandleExposed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_IsMessageComplete", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OutBufferSize", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadMode", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SafePipeHandle", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_State", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.Pipes.PipeState"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TransmissionMode", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetAccessControl", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.Pipes.PipeSecurity"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.IO.Pipes.PipeDirection"), $asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeHandle", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $.Boolean, 
          $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadCore", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadFileNative", 
      new JSIL.MethodSignature($.Int32, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Threading.NativeOverlapped")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm09.TypeRef("System.IO.SeekOrigin")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsConnected", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadMode", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_State", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeState")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAccessControl", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeSecurity")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateReadMode", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WaitForPipeDrain", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WinIOError", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      new JSIL.MethodSignature(null, [$.Byte], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteFileNative", 
      new JSIL.MethodSignature($.Int32, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Threading.NativeOverlapped")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_canUseAsync", $.Boolean); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "IOCallback", $asm09.TypeRef("System.Threading.IOCompletionCallback"), function ($pi) {
        return $asm09.System.Threading.IOCompletionCallback.New($pi, $pi.AsyncPSCallback);
      }); 
    $.Field({Static:false, Public:false}, "m_handle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")); 
    $.Field({Static:false, Public:false}, "m_canRead", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_canWrite", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_isAsync", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_isMessageComplete", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_isFromExistingHandle", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_isHandleExposed", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_readMode", $asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode")); 
    $.Field({Static:false, Public:false}, "m_transmissionMode", $asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode")); 
    $.Field({Static:false, Public:false}, "m_pipeDirection", $asm0D.TypeRef("System.IO.Pipes.PipeDirection")); 
    $.Field({Static:false, Public:false}, "m_outBufferSize", $.Int32); 
    $.Field({Static:false, Public:false}, "m_state", $asm0D.TypeRef("System.IO.Pipes.PipeState")); 
    $.Property({Static:false, Public:true }, "IsConnected", $.Boolean);

    $.Property({Static:false, Public:true }, "IsAsync", $.Boolean);

    $.Property({Static:false, Public:true }, "IsMessageComplete", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "TransmissionMode", $asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Property({Static:false, Public:true , Virtual:true }, "InBufferSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "OutBufferSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadMode", $asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Property({Static:false, Public:true }, "SafePipeHandle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Property({Static:false, Public:false}, "InternalHandle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Property({Static:false, Public:false}, "IsHandleExposed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:false}, "State", $asm0D.TypeRef("System.IO.Pipes.PipeState"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.AnonymousPipeServerStream */ 

(function AnonymousPipeServerStream$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.IO.Pipes.PipeStream"), 
      Name: "System.IO.Pipes.AnonymousPipeServerStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeDirection")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeDirection"), $asm0D.TypeRef("System.IO.HandleInheritability")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.IO.Pipes.PipeDirection"), $asm0D.TypeRef("System.IO.HandleInheritability"), 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.IO.Pipes.PipeDirection"), $asm0D.TypeRef("System.IO.HandleInheritability"), 
          $.Int32, $asm0D.TypeRef("System.IO.Pipes.PipeSecurity")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.IO.Pipes.PipeDirection"), $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), 
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "DisposeLocalCopyOfClientHandle", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClientSafePipeHandle", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TransmissionMode", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetClientHandleAsString", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadMode", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_clientHandle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")); 
    $.Field({Static:false, Public:false}, "m_clientHandleExposed", $.Boolean); 
    $.Property({Static:false, Public:true }, "ClientSafePipeHandle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "TransmissionMode", $asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReadMode", $asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.AnonymousPipeClientStream */ 

(function AnonymousPipeClientStream$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.IO.Pipes.PipeStream"), 
      Name: "System.IO.Pipes.AnonymousPipeClientStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeDirection"), $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeDirection"), $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TransmissionMode", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeDirection"), $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadMode", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "TransmissionMode", $asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReadMode", $asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.IO.Pipes.PipeStreamImpersonationWorker */ 

JSIL.MakeDelegate("System.IO.Pipes.PipeStreamImpersonationWorker", true, []);

/* class System.IO.Pipes.NamedPipeServerStream */ 

(function NamedPipeServerStream$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.IO.Pipes.PipeStream"), 
      Name: "System.IO.Pipes.NamedPipeServerStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0D.TypeRef("System.IO.Pipes.PipeDirection")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0D.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0D.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0D.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm0D.TypeRef("System.IO.Pipes.PipeOptions")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0D.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm0D.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0D.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm0D.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
          $.Int32, $asm0D.TypeRef("System.IO.Pipes.PipeSecurity")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0D.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm0D.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
          $.Int32, $asm0D.TypeRef("System.IO.Pipes.PipeSecurity"), 
          $asm0D.TypeRef("System.IO.HandleInheritability")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0D.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm0D.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm0D.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
          $.Int32, $asm0D.TypeRef("System.IO.Pipes.PipeSecurity"), 
          $asm0D.TypeRef("System.IO.HandleInheritability"), $asm0D.TypeRef("System.IO.Pipes.PipeAccessRights")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.IO.Pipes.PipeDirection"), $.Boolean, 
          $.Boolean, $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AsyncWaitForConnectionCallback", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Threading.NativeOverlapped")])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "BeginWaitForConnection", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IAsyncResult"), [$asm09.TypeRef("System.AsyncCallback"), $.Object], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckConnectOperationsServer", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckDisconnectOperations", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Disconnect", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "EndWaitForConnection", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IAsyncResult")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetImpersonationUserName", 
      new JSIL.MethodSignature($.String, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ImpersonateAndTryCode", 
      new JSIL.MethodSignature(null, [$.Object], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "RevertImpersonationOnBackout", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"))
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "RunAsClient", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeStreamImpersonationWorker")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WaitForConnection", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:true }, "MaxAllowedServerInstances", -1); 
    $.Field({Static:true , Public:false}, "s_maxUsernameLength", $.Int32, 20); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "WaitForConnectionCallback", $asm09.TypeRef("System.Threading.IOCompletionCallback"), function ($pi) {
        return $asm09.System.Threading.IOCompletionCallback.New($pi, $pi.AsyncWaitForConnectionCallback);
      }); 
    $.Field({Static:true , Public:false}, "tryCode", $asm09.TypeRef("System.Runtime.CompilerServices.RuntimeHelpers/TryCode"), function ($pi) {
        return $asm09.System.Runtime.CompilerServices.RuntimeHelpers_TryCode.New($pi, $pi.ImpersonateAndTryCode);
      }); 
    $.Field({Static:true , Public:false}, "cleanupCode", $asm09.TypeRef("System.Runtime.CompilerServices.RuntimeHelpers/CleanupCode"), function ($pi) {
        return $asm09.System.Runtime.CompilerServices.RuntimeHelpers_CleanupCode.New($pi, $pi.RevertImpersonationOnBackout);
      }); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.NamedPipeServerStream/ExecuteHelper */ 

(function ExecuteHelper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.IO.Pipes.NamedPipeServerStream/ExecuteHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeStreamImpersonationWorker"), $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_userCode", $asm0D.TypeRef("System.IO.Pipes.PipeStreamImpersonationWorker")); 
    $.Field({Static:false, Public:false}, "m_handle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")); 
    $.Field({Static:false, Public:false}, "m_mustRevert", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_impersonateErrorCode", $.Int32); 
    $.Field({Static:false, Public:false}, "m_revertImpersonateErrorCode", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.NamedPipeClientStream */ 

(function NamedPipeClientStream$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.IO.Pipes.PipeStream"), 
      Name: "System.IO.Pipes.NamedPipeClientStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm0D.TypeRef("System.IO.Pipes.PipeDirection")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm0D.TypeRef("System.IO.Pipes.PipeDirection"), $asm0D.TypeRef("System.IO.Pipes.PipeOptions")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm0D.TypeRef("System.IO.Pipes.PipeDirection"), $asm0D.TypeRef("System.IO.Pipes.PipeOptions"), 
          $asm09.TypeRef("System.Security.Principal.TokenImpersonationLevel")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm0D.TypeRef("System.IO.Pipes.PipeDirection"), $asm0D.TypeRef("System.IO.Pipes.PipeOptions"), 
          $asm09.TypeRef("System.Security.Principal.TokenImpersonationLevel"), $asm0D.TypeRef("System.IO.HandleInheritability")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm0D.TypeRef("System.IO.Pipes.PipeAccessRights"), $asm0D.TypeRef("System.IO.Pipes.PipeOptions"), 
          $asm09.TypeRef("System.Security.Principal.TokenImpersonationLevel"), $asm0D.TypeRef("System.IO.HandleInheritability")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.IO.Pipes.PipeDirection"), $.Boolean, 
          $.Boolean, $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckConnectOperationsClient", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckPipePropertyOperations", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Connect", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "Connect", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DirectionFromRights", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.Pipes.PipeDirection"), [$asm0D.TypeRef("System.IO.Pipes.PipeAccessRights")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NumberOfServerInstances", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_normalizedPipePath", $.String); 
    $.Field({Static:false, Public:false}, "m_impersonationLevel", $asm09.TypeRef("System.Security.Principal.TokenImpersonationLevel")); 
    $.Field({Static:false, Public:false}, "m_pipeOptions", $asm0D.TypeRef("System.IO.Pipes.PipeOptions")); 
    $.Field({Static:false, Public:false}, "m_inheritability", $asm0D.TypeRef("System.IO.HandleInheritability")); 
    $.Field({Static:false, Public:false}, "m_access", $.Int32); 
    $.Property({Static:false, Public:true }, "NumberOfServerInstances", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IO.Pipes.PipeState */ 

JSIL.MakeEnum(
  "System.IO.Pipes.PipeState", false, {
    WaitingToConnect: 0, 
    Connected: 1, 
    Broken: 2, 
    Disconnected: 3, 
    Closed: 4
  }, false
);

/* enum System.IO.Pipes.PipeAccessRights */ 

JSIL.MakeEnum(
  "System.IO.Pipes.PipeAccessRights", true, {
    ReadData: 1, 
    WriteData: 2, 
    CreateNewInstance: 4, 
    ReadExtendedAttributes: 8, 
    WriteExtendedAttributes: 16, 
    ReadAttributes: 128, 
    WriteAttributes: 256, 
    Write: 274, 
    Delete: 65536, 
    ReadPermissions: 131072, 
    Read: 131209, 
    ReadWrite: 131483, 
    ChangePermissions: 262144, 
    TakeOwnership: 524288, 
    Synchronize: 1048576, 
    FullControl: 2032031, 
    AccessSystemSecurity: 16777216
  }, true
);

/* class System.IO.Pipes.PipeAccessRule */ 

(function PipeAccessRule$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Security.AccessControl.AccessRule"), 
      Name: "System.IO.Pipes.PipeAccessRule", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0D.TypeRef("System.IO.Pipes.PipeAccessRights"), 
          $asm09.TypeRef("System.Security.AccessControl.AccessControlType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Security.Principal.IdentityReference"), $asm0D.TypeRef("System.IO.Pipes.PipeAccessRights"), 
          $asm09.TypeRef("System.Security.AccessControl.AccessControlType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm09.TypeRef("System.Security.AccessControl.AccessControlType")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AccessMaskFromRights", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.IO.Pipes.PipeAccessRights"), $asm09.TypeRef("System.Security.AccessControl.AccessControlType")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PipeAccessRights", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.Pipes.PipeAccessRights"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RightsFromAccessMask", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.Pipes.PipeAccessRights"), [$.Int32], [])
    );

    $.Property({Static:false, Public:true }, "PipeAccessRights", $asm0D.TypeRef("System.IO.Pipes.PipeAccessRights"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.PipeAuditRule */ 

(function PipeAuditRule$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Security.AccessControl.AuditRule"), 
      Name: "System.IO.Pipes.PipeAuditRule", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Security.Principal.IdentityReference"), $asm0D.TypeRef("System.IO.Pipes.PipeAccessRights"), 
          $asm09.TypeRef("System.Security.AccessControl.AuditFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm0D.TypeRef("System.IO.Pipes.PipeAccessRights"), 
          $asm09.TypeRef("System.Security.AccessControl.AuditFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm09.TypeRef("System.Security.AccessControl.AuditFlags")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AccessMaskFromRights", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.IO.Pipes.PipeAccessRights")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PipeAccessRights", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.Pipes.PipeAccessRights"), [], [])
    );

    $.Property({Static:false, Public:true }, "PipeAccessRights", $asm0D.TypeRef("System.IO.Pipes.PipeAccessRights"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.PipeSecurity */ 

(function PipeSecurity$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Security.AccessControl.NativeObjectSecurity"), 
      Name: "System.IO.Pipes.PipeSecurity", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $asm09.TypeRef("System.Security.AccessControl.AccessControlSections")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AccessRuleFactory", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.AccessControl.AccessRule"), [
          $asm09.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm09.TypeRef("System.Security.AccessControl.InheritanceFlags"), 
          $asm09.TypeRef("System.Security.AccessControl.PropagationFlags"), $asm09.TypeRef("System.Security.AccessControl.AccessControlType")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddAccessRule", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeAccessRule")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddAuditRule", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeAuditRule")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AuditRuleFactory", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.AccessControl.AuditRule"), [
          $asm09.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm09.TypeRef("System.Security.AccessControl.InheritanceFlags"), 
          $asm09.TypeRef("System.Security.AccessControl.PropagationFlags"), $asm09.TypeRef("System.Security.AccessControl.AuditFlags")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AccessRightType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AccessRuleType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AuditRuleType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAccessControlSectionsFromChanges", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.AccessControl.AccessControlSections"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Persist", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.InteropServices.SafeHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Persist", 
      new JSIL.MethodSignature(null, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "RemoveAccessRule", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.IO.Pipes.PipeAccessRule")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAccessRuleSpecific", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeAccessRule")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAuditRule", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.IO.Pipes.PipeAuditRule")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAuditRuleAll", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeAuditRule")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAuditRuleSpecific", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeAuditRule")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetAccessRule", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeAccessRule")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAccessRule", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeAccessRule")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAuditRule", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.Pipes.PipeAuditRule")], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "AccessRightType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AccessRuleType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AuditRuleType", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Threading");
/* enum System.Threading.LockRecursionPolicy */ 

JSIL.MakeEnum(
  "System.Threading.LockRecursionPolicy", true, {
    NoRecursion: 0, 
    SupportsRecursion: 1
  }, false
);

/* class System.Threading.RecursiveCounts */ 

(function RecursiveCounts$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Threading.RecursiveCounts", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "writercount", $.Int32); 
    $.Field({Static:false, Public:true }, "upgradecount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Threading.ReaderWriterCount */ 

(function ReaderWriterCount$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Threading.ReaderWriterCount", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.Field({Static:false, Public:true }, "threadid", $.Int32); 
    $.Field({Static:false, Public:true }, "readercount", $.Int32); 
    $.Field({Static:false, Public:true }, "next", $.Type); 
    $.Field({Static:false, Public:true }, "rc", $asm0D.TypeRef("System.Threading.RecursiveCounts")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Threading.ReaderWriterLockSlim */ 

(function ReaderWriterLockSlim$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Threading.ReaderWriterLockSlim", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Threading.LockRecursionPolicy")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearUpgraderWaiting", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearWriterAcquired", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearWritersWaiting", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterMyLock", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterMyLockSpin", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnterReadLock", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnterUpgradeableReadLock", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnterWriteLock", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitAndWakeUpAppropriateWaiters", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitAndWakeUpAppropriateWaitersPreferringWriters", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitMyLock", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExitReadLock", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExitUpgradeableReadLock", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExitWriteLock", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentReadCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadLockHeld", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsUpgradeableReadLockHeld", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsWriteLockHeld", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecursionPolicy", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Threading.LockRecursionPolicy"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecursiveReadCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecursiveUpgradeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecursiveWriteCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WaitingReadCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_WaitingUpgradeCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_WaitingWriteCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "GetNumReaders", 
      new JSIL.MethodSignature($.UInt32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetThreadRWCount", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Threading.ReaderWriterCount"), [$.Int32, $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeThreadCounts", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRWEntryEmpty", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Threading.ReaderWriterCount")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRwHashEntryChanged", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Threading.ReaderWriterCount"), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsWriterAcquired", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "LazyCreateEvent", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Threading.EventWaitHandle")]), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUpgraderWaiting", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetWriterAcquired", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetWritersWaiting", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SpinWait", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterReadLock", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterReadLock", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEnterReadLockCore", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterUpgradeableReadLock", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterUpgradeableReadLock", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEnterUpgradeableReadLockCore", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterWriteLock", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.TimeSpan")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterWriteLock", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryEnterWriteLockCore", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WaitOnEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $asm09.TypeRef("System.Threading.EventWaitHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $.Int32
        ], [])
    );

    $.Field({Static:false, Public:false}, "fIsReentrant", $.Boolean); 
    $.Field({Static:false, Public:false}, "myLock", $.Int32); 
    $.Field({Static:false, Public:false}, "numWriteWaiters", $.UInt32); 
    $.Field({Static:false, Public:false}, "numReadWaiters", $.UInt32); 
    $.Field({Static:false, Public:false}, "numWriteUpgradeWaiters", $.UInt32); 
    $.Field({Static:false, Public:false}, "numUpgradeWaiters", $.UInt32); 
    $.Field({Static:false, Public:false}, "fNoWaiters", $.Boolean); 
    $.Field({Static:false, Public:false}, "upgradeLockOwnerId", $.Int32); 
    $.Field({Static:false, Public:false}, "writeLockOwnerId", $.Int32); 
    $.Field({Static:false, Public:false}, "writeEvent", $asm09.TypeRef("System.Threading.EventWaitHandle")); 
    $.Field({Static:false, Public:false}, "readEvent", $asm09.TypeRef("System.Threading.EventWaitHandle")); 
    $.Field({Static:false, Public:false}, "upgradeEvent", $asm09.TypeRef("System.Threading.EventWaitHandle")); 
    $.Field({Static:false, Public:false}, "waitUpgradeEvent", $asm09.TypeRef("System.Threading.EventWaitHandle")); 
    $.Field({Static:false, Public:false}, "rwc", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Threading.ReaderWriterCount")])); 
    $.Field({Static:false, Public:false}, "fUpgradeThreadHoldingRead", $.Boolean); 
    $.Field({Static:false, Public:false}, "owners", $.UInt32); 
    $.Field({Static:false, Public:false}, "fDisposed", $.Boolean); 
    $.Constant({Static:true , Public:false}, "LockSpinCycles", 20); 
    $.Constant({Static:true , Public:false}, "LockSpinCount", 10); 
    $.Constant({Static:true , Public:false}, "LockSleep0Count", 5); 
    $.Constant({Static:true , Public:false}, "hashTableSize", 255); 
    $.Constant({Static:true , Public:false}, "MaxSpinCount", 20); 
    $.Constant({Static:true , Public:false}, "WRITER_HELD", 2147483648); 
    $.Constant({Static:true , Public:false}, "WAITING_WRITERS", 1073741824); 
    $.Constant({Static:true , Public:false}, "WAITING_UPGRADER", 536870912); 
    $.Constant({Static:true , Public:false}, "MAX_READER", 268435454); 
    $.Constant({Static:true , Public:false}, "READER_MASK", 268435455); 
    $.Property({Static:false, Public:true }, "IsReadLockHeld", $.Boolean);

    $.Property({Static:false, Public:true }, "IsUpgradeableReadLockHeld", $.Boolean);

    $.Property({Static:false, Public:true }, "IsWriteLockHeld", $.Boolean);

    $.Property({Static:false, Public:true }, "RecursionPolicy", $asm0D.TypeRef("System.Threading.LockRecursionPolicy"));

    $.Property({Static:false, Public:true }, "CurrentReadCount", $.Int32);

    $.Property({Static:false, Public:true }, "RecursiveReadCount", $.Int32);

    $.Property({Static:false, Public:true }, "RecursiveUpgradeCount", $.Int32);

    $.Property({Static:false, Public:true }, "RecursiveWriteCount", $.Int32);

    $.Property({Static:false, Public:true }, "WaitingReadCount", $.Int32);

    $.Property({Static:false, Public:true }, "WaitingUpgradeCount", $.Int32);

    $.Property({Static:false, Public:true }, "WaitingWriteCount", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Threading.Tasks");
/* class System.Threading.Tasks.TaskExtensions */ 

(function TaskExtensions$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Threading.Tasks.TaskExtensions", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "TrySetFromTask", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", ["!!0"]), $asm09.TypeRef("System.Threading.Tasks.Task")], ["TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Unwrap", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.Tasks.Task"), [$asm09.TypeRef("System.Threading.Tasks.Task`1", [$asm09.TypeRef("System.Threading.Tasks.Task")])], [])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Unwrap", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.Tasks.Task`1", ["!!0"]), [$asm09.TypeRef("System.Threading.Tasks.Task`1", [$asm09.TypeRef("System.Threading.Tasks.Task`1", ["!!0"])])], ["TResult"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Threading.Tasks.TaskExtensions/<>c__DisplayClassc`1 */ 

(function $l$gc__DisplayClassc$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Threading.Tasks.TaskExtensions/<>c__DisplayClassc`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:true }, "result", $.Boolean); 
    $.Field({Static:false, Public:true }, "tcs", $asm09.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$.GenericParameter("TResult")])); 
    $.Field({Static:false, Public:true }, "task", $asm09.TypeRef("System.Threading.Tasks.Task`1", [$asm09.TypeRef("System.Threading.Tasks.Task`1", [$.GenericParameter("TResult")])])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Threading.Tasks.TaskExtensions/<>c__DisplayClass4 */ 

(function $l$gc__DisplayClass4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Threading.Tasks.TaskExtensions/<>c__DisplayClass4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:true }, "result", $.Boolean); 
    $.Field({Static:false, Public:true }, "tcs", $asm09.TypeRef("System.Threading.Tasks.TaskCompletionSource`1", [$asm09.TypeRef("System.Threading.Tasks.Task")])); 
    $.Field({Static:false, Public:true }, "task", $asm09.TypeRef("System.Threading.Tasks.Task`1", [$asm09.TypeRef("System.Threading.Tasks.Task")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle */ 

(function SafeMemoryMappedFileHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IntPtr"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle */ 

(function SafeMemoryMappedViewHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Runtime.InteropServices.SafeBuffer"), 
      Name: "Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IntPtr"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

JSIL.DeclareNamespace("System.IO.MemoryMappedFiles");
/* enum System.IO.MemoryMappedFiles.MemoryMappedFileAccess */ 

JSIL.MakeEnum(
  "System.IO.MemoryMappedFiles.MemoryMappedFileAccess", true, {
    ReadWrite: 0, 
    Read: 1, 
    Write: 2, 
    CopyOnWrite: 3, 
    ReadExecute: 4, 
    ReadWriteExecute: 5
  }, false
);

/* enum System.IO.MemoryMappedFiles.MemoryMappedFileOptions */ 

JSIL.MakeEnum(
  "System.IO.MemoryMappedFiles.MemoryMappedFileOptions", true, {
    None: 0, 
    DelayAllocatePages: 67108864
  }, true
);

/* class System.IO.MemoryMappedFiles.MemoryMappedFile */ 

(function MemoryMappedFile$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.IO.MemoryMappedFiles.MemoryMappedFile", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), $asm09.TypeRef("System.IO.FileStream"), 
          $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CleanupFile", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.FileStream"), $.Boolean, 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateCore", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), [
          $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $.String, 
          $asm0D.TypeRef("System.IO.HandleInheritability"), $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"), 
          $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileOptions"), 
          $.Int64
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateFromFile", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromFile", 
      new JSIL.MethodSignature($.Type, [$.String, $asm09.TypeRef("System.IO.FileMode")], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromFile", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm09.TypeRef("System.IO.FileMode"), 
          $.String
        ], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFromFile", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm09.TypeRef("System.IO.FileMode"), 
          $.String, $.Int64
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateFromFile", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm09.TypeRef("System.IO.FileMode"), 
          $.String, $.Int64, 
          $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateFromFile", 
      new JSIL.MethodSignature($.Type, [
          $asm09.TypeRef("System.IO.FileStream"), $.String, 
          $.Int64, $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), 
          $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"), $asm0D.TypeRef("System.IO.HandleInheritability"), 
          $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateNew", 
      new JSIL.MethodSignature($.Type, [$.String, $.Int64], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateNew", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.Int64, 
          $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateNew", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.Int64, 
          $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileOptions"), 
          $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"), $asm0D.TypeRef("System.IO.HandleInheritability")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "CreateOrOpen", 
      new JSIL.MethodSignature($.Type, [$.String, $.Int64], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateOrOpen", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.Int64, 
          $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "CreateOrOpen", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.Int64, 
          $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileOptions"), 
          $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"), $asm0D.TypeRef("System.IO.HandleInheritability")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CreateOrOpenCore", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), [
          $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $.String, 
          $asm0D.TypeRef("System.IO.HandleInheritability"), $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"), 
          $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileOptions"), 
          $.Int64
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CreateViewAccessor", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedViewAccessor"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateViewAccessor", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedViewAccessor"), [$.Int64, $.Int64], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "CreateViewAccessor", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedViewAccessor"), [
          $.Int64, $.Int64, 
          $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CreateViewStream", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedViewStream"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateViewStream", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedViewStream"), [$.Int64, $.Int64], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "CreateViewStream", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedViewStream"), [
          $.Int64, $.Int64, 
          $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SafeMemoryMappedFileHandle", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "GetAccessControl", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetFileAccess", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IO.FileAccess"), [$asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileMapAccess", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFileStreamFileSystemRights", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Security.AccessControl.FileSystemRights"), [$asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPageAccess", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSystemPageAllocationGranularity", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OpenCore", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), [
          $.String, $asm0D.TypeRef("System.IO.HandleInheritability"), 
          $.Int32, $.Boolean
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OpenExisting", 
      new JSIL.MethodSignature($.Type, [$.String], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "OpenExisting", 
      new JSIL.MethodSignature($.Type, [$.String, $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileRights")], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "OpenExisting", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileRights"), 
          $asm0D.TypeRef("System.IO.HandleInheritability")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SetAccessControl", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileSecurity")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "_handle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle")); 
    $.Field({Static:false, Public:false}, "_leaveOpen", $.Boolean); 
    $.Field({Static:false, Public:false}, "_fileStream", $asm09.TypeRef("System.IO.FileStream")); 
    $.Constant({Static:true , Public:false}, "DefaultSize", 0); 
    $.Property({Static:false, Public:true }, "SafeMemoryMappedFileHandle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"));

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.MemoryMappedFiles.MemoryMappedViewAccessor */ 

(function MemoryMappedViewAccessor$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.IO.UnmanagedMemoryAccessor"), 
      Name: "System.IO.MemoryMappedFiles.MemoryMappedViewAccessor", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedView")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SafeMemoryMappedViewHandle", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_view", $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedView")); 
    $.Property({Static:false, Public:true }, "SafeMemoryMappedViewHandle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.MemoryMappedFiles.MemoryMappedViewStream */ 

(function MemoryMappedViewStream$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.IO.UnmanagedMemoryStream"), 
      Name: "System.IO.MemoryMappedFiles.MemoryMappedViewStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedView")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SafeMemoryMappedViewHandle", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.Field({Static:false, Public:false}, "m_view", $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedView")); 
    $.Property({Static:false, Public:true }, "SafeMemoryMappedViewHandle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IO.MemoryMappedFiles.MemoryMappedFileRights */ 

JSIL.MakeEnum(
  "System.IO.MemoryMappedFiles.MemoryMappedFileRights", true, {
    CopyOnWrite: 1, 
    Write: 2, 
    Read: 4, 
    ReadWrite: 6, 
    Execute: 8, 
    ReadExecute: 12, 
    ReadWriteExecute: 14, 
    Delete: 65536, 
    ReadPermissions: 131072, 
    ChangePermissions: 262144, 
    TakeOwnership: 524288, 
    FullControl: 983055, 
    AccessSystemSecurity: 16777216
  }, true
);

/* class System.IO.MemoryMappedFiles.MemoryMappedFileSecurity */ 

(function MemoryMappedFileSecurity$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Security.AccessControl.ObjectSecurity`1", [$asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileRights")]), 
      Name: "System.IO.MemoryMappedFiles.MemoryMappedFileSecurity", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), $asm09.TypeRef("System.Security.AccessControl.AccessControlSections")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "PersistHandle", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.InteropServices.SafeHandle")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.MemoryMappedFiles.MemoryMappedView */ 

(function MemoryMappedView$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.IO.MemoryMappedFiles.MemoryMappedView", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"), $.Int64, 
          $.Int64, $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CreateView", 
      new JSIL.MethodSignature($.Type, [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle"), $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), 
          $.Int64, $.Int64
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Flush", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IntPtr")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Access", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsClosed", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PointerOffset", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Size", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ViewHandle", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_viewHandle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle")); 
    $.Field({Static:false, Public:false}, "m_pointerOffset", $.Int64); 
    $.Field({Static:false, Public:false}, "m_size", $.Int64); 
    $.Field({Static:false, Public:false}, "m_access", $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess")); 
    $.Property({Static:false, Public:false}, "ViewHandle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle"));

    $.Property({Static:false, Public:false}, "PointerOffset", $.Int64);

    $.Property({Static:false, Public:false}, "Size", $.Int64);

    $.Property({Static:false, Public:false}, "Access", $asm0D.TypeRef("System.IO.MemoryMappedFiles.MemoryMappedFileAccess"));

    $.Property({Static:false, Public:false}, "IsClosed", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.OrderedParallelQuery`1 */ 

(function OrderedParallelQuery$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.ParallelQuery`1", [new JSIL.GenericParameter("TSource", "System.Linq.OrderedParallelQuery`1")]), 
      Name: "System.Linq.OrderedParallelQuery`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.OrderedParallelQuery`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OrderedEnumerable", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.IOrderedEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.OrderedParallelQuery`1")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SortOperator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.OrderedParallelQuery`1")]), [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TSource", "System.Linq.OrderedParallelQuery`1")]), [], [])
    );

    $.Field({Static:false, Public:false}, "m_sortOp", $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [$.GenericParameter("TSource")])); 
    $.Property({Static:false, Public:false}, "SortOperator", $asm0D.TypeRef("System.Linq.Parallel.QueryOperator`1", [new JSIL.GenericParameter("TSource", "System.Linq.OrderedParallelQuery`1")]));

    $.Property({Static:false, Public:false}, "OrderedEnumerable", $asm0D.TypeRef("System.Linq.IOrderedEnumerable`1", [new JSIL.GenericParameter("TSource", "System.Linq.OrderedParallelQuery`1")]));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ExceptionAggregator */ 

(function ExceptionAggregator$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Parallel.ExceptionAggregator", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "ThrowAnOCE", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Exception"), $asm0D.TypeRef("System.Linq.Parallel.CancellationState")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ThrowOCEorAggregateException", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Exception"), $asm0D.TypeRef("System.Linq.Parallel.CancellationState")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrapEnumerable", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm0D.TypeRef("System.Linq.Parallel.CancellationState")], ["TElement"])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrapFunc", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), [$asm09.TypeRef("System.Func`2", ["!!0", "!!1"]), $asm0D.TypeRef("System.Linq.Parallel.CancellationState")], ["T", "U"])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrapQueryEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", ["!!0", "!!1"]), $asm0D.TypeRef("System.Linq.Parallel.CancellationState")], ["TElement", "TIgnoreKey"])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ExceptionAggregator/<WrapEnumerable>d__0`1 */ 

(function $lWrapEnumerable$gd__0$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ExceptionAggregator/<WrapEnumerable>d__0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally3", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTElement$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapEnumerable>d__0`1")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapEnumerable>d__0`1"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TElement")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "$source", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "cancellationState", $asm0D.TypeRef("System.Linq.Parallel.CancellationState")); 
    $.Field({Static:false, Public:true }, "$cancellationState", $asm0D.TypeRef("System.Linq.Parallel.CancellationState")); 
    $.Field({Static:false, Public:true }, "enumerator", $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")])); 
    $.Field({Static:false, Public:true }, "elem", $.GenericParameter("TElement")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapEnumerable>d__0`1"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapEnumerable>d__0`1")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapEnumerable>d__0`1")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.ExceptionAggregator/<WrapQueryEnumerator>d__6`2 */ 

(function $lWrapQueryEnumerator$gd__6$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ExceptionAggregator/<WrapQueryEnumerator>d__6`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TIgnoreKey"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally9", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(3, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTElement$g.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapQueryEnumerator>d__6`2")]), [], [])
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapQueryEnumerator>d__6`2"), [], [])
    )
      .Overrides(2, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"))
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(3, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(3, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.GenericParameter("TElement")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TIgnoreKey")])); 
    $.Field({Static:false, Public:true }, "$source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.GenericParameter("TElement"), $.GenericParameter("TIgnoreKey")])); 
    $.Field({Static:false, Public:true }, "cancellationState", $asm0D.TypeRef("System.Linq.Parallel.CancellationState")); 
    $.Field({Static:false, Public:true }, "$cancellationState", $asm0D.TypeRef("System.Linq.Parallel.CancellationState")); 
    $.Field({Static:false, Public:true }, "elem", $.GenericParameter("TElement")); 
    $.Field({Static:false, Public:true }, "ignoreKey", $.GenericParameter("TIgnoreKey")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapQueryEnumerator>d__6`2"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapQueryEnumerator>d__6`2")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("TElement", "System.Linq.Parallel.ExceptionAggregator/<WrapQueryEnumerator>d__6`2")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Parallel.ExceptionAggregator/<>c__DisplayClassd`2 */ 

(function $l$gc__DisplayClassd$b2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.ExceptionAggregator/<>c__DisplayClassd`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T", "U"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.Field({Static:false, Public:true }, "f", $asm09.TypeRef("System.Func`2", [$.GenericParameter("T"), $.GenericParameter("U")])); 
    $.Field({Static:false, Public:true }, "cancellationState", $asm0D.TypeRef("System.Linq.Parallel.CancellationState")); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.DeclareNamespace("System.Runtime.InteropServices");
/* class System.Runtime.InteropServices.ComAwareEventInfo */ 

(function ComAwareEventInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Reflection.EventInfo"), 
      Name: "System.Runtime.InteropServices.ComAwareEventInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.Delegate")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.EventAttributes"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DeclaringType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReflectedType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAddMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$asm09.TypeRef("System.Type"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCustomAttributes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [$.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDataForComInvocation", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.EventInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetRaiseMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetRemoveMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Type"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveEventHandler", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.Delegate")], [])
    );

    $.Field({Static:false, Public:false}, "_innerEventInfo", $asm09.TypeRef("System.Reflection.EventInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm09.TypeRef("System.Reflection.EventAttributes"));

    $.Property({Static:false, Public:true , Virtual:true }, "DeclaringType", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReflectedType", $asm09.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

})();

/* class System.SR */ 

(function SR$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Globalization.CultureInfo"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Resources.ResourceManager"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.Field({Static:true , Public:false}, "loader", $.Type); 
    $.Field({Static:false, Public:false}, "resources", $asm09.TypeRef("System.Resources.ResourceManager")); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedNonNegNum", "ArgumentOutOfRange_NeedNonNegNum"); 
    $.Constant({Static:true , Public:false}, "Argument_WrongAsyncResult", "Argument_WrongAsyncResult"); 
    $.Constant({Static:true , Public:false}, "Argument_InvalidOffLen", "Argument_InvalidOffLen"); 
    $.Constant({Static:true , Public:false}, "Argument_NeedNonemptyPipeName", "Argument_NeedNonemptyPipeName"); 
    $.Constant({Static:true , Public:false}, "Argument_EmptyServerName", "Argument_EmptyServerName"); 
    $.Constant({Static:true , Public:false}, "Argument_NonContainerInvalidAnyFlag", "Argument_NonContainerInvalidAnyFlag"); 
    $.Constant({Static:true , Public:false}, "Argument_InvalidHandle", "Argument_InvalidHandle"); 
    $.Constant({Static:true , Public:false}, "ArgumentNull_Buffer", "ArgumentNull_Buffer"); 
    $.Constant({Static:true , Public:false}, "ArgumentNull_ServerName", "ArgumentNull_ServerName"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_AdditionalAccessLimited", "ArgumentOutOfRange_AdditionalAccessLimited"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_AnonymousReserved", "ArgumentOutOfRange_AnonymousReserved"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_TransmissionModeByteOrMsg", "ArgumentOutOfRange_TransmissionModeByteOrMsg"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DirectionModeInOrOut", "ArgumentOutOfRange_DirectionModeInOrOut"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DirectionModeInOutOrInOut", "ArgumentOutOfRange_DirectionModeInOutOrInOut"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_ImpersonationInvalid", "ArgumentOutOfRange_ImpersonationInvalid"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_ImpersonationOptionsInvalid", "ArgumentOutOfRange_ImpersonationOptionsInvalid"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_OptionsInvalid", "ArgumentOutOfRange_OptionsInvalid"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_HandleInheritabilityNoneOrInheritable", "ArgumentOutOfRange_HandleInheritabilityNoneOrInheritable"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_InvalidPipeAccessRights", "ArgumentOutOfRange_InvalidPipeAccessRights"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_InvalidTimeout", "ArgumentOutOfRange_InvalidTimeout"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MaxNumServerInstances", "ArgumentOutOfRange_MaxNumServerInstances"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidPipeAccessRights", "ArgumentOutOfRange_NeedValidPipeAccessRights"); 
    $.Constant({Static:true , Public:false}, "IndexOutOfRange_IORaceCondition", "IndexOutOfRange_IORaceCondition"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_EndReadCalledMultiple", "InvalidOperation_EndReadCalledMultiple"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_EndWriteCalledMultiple", "InvalidOperation_EndWriteCalledMultiple"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_EndWaitForConnectionCalledMultiple", "InvalidOperation_EndWaitForConnectionCalledMultiple"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeNotYetConnected", "InvalidOperation_PipeNotYetConnected"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeDisconnected", "InvalidOperation_PipeDisconnected"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeHandleNotSet", "InvalidOperation_PipeHandleNotSet"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeNotAsync", "InvalidOperation_PipeNotAsync"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeReadModeNotMessage", "InvalidOperation_PipeReadModeNotMessage"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeMessageTypeNotSupported", "InvalidOperation_PipeMessageTypeNotSupported"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeAlreadyConnected", "InvalidOperation_PipeAlreadyConnected"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeAlreadyDisconnected", "InvalidOperation_PipeAlreadyDisconnected"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeClosed", "InvalidOperation_PipeClosed"); 
    $.Constant({Static:true , Public:false}, "IO_FileTooLongOrHandleNotSync", "IO_FileTooLongOrHandleNotSync"); 
    $.Constant({Static:true , Public:false}, "IO_EOF_ReadBeyondEOF", "IO_EOF_ReadBeyondEOF"); 
    $.Constant({Static:true , Public:false}, "IO_FileNotFound", "IO_FileNotFound"); 
    $.Constant({Static:true , Public:false}, "IO_FileNotFound_FileName", "IO_FileNotFound_FileName"); 
    $.Constant({Static:true , Public:false}, "IO_IO_AlreadyExists_Name", "IO_IO_AlreadyExists_Name"); 
    $.Constant({Static:true , Public:false}, "IO_IO_BindHandleFailed", "IO_IO_BindHandleFailed"); 
    $.Constant({Static:true , Public:false}, "IO_IO_FileExists_Name", "IO_IO_FileExists_Name"); 
    $.Constant({Static:true , Public:false}, "IO_IO_NoPermissionToDirectoryName", "IO_IO_NoPermissionToDirectoryName"); 
    $.Constant({Static:true , Public:false}, "IO_IO_SharingViolation_File", "IO_IO_SharingViolation_File"); 
    $.Constant({Static:true , Public:false}, "IO_IO_SharingViolation_NoFileName", "IO_IO_SharingViolation_NoFileName"); 
    $.Constant({Static:true , Public:false}, "IO_IO_PipeBroken", "IO_IO_PipeBroken"); 
    $.Constant({Static:true , Public:false}, "IO_IO_InvalidPipeHandle", "IO_IO_InvalidPipeHandle"); 
    $.Constant({Static:true , Public:false}, "IO_DriveNotFound_Drive", "IO_DriveNotFound_Drive"); 
    $.Constant({Static:true , Public:false}, "IO_PathNotFound_Path", "IO_PathNotFound_Path"); 
    $.Constant({Static:true , Public:false}, "IO_PathNotFound_NoPathName", "IO_PathNotFound_NoPathName"); 
    $.Constant({Static:true , Public:false}, "IO_PathTooLong", "IO_PathTooLong"); 
    $.Constant({Static:true , Public:false}, "NotSupported_IONonFileDevices", "NotSupported_IONonFileDevices"); 
    $.Constant({Static:true , Public:false}, "NotSupported_MemStreamNotExpandable", "NotSupported_MemStreamNotExpandable"); 
    $.Constant({Static:true , Public:false}, "NotSupported_UnreadableStream", "NotSupported_UnreadableStream"); 
    $.Constant({Static:true , Public:false}, "NotSupported_UnseekableStream", "NotSupported_UnseekableStream"); 
    $.Constant({Static:true , Public:false}, "NotSupported_UnwritableStream", "NotSupported_UnwritableStream"); 
    $.Constant({Static:true , Public:false}, "NotSupported_AnonymousPipeUnidirectional", "NotSupported_AnonymousPipeUnidirectional"); 
    $.Constant({Static:true , Public:false}, "NotSupported_AnonymousPipeMessagesNotSupported", "NotSupported_AnonymousPipeMessagesNotSupported"); 
    $.Constant({Static:true , Public:false}, "ObjectDisposed_FileClosed", "ObjectDisposed_FileClosed"); 
    $.Constant({Static:true , Public:false}, "ObjectDisposed_PipeClosed", "ObjectDisposed_PipeClosed"); 
    $.Constant({Static:true , Public:false}, "ObjectDisposed_ReaderClosed", "ObjectDisposed_ReaderClosed"); 
    $.Constant({Static:true , Public:false}, "ObjectDisposed_StreamClosed", "ObjectDisposed_StreamClosed"); 
    $.Constant({Static:true , Public:false}, "ObjectDisposed_WriterClosed", "ObjectDisposed_WriterClosed"); 
    $.Constant({Static:true , Public:false}, "PlatformNotSupported_NamedPipeServers", "PlatformNotSupported_NamedPipeServers"); 
    $.Constant({Static:true , Public:false}, "UnauthorizedAccess_IODenied_Path", "UnauthorizedAccess_IODenied_Path"); 
    $.Constant({Static:true , Public:false}, "UnauthorizedAccess_IODenied_NoPathName", "UnauthorizedAccess_IODenied_NoPathName"); 
    $.Constant({Static:true , Public:false}, "TraceAsTraceSource", "TraceAsTraceSource"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidLogRetention", "ArgumentOutOfRange_NeedValidLogRetention"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedMaxFileSizeGEBufferSize", "ArgumentOutOfRange_NeedMaxFileSizeGEBufferSize"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidMaxNumFiles", "ArgumentOutOfRange_NeedValidMaxNumFiles"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidId", "ArgumentOutOfRange_NeedValidId"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MaxArgExceeded", "ArgumentOutOfRange_MaxArgExceeded"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MaxStringsExceeded", "ArgumentOutOfRange_MaxStringsExceeded"); 
    $.Constant({Static:true , Public:false}, "NotSupported_DownLevelVista", "NotSupported_DownLevelVista"); 
    $.Constant({Static:true , Public:false}, "Argument_NeedNonemptyDelimiter", "Argument_NeedNonemptyDelimiter"); 
    $.Constant({Static:true , Public:false}, "NotSupported_SetTextWriter", "NotSupported_SetTextWriter"); 
    $.Constant({Static:true , Public:false}, "Perflib_PlatformNotSupported", "Perflib_PlatformNotSupported"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_CounterSetAlreadyRegister", "Perflib_Argument_CounterSetAlreadyRegister"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_InvalidCounterType", "Perflib_Argument_InvalidCounterType"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_InvalidCounterSetInstanceType", "Perflib_Argument_InvalidCounterSetInstanceType"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_InstanceAlreadyExists", "Perflib_Argument_InstanceAlreadyExists"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_CounterAlreadyExists", "Perflib_Argument_CounterAlreadyExists"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_CounterNameAlreadyExists", "Perflib_Argument_CounterNameAlreadyExists"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_ProviderNotFound", "Perflib_Argument_ProviderNotFound"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_InvalidInstance", "Perflib_Argument_InvalidInstance"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_EmptyInstanceName", "Perflib_Argument_EmptyInstanceName"); 
    $.Constant({Static:true , Public:false}, "Perflib_Argument_EmptyCounterName", "Perflib_Argument_EmptyCounterName"); 
    $.Constant({Static:true , Public:false}, "Perflib_InsufficientMemory_InstanceCounterBlock", "Perflib_InsufficientMemory_InstanceCounterBlock"); 
    $.Constant({Static:true , Public:false}, "Perflib_InsufficientMemory_CounterSetTemplate", "Perflib_InsufficientMemory_CounterSetTemplate"); 
    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_CounterRefValue", "Perflib_InvalidOperation_CounterRefValue"); 
    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_CounterSetNotInstalled", "Perflib_InvalidOperation_CounterSetNotInstalled"); 
    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_InstanceNotFound", "Perflib_InvalidOperation_InstanceNotFound"); 
    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_AddCounterAfterInstance", "Perflib_InvalidOperation_AddCounterAfterInstance"); 
    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_NoActiveProvider", "Perflib_InvalidOperation_NoActiveProvider"); 
    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_CounterSetContainsNoCounter", "Perflib_InvalidOperation_CounterSetContainsNoCounter"); 
    $.Constant({Static:true , Public:false}, "Arg_ArrayPlusOffTooSmall", "Arg_ArrayPlusOffTooSmall"); 
    $.Constant({Static:true , Public:false}, "Arg_HSCapacityOverflow", "Arg_HSCapacityOverflow"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_EnumFailedVersion", "InvalidOperation_EnumFailedVersion"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_EnumOpCantHappen", "InvalidOperation_EnumOpCantHappen"); 
    $.Constant({Static:true , Public:false}, "Serialization_MissingKeys", "Serialization_MissingKeys"); 
    $.Constant({Static:true , Public:false}, "LockRecursionException_RecursiveReadNotAllowed", "LockRecursionException_RecursiveReadNotAllowed"); 
    $.Constant({Static:true , Public:false}, "LockRecursionException_RecursiveWriteNotAllowed", "LockRecursionException_RecursiveWriteNotAllowed"); 
    $.Constant({Static:true , Public:false}, "LockRecursionException_RecursiveUpgradeNotAllowed", "LockRecursionException_RecursiveUpgradeNotAllowed"); 
    $.Constant({Static:true , Public:false}, "LockRecursionException_ReadAfterWriteNotAllowed", "LockRecursionException_ReadAfterWriteNotAllowed"); 
    $.Constant({Static:true , Public:false}, "LockRecursionException_WriteAfterReadNotAllowed", "LockRecursionException_WriteAfterReadNotAllowed"); 
    $.Constant({Static:true , Public:false}, "LockRecursionException_UpgradeAfterReadNotAllowed", "LockRecursionException_UpgradeAfterReadNotAllowed"); 
    $.Constant({Static:true , Public:false}, "LockRecursionException_UpgradeAfterWriteNotAllowed", "LockRecursionException_UpgradeAfterWriteNotAllowed"); 
    $.Constant({Static:true , Public:false}, "SynchronizationLockException_MisMatchedRead", "SynchronizationLockException_MisMatchedRead"); 
    $.Constant({Static:true , Public:false}, "SynchronizationLockException_MisMatchedWrite", "SynchronizationLockException_MisMatchedWrite"); 
    $.Constant({Static:true , Public:false}, "SynchronizationLockException_MisMatchedUpgrade", "SynchronizationLockException_MisMatchedUpgrade"); 
    $.Constant({Static:true , Public:false}, "SynchronizationLockException_IncorrectDispose", "SynchronizationLockException_IncorrectDispose"); 
    $.Constant({Static:true , Public:false}, "Cryptography_ArgECDHKeySizeMismatch", "Cryptography_ArgECDHKeySizeMismatch"); 
    $.Constant({Static:true , Public:false}, "Cryptography_ArgECDHRequiresECDHKey", "Cryptography_ArgECDHRequiresECDHKey"); 
    $.Constant({Static:true , Public:false}, "Cryptography_ArgECDsaRequiresECDsaKey", "Cryptography_ArgECDsaRequiresECDsaKey"); 
    $.Constant({Static:true , Public:false}, "Cryptography_ArgExpectedECDiffieHellmanCngPublicKey", "Cryptography_ArgExpectedECDiffieHellmanCngPublicKey"); 
    $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngAlgorithm", "Cryptography_ArgMustBeCngAlgorithm"); 
    $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngAlgorithmGroup", "Cryptography_ArgMustBeCngAlgorithmGroup"); 
    $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngKeyBlobFormat", "Cryptography_ArgMustBeCngKeyBlobFormat"); 
    $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngProvider", "Cryptography_ArgMustBeCngProvider"); 
    $.Constant({Static:true , Public:false}, "Cryptography_DecryptWithNoKey", "Cryptography_DecryptWithNoKey"); 
    $.Constant({Static:true , Public:false}, "Cryptography_ECXmlSerializationFormatRequired", "Cryptography_ECXmlSerializationFormatRequired"); 
    $.Constant({Static:true , Public:false}, "Cryptography_InvalidAlgorithmGroup", "Cryptography_InvalidAlgorithmGroup"); 
    $.Constant({Static:true , Public:false}, "Cryptography_InvalidAlgorithmName", "Cryptography_InvalidAlgorithmName"); 
    $.Constant({Static:true , Public:false}, "Cryptography_InvalidCipherMode", "Cryptography_InvalidCipherMode"); 
    $.Constant({Static:true , Public:false}, "Cryptography_InvalidIVSize", "Cryptography_InvalidIVSize"); 
    $.Constant({Static:true , Public:false}, "Cryptography_InvalidKeyBlobFormat", "Cryptography_InvalidKeyBlobFormat"); 
    $.Constant({Static:true , Public:false}, "Cryptography_InvalidKeySize", "Cryptography_InvalidKeySize"); 
    $.Constant({Static:true , Public:false}, "Cryptography_InvalidPadding", "Cryptography_InvalidPadding"); 
    $.Constant({Static:true , Public:false}, "Cryptography_InvalidProviderName", "Cryptography_InvalidProviderName"); 
    $.Constant({Static:true , Public:false}, "Cryptography_MissingDomainParameters", "Cryptography_MissingDomainParameters"); 
    $.Constant({Static:true , Public:false}, "Cryptography_MissingPublicKey", "Cryptography_MissingPublicKey"); 
    $.Constant({Static:true , Public:false}, "Cryptography_MissingIV", "Cryptography_MissingIV"); 
    $.Constant({Static:true , Public:false}, "Cryptography_MustTransformWholeBlock", "Cryptography_MustTransformWholeBlock"); 
    $.Constant({Static:true , Public:false}, "Cryptography_NonCompliantFIPSAlgorithm", "Cryptography_NonCompliantFIPSAlgorithm"); 
    $.Constant({Static:true , Public:false}, "Cryptography_OpenInvalidHandle", "Cryptography_OpenInvalidHandle"); 
    $.Constant({Static:true , Public:false}, "Cryptography_OpenEphemeralKeyHandleWithoutEphemeralFlag", "Cryptography_OpenEphemeralKeyHandleWithoutEphemeralFlag"); 
    $.Constant({Static:true , Public:false}, "Cryptography_PartialBlock", "Cryptography_PartialBlock"); 
    $.Constant({Static:true , Public:false}, "Cryptography_PlatformNotSupported", "Cryptography_PlatformNotSupported"); 
    $.Constant({Static:true , Public:false}, "Cryptography_TlsRequiresLabelAndSeed", "Cryptography_TlsRequiresLabelAndSeed"); 
    $.Constant({Static:true , Public:false}, "Cryptography_TransformBeyondEndOfBuffer", "Cryptography_TransformBeyondEndOfBuffer"); 
    $.Constant({Static:true , Public:false}, "Cryptography_UnknownEllipticCurve", "Cryptography_UnknownEllipticCurve"); 
    $.Constant({Static:true , Public:false}, "Cryptography_UnknownEllipticCurveAlgorithm", "Cryptography_UnknownEllipticCurveAlgorithm"); 
    $.Constant({Static:true , Public:false}, "Cryptography_UnknownPaddingMode", "Cryptography_UnknownPaddingMode"); 
    $.Constant({Static:true , Public:false}, "Cryptography_UnexpectedXmlNamespace", "Cryptography_UnexpectedXmlNamespace"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_RangeMinRangeMaxRangeType", "ArgumentException_RangeMinRangeMaxRangeType"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_RangeNotIComparable", "ArgumentException_RangeNotIComparable"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_RangeMaxRangeSmallerThanMinRange", "ArgumentException_RangeMaxRangeSmallerThanMinRange"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_CountMaxLengthSmallerThanMinLength", "ArgumentException_CountMaxLengthSmallerThanMinLength"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_LengthMaxLengthSmallerThanMinLength", "ArgumentException_LengthMaxLengthSmallerThanMinLength"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_UnregisteredParameterName", "ArgumentException_UnregisteredParameterName"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_InvalidParameterName", "ArgumentException_InvalidParameterName"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_DuplicateName", "ArgumentException_DuplicateName"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_DuplicatePosition", "ArgumentException_DuplicatePosition"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_NoParametersFound", "ArgumentException_NoParametersFound"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_HelpMessageBaseNameNullOrEmpty", "ArgumentException_HelpMessageBaseNameNullOrEmpty"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_HelpMessageResourceIdNullOrEmpty", "ArgumentException_HelpMessageResourceIdNullOrEmpty"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_HelpMessageNullOrEmpty", "ArgumentException_HelpMessageNullOrEmpty"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_RegexPatternNullOrEmpty", "ArgumentException_RegexPatternNullOrEmpty"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_RequiredPositionalAfterOptionalPositional", "ArgumentException_RequiredPositionalAfterOptionalPositional"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_DuplicateParameterAttribute", "ArgumentException_DuplicateParameterAttribute"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_MissingBaseNameOrResourceId", "ArgumentException_MissingBaseNameOrResourceId"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_DuplicateRemainingArgumets", "ArgumentException_DuplicateRemainingArgumets"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_TypeMismatchForRemainingArguments", "ArgumentException_TypeMismatchForRemainingArguments"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_ValidationParameterTypeMismatch", "ArgumentException_ValidationParameterTypeMismatch"); 
    $.Constant({Static:true , Public:false}, "ArgumentException_ParserBuiltWithValueType", "ArgumentException_ParserBuiltWithValueType"); 
    $.Constant({Static:true , Public:false}, "InvalidOperationException_GetParameterTypeMismatch", "InvalidOperationException_GetParameterTypeMismatch"); 
    $.Constant({Static:true , Public:false}, "InvalidOperationException_GetParameterValueBeforeParse", "InvalidOperationException_GetParameterValueBeforeParse"); 
    $.Constant({Static:true , Public:false}, "InvalidOperationException_SetRemainingArgumentsParameterAfterParse", "InvalidOperationException_SetRemainingArgumentsParameterAfterParse"); 
    $.Constant({Static:true , Public:false}, "InvalidOperationException_AddParameterAfterParse", "InvalidOperationException_AddParameterAfterParse"); 
    $.Constant({Static:true , Public:false}, "InvalidOperationException_BindAfterBind", "InvalidOperationException_BindAfterBind"); 
    $.Constant({Static:true , Public:false}, "InvalidOperationException_GetRemainingArgumentsNotAllowed", "InvalidOperationException_GetRemainingArgumentsNotAllowed"); 
    $.Constant({Static:true , Public:false}, "InvalidOperationException_ParameterSetBeforeParse", "InvalidOperationException_ParameterSetBeforeParse"); 
    $.Constant({Static:true , Public:false}, "CommandLineParser_Aliases", "CommandLineParser_Aliases"); 
    $.Constant({Static:true , Public:false}, "CommandLineParser_ErrorMessagePrefix", "CommandLineParser_ErrorMessagePrefix"); 
    $.Constant({Static:true , Public:false}, "CommandLineParser_HelpMessagePrefix", "CommandLineParser_HelpMessagePrefix"); 
    $.Constant({Static:true , Public:false}, "ParameterBindingException_AmbiguousParameterName", "ParameterBindingException_AmbiguousParameterName"); 
    $.Constant({Static:true , Public:false}, "ParameterBindingException_ParameterValueAlreadySpecified", "ParameterBindingException_ParameterValueAlreadySpecified"); 
    $.Constant({Static:true , Public:false}, "ParameterBindingException_UnknownParameteName", "ParameterBindingException_UnknownParameteName"); 
    $.Constant({Static:true , Public:false}, "ParameterBindingException_RequiredParameterMissingCommandLineValue", "ParameterBindingException_RequiredParameterMissingCommandLineValue"); 
    $.Constant({Static:true , Public:false}, "ParameterBindingException_UnboundCommandLineArguments", "ParameterBindingException_UnboundCommandLineArguments"); 
    $.Constant({Static:true , Public:false}, "ParameterBindingException_UnboundMandatoryParameter", "ParameterBindingException_UnboundMandatoryParameter"); 
    $.Constant({Static:true , Public:false}, "ParameterBindingException_ResponseFileException", "ParameterBindingException_ResponseFileException"); 
    $.Constant({Static:true , Public:false}, "ParameterBindingException_ValididationError", "ParameterBindingException_ValididationError"); 
    $.Constant({Static:true , Public:false}, "ParameterBindingException_TransformationError", "ParameterBindingException_TransformationError"); 
    $.Constant({Static:true , Public:false}, "ParameterBindingException_AmbiguousParameterSet", "ParameterBindingException_AmbiguousParameterSet"); 
    $.Constant({Static:true , Public:false}, "ParameterBindingException_UnknownParameterSet", "ParameterBindingException_UnknownParameterSet"); 
    $.Constant({Static:true , Public:false}, "ParameterBindingException_NestedResponseFiles", "ParameterBindingException_NestedResponseFiles"); 
    $.Constant({Static:true , Public:false}, "ValidateMetadataException_RangeGreaterThanMaxRangeFailure", "ValidateMetadataException_RangeGreaterThanMaxRangeFailure"); 
    $.Constant({Static:true , Public:false}, "ValidateMetadataException_RangeSmallerThanMinRangeFailure", "ValidateMetadataException_RangeSmallerThanMinRangeFailure"); 
    $.Constant({Static:true , Public:false}, "ValidateMetadataException_PatternFailure", "ValidateMetadataException_PatternFailure"); 
    $.Constant({Static:true , Public:false}, "ValidateMetadataException_CountMinLengthFailure", "ValidateMetadataException_CountMinLengthFailure"); 
    $.Constant({Static:true , Public:false}, "ValidateMetadataException_CountMaxLengthFailure", "ValidateMetadataException_CountMaxLengthFailure"); 
    $.Constant({Static:true , Public:false}, "ValidateMetadataException_LengthMinLengthFailure", "ValidateMetadataException_LengthMinLengthFailure"); 
    $.Constant({Static:true , Public:false}, "ValidateMetadataException_LengthMaxLengthFailure", "ValidateMetadataException_LengthMaxLengthFailure"); 
    $.Constant({Static:true , Public:false}, "Argument_MapNameEmptyString", "Argument_MapNameEmptyString"); 
    $.Constant({Static:true , Public:false}, "Argument_EmptyFile", "Argument_EmptyFile"); 
    $.Constant({Static:true , Public:false}, "Argument_NewMMFWriteAccessNotAllowed", "Argument_NewMMFWriteAccessNotAllowed"); 
    $.Constant({Static:true , Public:false}, "Argument_ReadAccessWithLargeCapacity", "Argument_ReadAccessWithLargeCapacity"); 
    $.Constant({Static:true , Public:false}, "Argument_NewMMFAppendModeNotAllowed", "Argument_NewMMFAppendModeNotAllowed"); 
    $.Constant({Static:true , Public:false}, "ArgumentNull_MapName", "ArgumentNull_MapName"); 
    $.Constant({Static:true , Public:false}, "ArgumentNull_FileStream", "ArgumentNull_FileStream"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_CapacityLargerThanLogicalAddressSpaceNotAllowed", "ArgumentOutOfRange_CapacityLargerThanLogicalAddressSpaceNotAllowed"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedPositiveNumber", "ArgumentOutOfRange_NeedPositiveNumber"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_PositiveOrDefaultCapacityRequired", "ArgumentOutOfRange_PositiveOrDefaultCapacityRequired"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_PositiveOrDefaultSizeRequired", "ArgumentOutOfRange_PositiveOrDefaultSizeRequired"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_PositionLessThanCapacityRequired", "ArgumentOutOfRange_PositionLessThanCapacityRequired"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_CapacityGEFileSizeRequired", "ArgumentOutOfRange_CapacityGEFileSizeRequired"); 
    $.Constant({Static:true , Public:false}, "IO_NotEnoughMemory", "IO_NotEnoughMemory"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_CalledTwice", "InvalidOperation_CalledTwice"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation_CantCreateFileMapping", "InvalidOperation_CantCreateFileMapping"); 
    $.Constant({Static:true , Public:false}, "NotSupported_DelayAllocateFileBackedNotAllowed", "NotSupported_DelayAllocateFileBackedNotAllowed"); 
    $.Constant({Static:true , Public:false}, "NotSupported_MMViewStreamsFixedLength", "NotSupported_MMViewStreamsFixedLength"); 
    $.Constant({Static:true , Public:false}, "ObjectDisposed_ViewAccessorClosed", "ObjectDisposed_ViewAccessorClosed"); 
    $.Constant({Static:true , Public:false}, "ObjectDisposed_StreamIsClosed", "ObjectDisposed_StreamIsClosed"); 
    $.Property({Static:true , Public:false}, "Culture", $asm09.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm09.TypeRef("System.Resources.ResourceManager"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.SR */ 

(function SR$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Globalization.CultureInfo"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Resources.ResourceManager"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.Field({Static:true , Public:false}, "loader", $.Type); 
    $.Field({Static:false, Public:false}, "resources", $asm09.TypeRef("System.Resources.ResourceManager")); 
    $.Constant({Static:true , Public:false}, "OwningTeam", "OwningTeam"); 
    $.Constant({Static:true , Public:false}, "ArgumentArrayHasTooManyElements", "ArgumentArrayHasTooManyElements"); 
    $.Constant({Static:true , Public:false}, "ArgumentNotIEnumerableGeneric", "ArgumentNotIEnumerableGeneric"); 
    $.Constant({Static:true , Public:false}, "ArgumentNotSequence", "ArgumentNotSequence"); 
    $.Constant({Static:true , Public:false}, "ArgumentNotValid", "ArgumentNotValid"); 
    $.Constant({Static:true , Public:false}, "IncompatibleElementTypes", "IncompatibleElementTypes"); 
    $.Constant({Static:true , Public:false}, "ArgumentNotLambda", "ArgumentNotLambda"); 
    $.Constant({Static:true , Public:false}, "MoreThanOneElement", "MoreThanOneElement"); 
    $.Constant({Static:true , Public:false}, "MoreThanOneMatch", "MoreThanOneMatch"); 
    $.Constant({Static:true , Public:false}, "NoArgumentMatchingMethodsInQueryable", "NoArgumentMatchingMethodsInQueryable"); 
    $.Constant({Static:true , Public:false}, "NoElements", "NoElements"); 
    $.Constant({Static:true , Public:false}, "NoMatch", "NoMatch"); 
    $.Constant({Static:true , Public:false}, "NoMethodOnType", "NoMethodOnType"); 
    $.Constant({Static:true , Public:false}, "NoMethodOnTypeMatchingArguments", "NoMethodOnTypeMatchingArguments"); 
    $.Constant({Static:true , Public:false}, "NoNameMatchingMethodsInQueryable", "NoNameMatchingMethodsInQueryable"); 
    $.Constant({Static:true , Public:false}, "EmptyEnumerable", "EmptyEnumerable"); 
    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesNoNulls", "Argument_AdjustmentRulesNoNulls"); 
    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesOutOfOrder", "Argument_AdjustmentRulesOutOfOrder"); 
    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesAmbiguousOverlap", "Argument_AdjustmentRulesAmbiguousOverlap"); 
    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesrDaylightSavingTimeOverlap", "Argument_AdjustmentRulesrDaylightSavingTimeOverlap"); 
    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange", "Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange"); 
    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesInvalidOverlap", "Argument_AdjustmentRulesInvalidOverlap"); 
    $.Constant({Static:true , Public:false}, "Argument_ConvertMismatch", "Argument_ConvertMismatch"); 
    $.Constant({Static:true , Public:false}, "Argument_DateTimeHasTimeOfDay", "Argument_DateTimeHasTimeOfDay"); 
    $.Constant({Static:true , Public:false}, "Argument_DateTimeIsInvalid", "Argument_DateTimeIsInvalid"); 
    $.Constant({Static:true , Public:false}, "Argument_DateTimeIsNotAmbiguous", "Argument_DateTimeIsNotAmbiguous"); 
    $.Constant({Static:true , Public:false}, "Argument_DateTimeOffsetIsNotAmbiguous", "Argument_DateTimeOffsetIsNotAmbiguous"); 
    $.Constant({Static:true , Public:false}, "Argument_DateTimeKindMustBeUnspecified", "Argument_DateTimeKindMustBeUnspecified"); 
    $.Constant({Static:true , Public:false}, "Argument_DateTimeHasTicks", "Argument_DateTimeHasTicks"); 
    $.Constant({Static:true , Public:false}, "Argument_InvalidId", "Argument_InvalidId"); 
    $.Constant({Static:true , Public:false}, "Argument_InvalidSerializedString", "Argument_InvalidSerializedString"); 
    $.Constant({Static:true , Public:false}, "Argument_InvalidREG_TZI_FORMAT", "Argument_InvalidREG_TZI_FORMAT"); 
    $.Constant({Static:true , Public:false}, "Argument_OutOfOrderDateTimes", "Argument_OutOfOrderDateTimes"); 
    $.Constant({Static:true , Public:false}, "Argument_TimeSpanHasSeconds", "Argument_TimeSpanHasSeconds"); 
    $.Constant({Static:true , Public:false}, "Argument_TimeZoneInfoBadTZif", "Argument_TimeZoneInfoBadTZif"); 
    $.Constant({Static:true , Public:false}, "Argument_TimeZoneInfoInvalidTZif", "Argument_TimeZoneInfoInvalidTZif"); 
    $.Constant({Static:true , Public:false}, "Argument_TransitionTimesAreIdentical", "Argument_TransitionTimesAreIdentical"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DayParam", "ArgumentOutOfRange_DayParam"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DayOfWeek", "ArgumentOutOfRange_DayOfWeek"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MonthParam", "ArgumentOutOfRange_MonthParam"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_UtcOffset", "ArgumentOutOfRange_UtcOffset"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_UtcOffsetAndDaylightDelta", "ArgumentOutOfRange_UtcOffsetAndDaylightDelta"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_Week", "ArgumentOutOfRange_Week"); 
    $.Constant({Static:true , Public:false}, "InvalidTimeZone_InvalidRegistryData", "InvalidTimeZone_InvalidRegistryData"); 
    $.Constant({Static:true , Public:false}, "InvalidTimeZone_InvalidWin32APIData", "InvalidTimeZone_InvalidWin32APIData"); 
    $.Constant({Static:true , Public:false}, "Security_CannotReadRegistryData", "Security_CannotReadRegistryData"); 
    $.Constant({Static:true , Public:false}, "Serialization_CorruptField", "Serialization_CorruptField"); 
    $.Constant({Static:true , Public:false}, "Serialization_InvalidEscapeSequence", "Serialization_InvalidEscapeSequence"); 
    $.Constant({Static:true , Public:false}, "TimeZoneNotFound_MissingRegistryData", "TimeZoneNotFound_MissingRegistryData"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DateTimeBadTicks", "ArgumentOutOfRange_DateTimeBadTicks"); 
    $.Constant({Static:true , Public:false}, "PLINQ_CommonEnumerator_Current_NotStarted", "PLINQ_CommonEnumerator_Current_NotStarted"); 
    $.Constant({Static:true , Public:false}, "PLINQ_ExternalCancellationRequested", "PLINQ_ExternalCancellationRequested"); 
    $.Constant({Static:true , Public:false}, "PLINQ_DisposeRequested", "PLINQ_DisposeRequested"); 
    $.Constant({Static:true , Public:false}, "PLINQ_EnumerationPreviouslyFailed", "PLINQ_EnumerationPreviouslyFailed"); 
    $.Constant({Static:true , Public:false}, "ParallelPartitionable_NullReturn", "ParallelPartitionable_NullReturn"); 
    $.Constant({Static:true , Public:false}, "ParallelPartitionable_NullElement", "ParallelPartitionable_NullElement"); 
    $.Constant({Static:true , Public:false}, "ParallelPartitionable_IncorretElementCount", "ParallelPartitionable_IncorretElementCount"); 
    $.Constant({Static:true , Public:false}, "ParallelEnumerable_ToArray_DimensionRequired", "ParallelEnumerable_ToArray_DimensionRequired"); 
    $.Constant({Static:true , Public:false}, "ParallelEnumerable_WithQueryExecutionMode_InvalidMode", "ParallelEnumerable_WithQueryExecutionMode_InvalidMode"); 
    $.Constant({Static:true , Public:false}, "ParallelEnumerable_WithMergeOptions_InvalidOptions", "ParallelEnumerable_WithMergeOptions_InvalidOptions"); 
    $.Constant({Static:true , Public:false}, "ParallelEnumerable_BinaryOpMustUseAsParallel", "ParallelEnumerable_BinaryOpMustUseAsParallel"); 
    $.Constant({Static:true , Public:false}, "ParallelEnumerable_WithCancellation_TokenSourceDisposed", "ParallelEnumerable_WithCancellation_TokenSourceDisposed"); 
    $.Constant({Static:true , Public:false}, "ParallelQuery_InvalidAsOrderedCall", "ParallelQuery_InvalidAsOrderedCall"); 
    $.Constant({Static:true , Public:false}, "ParallelQuery_InvalidNonGenericAsOrderedCall", "ParallelQuery_InvalidNonGenericAsOrderedCall"); 
    $.Constant({Static:true , Public:false}, "ParallelQuery_PartitionerNotOrderable", "ParallelQuery_PartitionerNotOrderable"); 
    $.Constant({Static:true , Public:false}, "ParallelQuery_DuplicateTaskScheduler", "ParallelQuery_DuplicateTaskScheduler"); 
    $.Constant({Static:true , Public:false}, "ParallelQuery_DuplicateDOP", "ParallelQuery_DuplicateDOP"); 
    $.Constant({Static:true , Public:false}, "ParallelQuery_DuplicateWithCancellation", "ParallelQuery_DuplicateWithCancellation"); 
    $.Constant({Static:true , Public:false}, "ParallelQuery_DuplicateExecutionMode", "ParallelQuery_DuplicateExecutionMode"); 
    $.Constant({Static:true , Public:false}, "ParallelQuery_DuplicateMergeOptions", "ParallelQuery_DuplicateMergeOptions"); 
    $.Constant({Static:true , Public:false}, "PartitionerQueryOperator_NullPartitionList", "PartitionerQueryOperator_NullPartitionList"); 
    $.Constant({Static:true , Public:false}, "PartitionerQueryOperator_WrongNumberOfPartitions", "PartitionerQueryOperator_WrongNumberOfPartitions"); 
    $.Constant({Static:true , Public:false}, "PartitionerQueryOperator_NullPartition", "PartitionerQueryOperator_NullPartition"); 
    $.Property({Static:true , Public:false}, "Culture", $asm09.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm09.TypeRef("System.Resources.ResourceManager"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogPermissionHolder */ 

(function EventLogPermissionHolder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogPermissionHolder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetEventLogPermission", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Diagnostics.EventLogPermission"), [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.CoTaskMemUnicodeSafeHandle */ 

(function CoTaskMemUnicodeSafeHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Diagnostics.Eventing.Reader.CoTaskMemUnicodeSafeHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IntPtr"), $.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemory", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMemory", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IntPtr")], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Diagnostics.Eventing.Reader.CoTaskMemSafeHandle */ 

(function CoTaskMemSafeHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Diagnostics.Eventing.Reader.CoTaskMemSafeHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemory", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IntPtr"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMemory", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IntPtr")], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Linq.Expressions.ReadOnlyCollectionExtensions */ 

(function ReadOnlyCollectionExtensions$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Expressions.ReadOnlyCollectionExtensions", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "ToReadOnlyCollection", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Linq.Expressions.ReadOnlyCollectionExtensions/DefaultReadOnlyCollection`1 */ 

(function DefaultReadOnlyCollection$b1$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Expressions.ReadOnlyCollectionExtensions/DefaultReadOnlyCollection`1", false, ["T"], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "get_Empty", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [new JSIL.GenericParameter("T", "System.Linq.Expressions.ReadOnlyCollectionExtensions/DefaultReadOnlyCollection`1")]), [], [])
    );

    $.Field({Static:true , Public:false}, "_defaultCollection", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")])); 
    $.GenericProperty({Static:true , Public:false}, "Empty", $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [new JSIL.GenericParameter("T", "System.Linq.Expressions.ReadOnlyCollectionExtensions/DefaultReadOnlyCollection`1")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.SystemCore_EnumerableDebugView`1 */ 

(function SystemCore_EnumerableDebugView$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.SystemCore_EnumerableDebugView`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.SystemCore_EnumerableDebugView`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.SystemCore_EnumerableDebugView`1")]), [], [])
    );

    $.Field({Static:false, Public:false}, "enumerable", $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]))
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm09.System.Diagnostics.DebuggerBrowsableState.Never]; }); 
    $.Field({Static:false, Public:false}, "cachedCollection", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]))
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm09.System.Diagnostics.DebuggerBrowsableState.Never]; }); 
    $.Field({Static:false, Public:false}, "count", $.Int32)
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm09.System.Diagnostics.DebuggerBrowsableState.Never]; }); 
    $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Linq.SystemCore_EnumerableDebugView`1")]))
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm09.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.SystemCore_EnumerableDebugViewEmptyException */ 

(function SystemCore_EnumerableDebugViewEmptyException$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Exception"), 
      Name: "System.Linq.SystemCore_EnumerableDebugViewEmptyException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Empty", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Property({Static:false, Public:true }, "Empty", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.SystemCore_EnumerableDebugView */ 

(function SystemCore_EnumerableDebugView$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.SystemCore_EnumerableDebugView", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.IEnumerable")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Object]), [], [])
    );

    $.Field({Static:false, Public:false}, "enumerable", $asm09.TypeRef("System.Collections.IEnumerable"))
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm09.System.Diagnostics.DebuggerBrowsableState.Never]; }); 
    $.Field({Static:false, Public:false}, "cachedCollection", $jsilcore.TypeRef("System.Array", [$.Object]))
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm09.System.Diagnostics.DebuggerBrowsableState.Never]; }); 
    $.Field({Static:false, Public:false}, "count", $.Int32)
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm09.System.Diagnostics.DebuggerBrowsableState.Never]; }); 
    $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$.Object]))
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm09.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Strings */ 

(function Strings$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Strings", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "Argument_InvalidId", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Argument_InvalidSerializedString", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentArrayHasTooManyElements", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotIEnumerableGeneric", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotLambda", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotSequence", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotValid", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesAmbiguousOverlap", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesInvalidOverlap", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesNoNulls", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesOutOfOrder", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesrDaylightSavingTimeOverlap", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_ConvertMismatch", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeHasTicks", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeHasTimeOfDay", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeIsInvalid", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeIsNotAmbiguous", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeKindMustBeUnspecified", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_DateTimeOffsetIsNotAmbiguous", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_InvalidREG_TZI_FORMAT", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_OutOfOrderDateTimes", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_TimeSpanHasSeconds", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_TimeZoneInfoBadTZif", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_TimeZoneInfoInvalidTZif", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Argument_TransitionTimesAreIdentical", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_DateTimeBadTicks", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_DayOfWeek", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_DayParam", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_MonthParam", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_UtcOffset", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_UtcOffsetAndDaylightDelta", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentOutOfRange_Week", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EmptyEnumerable", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncompatibleElementTypes", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidTimeZone_InvalidWin32APIData", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MoreThanOneElement", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MoreThanOneMatch", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoElements", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoMatch", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OwningTeam", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_BinaryOpMustUseAsParallel", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_ToArray_DimensionRequired", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_WithCancellation_TokenSourceDisposed", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_WithMergeOptions_InvalidOptions", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelEnumerable_WithQueryExecutionMode_InvalidMode", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelPartitionable_IncorretElementCount", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelPartitionable_NullElement", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelPartitionable_NullReturn", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateDOP", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateExecutionMode", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateMergeOptions", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateTaskScheduler", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_DuplicateWithCancellation", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_InvalidAsOrderedCall", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_InvalidNonGenericAsOrderedCall", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParallelQuery_PartitionerNotOrderable", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PartitionerQueryOperator_NullPartition", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PartitionerQueryOperator_NullPartitionList", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PartitionerQueryOperator_WrongNumberOfPartitions", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PLINQ_CommonEnumerator_Current_NotStarted", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PLINQ_DisposeRequested", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PLINQ_EnumerationPreviouslyFailed", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PLINQ_ExternalCancellationRequested", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidTimeZone_InvalidRegistryData", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoArgumentMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnTypeMatchingArguments", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoNameMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Security_CannotReadRegistryData", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Serialization_CorruptField", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Serialization_InvalidEscapeSequence", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimeZoneNotFound_MissingRegistryData", 
      new JSIL.MethodSignature($.String, [$.Object], [])
    );

    $.Property({Static:true , Public:false}, "OwningTeam", $.String);

    $.Property({Static:true , Public:false}, "IncompatibleElementTypes", $.String);

    $.Property({Static:true , Public:false}, "MoreThanOneElement", $.String);

    $.Property({Static:true , Public:false}, "MoreThanOneMatch", $.String);

    $.Property({Static:true , Public:false}, "NoElements", $.String);

    $.Property({Static:true , Public:false}, "NoMatch", $.String);

    $.Property({Static:true , Public:false}, "EmptyEnumerable", $.String);

    $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesNoNulls", $.String);

    $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesOutOfOrder", $.String);

    $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesAmbiguousOverlap", $.String);

    $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesrDaylightSavingTimeOverlap", $.String);

    $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange", $.String);

    $.Property({Static:true , Public:false}, "Argument_AdjustmentRulesInvalidOverlap", $.String);

    $.Property({Static:true , Public:false}, "Argument_ConvertMismatch", $.String);

    $.Property({Static:true , Public:false}, "Argument_DateTimeHasTimeOfDay", $.String);

    $.Property({Static:true , Public:false}, "Argument_DateTimeIsInvalid", $.String);

    $.Property({Static:true , Public:false}, "Argument_DateTimeIsNotAmbiguous", $.String);

    $.Property({Static:true , Public:false}, "Argument_DateTimeOffsetIsNotAmbiguous", $.String);

    $.Property({Static:true , Public:false}, "Argument_DateTimeKindMustBeUnspecified", $.String);

    $.Property({Static:true , Public:false}, "Argument_DateTimeHasTicks", $.String);

    $.Property({Static:true , Public:false}, "Argument_InvalidREG_TZI_FORMAT", $.String);

    $.Property({Static:true , Public:false}, "Argument_OutOfOrderDateTimes", $.String);

    $.Property({Static:true , Public:false}, "Argument_TimeSpanHasSeconds", $.String);

    $.Property({Static:true , Public:false}, "Argument_TimeZoneInfoBadTZif", $.String);

    $.Property({Static:true , Public:false}, "Argument_TimeZoneInfoInvalidTZif", $.String);

    $.Property({Static:true , Public:false}, "Argument_TransitionTimesAreIdentical", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_DayParam", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_DayOfWeek", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_MonthParam", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_UtcOffset", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_UtcOffsetAndDaylightDelta", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_Week", $.String);

    $.Property({Static:true , Public:false}, "InvalidTimeZone_InvalidWin32APIData", $.String);

    $.Property({Static:true , Public:false}, "ArgumentOutOfRange_DateTimeBadTicks", $.String);

    $.Property({Static:true , Public:false}, "PLINQ_CommonEnumerator_Current_NotStarted", $.String);

    $.Property({Static:true , Public:false}, "PLINQ_ExternalCancellationRequested", $.String);

    $.Property({Static:true , Public:false}, "PLINQ_DisposeRequested", $.String);

    $.Property({Static:true , Public:false}, "PLINQ_EnumerationPreviouslyFailed", $.String);

    $.Property({Static:true , Public:false}, "ParallelPartitionable_NullReturn", $.String);

    $.Property({Static:true , Public:false}, "ParallelPartitionable_NullElement", $.String);

    $.Property({Static:true , Public:false}, "ParallelPartitionable_IncorretElementCount", $.String);

    $.Property({Static:true , Public:false}, "ParallelEnumerable_ToArray_DimensionRequired", $.String);

    $.Property({Static:true , Public:false}, "ParallelEnumerable_WithQueryExecutionMode_InvalidMode", $.String);

    $.Property({Static:true , Public:false}, "ParallelEnumerable_WithMergeOptions_InvalidOptions", $.String);

    $.Property({Static:true , Public:false}, "ParallelEnumerable_BinaryOpMustUseAsParallel", $.String);

    $.Property({Static:true , Public:false}, "ParallelEnumerable_WithCancellation_TokenSourceDisposed", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_InvalidAsOrderedCall", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_InvalidNonGenericAsOrderedCall", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_PartitionerNotOrderable", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateTaskScheduler", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateDOP", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateWithCancellation", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateExecutionMode", $.String);

    $.Property({Static:true , Public:false}, "ParallelQuery_DuplicateMergeOptions", $.String);

    $.Property({Static:true , Public:false}, "PartitionerQueryOperator_NullPartitionList", $.String);

    $.Property({Static:true , Public:false}, "PartitionerQueryOperator_WrongNumberOfPartitions", $.String);

    $.Property({Static:true , Public:false}, "PartitionerQueryOperator_NullPartition", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.EnumerableWrapperWeakToStrong */ 

(function EnumerableWrapperWeakToStrong$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.EnumerableWrapperWeakToStrong", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.IEnumerable")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(1, "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_wrappedEnumerable", $asm09.TypeRef("System.Collections.IEnumerable")); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.EnumerableWrapperWeakToStrong/WrapperEnumeratorWeakToStrong */ 

(function WrapperEnumeratorWeakToStrong$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Parallel.EnumerableWrapperWeakToStrong/WrapperEnumeratorWeakToStrong", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.IEnumerator")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(2, "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(2, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Reset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Dispose");

    $.Field({Static:false, Public:false}, "m_wrappedEnumerator", $asm09.TypeRef("System.Collections.IEnumerator")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm09.TypeRef("System.IDisposable"), 
      /* 2 */ $asm09.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.ParallelEnumerableWrapper */ 

(function ParallelEnumerableWrapper$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Object")]), 
      Name: "System.Linq.Parallel.ParallelEnumerableWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.IEnumerable")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumeratorUntyped", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm09.TypeRef("System.Collections.IEnumerable")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.RangeEnumerable */ 

(function RangeEnumerable$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.ParallelQuery`1", [$asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.RangeEnumerable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Int32]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPartitions", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.Int32])]), [$.Int32], [])
    );

    $.Field({Static:false, Public:false}, "m_from", $.Int32); 
    $.Field({Static:false, Public:false}, "m_count", $.Int32); 
    $.ImplementInterfaces(
      /* 3 */ $asm0D.TypeRef("System.Linq.Parallel.IParallelPartitionable`1", [$.Int32])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.RangeEnumerable/RangeEnumerator */ 

(function RangeEnumerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Int32"), $asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.RangeEnumerable/RangeEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_from", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_count", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_initialIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "m_currentCount", $asm0D.TypeRef("System.Linq.Parallel.Shared`1", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DecimalAverageAggregationOperator */ 

(function DecimalAverageAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Decimal"), $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Decimal"), $asm09.TypeRef("System.Int64")]), 
          $asm09.TypeRef("System.Decimal")
        ]), 
      Name: "System.Linq.Parallel.DecimalAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Decimal")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Decimal"), $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Decimal"), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DecimalAverageAggregationOperator/DecimalAverageAggregationOperatorEnumerator`1 */ 

(function DecimalAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Decimal"), $asm09.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.DecimalAverageAggregationOperator/DecimalAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Decimal"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DecimalAverageAggregationOperator/DecimalAverageAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Decimal"), $.Int64])])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Decimal"), $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DecimalMinMaxAggregationOperator */ 

(function DecimalMinMaxAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Decimal"), $asm09.TypeRef("System.Decimal"), 
          $asm09.TypeRef("System.Decimal")
        ]), 
      Name: "System.Linq.Parallel.DecimalMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Decimal")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Decimal"), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Decimal"), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DecimalMinMaxAggregationOperator/DecimalMinMaxAggregationOperatorEnumerator`1 */ 

(function DecimalMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Decimal")]), 
      Name: "System.Linq.Parallel.DecimalMinMaxAggregationOperator/DecimalMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Decimal"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DecimalMinMaxAggregationOperator/DecimalMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Decimal")])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Decimal"), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "m_sign", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DecimalSumAggregationOperator */ 

(function DecimalSumAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Decimal"), $asm09.TypeRef("System.Decimal"), 
          $asm09.TypeRef("System.Decimal")
        ]), 
      Name: "System.Linq.Parallel.DecimalSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Decimal")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Decimal"), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Decimal"), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Decimal"), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DecimalSumAggregationOperator/DecimalSumAggregationOperatorEnumerator`1 */ 

(function DecimalSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Decimal")]), 
      Name: "System.Linq.Parallel.DecimalSumAggregationOperator/DecimalSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Decimal"), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DecimalSumAggregationOperator/DecimalSumAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Decimal")])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Decimal"), $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DoubleAverageAggregationOperator */ 

(function DoubleAverageAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Double"), $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Double"), $asm09.TypeRef("System.Int64")]), 
          $asm09.TypeRef("System.Double")
        ]), 
      Name: "System.Linq.Parallel.DoubleAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DoubleAverageAggregationOperator/DoubleAverageAggregationOperatorEnumerator`1 */ 

(function DoubleAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Double"), $asm09.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.DoubleAverageAggregationOperator/DoubleAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DoubleAverageAggregationOperator/DoubleAverageAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64])])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DoubleMinMaxAggregationOperator */ 

(function DoubleMinMaxAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Double"), $asm09.TypeRef("System.Double"), 
          $asm09.TypeRef("System.Double")
        ]), 
      Name: "System.Linq.Parallel.DoubleMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DoubleMinMaxAggregationOperator/DoubleMinMaxAggregationOperatorEnumerator`1 */ 

(function DoubleMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Double")]), 
      Name: "System.Linq.Parallel.DoubleMinMaxAggregationOperator/DoubleMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DoubleMinMaxAggregationOperator/DoubleMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Double])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "m_sign", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DoubleSumAggregationOperator */ 

(function DoubleSumAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Double"), $asm09.TypeRef("System.Double"), 
          $asm09.TypeRef("System.Double")
        ]), 
      Name: "System.Linq.Parallel.DoubleSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.DoubleSumAggregationOperator/DoubleSumAggregationOperatorEnumerator`1 */ 

(function DoubleSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Double")]), 
      Name: "System.Linq.Parallel.DoubleSumAggregationOperator/DoubleSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.DoubleSumAggregationOperator/DoubleSumAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Double])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FloatAverageAggregationOperator */ 

(function FloatAverageAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Single"), $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Double"), $asm09.TypeRef("System.Int64")]), 
          $asm09.TypeRef("System.Single")
        ]), 
      Name: "System.Linq.Parallel.FloatAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Single, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FloatAverageAggregationOperator/FloatAverageAggregationOperatorEnumerator`1 */ 

(function FloatAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Double"), $asm09.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.FloatAverageAggregationOperator/FloatAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.FloatAverageAggregationOperator/FloatAverageAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64])])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FloatMinMaxAggregationOperator */ 

(function FloatMinMaxAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single"), 
          $asm09.TypeRef("System.Single")
        ]), 
      Name: "System.Linq.Parallel.FloatMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Single, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FloatMinMaxAggregationOperator/FloatMinMaxAggregationOperatorEnumerator`1 */ 

(function FloatMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Single")]), 
      Name: "System.Linq.Parallel.FloatMinMaxAggregationOperator/FloatMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.FloatMinMaxAggregationOperator/FloatMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Single])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "m_sign", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FloatSumAggregationOperator */ 

(function FloatSumAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Double"), 
          $asm09.TypeRef("System.Single")
        ]), 
      Name: "System.Linq.Parallel.FloatSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Double, $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Single, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.FloatSumAggregationOperator/FloatSumAggregationOperatorEnumerator`1 */ 

(function FloatSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Double")]), 
      Name: "System.Linq.Parallel.FloatSumAggregationOperator/FloatSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.FloatSumAggregationOperator/FloatSumAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Double])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Single, $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntAverageAggregationOperator */ 

(function IntAverageAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Int32"), $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Int64"), $asm09.TypeRef("System.Int64")]), 
          $asm09.TypeRef("System.Double")
        ]), 
      Name: "System.Linq.Parallel.IntAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntAverageAggregationOperator/IntAverageAggregationOperatorEnumerator`1 */ 

(function IntAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Int64"), $asm09.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.IntAverageAggregationOperator/IntAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.IntAverageAggregationOperator/IntAverageAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64])])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntMinMaxAggregationOperator */ 

(function IntMinMaxAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Int32"), $asm09.TypeRef("System.Int32"), 
          $asm09.TypeRef("System.Int32")
        ]), 
      Name: "System.Linq.Parallel.IntMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntMinMaxAggregationOperator/IntMinMaxAggregationOperatorEnumerator`1 */ 

(function IntMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.IntMinMaxAggregationOperator/IntMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.IntMinMaxAggregationOperator/IntMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntSumAggregationOperator */ 

(function IntSumAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Int32"), $asm09.TypeRef("System.Int32"), 
          $asm09.TypeRef("System.Int32")
        ]), 
      Name: "System.Linq.Parallel.IntSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.IntSumAggregationOperator/IntSumAggregationOperatorEnumerator`1 */ 

(function IntSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Int32")]), 
      Name: "System.Linq.Parallel.IntSumAggregationOperator/IntSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.IntSumAggregationOperator/IntSumAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int32, $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongAverageAggregationOperator */ 

(function LongAverageAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Int64"), $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Int64"), $asm09.TypeRef("System.Int64")]), 
          $asm09.TypeRef("System.Double")
        ]), 
      Name: "System.Linq.Parallel.LongAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Double, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongAverageAggregationOperator/LongAverageAggregationOperatorEnumerator`1 */ 

(function LongAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Int64"), $asm09.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.LongAverageAggregationOperator/LongAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.LongAverageAggregationOperator/LongAverageAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64])])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongMinMaxAggregationOperator */ 

(function LongMinMaxAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Int64"), $asm09.TypeRef("System.Int64"), 
          $asm09.TypeRef("System.Int64")
        ]), 
      Name: "System.Linq.Parallel.LongMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongMinMaxAggregationOperator/LongMinMaxAggregationOperatorEnumerator`1 */ 

(function LongMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Int64")]), 
      Name: "System.Linq.Parallel.LongMinMaxAggregationOperator/LongMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.LongMinMaxAggregationOperator/LongMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "m_sign", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongSumAggregationOperator */ 

(function LongSumAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Int64"), $asm09.TypeRef("System.Int64"), 
          $asm09.TypeRef("System.Int64")
        ]), 
      Name: "System.Linq.Parallel.LongSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.LongSumAggregationOperator/LongSumAggregationOperatorEnumerator`1 */ 

(function LongSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Int64")]), 
      Name: "System.Linq.Parallel.LongSumAggregationOperator/LongSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, new JSIL.GenericParameter("TKey", "System.Linq.Parallel.LongSumAggregationOperator/LongSumAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int64])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$.Int64, $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDecimalAverageAggregationOperator */ 

(function NullableDecimalAverageAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Decimal"), $asm09.TypeRef("System.Int64")]), 
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])
        ]), 
      Name: "System.Linq.Parallel.NullableDecimalAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Decimal"), $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDecimalAverageAggregationOperator/NullableDecimalAverageAggregationOperatorEnumerator`1 */ 

(function NullableDecimalAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Decimal"), $asm09.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableDecimalAverageAggregationOperator/NullableDecimalAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableDecimalAverageAggregationOperator/NullableDecimalAverageAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Decimal"), $.Int64])])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDecimalMinMaxAggregationOperator */ 

(function NullableDecimalMinMaxAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), 
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])
        ]), 
      Name: "System.Linq.Parallel.NullableDecimalMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDecimalMinMaxAggregationOperator/NullableDecimalMinMaxAggregationOperatorEnumerator`1 */ 

(function NullableDecimalMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])]), 
      Name: "System.Linq.Parallel.NullableDecimalMinMaxAggregationOperator/NullableDecimalMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableDecimalMinMaxAggregationOperator/NullableDecimalMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "m_sign", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDecimalSumAggregationOperator */ 

(function NullableDecimalSumAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), 
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])
        ]), 
      Name: "System.Linq.Parallel.NullableDecimalSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDecimalSumAggregationOperator/NullableDecimalSumAggregationOperatorEnumerator`1 */ 

(function NullableDecimalSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])]), 
      Name: "System.Linq.Parallel.NullableDecimalSumAggregationOperator/NullableDecimalSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableDecimalSumAggregationOperator/NullableDecimalSumAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")])])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Decimal")]), $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDoubleAverageAggregationOperator */ 

(function NullableDoubleAverageAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Double")]), $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Double"), $asm09.TypeRef("System.Int64")]), 
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Double")])
        ]), 
      Name: "System.Linq.Parallel.NullableDoubleAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Double])])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Double]), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDoubleAverageAggregationOperator/NullableDoubleAverageAggregationOperatorEnumerator`1 */ 

(function NullableDoubleAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Double"), $asm09.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableDoubleAverageAggregationOperator/NullableDoubleAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Double]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableDoubleAverageAggregationOperator/NullableDoubleAverageAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64])])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Double]), $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDoubleMinMaxAggregationOperator */ 

(function NullableDoubleMinMaxAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Double")]), $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Double")]), 
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Double")])
        ]), 
      Name: "System.Linq.Parallel.NullableDoubleMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Double])]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Double]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Double]), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDoubleMinMaxAggregationOperator/NullableDoubleMinMaxAggregationOperatorEnumerator`1 */ 

(function NullableDoubleMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Double")])]), 
      Name: "System.Linq.Parallel.NullableDoubleMinMaxAggregationOperator/NullableDoubleMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Double]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableDoubleMinMaxAggregationOperator/NullableDoubleMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Nullable`1", [$.Double])])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Double]), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "m_sign", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDoubleSumAggregationOperator */ 

(function NullableDoubleSumAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Double")]), $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Double")]), 
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Double")])
        ]), 
      Name: "System.Linq.Parallel.NullableDoubleSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Double])])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Double]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Double]), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableDoubleSumAggregationOperator/NullableDoubleSumAggregationOperatorEnumerator`1 */ 

(function NullableDoubleSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Double")])]), 
      Name: "System.Linq.Parallel.NullableDoubleSumAggregationOperator/NullableDoubleSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Double]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableDoubleSumAggregationOperator/NullableDoubleSumAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Nullable`1", [$.Double])])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Double]), $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableFloatAverageAggregationOperator */ 

(function NullableFloatAverageAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Single")]), $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Double"), $asm09.TypeRef("System.Int64")]), 
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Single")])
        ]), 
      Name: "System.Linq.Parallel.NullableFloatAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Single])])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Single]), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableFloatAverageAggregationOperator/NullableFloatAverageAggregationOperatorEnumerator`1 */ 

(function NullableFloatAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Double"), $asm09.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableFloatAverageAggregationOperator/NullableFloatAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Single]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableFloatAverageAggregationOperator/NullableFloatAverageAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Double, $.Int64])])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Single]), $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableFloatMinMaxAggregationOperator */ 

(function NullableFloatMinMaxAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Single")]), $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Single")]), 
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Single")])
        ]), 
      Name: "System.Linq.Parallel.NullableFloatMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Single])]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Single]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Single]), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableFloatMinMaxAggregationOperator/NullableFloatMinMaxAggregationOperatorEnumerator`1 */ 

(function NullableFloatMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Single")])]), 
      Name: "System.Linq.Parallel.NullableFloatMinMaxAggregationOperator/NullableFloatMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Single]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableFloatMinMaxAggregationOperator/NullableFloatMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Nullable`1", [$.Single])])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Single]), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "m_sign", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableFloatSumAggregationOperator */ 

(function NullableFloatSumAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Single")]), $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Double")]), 
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Single")])
        ]), 
      Name: "System.Linq.Parallel.NullableFloatSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Single])])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Double]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Single]), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Single]), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableFloatSumAggregationOperator/NullableFloatSumAggregationOperatorEnumerator`1 */ 

(function NullableFloatSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Double")])]), 
      Name: "System.Linq.Parallel.NullableFloatSumAggregationOperator/NullableFloatSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Single]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableFloatSumAggregationOperator/NullableFloatSumAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Nullable`1", [$.Double])])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Single]), $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableIntAverageAggregationOperator */ 

(function NullableIntAverageAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Int32")]), $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Int64"), $asm09.TypeRef("System.Int64")]), 
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Double")])
        ]), 
      Name: "System.Linq.Parallel.NullableIntAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Int32])])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int32]), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableIntAverageAggregationOperator/NullableIntAverageAggregationOperatorEnumerator`1 */ 

(function NullableIntAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Int64"), $asm09.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableIntAverageAggregationOperator/NullableIntAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int32]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableIntAverageAggregationOperator/NullableIntAverageAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64])])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int32]), $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableIntMinMaxAggregationOperator */ 

(function NullableIntMinMaxAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Int32")]), $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Int32")]), 
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Int32")])
        ]), 
      Name: "System.Linq.Parallel.NullableIntMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Int32])]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int32]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int32]), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableIntMinMaxAggregationOperator/NullableIntMinMaxAggregationOperatorEnumerator`1 */ 

(function NullableIntMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Int32")])]), 
      Name: "System.Linq.Parallel.NullableIntMinMaxAggregationOperator/NullableIntMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int32]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableIntMinMaxAggregationOperator/NullableIntMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Nullable`1", [$.Int32])])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int32]), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "m_sign", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableIntSumAggregationOperator */ 

(function NullableIntSumAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Int32")]), $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Int32")]), 
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Int32")])
        ]), 
      Name: "System.Linq.Parallel.NullableIntSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Int32])])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int32]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int32]), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableIntSumAggregationOperator/NullableIntSumAggregationOperatorEnumerator`1 */ 

(function NullableIntSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Int32")])]), 
      Name: "System.Linq.Parallel.NullableIntSumAggregationOperator/NullableIntSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int32]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableIntSumAggregationOperator/NullableIntSumAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Nullable`1", [$.Int32])])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int32]), $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableLongAverageAggregationOperator */ 

(function NullableLongAverageAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Int64")]), $asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Int64"), $asm09.TypeRef("System.Int64")]), 
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Double")])
        ]), 
      Name: "System.Linq.Parallel.NullableLongAverageAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Int64])])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int64]), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Double]), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableLongAverageAggregationOperator/NullableLongAverageAggregationOperatorEnumerator`1 */ 

(function NullableLongAverageAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$asm09.TypeRef("System.Int64"), $asm09.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableLongAverageAggregationOperator/NullableLongAverageAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int64]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableLongAverageAggregationOperator/NullableLongAverageAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm0D.TypeRef("System.Linq.Parallel.Pair`2", [$.Int64, $.Int64])])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int64]), $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableLongMinMaxAggregationOperator */ 

(function NullableLongMinMaxAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Int64")]), $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Int64")]), 
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Int64")])
        ]), 
      Name: "System.Linq.Parallel.NullableLongMinMaxAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Int64])]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int64]), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_sign", $.Int32); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableLongMinMaxAggregationOperator/NullableLongMinMaxAggregationOperatorEnumerator`1 */ 

(function NullableLongMinMaxAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableLongMinMaxAggregationOperator/NullableLongMinMaxAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int64]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableLongMinMaxAggregationOperator/NullableLongMinMaxAggregationOperatorEnumerator`1")]), $.Int32, 
          $.Int32, $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Nullable`1", [$.Int64])])], [])
    );

    $.Field({Static:false, Public:false}, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int64]), $.GenericParameter("TKey")])); 
    $.Field({Static:false, Public:false}, "m_sign", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableLongSumAggregationOperator */ 

(function NullableLongSumAggregationOperator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperator`3", [
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Int64")]), $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Int64")]), 
          $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Int64")])
        ]), 
      Name: "System.Linq.Parallel.NullableLongSumAggregationOperator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.Nullable`1", [$.Int64])])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateEnumerator", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int64]), $.Int32]), [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int64]), "!!0"]), $.Object, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], ["TKey"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InternalAggregate", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int64]), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Exception")])], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.NullableLongSumAggregationOperator/NullableLongSumAggregationOperatorEnumerator`1 */ 

(function NullableLongSumAggregationOperatorEnumerator$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Parallel.InlinedAggregationOperatorEnumerator`1", [$asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.Int64")])]), 
      Name: "System.Linq.Parallel.NullableLongSumAggregationOperator/NullableLongSumAggregationOperatorEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey"], 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int64]), new JSIL.GenericParameter("TKey", "System.Linq.Parallel.NullableLongSumAggregationOperator/NullableLongSumAggregationOperatorEnumerator`1")]), $.Int32, 
          $asm09.TypeRef("System.Threading.CancellationToken")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNextCore", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Nullable`1", [$.Int64])])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_source", $asm0D.TypeRef("System.Linq.Parallel.QueryOperatorEnumerator`2", [$asm09.TypeRef("System.Nullable`1", [$.Int64]), $.GenericParameter("TKey")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.PlinqEtwProvider */ 

(function PlinqEtwProvider$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Diagnostics.Eventing.EventProviderBase"), 
      Name: "System.Linq.Parallel.PlinqEtwProvider", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NextQueryId", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryBegin", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryEnd", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryFork", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParallelQueryJoin", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.Field({Static:true , Public:true }, "Log", $.Type); 
    $.Field({Static:true , Public:false}, "s_queryId", $.Int32, 0); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Parallel.TraceHelpers */ 

(function TraceHelpers$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Parallel.TraceHelpers", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "NotYetImplemented", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotYetImplemented", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotYetImplemented", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetVerbose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["PFXTRACE"]; });

    $.ExternalMethod({Static:true , Public:false}, "TraceError", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["PFXTRACE"]; });

    $.ExternalMethod({Static:true , Public:false}, "TraceInfo", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["PFXTRACE"]; });

    $.ExternalMethod({Static:true , Public:false}, "TraceWarning", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["PFXTRACE"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.EncryptionMode */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.EncryptionMode", false, {
    Encrypt: 0, 
    Decrypt: 1
  }, false
);

/* class System.Security.Cryptography.CapiSymmetricAlgorithm */ 

(function CapiSymmetricAlgorithm$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CapiSymmetricAlgorithm", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm09.TypeRef("System.Security.Cryptography.CipherMode"), 
          $asm09.TypeRef("System.Security.Cryptography.PaddingMode"), $asm0D.TypeRef("System.Security.Cryptography.EncryptionMode")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "DecryptBlocks", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "DepadBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EncryptBlocks", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReuseTransform", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTransformMultipleBlocks", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InputBlockSize", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OutputBlockSize", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "PadBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ProcessIV", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm09.TypeRef("System.Security.Cryptography.CipherMode")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "RawDecryptBlocks", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetupKey", 
      new JSIL.MethodSignature($asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), [
          $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm09.TypeRef("System.Security.Cryptography.CipherMode"), $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TransformBlock", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TransformFinalBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_blockSize", $.Int32); 
    $.Field({Static:false, Public:false}, "m_depadBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "m_encryptionMode", $asm0D.TypeRef("System.Security.Cryptography.EncryptionMode")); 
    $.Field({Static:false, Public:false}, "m_key", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")); 
    $.Field({Static:false, Public:false}, "m_paddingMode", $asm09.TypeRef("System.Security.Cryptography.PaddingMode")); 
    $.Field({Static:false, Public:false}, "m_provider", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle")); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanReuseTransform", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTransformMultipleBlocks", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "InputBlockSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "OutputBlockSize", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Security.Cryptography.ICryptoTransform"), 
      /* 1 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.CngKeyTypes */ 

JSIL.MakeEnum(
  "System.Security.Cryptography.CngKeyTypes", false, {
    None: 0, 
    MachineKey: 32
  }, true
);

/* class System.Security.Cryptography.Rfc4050KeyFormatter */ 

(function Rfc4050KeyFormatter$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Security.Cryptography.Rfc4050KeyFormatter", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "FromXml", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngKey"), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurveUrn", 
      new JSIL.MethodSignature($.String, [$asm0D.TypeRef("System.Security.Cryptography.CngAlgorithm")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKeySize", 
      new JSIL.MethodSignature($.Int32, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadAlgorithm", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.CngAlgorithm"), [$asm12.TypeRef("System.Xml.XPath.XPathNavigator")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadPublicKey", 
      new JSIL.MethodSignature(null, [
          $asm12.TypeRef("System.Xml.XPath.XPathNavigator"), $jsilcore.TypeRef("JSIL.Reference", [$asm10.TypeRef("System.Numerics.BigInteger")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm10.TypeRef("System.Numerics.BigInteger")])
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXml", 
      new JSIL.MethodSignature($.String, [$asm0D.TypeRef("System.Security.Cryptography.CngKey")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteDomainParameters", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Xml.XmlWriter"), $asm0D.TypeRef("System.Security.Cryptography.CngKey")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WritePublicKeyValue", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Xml.XmlWriter"), $asm0D.TypeRef("System.Security.Cryptography.CngKey")], [])
    );

    $.Constant({Static:true , Public:false}, "DomainParametersRoot", "DomainParameters"); 
    $.Constant({Static:true , Public:false}, "ECDHRoot", "ECDHKeyValue"); 
    $.Constant({Static:true , Public:false}, "ECDsaRoot", "ECDSAKeyValue"); 
    $.Constant({Static:true , Public:false}, "NamedCurveElement", "NamedCurve"); 
    $.Constant({Static:true , Public:false}, "Namespace", "http://www.w3.org/2001/04/xmldsig-more#"); 
    $.Constant({Static:true , Public:false}, "PublicKeyRoot", "PublicKey"); 
    $.Constant({Static:true , Public:false}, "UrnAttribute", "URN"); 
    $.Constant({Static:true , Public:false}, "ValueAttribute", "Value"); 
    $.Constant({Static:true , Public:false}, "XElement", "X"); 
    $.Constant({Static:true , Public:false}, "YElement", "Y"); 
    $.Constant({Static:true , Public:false}, "XsiTypeAttribute", "type"); 
    $.Constant({Static:true , Public:false}, "XsiTypeAttributeValue", "PrimeFieldElemType"); 
    $.Constant({Static:true , Public:false}, "XsiNamespace", "http://www.w3.org/2001/XMLSchema-instance"); 
    $.Constant({Static:true , Public:false}, "XsiNamespacePrefix", "xsi"); 
    $.Constant({Static:true , Public:false}, "Prime256CurveUrn", "urn:oid:1.2.840.10045.3.1.7"); 
    $.Constant({Static:true , Public:false}, "Prime384CurveUrn", "urn:oid:1.3.132.0.34"); 
    $.Constant({Static:true , Public:false}, "Prime521CurveUrn", "urn:oid:1.3.132.0.35"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Security.Cryptography.Xml");
/* class System.Security.Cryptography.Xml.ManifestSignedXml */ 

(function ManifestSignedXml$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Security.Cryptography.Xml.SignedXml"), 
      Name: "System.Security.Cryptography.Xml.ManifestSignedXml", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm12.TypeRef("System.Xml.XmlDocument"), $asm0D.TypeRef("System.Security.ManifestKinds")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "BackwardHexToBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildSignatureChain", 
      new JSIL.MethodSignature($asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), [
          $asm0D.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_SIGNER_INFO"), $asm12.TypeRef("System.Xml.XmlElement"), 
          $asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CalculateManifestPublicKeyToken", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CalculateSignerPublicKeyToken", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm09.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CompareBytes", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetIdElement", 
      new JSIL.MethodSignature($asm12.TypeRef("System.Xml.XmlElement"), [$asm12.TypeRef("System.Xml.XmlDocument"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTimestampInformation", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation"), [$asm0D.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AXL_AUTHENTICODE_TIMESTAMPER_INFO"), $asm12.TypeRef("System.Xml.XmlElement")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "HexStringToBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "HexToByte", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Byte]), [$.Char], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MapRevocationFlags", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.X509Certificates.X509Native/AxlVerificationFlags"), [$asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodeExpectedHash", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm12.TypeRef("System.Xml.XmlElement")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodePublisher", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodeSignature", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation"), [
          $asm12.TypeRef("System.Xml.XmlElement"), $asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), 
          $asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodeSignatureIdentity", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm12.TypeRef("System.Xml.XmlElement")], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "VerifySignature", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.ManifestSignatureInformation"), [$asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm0B.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "VerifyStrongNameSignature", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"), [$asm12.TypeRef("System.Xml.XmlElement")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "VerifyStrongNameSignatureId", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm12.TypeRef("System.Xml.XmlElement")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyStrongNameSignatureTransforms", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm15.TypeRef("System.Security.Cryptography.Xml.SignedInfo")], [])
    );

    $.Field({Static:false, Public:false}, "m_manifest", $asm0D.TypeRef("System.Security.ManifestKinds")); 
    $.Field({Static:false, Public:false}, "m_manifestXml", $asm12.TypeRef("System.Xml.XmlDocument")); 
    $.Field({Static:false, Public:false}, "m_namespaceManager", $asm12.TypeRef("System.Xml.XmlNamespaceManager")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.SafeLibraryHandle */ 

(function SafeLibraryHandle$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeLibraryHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm09.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Linq.Expressions.LogicalBinaryExpression */ 

(function LogicalBinaryExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), 
      Name: "System.Linq.Expressions.LogicalBinaryExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_nodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.AssignBinaryExpression */ 

(function AssignBinaryExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), 
      Name: "System.Linq.Expressions.AssignBinaryExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.CoalesceConversionBinaryExpression */ 

(function CoalesceConversionBinaryExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), 
      Name: "System.Linq.Expressions.CoalesceConversionBinaryExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetConversion", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_conversion", $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")); 
    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.SimpleBinaryExpression */ 

(function SimpleBinaryExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.BinaryExpression"), 
      Name: "System.Linq.Expressions.SimpleBinaryExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_nodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodBinaryExpression */ 

(function MethodBinaryExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.SimpleBinaryExpression"), 
      Name: "System.Linq.Expressions.MethodBinaryExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Reflection.MethodInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMethod", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MethodInfo"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_method", $asm09.TypeRef("System.Reflection.MethodInfo")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.OpAssignMethodConversionBinaryExpression */ 

(function OpAssignMethodConversionBinaryExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.MethodBinaryExpression"), 
      Name: "System.Linq.Expressions.OpAssignMethodConversionBinaryExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetConversion", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_conversion", $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Block2 */ 

(function Block2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), 
      Name: "System.Linq.Expressions.Block2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.Field({Static:false, Public:false}, "_arg0", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Block3 */ 

(function Block3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), 
      Name: "System.Linq.Expressions.Block3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.Field({Static:false, Public:false}, "_arg0", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Block4 */ 

(function Block4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), 
      Name: "System.Linq.Expressions.Block4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.Field({Static:false, Public:false}, "_arg0", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Block5 */ 

(function Block5$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), 
      Name: "System.Linq.Expressions.Block5", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.Field({Static:false, Public:false}, "_arg0", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg4", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.BlockN */ 

(function BlockN$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), 
      Name: "System.Linq.Expressions.BlockN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.Field({Static:false, Public:false}, "_expressions", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ScopeExpression */ 

(function ScopeExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), 
      Name: "System.Linq.Expressions.ScopeExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_VariableCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_VariablesList", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeVariables", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetVariable", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReuseOrValidateVariables", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
    );

    $.Field({Static:false, Public:false}, "_variables", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "VariableCount", $.Int32);

    $.Property({Static:false, Public:false}, "VariablesList", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Scope1 */ 

(function Scope1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.ScopeExpression"), 
      Name: "System.Linq.Expressions.Scope1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.Field({Static:false, Public:false}, "_body", $.Object); 
    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ScopeN */ 

(function ScopeN$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.ScopeExpression"), 
      Name: "System.Linq.Expressions.ScopeN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ExpressionCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetExpression", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeExpressions", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.Field({Static:false, Public:false}, "_body", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "ExpressionCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ScopeWithType */ 

(function ScopeWithType$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.ScopeN"), 
      Name: "System.Linq.Expressions.ScopeWithType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), 
          $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.BlockExpressionList */ 

(function BlockExpressionList$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.BlockExpressionList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(3, "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_block", $asm0D.TypeRef("System.Linq.Expressions.BlockExpression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg0", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Linq.Expressions.BlockExpressionList/<GetEnumerator>d__0 */ 

(function $lGetEnumerator$gd__0$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.BlockExpressionList/<GetEnumerator>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.Expressions.Expression$g.get_Current", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Linq.Expressions.BlockExpressionList")); 
    $.Field({Static:false, Public:true }, "i", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.Expressions.Expression$g.Current", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.BlockExpressionList/GetEnumerator>d__3 */ 

(function GetEnumerator$gd__3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.BlockExpressionList/GetEnumerator>d__3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.Object); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Linq.Expressions.BlockExpressionList")); 
    $.Field({Static:false, Public:true }, "i", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.FullConditionalExpression */ 

(function FullConditionalExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.ConditionalExpression"), 
      Name: "System.Linq.Expressions.FullConditionalExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFalse", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_false", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.FullConditionalExpressionWithType */ 

(function FullConditionalExpressionWithType$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.FullConditionalExpression"), 
      Name: "System.Linq.Expressions.FullConditionalExpressionWithType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Type")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypedConstantExpression */ 

(function TypedConstantExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.ConstantExpression"), 
      Name: "System.Linq.Expressions.TypedConstantExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_type", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.SpanDebugInfoExpression */ 

(function SpanDebugInfoExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.DebugInfoExpression"), 
      Name: "System.Linq.Expressions.SpanDebugInfoExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Accept", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndColumn", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndLine", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsClear", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartColumn", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartLine", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_startLine", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_startColumn", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_endLine", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_endColumn", $.Int32); 
    $.Property({Static:false, Public:true , Virtual:true }, "StartLine", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "StartColumn", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EndLine", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EndColumn", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsClear", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ClearDebugInfoExpression */ 

(function ClearDebugInfoExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.DebugInfoExpression"), 
      Name: "System.Linq.Expressions.ClearDebugInfoExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.SymbolDocumentInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndColumn", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EndLine", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsClear", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartColumn", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StartLine", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsClear", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "StartLine", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "StartColumn", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EndLine", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EndColumn", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.DebugViewWriter */ 

(function DebugViewWriter$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor"), 
      Name: "System.Linq.Expressions.DebugViewWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.TextWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckBreak", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DebugViewWriter/Flow"), [$asm0D.TypeRef("System.Linq.Expressions.DebugViewWriter/Flow")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ContainsWhiteSpace", 
      new JSIL.MethodSignature($.Boolean, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Dedent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DumpLabel", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatBinder", 
      new JSIL.MethodSignature($.String, [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Base", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Delta", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Depth", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConstantValueSuffix", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDisplayName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFlow", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DebugViewWriter/Flow"), [$asm0D.TypeRef("System.Linq.Expressions.DebugViewWriter/Flow")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetId", 
      new JSIL.MethodSignature($.Int32, ["!!0", $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", ["!!0", $.Int32])])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLabelTargetId", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLabelTargetName", 
      new JSIL.MethodSignature($.String, [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLambdaId", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLambdaName", 
      new JSIL.MethodSignature($.String, [$asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetOperatorPrecedence", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParamId", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Indent", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSimpleExpression", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "NeedsParentheses", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewLine", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.DebugViewWriter/Flow"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      new JSIL.MethodSignature(null, [$.String, $asm0D.TypeRef("System.Linq.Expressions.DebugViewWriter/Flow")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.DebugViewWriter/Flow"), $.String, 
          $asm0D.TypeRef("System.Linq.Expressions.DebugViewWriter/Flow")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OutMember", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm09.TypeRef("System.Reflection.MemberInfo")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParenthesizedVisit", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "QuoteName", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBinary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBlock", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.BlockExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCatchBlock", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConditional", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ConditionalExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ConstantExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDebugInfo", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.DebugInfoExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitDeclarations", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDefault", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.DefaultExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDynamic", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.DynamicExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitElementInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ElementInit"), [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
      new JSIL.MethodSignature(null, [$.Char, $asm09.TypeRef("System.Collections.Generic.IList`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
      new JSIL.MethodSignature(null, [
          $.Char, $.Char, 
          $asm09.TypeRef("System.Collections.Generic.IList`1", ["!!0"])
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
      new JSIL.MethodSignature(null, [
          $.Char, $.Char, 
          $asm09.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), $asm09.TypeRef("System.Action`1", ["!!0"])
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitExtension", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitGoto", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.GotoExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitIndex", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.IndexExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitInvocation", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.InvocationExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLabel", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.LabelExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitListInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ListInitExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLoop", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.LoopExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.MemberExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberAssignment", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm0D.TypeRef("System.Linq.Expressions.MemberAssignment")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.MemberInitExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberListBinding", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm0D.TypeRef("System.Linq.Expressions.MemberListBinding")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberMemberBinding", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm0D.TypeRef("System.Linq.Expressions.MemberMemberBinding")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMethodCall", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNew", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.NewExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNewArray", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.NewArrayExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitRuntimeVariables", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSwitch", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.SwitchExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSwitchCase", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.SwitchCase"), [$asm0D.TypeRef("System.Linq.Expressions.SwitchCase")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTry", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.TryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTypeBinary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.TypeBinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUnary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLambda", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLine", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.IO.TextWriter")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTo", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.Constant({Static:true , Public:false}, "Tab", 4); 
    $.Constant({Static:true , Public:false}, "MaxColumn", 120); 
    $.Field({Static:false, Public:false}, "_out", $asm09.TypeRef("System.IO.TextWriter")); 
    $.Field({Static:false, Public:false}, "_column", $.Int32); 
    $.Field({Static:false, Public:false}, "_stack", $asm0B.TypeRef("System.Collections.Generic.Stack`1", [$.Int32])); 
    $.Field({Static:false, Public:false}, "_delta", $.Int32); 
    $.Field({Static:false, Public:false}, "_flow", $asm0D.TypeRef("System.Linq.Expressions.DebugViewWriter/Flow")); 
    $.Field({Static:false, Public:false}, "_lambdas", $asm0B.TypeRef("System.Collections.Generic.Queue`1", [$asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")])); 
    $.Field({Static:false, Public:false}, "_lambdaIds", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Int32])); 
    $.Field({Static:false, Public:false}, "_paramIds", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Int32])); 
    $.Field({Static:false, Public:false}, "_labelIds", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget"), $.Int32])); 
    $.Property({Static:false, Public:false}, "Base", $.Int32);

    $.Property({Static:false, Public:false}, "Delta", $.Int32);

    $.Property({Static:false, Public:false}, "Depth", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.DebugViewWriter/Flow */ 

JSIL.MakeEnum(
  "System.Linq.Expressions.DebugViewWriter/Flow", false, {
    None: 0, 
    Space: 1, 
    NewLine: 2, 
    Break: 32768
  }, true
);

/* class System.Linq.Expressions.DynamicExpressionN */ 

(function DynamicExpressionN$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), 
      Name: "System.Linq.Expressions.DynamicExpressionN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.Field({Static:false, Public:false}, "_arguments", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypedDynamicExpressionN */ 

(function TypedDynamicExpressionN$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.DynamicExpressionN"), 
      Name: "System.Linq.Expressions.TypedDynamicExpressionN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_returnType", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.DynamicExpression1 */ 

(function DynamicExpression1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), 
      Name: "System.Linq.Expressions.DynamicExpression1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypedDynamicExpression1 */ 

(function TypedDynamicExpression1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.DynamicExpression1"), 
      Name: "System.Linq.Expressions.TypedDynamicExpression1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_retType", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.DynamicExpression2 */ 

(function DynamicExpression2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), 
      Name: "System.Linq.Expressions.DynamicExpression2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypedDynamicExpression2 */ 

(function TypedDynamicExpression2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.DynamicExpression2"), 
      Name: "System.Linq.Expressions.TypedDynamicExpression2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_retType", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.DynamicExpression3 */ 

(function DynamicExpression3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), 
      Name: "System.Linq.Expressions.DynamicExpression3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypedDynamicExpression3 */ 

(function TypedDynamicExpression3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.DynamicExpression3"), 
      Name: "System.Linq.Expressions.TypedDynamicExpression3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_retType", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.DynamicExpression4 */ 

(function DynamicExpression4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), 
      Name: "System.Linq.Expressions.DynamicExpression4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.DynamicExpression"), [$jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypedDynamicExpression4 */ 

(function TypedDynamicExpression4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.DynamicExpression4"), 
      Name: "System.Linq.Expressions.TypedDynamicExpression4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Type"), 
          $asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_retType", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ExpressionStringBuilder */ 

(function ExpressionStringBuilder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor"), 
      Name: "System.Linq.Expressions.ExpressionStringBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddLabel", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddParam", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "CatchBlockToString", 
      new JSIL.MethodSignature($.String, [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DumpLabel", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitBindingToString", 
      new JSIL.MethodSignature($.String, [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionToString", 
      new JSIL.MethodSignature($.String, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatBinder", 
      new JSIL.MethodSignature($.String, [$asm0D.TypeRef("System.Runtime.CompilerServices.CallSiteBinder")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLabelId", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.Expressions.LabelTarget")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParamId", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "MemberBindingToString", 
      new JSIL.MethodSignature($.String, [$asm0D.TypeRef("System.Linq.Expressions.MemberBinding")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Out", 
      new JSIL.MethodSignature(null, [$.Char], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "OutMember", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Reflection.MemberInfo")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SwitchCaseToString", 
      new JSIL.MethodSignature($.String, [$asm0D.TypeRef("System.Linq.Expressions.SwitchCase")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBinary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.BinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBlock", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.BlockExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCatchBlock", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConditional", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ConditionalExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ConstantExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDebugInfo", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.DebugInfoExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDefault", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.DefaultExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitDynamic", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.DynamicExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitElementInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ElementInit"), [$asm0D.TypeRef("System.Linq.Expressions.ElementInit")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "VisitExpressions", 
      new JSIL.MethodSignature(null, [
          $.Char, $asm09.TypeRef("System.Collections.Generic.IList`1", ["!!0"]), 
          $.Char
        ], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitExtension", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitGoto", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.GotoExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitIndex", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.IndexExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitInvocation", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.InvocationExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLabel", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.LabelExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitListInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ListInitExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLoop", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.LoopExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMember", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.MemberExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberAssignment", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm0D.TypeRef("System.Linq.Expressions.MemberAssignment")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberInit", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.MemberInitExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberListBinding", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm0D.TypeRef("System.Linq.Expressions.MemberListBinding")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberMemberBinding", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm0D.TypeRef("System.Linq.Expressions.MemberMemberBinding")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMethodCall", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNew", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.NewExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNewArray", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.NewArrayExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitRuntimeVariables", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSwitch", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.SwitchExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitSwitchCase", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.SwitchCase"), [$asm0D.TypeRef("System.Linq.Expressions.SwitchCase")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTry", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.TryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTypeBinary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.TypeBinaryExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUnary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
    );

    $.Field({Static:false, Public:false}, "_out", $asm09.TypeRef("System.Text.StringBuilder")); 
    $.Field({Static:false, Public:false}, "_ids", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ArgumentProviderOps */ 

(function ArgumentProviderOps$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Expressions.ArgumentProviderOps", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "Map", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider"), $asm09.TypeRef("System.Func`2", [$asm0D.TypeRef("System.Linq.Expressions.Expression"), "!!0"])], ["T"])
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Linq.Expressions.ListArgumentProvider */ 

(function ListArgumentProvider$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ListArgumentProvider", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider"), $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), $.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.IEnumerator"), [], [])
    )
      .Overrides(3, "GetEnumerator");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_provider", $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg0", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.Generic.ICollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 2 */ $asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 3 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Linq.Expressions.ListArgumentProvider/<GetEnumerator>d__0 */ 

(function $lGetEnumerator$gd__0$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ListArgumentProvider/<GetEnumerator>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.Expressions.Expression$g.get_Current", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Linq.Expressions.ListArgumentProvider")); 
    $.Field({Static:false, Public:true }, "i", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.Expressions.Expression$g.Current", $asm0D.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.ListArgumentProvider/GetEnumerator>d__3 */ 

(function GetEnumerator$gd__3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ListArgumentProvider/GetEnumerator>d__3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], [])
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], [])
    )
      .Overrides(1, "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(0, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], [])
    )
      .Overrides(1, "get_Current")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(1, "Reset")
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Overrides(2, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.Object); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:true }, "$this", $asm0D.TypeRef("System.Linq.Expressions.ListArgumentProvider")); 
    $.Field({Static:false, Public:true }, "i", $.Int32); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 1 */ $asm09.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Expressions.FieldExpression */ 

(function FieldExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.MemberExpression"), 
      Name: "System.Linq.Expressions.FieldExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Reflection.FieldInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMember", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MemberInfo"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_field", $asm09.TypeRef("System.Reflection.FieldInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.PropertyExpression */ 

(function PropertyExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.MemberExpression"), 
      Name: "System.Linq.Expressions.PropertyExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Reflection.PropertyInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetMember", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.MemberInfo"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_property", $asm09.TypeRef("System.Reflection.PropertyInfo")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpressionN */ 

(function MethodCallExpressionN$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.MethodCallExpressionN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MethodInfo"), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.Field({Static:false, Public:false}, "_arguments", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.InstanceMethodCallExpressionN */ 

(function InstanceMethodCallExpressionN$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.InstanceMethodCallExpressionN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInstance", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.Field({Static:false, Public:false}, "_arguments", $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpression1 */ 

(function MethodCallExpression1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.MethodCallExpression1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpression2 */ 

(function MethodCallExpression2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.MethodCallExpression2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpression3 */ 

(function MethodCallExpression3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.MethodCallExpression3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpression4 */ 

(function MethodCallExpression4$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.MethodCallExpression4", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpression5 */ 

(function MethodCallExpression5$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.MethodCallExpression5", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.Field({Static:false, Public:false}, "_arg0", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg3", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg4", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.InstanceMethodCallExpression2 */ 

(function InstanceMethodCallExpression2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.InstanceMethodCallExpression2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInstance", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false}, "_arg0", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.InstanceMethodCallExpression3 */ 

(function InstanceMethodCallExpression3$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
      Name: "System.Linq.Expressions.InstanceMethodCallExpression3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Reflection.MethodInfo"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm0D.TypeRef("System.Linq.Expressions.Expression"), 
          $asm0D.TypeRef("System.Linq.Expressions.Expression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetInstance", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetOrMakeArguments", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.get_ArgumentCount", 
      new JSIL.MethodSignature($.Int32, [], [])
    )
      .Overrides(0, "get_ArgumentCount");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.GetArgument", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$.Int32], [])
    )
      .Overrides(0, "GetArgument");

    $.Field({Static:false, Public:false, ReadOnly:true }, "_instance", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false}, "_arg0", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg1", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_arg2", $asm0D.TypeRef("System.Linq.Expressions.Expression")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.Expressions.IArgumentProvider.ArgumentCount", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm0D.TypeRef("System.Linq.Expressions.IArgumentProvider")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.NewArrayInitExpression */ 

(function NewArrayInitExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.NewArrayExpression"), 
      Name: "System.Linq.Expressions.NewArrayInitExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.NewArrayBoundsExpression */ 

(function NewArrayBoundsExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.NewArrayExpression"), 
      Name: "System.Linq.Expressions.NewArrayBoundsExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.ExpressionType"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm0D.TypeRef("System.Linq.Expressions.ExpressionType"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.NewValueTypeExpression */ 

(function NewValueTypeExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.NewExpression"), 
      Name: "System.Linq.Expressions.NewValueTypeExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Type"), $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), 
          $asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm09.TypeRef("System.Reflection.MemberInfo")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_valueType", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypedParameterExpression */ 

(function TypedParameterExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), 
      Name: "System.Linq.Expressions.TypedParameterExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_paramType", $asm09.TypeRef("System.Type")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ByRefParameterExpression */ 

(function ByRefParameterExpression$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.TypedParameterExpression"), 
      Name: "System.Linq.Expressions.ByRefParameterExpression", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Type"), $.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetIsByRef", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.PrimitiveParameterExpression`1 */ 

(function PrimitiveParameterExpression$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), 
      Name: "System.Linq.Expressions.PrimitiveParameterExpression`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Type"), [], [])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm09.TypeRef("System.Type"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.SymbolDocumentWithGuids */ 

(function SymbolDocumentWithGuids$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), 
      Name: "System.Linq.Expressions.SymbolDocumentWithGuids", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Guid")])], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Guid")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Guid")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Guid")]), $jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Guid")])
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DocumentType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Language", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LanguageVendor", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Guid"), [], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_language", $asm09.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_vendor", $asm09.TypeRef("System.Guid")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_documentType", $asm09.TypeRef("System.Guid")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Language", $asm09.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true , Virtual:true }, "LanguageVendor", $asm09.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true , Virtual:true }, "DocumentType", $asm09.TypeRef("System.Guid"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.AssemblyGen */ 

(function AssemblyGen$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Compiler.AssemblyGen", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "DefineDelegateType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.TypeBuilder"), [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DefineType", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Reflection.Emit.TypeBuilder"), [
          $.String, $asm09.TypeRef("System.Type"), 
          $asm09.TypeRef("System.Reflection.TypeAttributes")
        ], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Assembly", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.Field({Static:true , Public:false}, "_assembly", $.Type); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_myAssembly", $asm09.TypeRef("System.Reflection.Emit.AssemblyBuilder")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_myModule", $asm09.TypeRef("System.Reflection.Emit.ModuleBuilder")); 
    $.Field({Static:false, Public:false}, "_index", $.Int32); 
    $.Property({Static:true , Public:false}, "Assembly", $.Type);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.AnalyzeTypeIsResult */ 

JSIL.MakeEnum(
  "System.Linq.Expressions.AnalyzeTypeIsResult", false, {
    KnownFalse: 0, 
    KnownTrue: 1, 
    KnownAssignable: 2, 
    Unknown: 3
  }, false
);

/* class System.Linq.Expressions.ConstantCheck */ 

(function ConstantCheck$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Linq.Expressions.ConstantCheck", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "AnalyzeTypeIs", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.AnalyzeTypeIsResult"), [$asm0D.TypeRef("System.Linq.Expressions.TypeBinaryExpression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AnalyzeTypeIs", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.AnalyzeTypeIsResult"), [$asm0D.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "AnalyzeTypeIs", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.AnalyzeTypeIsResult"), [$asm0D.TypeRef("System.Linq.Expressions.Expression"), $asm09.TypeRef("System.Type")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNull", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.SpilledExpressionBlock */ 

(function SpilledExpressionBlock$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.BlockN"), 
      Name: "System.Linq.Expressions.Compiler.SpilledExpressionBlock", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.IList`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Rewrite", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.BlockExpression"), [$asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")]), $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Linq.Expressions.Expression")])], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.SymbolDocumentGenerator */ 

(function SymbolDocumentGenerator$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Runtime.CompilerServices.DebugInfoGenerator"), 
      Name: "System.Runtime.CompilerServices.SymbolDocumentGenerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSymbolWriter", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Diagnostics.SymbolStore.ISymbolDocumentWriter"), [$asm09.TypeRef("System.Reflection.Emit.MethodBuilder"), $asm0D.TypeRef("System.Linq.Expressions.SymbolDocumentInfo")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MarkSequencePoint", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm09.TypeRef("System.Reflection.MethodBase"), 
          $asm09.TypeRef("System.Reflection.Emit.ILGenerator"), $asm0D.TypeRef("System.Linq.Expressions.DebugInfoExpression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MarkSequencePoint", 
      new JSIL.MethodSignature(null, [
          $asm0D.TypeRef("System.Linq.Expressions.LambdaExpression"), $.Int32, 
          $asm0D.TypeRef("System.Linq.Expressions.DebugInfoExpression")
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetLocalName", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Reflection.Emit.LocalBuilder"), $.String], [])
    );

    $.Field({Static:false, Public:false}, "_symbolWriters", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0D.TypeRef("System.Linq.Expressions.SymbolDocumentInfo"), $asm09.TypeRef("System.Diagnostics.SymbolStore.ISymbolDocumentWriter")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Compiler.VariableBinder */ 

(function VariableBinder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.Linq.Expressions.ExpressionVisitor"), 
      Name: "System.Linq.Expressions.Compiler.VariableBinder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "Bind", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree"), [$asm0D.TypeRef("System.Linq.Expressions.LambdaExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentLambdaName", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "MergeScopes", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm0D.TypeRef("System.Linq.Expressions.Expression")]), [$asm0D.TypeRef("System.Linq.Expressions.Expression")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reference", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm0D.TypeRef("System.Linq.Expressions.Compiler.VariableStorageKind")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBlock", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.BlockExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitCatchBlock", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.CatchBlock"), [$asm0D.TypeRef("System.Linq.Expressions.CatchBlock")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ConstantExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitInvocation", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.InvocationExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.ParameterExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitRuntimeVariables", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.RuntimeVariablesExpression")], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUnary", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Linq.Expressions.Expression"), [$asm0D.TypeRef("System.Linq.Expressions.UnaryExpression")], [])
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_tree", $asm0D.TypeRef("System.Linq.Expressions.Compiler.AnalyzedTree")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_scopes", $asm0B.TypeRef("System.Collections.Generic.Stack`1", [$asm0D.TypeRef("System.Linq.Expressions.Compiler.CompilerScope")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_constants", $asm0B.TypeRef("System.Collections.Generic.Stack`1", [$asm0D.TypeRef("System.Linq.Expressions.Compiler.BoundConstants")])); 
    $.Field({Static:false, Public:false}, "_inQuote", $.Boolean); 
    $.Property({Static:false, Public:false}, "CurrentLambdaName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.Utils.Helpers */ 

(function Helpers$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Dynamic.Utils.Helpers", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "CommonNode", 
      new JSIL.MethodSignature("!!0", [
          "!!0", "!!0", 
          $asm09.TypeRef("System.Func`2", ["!!0", "!!0"])
        ], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncrementCount", 
      new JSIL.MethodSignature(null, ["!!0", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", ["!!0", $.Int32])], ["T"])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Dynamic.Utils.ReferenceEqualityComparer`1 */ 

(function ReferenceEqualityComparer$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Dynamic.Utils.ReferenceEqualityComparer`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReferenceEqualityComparer`1"), new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReferenceEqualityComparer`1")], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReferenceEqualityComparer`1")], [])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "Instance", $.Type); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.Collections.Generic.IEqualityComparer`1", [new JSIL.GenericParameter("T", "System.Dynamic.Utils.ReferenceEqualityComparer`1")])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.__Error */ 

(function __Error$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.IO.__Error", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "EndOfFile", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EndReadCalledTwice", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EndWaitForConnectionCalledTwice", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "EndWriteCalledTwice", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "FileNotOpen", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDisplayablePath", 
      new JSIL.MethodSignature($.String, [$.String, $.Boolean], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "PipeNotOpen", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadNotSupported", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "SeekNotSupported", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "StreamIsClosed", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WinIOError", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WinIOError", 
      new JSIL.MethodSignature(null, [$.Int32, $.String], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteNotSupported", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "WrongAsyncResult", 
      new JSIL.MethodSignature(null, [], [])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.BufferedStream2 */ 

(function BufferedStream2$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.IO.Stream"), 
      Name: "System.IO.BufferedStream2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddUnderlyingStreamPosition", 
      new JSIL.MethodSignature($.Int64, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "DiscardBuffer", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushRead", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushWrite", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnderlyingStreamPosition", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_UnderlyingStreamPosition", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean
        ], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ], [])
    );

    $.Constant({Static:true , Public:false}, "DefaultBufferSize", 32768); 
    $.Field({Static:false, Public:false}, "bufferSize", $.Int32); 
    $.Field({Static:false, Public:false}, "_buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "_pendingBufferCopy", $.Int32); 
    $.Field({Static:false, Public:false}, "_writePos", $.Int32); 
    $.Field({Static:false, Public:false}, "_readPos", $.Int32); 
    $.Field({Static:false, Public:false}, "_readLen", $.Int32); 
    $.Field({Static:false, Public:false}, "pos", $.Int64); 
    $.Property({Static:false, Public:false}, "UnderlyingStreamPosition", $.Int64);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.LogStream */ 

(function LogStream$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0D.TypeRef("System.IO.BufferedStream2"), 
      Name: "System.IO.LogStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm0D.TypeRef("System.IO.LogRetentionOption"), $.Int64, 
          $.Int32
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "_DisableLogging", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EnforceRetentionPolicy", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $.Int64], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      new JSIL.MethodSignature(null, [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      new JSIL.MethodSignature($.Int64, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm09.TypeRef("System.IO.SeekOrigin")], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "SeekCore", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm09.TypeRef("System.IO.SeekOrigin")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int64], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteFileNative", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Threading.NativeOverlapped")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "DefaultFileSize", 10240000); 
    $.Constant({Static:true , Public:false}, "DefaultNumberOfFiles", 2); 
    $.Constant({Static:true , Public:false}, "DefaultRetention", 2); 
    $.Constant({Static:true , Public:false}, "_retentionRetryThreshold", 2); 
    $.Field({Static:false, Public:false}, "_retention", $asm0D.TypeRef("System.IO.LogRetentionOption")); 
    $.Field({Static:false, Public:false}, "_maxFileSize", $.Int64); 
    $.Field({Static:false, Public:false}, "_maxNumberOfFiles", $.Int32); 
    $.Field({Static:false, Public:false}, "_currentFileNum", $.Int32); 
    $.Field({Static:false, Public:false}, "_disableLogging", $.Boolean); 
    $.Field({Static:false, Public:false}, "_retentionRetryCount", $.Int32); 
    $.Field({Static:false, Public:false}, "_canRead", $.Boolean); 
    $.Field({Static:false, Public:false}, "_canWrite", $.Boolean); 
    $.Field({Static:false, Public:false}, "_canSeek", $.Boolean); 
    $.Field({Static:false, Public:false}, "_handle", $asm09.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle")); 
    $.Field({Static:false, Public:false}, "_fileName", $.String); 
    $.Field({Static:false, Public:false}, "_fileNameWithoutExt", $.String); 
    $.Field({Static:false, Public:false}, "_fileExt", $.String); 
    $.Field({Static:false, Public:false}, "_pathSav", $.String); 
    $.Field({Static:false, Public:false}, "_fAccessSav", $.Int32); 
    $.Field({Static:false, Public:false}, "_shareSav", $asm09.TypeRef("System.IO.FileShare")); 
    $.Field({Static:false, Public:false}, "_secAccessSav", $asm09.TypeRef("System.Security.Permissions.FileIOPermissionAccess")); 
    $.Field({Static:false, Public:false}, "_modeSav", $asm09.TypeRef("System.IO.FileMode")); 
    $.Field({Static:false, Public:false}, "_flagsAndAttributesSav", $.Int32); 
    $.Field({Static:false, Public:false}, "_seekToEndSav", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "m_lockObject", $.Object); 
    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IO.LogRetentionOption */ 

JSIL.MakeEnum(
  "System.IO.LogRetentionOption", false, {
    UnlimitedSequentialFiles: 0, 
    LimitedCircularFiles: 1, 
    SingleFileUnboundedSize: 2, 
    LimitedSequentialFiles: 3, 
    SingleFileBoundedSize: 4
  }, false
);

/* class System.Diagnostics.PerformanceData.PerfProviderCollection */ 

(function PerfProviderCollection$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Diagnostics.PerformanceData.PerfProviderCollection", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "get_s_lockObject", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "QueryProvider", 
      new JSIL.MethodSignature($asm0D.TypeRef("System.Diagnostics.PerformanceData.PerfProvider"), [$asm09.TypeRef("System.Guid")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "RegisterCounterSet", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveProvider", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UnregisterCounterSet", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Guid")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCounterSetInstanceType", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType")], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCounterType", 
      new JSIL.MethodSignature($.Boolean, [$asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterType")], [])
    );

    $.Field({Static:true , Public:false}, "s_hiddenInternalSyncObject", $.Object); 
    $.Field({Static:true , Public:false}, "s_providerList", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0D.TypeRef("System.Diagnostics.PerformanceData.PerfProvider")])); 
    $.Field({Static:true , Public:false}, "s_counterSetList", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $.Int32])); 
    $.Field({Static:true , Public:false}, "s_counterTypes", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterType")])); 
    $.Field({Static:true , Public:false}, "s_counterSetInstanceTypes", $jsilcore.TypeRef("System.Array", [$asm0D.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType")])); 
    $.Property({Static:true , Public:false}, "s_lockObject", $.Object);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.HashSetDebugView`1 */ 

(function HashSetDebugView$b1$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.HashSetDebugView`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0D.TypeRef("System.Collections.Generic.HashSet`1", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetDebugView`1")])], [])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetDebugView`1")]), [], [])
    );

    $.Field({Static:false, Public:false}, "set", $asm0D.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])); 
    $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [new JSIL.GenericParameter("T", "System.Collections.Generic.HashSetDebugView`1")]))
      .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm09.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.PipeAsyncResult */ 

(function PipeAsyncResult$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.IO.Pipes.PipeAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallUserCallback", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallUserCallbackWorker", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncState", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncWaitHandle", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.WaitHandle"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletedSynchronously", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsCompleted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "_userCallback", $asm09.TypeRef("System.AsyncCallback")); 
    $.Field({Static:false, Public:false}, "_userStateObject", $.Object); 
    $.Field({Static:false, Public:false}, "_waitHandle", $asm09.TypeRef("System.Threading.ManualResetEvent")); 
    $.Field({Static:false, Public:false}, "_handle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")); 
    $.Field({Static:false, Public:false}, "_overlapped", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Threading.NativeOverlapped")])); 
    $.Field({Static:false, Public:false}, "_EndXxxCalled", $.Int32); 
    $.Field({Static:false, Public:false}, "_errorCode", $.Int32); 
    $.Field({Static:false, Public:false}, "_isComplete", $.Boolean); 
    $.Field({Static:false, Public:false}, "_completedSynchronously", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "AsyncState", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsCompleted", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncWaitHandle", $asm09.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletedSynchronously", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IAsyncResult")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.PipeStreamAsyncResult */ 

(function PipeStreamAsyncResult$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.IO.Pipes.PipeStreamAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallUserCallback", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:false, Public:false}, "CallUserCallbackWorker", 
      new JSIL.MethodSignature(null, [$.Object], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncState", 
      new JSIL.MethodSignature($.Object, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncWaitHandle", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Threading.WaitHandle"), [], [])
    )
      .Attribute($asm09.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletedSynchronously", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsCompleted", 
      new JSIL.MethodSignature($.Boolean, [], [])
    );

    $.Field({Static:false, Public:false}, "_userCallback", $asm09.TypeRef("System.AsyncCallback")); 
    $.Field({Static:false, Public:false}, "_userStateObject", $.Object); 
    $.Field({Static:false, Public:false}, "_waitHandle", $asm09.TypeRef("System.Threading.ManualResetEvent")); 
    $.Field({Static:false, Public:false}, "_handle", $asm0D.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")); 
    $.Field({Static:false, Public:false}, "_overlapped", $jsilcore.TypeRef("JSIL.Pointer", [$asm09.TypeRef("System.Threading.NativeOverlapped")])); 
    $.Field({Static:false, Public:false}, "_EndXxxCalled", $.Int32); 
    $.Field({Static:false, Public:false}, "_numBytes", $.Int32); 
    $.Field({Static:false, Public:false}, "_errorCode", $.Int32); 
    $.Field({Static:false, Public:false}, "_isMessageComplete", $.Boolean); 
    $.Field({Static:false, Public:false}, "_isWrite", $.Boolean); 
    $.Field({Static:false, Public:false}, "_isComplete", $.Boolean); 
    $.Field({Static:false, Public:false}, "_completedSynchronously", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "AsyncState", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsCompleted", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncWaitHandle", $asm09.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletedSynchronously", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IAsyncResult")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class FXAssembly */ 

(function FXAssembly$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("FXAssembly", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Version", "4.0.0.0"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ThisAssembly */ 

(function ThisAssembly$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Title", "System.Core.dll"); 
    $.Constant({Static:true , Public:false}, "Description", "System.Core.dll"); 
    $.Constant({Static:true , Public:false}, "DefaultAlias", "System.Core.dll"); 
    $.Constant({Static:true , Public:false}, "Copyright", "\xa9 Microsoft Corporation.  All rights reserved."); 
    $.Constant({Static:true , Public:false}, "Version", "4.0.0.0"); 
    $.Constant({Static:true , Public:false}, "InformationalVersion", "4.0.30319.1"); 
    $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", "30319"); 
    $.Constant({Static:true , Public:false}, "BuildRevisionStr", "1"); 
    $.Constant({Static:true , Public:false}, "DailyBuildNumber", 30319); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class AssemblyRef */ 

(function AssemblyRef$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("AssemblyRef", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "EcmaPublicKey", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", "00000000000000000400000000000000"); 
    $.Constant({Static:true , Public:false}, "SilverlightPublicKey", "31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyToken", "31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyFull", "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"); 
    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKey", "7cec85d7bea7798e"); 
    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyToken", "7cec85d7bea7798e"); 
    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyFull", "00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB"); 
    $.Constant({Static:true , Public:false}, "PlatformPublicKey", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "PlatformPublicKeyToken", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "PlatformPublicKeyFull", "00000000000000000400000000000000"); 
    $.Constant({Static:true , Public:false}, "Mscorlib", "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemData", "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemDataOracleClient", "System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "System", "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemCore", "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemNumerics", "System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", "System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemWindowsForms", "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemXml", "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", "b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", "b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293"); 
    $.Constant({Static:true , Public:false}, "SharedLibPublicKey", "31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", "31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"); 
    $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", "System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemConfiguration", "System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDeployment", "System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDesign", "System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDirectoryServices", "System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDrawingDesign", "System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDrawing", "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", "System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemManagement", "System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemMessaging", "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", "System.Runtime.Serialization.Formatters.Soap, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemSecurity", "System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemServiceProcess", "System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWeb", "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebAbstractions", "System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebDynamicData", "System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", "System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", "System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemWebExtensions", "System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", "System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebMobile", "System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", "System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebRouting", "System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebServices", "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "WindowsBase", "WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", "Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", "Microsoft.VisualStudio.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", "VJSharpCodeProvider, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", "b7bd7678b977bd8f"); 
    $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", "ASP.BrowserCapsFactory, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", "Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", "Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", "Microsoft.Web.Design.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftJScript", "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

/* class System.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

/* class System.Linq.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.Linq.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

/* class System.Linq.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.Linq.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

/* class System.Linq.Expressions.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.Linq.Expressions.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      new JSIL.MethodSignature($.String, [], [])
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

/* class System.Linq.Expressions.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.Linq.Expressions.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], [])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm09.System.AttributeTargets.$Flags(
          "All", "Assembly", "Class", "Constructor", 
          "Delegate", "Enum", "Event", "Field", 
          "GenericParameter", "Interface", "Method", "Module", 
          "Parameter", "Property", "ReturnValue", "Struct"
      )]; });

})();

/* class System.Linq.Expressions.SR */ 

(function SR$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Globalization.CultureInfo"), [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Resources.ResourceManager"), [], [])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      new JSIL.MethodSignature($.Type, [], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String], [])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], [])
    );

    $.Constant({Static:true , Public:false}, "MethodPreconditionViolated", "MethodPreconditionViolated"); 
    $.Constant({Static:true , Public:false}, "InvalidArgumentValue", "InvalidArgumentValue"); 
    $.Constant({Static:true , Public:false}, "NonEmptyCollectionRequired", "NonEmptyCollectionRequired"); 
    $.Constant({Static:true , Public:false}, "ArgCntMustBeGreaterThanNameCnt", "ArgCntMustBeGreaterThanNameCnt"); 
    $.Constant({Static:true , Public:false}, "ReducibleMustOverrideReduce", "ReducibleMustOverrideReduce"); 
    $.Constant({Static:true , Public:false}, "MustReduceToDifferent", "MustReduceToDifferent"); 
    $.Constant({Static:true , Public:false}, "ReducedNotCompatible", "ReducedNotCompatible"); 
    $.Constant({Static:true , Public:false}, "SetterHasNoParams", "SetterHasNoParams"); 
    $.Constant({Static:true , Public:false}, "PropertyCannotHaveRefType", "PropertyCannotHaveRefType"); 
    $.Constant({Static:true , Public:false}, "IndexesOfSetGetMustMatch", "IndexesOfSetGetMustMatch"); 
    $.Constant({Static:true , Public:false}, "AccessorsCannotHaveVarArgs", "AccessorsCannotHaveVarArgs"); 
    $.Constant({Static:true , Public:false}, "AccessorsCannotHaveByRefArgs", "AccessorsCannotHaveByRefArgs"); 
    $.Constant({Static:true , Public:false}, "BoundsCannotBeLessThanOne", "BoundsCannotBeLessThanOne"); 
    $.Constant({Static:true , Public:false}, "TypeMustNotBeByRef", "TypeMustNotBeByRef"); 
    $.Constant({Static:true , Public:false}, "TypeDoesNotHaveConstructorForTheSignature", "TypeDoesNotHaveConstructorForTheSignature"); 
    $.Constant({Static:true , Public:false}, "CountCannotBeNegative", "CountCannotBeNegative"); 
    $.Constant({Static:true , Public:false}, "ArrayTypeMustBeArray", "ArrayTypeMustBeArray"); 
    $.Constant({Static:true , Public:false}, "SetterMustBeVoid", "SetterMustBeVoid"); 
    $.Constant({Static:true , Public:false}, "PropertyTyepMustMatchSetter", "PropertyTyepMustMatchSetter"); 
    $.Constant({Static:true , Public:false}, "BothAccessorsMustBeStatic", "BothAccessorsMustBeStatic"); 
    $.Constant({Static:true , Public:false}, "OnlyStaticFieldsHaveNullInstance", "OnlyStaticFieldsHaveNullInstance"); 
    $.Constant({Static:true , Public:false}, "OnlyStaticPropertiesHaveNullInstance", "OnlyStaticPropertiesHaveNullInstance"); 
    $.Constant({Static:true , Public:false}, "OnlyStaticMethodsHaveNullInstance", "OnlyStaticMethodsHaveNullInstance"); 
    $.Constant({Static:true , Public:false}, "PropertyTypeCannotBeVoid", "PropertyTypeCannotBeVoid"); 
    $.Constant({Static:true , Public:false}, "InvalidUnboxType", "InvalidUnboxType"); 
    $.Constant({Static:true , Public:false}, "ExpressionMustBeReadable", "ExpressionMustBeReadable"); 
    $.Constant({Static:true , Public:false}, "ExpressionMustBeWriteable", "ExpressionMustBeWriteable"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustNotHaveValueType", "ArgumentMustNotHaveValueType"); 
    $.Constant({Static:true , Public:false}, "MustBeReducible", "MustBeReducible"); 
    $.Constant({Static:true , Public:false}, "AllTestValuesMustHaveSameType", "AllTestValuesMustHaveSameType"); 
    $.Constant({Static:true , Public:false}, "AllCaseBodiesMustHaveSameType", "AllCaseBodiesMustHaveSameType"); 
    $.Constant({Static:true , Public:false}, "DefaultBodyMustBeSupplied", "DefaultBodyMustBeSupplied"); 
    $.Constant({Static:true , Public:false}, "MethodBuilderDoesNotHaveTypeBuilder", "MethodBuilderDoesNotHaveTypeBuilder"); 
    $.Constant({Static:true , Public:false}, "TypeMustBeDerivedFromSystemDelegate", "TypeMustBeDerivedFromSystemDelegate"); 
    $.Constant({Static:true , Public:false}, "ArgumentTypeCannotBeVoid", "ArgumentTypeCannotBeVoid"); 
    $.Constant({Static:true , Public:false}, "LabelMustBeVoidOrHaveExpression", "LabelMustBeVoidOrHaveExpression"); 
    $.Constant({Static:true , Public:false}, "LabelTypeMustBeVoid", "LabelTypeMustBeVoid"); 
    $.Constant({Static:true , Public:false}, "QuotedExpressionMustBeLambda", "QuotedExpressionMustBeLambda"); 
    $.Constant({Static:true , Public:false}, "VariableMustNotBeByRef", "VariableMustNotBeByRef"); 
    $.Constant({Static:true , Public:false}, "DuplicateVariable", "DuplicateVariable"); 
    $.Constant({Static:true , Public:false}, "StartEndMustBeOrdered", "StartEndMustBeOrdered"); 
    $.Constant({Static:true , Public:false}, "FaultCannotHaveCatchOrFinally", "FaultCannotHaveCatchOrFinally"); 
    $.Constant({Static:true , Public:false}, "TryMustHaveCatchFinallyOrFault", "TryMustHaveCatchFinallyOrFault"); 
    $.Constant({Static:true , Public:false}, "BodyOfCatchMustHaveSameTypeAsBodyOfTry", "BodyOfCatchMustHaveSameTypeAsBodyOfTry"); 
    $.Constant({Static:true , Public:false}, "ExtensionNodeMustOverrideProperty", "ExtensionNodeMustOverrideProperty"); 
    $.Constant({Static:true , Public:false}, "UserDefinedOperatorMustBeStatic", "UserDefinedOperatorMustBeStatic"); 
    $.Constant({Static:true , Public:false}, "UserDefinedOperatorMustNotBeVoid", "UserDefinedOperatorMustNotBeVoid"); 
    $.Constant({Static:true , Public:false}, "CoercionOperatorNotDefined", "CoercionOperatorNotDefined"); 
    $.Constant({Static:true , Public:false}, "DynamicBinderResultNotAssignable", "DynamicBinderResultNotAssignable"); 
    $.Constant({Static:true , Public:false}, "DynamicObjectResultNotAssignable", "DynamicObjectResultNotAssignable"); 
    $.Constant({Static:true , Public:false}, "DynamicBindingNeedsRestrictions", "DynamicBindingNeedsRestrictions"); 
    $.Constant({Static:true , Public:false}, "BinderNotCompatibleWithCallSite", "BinderNotCompatibleWithCallSite"); 
    $.Constant({Static:true , Public:false}, "UnaryOperatorNotDefined", "UnaryOperatorNotDefined"); 
    $.Constant({Static:true , Public:false}, "BinaryOperatorNotDefined", "BinaryOperatorNotDefined"); 
    $.Constant({Static:true , Public:false}, "ReferenceEqualityNotDefined", "ReferenceEqualityNotDefined"); 
    $.Constant({Static:true , Public:false}, "OperandTypesDoNotMatchParameters", "OperandTypesDoNotMatchParameters"); 
    $.Constant({Static:true , Public:false}, "OverloadOperatorTypeDoesNotMatchConversionType", "OverloadOperatorTypeDoesNotMatchConversionType"); 
    $.Constant({Static:true , Public:false}, "ConversionIsNotSupportedForArithmeticTypes", "ConversionIsNotSupportedForArithmeticTypes"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeArray", "ArgumentMustBeArray"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeBoolean", "ArgumentMustBeBoolean"); 
    $.Constant({Static:true , Public:false}, "EqualityMustReturnBoolean", "EqualityMustReturnBoolean"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfo", "ArgumentMustBeFieldInfoOrPropertInfo"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod", "ArgumentMustBeFieldInfoOrPropertInfoOrMethod"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeInstanceMember", "ArgumentMustBeInstanceMember"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeInteger", "ArgumentMustBeInteger"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeArrayIndexType", "ArgumentMustBeArrayIndexType"); 
    $.Constant({Static:true , Public:false}, "ArgumentMustBeSingleDimensionalArrayType", "ArgumentMustBeSingleDimensionalArrayType"); 
    $.Constant({Static:true , Public:false}, "ArgumentTypesMustMatch", "ArgumentTypesMustMatch"); 
    $.Constant({Static:true , Public:false}, "CannotAutoInitializeValueTypeElementThroughProperty", "CannotAutoInitializeValueTypeElementThroughProperty"); 
    $.Constant({Static:true , Public:false}, "CannotAutoInitializeValueTypeMemberThroughProperty", "CannotAutoInitializeValueTypeMemberThroughProperty"); 
    $.Constant({Static:true , Public:false}, "IncorrectTypeForTypeAs", "IncorrectTypeForTypeAs"); 
    $.Constant({Static:true , Public:false}, "CoalesceUsedOnNonNullType", "CoalesceUsedOnNonNullType"); 
    $.Constant({Static:true , Public:false}, "ExpressionTypeCannotInitializeArrayType", "ExpressionTypeCannotInitializeArrayType"); 
    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchConstructorParameter", "ExpressionTypeDoesNotMatchConstructorParameter"); 
    $.Constant({Static:true , Public:false}, "ArgumentTypeDoesNotMatchMember", "ArgumentTypeDoesNotMatchMember"); 
    $.Constant({Static:true , Public:false}, "ArgumentMemberNotDeclOnType", "ArgumentMemberNotDeclOnType"); 
    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchMethodParameter", "ExpressionTypeDoesNotMatchMethodParameter"); 
    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchParameter", "ExpressionTypeDoesNotMatchParameter"); 
    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchReturn", "ExpressionTypeDoesNotMatchReturn"); 
    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchAssignment", "ExpressionTypeDoesNotMatchAssignment"); 
    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchLabel", "ExpressionTypeDoesNotMatchLabel"); 
    $.Constant({Static:true , Public:false}, "ExpressionTypeNotInvocable", "ExpressionTypeNotInvocable"); 
    $.Constant({Static:true , Public:false}, "FieldNotDefinedForType", "FieldNotDefinedForType"); 
    $.Constant({Static:true , Public:false}, "InstanceFieldNotDefinedForType", "InstanceFieldNotDefinedForType"); 
    $.Constant({Static:true , Public:false}, "FieldInfoNotDefinedForType", "FieldInfoNotDefinedForType"); 
    $.Constant({Static:true , Public:false}, "IncorrectNumberOfIndexes", "IncorrectNumberOfIndexes"); 
    $.Constant({Static:true , Public:false}, "IncorrectNumberOfLambdaArguments", "IncorrectNumberOfLambdaArguments"); 
    $.Constant({Static:true , Public:false}, "IncorrectNumberOfLambdaDeclarationParameters", "IncorrectNumberOfLambdaDeclarationParameters"); 
    $.Constant({Static:true , Public:false}, "IncorrectNumberOfMethodCallArguments", "IncorrectNumberOfMethodCallArguments"); 
    $.Constant({Static:true , Public:false}, "IncorrectNumberOfConstructorArguments", "IncorrectNumberOfConstructorArguments"); 
    $.Constant({Static:true , Public:false}, "IncorrectNumberOfMembersForGivenConstructor", "IncorrectNumberOfMembersForGivenConstructor"); 
    $.Constant({Static:true , Public:false}, "IncorrectNumberOfArgumentsForMembers", "IncorrectNumberOfArgumentsForMembers"); 
    $.Constant({Static:true , Public:false}, "LambdaTypeMustBeDerivedFromSystemDelegate", "LambdaTypeMustBeDerivedFromSystemDelegate"); 
    $.Constant({Static:true , Public:false}, "MemberNotFieldOrProperty", "MemberNotFieldOrProperty"); 
    $.Constant({Static:true , Public:false}, "MethodContainsGenericParameters", "MethodContainsGenericParameters"); 
    $.Constant({Static:true , Public:false}, "MethodIsGeneric", "MethodIsGeneric"); 
    $.Constant({Static:true , Public:false}, "MethodNotPropertyAccessor", "MethodNotPropertyAccessor"); 
    $.Constant({Static:true , Public:false}, "PropertyDoesNotHaveGetter", "PropertyDoesNotHaveGetter"); 
    $.Constant({Static:true , Public:false}, "PropertyDoesNotHaveSetter", "PropertyDoesNotHaveSetter"); 
    $.Constant({Static:true , Public:false}, "PropertyDoesNotHaveAccessor", "PropertyDoesNotHaveAccessor"); 
    $.Constant({Static:true , Public:false}, "NotAMemberOfType", "NotAMemberOfType"); 
    $.Constant({Static:true , Public:false}, "OperatorNotImplementedForType", "OperatorNotImplementedForType"); 
    $.Constant({Static:true , Public:false}, "ParameterExpressionNotValidAsDelegate", "ParameterExpressionNotValidAsDelegate"); 
    $.Constant({Static:true , Public:false}, "PropertyNotDefinedForType", "PropertyNotDefinedForType"); 
    $.Constant({Static:true , Public:false}, "InstancePropertyNotDefinedForType", "InstancePropertyNotDefinedForType"); 
    $.Constant({Static:true , Public:false}, "InstancePropertyWithoutParameterNotDefinedForType", "InstancePropertyWithoutParameterNotDefinedForType"); 
    $.Constant({Static:true , Public:false}, "InstancePropertyWithSpecifiedParametersNotDefinedForType", "InstancePropertyWithSpecifiedParametersNotDefinedForType"); 
    $.Constant({Static:true , Public:false}, "InstanceAndMethodTypeMismatch", "InstanceAndMethodTypeMismatch"); 
    $.Constant({Static:true , Public:false}, "TypeContainsGenericParameters", "TypeContainsGenericParameters"); 
    $.Constant({Static:true , Public:false}, "TypeIsGeneric", "TypeIsGeneric"); 
    $.Constant({Static:true , Public:false}, "TypeMissingDefaultConstructor", "TypeMissingDefaultConstructor"); 
    $.Constant({Static:true , Public:false}, "ListInitializerWithZeroMembers", "ListInitializerWithZeroMembers"); 
    $.Constant({Static:true , Public:false}, "ElementInitializerMethodNotAdd", "ElementInitializerMethodNotAdd"); 
    $.Constant({Static:true , Public:false}, "ElementInitializerMethodNoRefOutParam", "ElementInitializerMethodNoRefOutParam"); 
    $.Constant({Static:true , Public:false}, "ElementInitializerMethodWithZeroArgs", "ElementInitializerMethodWithZeroArgs"); 
    $.Constant({Static:true , Public:false}, "ElementInitializerMethodStatic", "ElementInitializerMethodStatic"); 
    $.Constant({Static:true , Public:false}, "TypeNotIEnumerable", "TypeNotIEnumerable"); 
    $.Constant({Static:true , Public:false}, "TypeParameterIsNotDelegate", "TypeParameterIsNotDelegate"); 
    $.Constant({Static:true , Public:false}, "UnexpectedCoalesceOperator", "UnexpectedCoalesceOperator"); 
    $.Constant({Static:true , Public:false}, "InvalidCast", "InvalidCast"); 
    $.Constant({Static:true , Public:false}, "UnhandledBinary", "UnhandledBinary"); 
    $.Constant({Static:true , Public:false}, "UnhandledBinding", "UnhandledBinding"); 
    $.Constant({Static:true , Public:false}, "UnhandledBindingType", "UnhandledBindingType"); 
    $.Constant({Static:true , Public:false}, "UnhandledConvert", "UnhandledConvert"); 
    $.Constant({Static:true , Public:false}, "UnhandledExpressionType", "UnhandledExpressionType"); 
    $.Constant({Static:true , Public:false}, "UnhandledUnary", "UnhandledUnary"); 
    $.Constant({Static:true , Public:false}, "UnknownBindingType", "UnknownBindingType"); 
    $.Constant({Static:true , Public:false}, "UserDefinedOpMustHaveConsistentTypes", "UserDefinedOpMustHaveConsistentTypes"); 
    $.Constant({Static:true , Public:false}, "UserDefinedOpMustHaveValidReturnType", "UserDefinedOpMustHaveValidReturnType"); 
    $.Constant({Static:true , Public:false}, "LogicalOperatorMustHaveBooleanOperators", "LogicalOperatorMustHaveBooleanOperators"); 
    $.Constant({Static:true , Public:false}, "MethodDoesNotExistOnType", "MethodDoesNotExistOnType"); 
    $.Constant({Static:true , Public:false}, "MethodWithArgsDoesNotExistOnType", "MethodWithArgsDoesNotExistOnType"); 
    $.Constant({Static:true , Public:false}, "GenericMethodWithArgsDoesNotExistOnType", "GenericMethodWithArgsDoesNotExistOnType"); 
    $.Constant({Static:true , Public:false}, "MethodWithMoreThanOneMatch", "MethodWithMoreThanOneMatch"); 
    $.Constant({Static:true , Public:false}, "PropertyWithMoreThanOneMatch", "PropertyWithMoreThanOneMatch"); 
    $.Constant({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForFunc", "IncorrectNumberOfTypeArgsForFunc"); 
    $.Constant({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForAction", "IncorrectNumberOfTypeArgsForAction"); 
    $.Constant({Static:true , Public:false}, "ArgumentCannotBeOfTypeVoid", "ArgumentCannotBeOfTypeVoid"); 
    $.Constant({Static:true , Public:false}, "AmbiguousMatchInExpandoObject", "AmbiguousMatchInExpandoObject"); 
    $.Constant({Static:true , Public:false}, "SameKeyExistsInExpando", "SameKeyExistsInExpando"); 
    $.Constant({Static:true , Public:false}, "KeyDoesNotExistInExpando", "KeyDoesNotExistInExpando"); 
    $.Constant({Static:true , Public:false}, "NoOrInvalidRuleProduced", "NoOrInvalidRuleProduced"); 
    $.Constant({Static:true , Public:false}, "FirstArgumentMustBeCallSite", "FirstArgumentMustBeCallSite"); 
    $.Constant({Static:true , Public:false}, "BindingCannotBeNull", "BindingCannotBeNull"); 
    $.Constant({Static:true , Public:false}, "InvalidOperation", "InvalidOperation"); 
    $.Constant({Static:true , Public:false}, "OutOfRange", "OutOfRange"); 
    $.Constant({Static:true , Public:false}, "QueueEmpty", "QueueEmpty"); 
    $.Constant({Static:true , Public:false}, "LabelTargetAlreadyDefined", "LabelTargetAlreadyDefined"); 
    $.Constant({Static:true , Public:false}, "LabelTargetUndefined", "LabelTargetUndefined"); 
    $.Constant({Static:true , Public:false}, "ControlCannotLeaveFinally", "ControlCannotLeaveFinally"); 
    $.Constant({Static:true , Public:false}, "ControlCannotLeaveFilterTest", "ControlCannotLeaveFilterTest"); 
    $.Constant({Static:true , Public:false}, "AmbiguousJump", "AmbiguousJump"); 
    $.Constant({Static:true , Public:false}, "ControlCannotEnterTry", "ControlCannotEnterTry"); 
    $.Constant({Static:true , Public:false}, "ControlCannotEnterExpression", "ControlCannotEnterExpression"); 
    $.Constant({Static:true , Public:false}, "NonLocalJumpWithValue", "NonLocalJumpWithValue"); 
    $.Constant({Static:true , Public:false}, "ExtensionNotReduced", "ExtensionNotReduced"); 
    $.Constant({Static:true , Public:false}, "CannotCompileConstant", "CannotCompileConstant"); 
    $.Constant({Static:true , Public:false}, "CannotCompileDynamic", "CannotCompileDynamic"); 
    $.Constant({Static:true , Public:false}, "InvalidLvalue", "InvalidLvalue"); 
    $.Constant({Static:true , Public:false}, "InvalidMemberType", "InvalidMemberType"); 
    $.Constant({Static:true , Public:false}, "UnknownLiftType", "UnknownLiftType"); 
    $.Constant({Static:true , Public:false}, "InvalidOutputDir", "InvalidOutputDir"); 
    $.Constant({Static:true , Public:false}, "InvalidAsmNameOrExtension", "InvalidAsmNameOrExtension"); 
    $.Constant({Static:true , Public:false}, "CollectionReadOnly", "CollectionReadOnly"); 
    $.Constant({Static:true , Public:false}, "IllegalNewGenericParams", "IllegalNewGenericParams"); 
    $.Constant({Static:true , Public:false}, "UndefinedVariable", "UndefinedVariable"); 
    $.Constant({Static:true , Public:false}, "CannotCloseOverByRef", "CannotCloseOverByRef"); 
    $.Constant({Static:true , Public:false}, "UnexpectedVarArgsCall", "UnexpectedVarArgsCall"); 
    $.Constant({Static:true , Public:false}, "RethrowRequiresCatch", "RethrowRequiresCatch"); 
    $.Constant({Static:true , Public:false}, "TryNotAllowedInFilter", "TryNotAllowedInFilter"); 
    $.Constant({Static:true , Public:false}, "MustRewriteToSameNode", "MustRewriteToSameNode"); 
    $.Constant({Static:true , Public:false}, "MustRewriteChildToSameType", "MustRewriteChildToSameType"); 
    $.Constant({Static:true , Public:false}, "MustRewriteWithoutMethod", "MustRewriteWithoutMethod"); 
    $.Constant({Static:true , Public:false}, "InvalidNullValue", "InvalidNullValue"); 
    $.Constant({Static:true , Public:false}, "InvalidObjectType", "InvalidObjectType"); 
    $.Constant({Static:true , Public:false}, "TryNotSupportedForMethodsWithRefArgs", "TryNotSupportedForMethodsWithRefArgs"); 
    $.Constant({Static:true , Public:false}, "TryNotSupportedForValueTypeInstances", "TryNotSupportedForValueTypeInstances"); 
    $.Constant({Static:true , Public:false}, "CollectionModifiedWhileEnumerating", "CollectionModifiedWhileEnumerating"); 
    $.Constant({Static:true , Public:false}, "EnumerationIsDone", "EnumerationIsDone"); 
    $.Constant({Static:true , Public:false}, "HomogenousAppDomainRequired", "HomogenousAppDomainRequired"); 
    $.Constant({Static:true , Public:false}, "TestValueTypeDoesNotMatchComparisonMethodParameter", "TestValueTypeDoesNotMatchComparisonMethodParameter"); 
    $.Constant({Static:true , Public:false}, "SwitchValueTypeDoesNotMatchComparisonMethodParameter", "SwitchValueTypeDoesNotMatchComparisonMethodParameter"); 
    $.Constant({Static:true , Public:false}, "InvalidMetaObjectCreated", "InvalidMetaObjectCreated"); 
    $.Constant({Static:true , Public:false}, "PdbGeneratorNeedsExpressionCompiler", "PdbGeneratorNeedsExpressionCompiler"); 
    $.Field({Static:true , Public:false}, "loader", $.Type); 
    $.Field({Static:false, Public:false}, "resources", $asm09.TypeRef("System.Resources.ResourceManager")); 
    $.Property({Static:true , Public:false}, "Culture", $asm09.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm09.TypeRef("System.Resources.ResourceManager"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

