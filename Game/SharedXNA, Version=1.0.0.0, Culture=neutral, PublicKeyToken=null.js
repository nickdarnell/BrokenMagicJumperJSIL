/* Generated by JSIL v0.7.8 build 22841. See http://jsil.org/ for more information. */ 
var $asm0A = JSIL.DeclareAssembly("SharedXNA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("SharedXNA");
/* class SharedXNA.Camera2D */ 

(function Camera2D$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Matrix"), [$asm01.TypeRef("Microsoft.Xna.Framework.Matrix"), $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [
        $asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single"), 
        $asm09.TypeRef("System.Single")
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Matrix"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], []))) ();
  };

  function Camera2D__ctor () {
    this.Zoom = $T00().get_One().MemberwiseClone();
    this.Rotation = +0;
    this.Position = $T00().get_Zero().MemberwiseClone();
    this.InitialPosition = $T00().get_Zero().MemberwiseClone();
    this.TargetPosition = $T00().get_Zero().MemberwiseClone();
    this.m_startMoveLifetime = +0;
    this.m_currentMoveLifetime = +0;
    if ($thisType.Main === null) {
      $thisType.Main = this;
    }
  };

  function Camera2D_ToScreenLocation (position) {
    return $S00().CallStatic($T00(), "Transform", null, position, this.Transform.MemberwiseClone());
  };

  function Camera2D_ToWorldLocation (position) {
    return $S00().CallStatic($T00(), "Transform", null, position, $T01().Invert(this.Transform));
  };

  function Camera2D_UpdateTransform (gd) {
    this.Transform = $S01().CallStatic($T01(), "op_Multiply", null, 
      $S01().CallStatic($T01(), "op_Multiply", null, 
        $T01().CreateTranslation($S02().Construct(-this.Position.X, -this.Position.Y, 0)), 
        $T01().CreateRotationZ(this.Rotation)
      ), 
      $S03().CallStatic($T01(), "CreateScale", null, $S02().Construct(this.Zoom.X, this.Zoom.Y, 1))
    );
    return this.Transform;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.Camera2D", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Camera2D__ctor
    );

    $.Method({Static:false, Public:true }, "ToScreenLocation", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      Camera2D_ToScreenLocation
    );

    $.Method({Static:false, Public:true }, "ToWorldLocation", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      Camera2D_ToWorldLocation
    );

    $.Method({Static:false, Public:true }, "UpdateTransform", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Matrix"), [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")], []), 
      Camera2D_UpdateTransform
    );

    $.Field({Static:false, Public:false}, "Rotation", $.Single); 
    $.Field({Static:false, Public:true }, "Transform", $asm01.TypeRef("Microsoft.Xna.Framework.Matrix")); 
    $.Field({Static:false, Public:true }, "Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:true }, "Zoom", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:true }, "InitialPosition", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:true }, "TargetPosition", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "m_startMoveLifetime", $.Single); 
    $.Field({Static:false, Public:false}, "m_currentMoveLifetime", $.Single); 
    $.Field({Static:true , Public:true }, "Main", $.Type); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.ColorTexture */ 

(function ColorTexture$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Collections.Generic.Dictionary$b2.Of($asm01.Microsoft.Xna.Framework.Color, $asm04.Microsoft.Xna.Framework.Graphics.Texture2D))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SurfaceFormat)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("Microsoft.Xna.Framework.Color"), $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Int32"), $asm09.TypeRef("System.Boolean"), 
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SurfaceFormat")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]))) ();
  };

  function ColorTexture_GetColorTexture (color) {
    var texture = new JSIL.BoxedVariable(null);
    if (!$thisType.m_textureCache.TryGetValue(color.MemberwiseClone(), /* ref */ texture)) {
      texture.set($S01().Construct($T03().GraphicsDevice, 1, 1, false, $T04().Color));
      $S02().CallVirtual("SetData$b1", [$asm01.Microsoft.Xna.Framework.Color], texture.get(), JSIL.Array.New($T01(), [color]));
      $thisType.m_textureCache.Add(color.MemberwiseClone(), texture.get());
    }
    return texture.get();
  };

  JSIL.MakeStaticClass("SharedXNA.ColorTexture", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "GetColorTexture", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [$asm01.TypeRef("Microsoft.Xna.Framework.Color")], []), 
      ColorTexture_GetColorTexture
    );

    $.Field({Static:true , Public:false}, "m_textureCache", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("Microsoft.Xna.Framework.Color"), $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")])); 
    $.Field({Static:true , Public:true }, "AliceBlue", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "AntiqueWhite", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Aqua", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Aquamarine", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Azure", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Beige", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Bisque", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Black", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "BlanchedAlmond", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Blue", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "BlueViolet", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Brown", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "BurlyWood", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "CadetBlue", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Chartreuse", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Chocolate", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Coral", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "CornflowerBlue", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Cornsilk", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Crimson", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Cyan", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DarkBlue", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DarkCyan", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DarkGoldenrod", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DarkGray", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DarkGreen", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DarkKhaki", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DarkMagenta", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DarkOliveGreen", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DarkOrange", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DarkOrchid", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DarkRed", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DarkSalmon", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DarkSeaGreen", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DarkSlateBlue", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DarkSlateGray", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DarkTurquoise", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DarkViolet", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DeepPink", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DeepSkyBlue", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DimGray", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "DodgerBlue", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Firebrick", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "FloralWhite", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "ForestGreen", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Fuchsia", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Gainsboro", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "GhostWhite", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Gold", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Goldenrod", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Gray", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Green", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "GreenYellow", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Honeydew", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "HotPink", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "IndianRed", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Indigo", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Ivory", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Khaki", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Lavender", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "LavenderBlush", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "LawnGreen", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "LemonChiffon", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "LightBlue", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "LightCoral", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "LightCyan", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "LightGoldenrodYellow", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "LightGray", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "LightGreen", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "LightPink", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "LightSalmon", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "LightSeaGreen", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "LightSkyBlue", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "LightSlateGray", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "LightYellow", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Lime", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "LimeGreen", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Linen", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Magenta", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Maroon", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "MediumAquamarine", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "MediumBlue", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "MediumOrchid", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "MediumPurple", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "MediumSeaGreen", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "MediumSlateBlue", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "MediumSpringGreen", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "MediumTurquoise", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "MediumVioletRed", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "MidnightBlue", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "MintCream", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "MistyRose", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Moccasin", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "NavajoWhite", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Navy", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "OldLace", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Olive", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "OliveDrab", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Orange", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "OrangeRed", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Orchid", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "PaleGoldenrod", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "PaleGreen", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "PaleTurquoise", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "PaleVioletRed", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "PapayaWhip", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "PeachPuff", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Peru", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Pink", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Plum", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "PowderBlue", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Purple", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Red", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "RosyBrown", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "RoyalBlue", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "SaddleBrown", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Salmon", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "SandyBrown", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "SeaGreen", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "SeaShell", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Sienna", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Silver", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "SkyBlue", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "SlateBlue", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "SlateGray", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Snow", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "SpringGreen", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "SteelBlue", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Tan", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Teal", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Thistle", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Tomato", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Transparent", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Turquoise", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Violet", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Wheat", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "White", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "WhiteSmoke", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "Yellow", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:true , Public:true }, "YellowGreen", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    function ColorTexture__cctor () {
      $thisType.m_textureCache = $S00().Construct();
      $thisType.AliceBlue = $thisType.GetColorTexture($T01().get_AliceBlue().MemberwiseClone());
      $thisType.AntiqueWhite = $thisType.GetColorTexture($T01().get_AntiqueWhite().MemberwiseClone());
      $thisType.Aqua = $thisType.GetColorTexture($T01().get_Aqua().MemberwiseClone());
      $thisType.Aquamarine = $thisType.GetColorTexture($T01().get_Aquamarine().MemberwiseClone());
      $thisType.Azure = $thisType.GetColorTexture($T01().get_Azure().MemberwiseClone());
      $thisType.Beige = $thisType.GetColorTexture($T01().get_Beige().MemberwiseClone());
      $thisType.Bisque = $thisType.GetColorTexture($T01().get_Bisque().MemberwiseClone());
      $thisType.Black = $thisType.GetColorTexture($T01().get_Black().MemberwiseClone());
      $thisType.BlanchedAlmond = $thisType.GetColorTexture($T01().get_BlanchedAlmond().MemberwiseClone());
      $thisType.Blue = $thisType.GetColorTexture($T01().get_Blue().MemberwiseClone());
      $thisType.BlueViolet = $thisType.GetColorTexture($T01().get_BlueViolet().MemberwiseClone());
      $thisType.Brown = $thisType.GetColorTexture($T01().get_Brown().MemberwiseClone());
      $thisType.BurlyWood = $thisType.GetColorTexture($T01().get_BurlyWood().MemberwiseClone());
      $thisType.CadetBlue = $thisType.GetColorTexture($T01().get_CadetBlue().MemberwiseClone());
      $thisType.Chartreuse = $thisType.GetColorTexture($T01().get_Chartreuse().MemberwiseClone());
      $thisType.Chocolate = $thisType.GetColorTexture($T01().get_Coral().MemberwiseClone());
      $thisType.Coral = $thisType.GetColorTexture($T01().get_Coral().MemberwiseClone());
      $thisType.CornflowerBlue = $thisType.GetColorTexture($T01().get_CornflowerBlue().MemberwiseClone());
      $thisType.Cornsilk = $thisType.GetColorTexture($T01().get_Cornsilk().MemberwiseClone());
      $thisType.Crimson = $thisType.GetColorTexture($T01().get_Crimson().MemberwiseClone());
      $thisType.Cyan = $thisType.GetColorTexture($T01().get_Cyan().MemberwiseClone());
      $thisType.DarkBlue = $thisType.GetColorTexture($T01().get_DarkBlue().MemberwiseClone());
      $thisType.DarkCyan = $thisType.GetColorTexture($T01().get_DarkCyan().MemberwiseClone());
      $thisType.DarkGoldenrod = $thisType.GetColorTexture($T01().get_DarkGoldenrod().MemberwiseClone());
      $thisType.DarkGray = $thisType.GetColorTexture($T01().get_DarkGray().MemberwiseClone());
      $thisType.DarkGreen = $thisType.GetColorTexture($T01().get_DarkGreen().MemberwiseClone());
      $thisType.DarkKhaki = $thisType.GetColorTexture($T01().get_DarkKhaki().MemberwiseClone());
      $thisType.DarkMagenta = $thisType.GetColorTexture($T01().get_DarkMagenta().MemberwiseClone());
      $thisType.DarkOliveGreen = $thisType.GetColorTexture($T01().get_DarkOliveGreen().MemberwiseClone());
      $thisType.DarkOrange = $thisType.GetColorTexture($T01().get_DarkOrange().MemberwiseClone());
      $thisType.DarkOrchid = $thisType.GetColorTexture($T01().get_DarkOrchid().MemberwiseClone());
      $thisType.DarkRed = $thisType.GetColorTexture($T01().get_DarkRed().MemberwiseClone());
      $thisType.DarkSalmon = $thisType.GetColorTexture($T01().get_DarkSalmon().MemberwiseClone());
      $thisType.DarkSeaGreen = $thisType.GetColorTexture($T01().get_DarkSeaGreen().MemberwiseClone());
      $thisType.DarkSlateBlue = $thisType.GetColorTexture($T01().get_DarkSlateBlue().MemberwiseClone());
      $thisType.DarkSlateGray = $thisType.GetColorTexture($T01().get_DarkSlateGray().MemberwiseClone());
      $thisType.DarkTurquoise = $thisType.GetColorTexture($T01().get_DarkTurquoise().MemberwiseClone());
      $thisType.DarkViolet = $thisType.GetColorTexture($T01().get_DarkViolet().MemberwiseClone());
      $thisType.DeepPink = $thisType.GetColorTexture($T01().get_DeepPink().MemberwiseClone());
      $thisType.DeepSkyBlue = $thisType.GetColorTexture($T01().get_DeepSkyBlue().MemberwiseClone());
      $thisType.DimGray = $thisType.GetColorTexture($T01().get_DimGray().MemberwiseClone());
      $thisType.DodgerBlue = $thisType.GetColorTexture($T01().get_DodgerBlue().MemberwiseClone());
      $thisType.Firebrick = $thisType.GetColorTexture($T01().get_Firebrick().MemberwiseClone());
      $thisType.FloralWhite = $thisType.GetColorTexture($T01().get_FloralWhite().MemberwiseClone());
      $thisType.ForestGreen = $thisType.GetColorTexture($T01().get_ForestGreen().MemberwiseClone());
      $thisType.Fuchsia = $thisType.GetColorTexture($T01().get_Fuchsia().MemberwiseClone());
      $thisType.Gainsboro = $thisType.GetColorTexture($T01().get_Gainsboro().MemberwiseClone());
      $thisType.GhostWhite = $thisType.GetColorTexture($T01().get_GhostWhite().MemberwiseClone());
      $thisType.Gold = $thisType.GetColorTexture($T01().get_Gold().MemberwiseClone());
      $thisType.Goldenrod = $thisType.GetColorTexture($T01().get_Goldenrod().MemberwiseClone());
      $thisType.Gray = $thisType.GetColorTexture($T01().get_Gray().MemberwiseClone());
      $thisType.Green = $thisType.GetColorTexture($T01().get_Green().MemberwiseClone());
      $thisType.GreenYellow = $thisType.GetColorTexture($T01().get_GreenYellow().MemberwiseClone());
      $thisType.Honeydew = $thisType.GetColorTexture($T01().get_Honeydew().MemberwiseClone());
      $thisType.HotPink = $thisType.GetColorTexture($T01().get_HotPink().MemberwiseClone());
      $thisType.IndianRed = $thisType.GetColorTexture($T01().get_IndianRed().MemberwiseClone());
      $thisType.Indigo = $thisType.GetColorTexture($T01().get_Indigo().MemberwiseClone());
      $thisType.Ivory = $thisType.GetColorTexture($T01().get_Ivory().MemberwiseClone());
      $thisType.Khaki = $thisType.GetColorTexture($T01().get_Khaki().MemberwiseClone());
      $thisType.Lavender = $thisType.GetColorTexture($T01().get_Lavender().MemberwiseClone());
      $thisType.LavenderBlush = $thisType.GetColorTexture($T01().get_LavenderBlush().MemberwiseClone());
      $thisType.LawnGreen = $thisType.GetColorTexture($T01().get_LawnGreen().MemberwiseClone());
      $thisType.LemonChiffon = $thisType.GetColorTexture($T01().get_LemonChiffon().MemberwiseClone());
      $thisType.LightBlue = $thisType.GetColorTexture($T01().get_LightBlue().MemberwiseClone());
      $thisType.LightCoral = $thisType.GetColorTexture($T01().get_LightCoral().MemberwiseClone());
      $thisType.LightCyan = $thisType.GetColorTexture($T01().get_LightCyan().MemberwiseClone());
      $thisType.LightGoldenrodYellow = $thisType.GetColorTexture($T01().get_LightGoldenrodYellow().MemberwiseClone());
      $thisType.LightGray = $thisType.GetColorTexture($T01().get_LightGray().MemberwiseClone());
      $thisType.LightGreen = $thisType.GetColorTexture($T01().get_LightGreen().MemberwiseClone());
      $thisType.LightPink = $thisType.GetColorTexture($T01().get_LightPink().MemberwiseClone());
      $thisType.LightSalmon = $thisType.GetColorTexture($T01().get_LightSalmon().MemberwiseClone());
      $thisType.LightSeaGreen = $thisType.GetColorTexture($T01().get_LightSeaGreen().MemberwiseClone());
      $thisType.LightSkyBlue = $thisType.GetColorTexture($T01().get_LightSkyBlue().MemberwiseClone());
      $thisType.LightSlateGray = $thisType.GetColorTexture($T01().get_LightSlateGray().MemberwiseClone());
      $thisType.LightYellow = $thisType.GetColorTexture($T01().get_LightYellow().MemberwiseClone());
      $thisType.Lime = $thisType.GetColorTexture($T01().get_Lime().MemberwiseClone());
      $thisType.LimeGreen = $thisType.GetColorTexture($T01().get_LimeGreen().MemberwiseClone());
      $thisType.Linen = $thisType.GetColorTexture($T01().get_Linen().MemberwiseClone());
      $thisType.Magenta = $thisType.GetColorTexture($T01().get_Magenta().MemberwiseClone());
      $thisType.Maroon = $thisType.GetColorTexture($T01().get_Maroon().MemberwiseClone());
      $thisType.MediumAquamarine = $thisType.GetColorTexture($T01().get_MediumAquamarine().MemberwiseClone());
      $thisType.MediumBlue = $thisType.GetColorTexture($T01().get_MediumBlue().MemberwiseClone());
      $thisType.MediumOrchid = $thisType.GetColorTexture($T01().get_MediumOrchid().MemberwiseClone());
      $thisType.MediumPurple = $thisType.GetColorTexture($T01().get_MediumPurple().MemberwiseClone());
      $thisType.MediumSeaGreen = $thisType.GetColorTexture($T01().get_MediumSeaGreen().MemberwiseClone());
      $thisType.MediumSlateBlue = $thisType.GetColorTexture($T01().get_MediumSlateBlue().MemberwiseClone());
      $thisType.MediumSpringGreen = $thisType.GetColorTexture($T01().get_MediumSpringGreen().MemberwiseClone());
      $thisType.MediumTurquoise = $thisType.GetColorTexture($T01().get_MediumTurquoise().MemberwiseClone());
      $thisType.MediumVioletRed = $thisType.GetColorTexture($T01().get_MediumVioletRed().MemberwiseClone());
      $thisType.MidnightBlue = $thisType.GetColorTexture($T01().get_MidnightBlue().MemberwiseClone());
      $thisType.MintCream = $thisType.GetColorTexture($T01().get_MintCream().MemberwiseClone());
      $thisType.MistyRose = $thisType.GetColorTexture($T01().get_MistyRose().MemberwiseClone());
      $thisType.Moccasin = $thisType.GetColorTexture($T01().get_Moccasin().MemberwiseClone());
      $thisType.NavajoWhite = $thisType.GetColorTexture($T01().get_NavajoWhite().MemberwiseClone());
      $thisType.Navy = $thisType.GetColorTexture($T01().get_Navy().MemberwiseClone());
      $thisType.OldLace = $thisType.GetColorTexture($T01().get_OldLace().MemberwiseClone());
      $thisType.Olive = $thisType.GetColorTexture($T01().get_Olive().MemberwiseClone());
      $thisType.OliveDrab = $thisType.GetColorTexture($T01().get_OliveDrab().MemberwiseClone());
      $thisType.Orange = $thisType.GetColorTexture($T01().get_Orange().MemberwiseClone());
      $thisType.OrangeRed = $thisType.GetColorTexture($T01().get_OrangeRed().MemberwiseClone());
      $thisType.Orchid = $thisType.GetColorTexture($T01().get_Orchid().MemberwiseClone());
      $thisType.PaleGoldenrod = $thisType.GetColorTexture($T01().get_PaleGoldenrod().MemberwiseClone());
      $thisType.PaleGreen = $thisType.GetColorTexture($T01().get_PaleGreen().MemberwiseClone());
      $thisType.PaleTurquoise = $thisType.GetColorTexture($T01().get_PaleTurquoise().MemberwiseClone());
      $thisType.PaleVioletRed = $thisType.GetColorTexture($T01().get_PaleVioletRed().MemberwiseClone());
      $thisType.PapayaWhip = $thisType.GetColorTexture($T01().get_PapayaWhip().MemberwiseClone());
      $thisType.PeachPuff = $thisType.GetColorTexture($T01().get_PeachPuff().MemberwiseClone());
      $thisType.Peru = $thisType.GetColorTexture($T01().get_Peru().MemberwiseClone());
      $thisType.Pink = $thisType.GetColorTexture($T01().get_Pink().MemberwiseClone());
      $thisType.Plum = $thisType.GetColorTexture($T01().get_Plum().MemberwiseClone());
      $thisType.PowderBlue = $thisType.GetColorTexture($T01().get_PowderBlue().MemberwiseClone());
      $thisType.Purple = $thisType.GetColorTexture($T01().get_Purple().MemberwiseClone());
      $thisType.Red = $thisType.GetColorTexture($T01().get_Red().MemberwiseClone());
      $thisType.RosyBrown = $thisType.GetColorTexture($T01().get_RosyBrown().MemberwiseClone());
      $thisType.RoyalBlue = $thisType.GetColorTexture($T01().get_RoyalBlue().MemberwiseClone());
      $thisType.SaddleBrown = $thisType.GetColorTexture($T01().get_SaddleBrown().MemberwiseClone());
      $thisType.Salmon = $thisType.GetColorTexture($T01().get_Salmon().MemberwiseClone());
      $thisType.SandyBrown = $thisType.GetColorTexture($T01().get_SandyBrown().MemberwiseClone());
      $thisType.SeaGreen = $thisType.GetColorTexture($T01().get_SeaGreen().MemberwiseClone());
      $thisType.SeaShell = $thisType.GetColorTexture($T01().get_SeaShell().MemberwiseClone());
      $thisType.Sienna = $thisType.GetColorTexture($T01().get_Sienna().MemberwiseClone());
      $thisType.Silver = $thisType.GetColorTexture($T01().get_Silver().MemberwiseClone());
      $thisType.SkyBlue = $thisType.GetColorTexture($T01().get_SkyBlue().MemberwiseClone());
      $thisType.SlateBlue = $thisType.GetColorTexture($T01().get_SlateBlue().MemberwiseClone());
      $thisType.SlateGray = $thisType.GetColorTexture($T01().get_SlateGray().MemberwiseClone());
      $thisType.Snow = $thisType.GetColorTexture($T01().get_Snow().MemberwiseClone());
      $thisType.SpringGreen = $thisType.GetColorTexture($T01().get_SpringGreen().MemberwiseClone());
      $thisType.SteelBlue = $thisType.GetColorTexture($T01().get_SteelBlue().MemberwiseClone());
      $thisType.Tan = $thisType.GetColorTexture($T01().get_Tan().MemberwiseClone());
      $thisType.Teal = $thisType.GetColorTexture($T01().get_Teal().MemberwiseClone());
      $thisType.Thistle = $thisType.GetColorTexture($T01().get_Thistle().MemberwiseClone());
      $thisType.Tomato = $thisType.GetColorTexture($T01().get_Tomato().MemberwiseClone());
      $thisType.Transparent = $thisType.GetColorTexture($T01().get_Transparent().MemberwiseClone());
      $thisType.Turquoise = $thisType.GetColorTexture($T01().get_Turquoise().MemberwiseClone());
      $thisType.Violet = $thisType.GetColorTexture($T01().get_Violet().MemberwiseClone());
      $thisType.Wheat = $thisType.GetColorTexture($T01().get_Wheat().MemberwiseClone());
      $thisType.White = $thisType.GetColorTexture($T01().get_White().MemberwiseClone());
      $thisType.WhiteSmoke = $thisType.GetColorTexture($T01().get_WhiteSmoke().MemberwiseClone());
      $thisType.Yellow = $thisType.GetColorTexture($T01().get_Yellow().MemberwiseClone());
      $thisType.YellowGreen = $thisType.GetColorTexture($T01().get_YellowGreen().MemberwiseClone());
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      ColorTexture__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.CommonMessages */ 

(function CommonMessages$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Resources.ResourceManager)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Globalization.CultureInfo)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Resources.ResourceManager"), [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.Reflection.Assembly")]))) ();
  };

  function CommonMessages__ctor () {
  };

  function CommonMessages_get_ConfirmCreatingLobbyAfterEmptySearch () {
    return $thisType.get_ResourceManager().GetString("ConfirmCreatingLobbyAfterEmptySearch", $thisType.resourceCulture);
  };

  function CommonMessages_get_ConfirmEndSession () {
    return $thisType.get_ResourceManager().GetString("ConfirmEndSession", $thisType.resourceCulture);
  };

  function CommonMessages_get_ConfirmExitGame () {
    return $thisType.get_ResourceManager().GetString("ConfirmExitGame", $thisType.resourceCulture);
  };

  function CommonMessages_get_ConfirmForceStartSession () {
    return $thisType.get_ResourceManager().GetString("ConfirmForceStartSession", $thisType.resourceCulture);
  };

  function CommonMessages_get_ConfirmLeaveSession () {
    return $thisType.get_ResourceManager().GetString("ConfirmLeaveSession", $thisType.resourceCulture);
  };

  function CommonMessages_get_ConfirmMarketplace () {
    return $thisType.get_ResourceManager().GetString("ConfirmMarketplace", $thisType.resourceCulture);
  };

  function CommonMessages_get_Culture () {
    return $thisType.resourceCulture;
  };

  function CommonMessages_get_DialogCancel () {
    return $thisType.get_ResourceManager().GetString("DialogCancel", $thisType.resourceCulture);
  };

  function CommonMessages_get_DialogNo () {
    return $thisType.get_ResourceManager().GetString("DialogNo", $thisType.resourceCulture);
  };

  function CommonMessages_get_DialogOK () {
    return $thisType.get_ResourceManager().GetString("DialogOK", $thisType.resourceCulture);
  };

  function CommonMessages_get_DialogYes () {
    return $thisType.get_ResourceManager().GetString("DialogYes", $thisType.resourceCulture);
  };

  function CommonMessages_get_ErrorDisconnected () {
    return $thisType.get_ResourceManager().GetString("ErrorDisconnected", $thisType.resourceCulture);
  };

  function CommonMessages_get_ErrorGamerPrivilege () {
    return $thisType.get_ResourceManager().GetString("ErrorGamerPrivilege", $thisType.resourceCulture);
  };

  function CommonMessages_get_ErrorHostEndedSession () {
    return $thisType.get_ResourceManager().GetString("ErrorHostEndedSession", $thisType.resourceCulture);
  };

  function CommonMessages_get_ErrorNetwork () {
    return $thisType.get_ResourceManager().GetString("ErrorNetwork", $thisType.resourceCulture);
  };

  function CommonMessages_get_ErrorNetworkNotAvailable () {
    return $thisType.get_ResourceManager().GetString("ErrorNetworkNotAvailable", $thisType.resourceCulture);
  };

  function CommonMessages_get_ErrorRemovedByHost () {
    return $thisType.get_ResourceManager().GetString("ErrorRemovedByHost", $thisType.resourceCulture);
  };

  function CommonMessages_get_ErrorSessionFull () {
    return $thisType.get_ResourceManager().GetString("ErrorSessionFull", $thisType.resourceCulture);
  };

  function CommonMessages_get_ErrorSessionNotFound () {
    return $thisType.get_ResourceManager().GetString("ErrorSessionNotFound", $thisType.resourceCulture);
  };

  function CommonMessages_get_ErrorSessionNotJoinable () {
    return $thisType.get_ResourceManager().GetString("ErrorSessionNotJoinable", $thisType.resourceCulture);
  };

  function CommonMessages_get_ErrorTrialMode () {
    return $thisType.get_ResourceManager().GetString("ErrorTrialMode", $thisType.resourceCulture);
  };

  function CommonMessages_get_ErrorUnknown () {
    return $thisType.get_ResourceManager().GetString("ErrorUnknown", $thisType.resourceCulture);
  };

  function CommonMessages_get_MenuAvailableSessions () {
    return $thisType.get_ResourceManager().GetString("MenuAvailableSessions", $thisType.resourceCulture);
  };

  function CommonMessages_get_MenuControls () {
    return $thisType.get_ResourceManager().GetString("MenuControls", $thisType.resourceCulture);
  };

  function CommonMessages_get_MenuControls_Tooltip () {
    return $thisType.get_ResourceManager().GetString("MenuControls_Tooltip", $thisType.resourceCulture);
  };

  function CommonMessages_get_MenuCreateLobby () {
    return $thisType.get_ResourceManager().GetString("MenuCreateLobby", $thisType.resourceCulture);
  };

  function CommonMessages_get_MenuCredits_Tooltip () {
    return $thisType.get_ResourceManager().GetString("MenuCredits_Tooltip", $thisType.resourceCulture);
  };

  function CommonMessages_get_MenuExitGame () {
    return $thisType.get_ResourceManager().GetString("MenuExitGame", $thisType.resourceCulture);
  };

  function CommonMessages_get_MenuExitGame_Tooltip () {
    return $thisType.get_ResourceManager().GetString("MenuExitGame_Tooltip", $thisType.resourceCulture);
  };

  function CommonMessages_get_MenuLobby () {
    return $thisType.get_ResourceManager().GetString("MenuLobby", $thisType.resourceCulture);
  };

  function CommonMessages_get_MenuPlayMultiplayerLocally () {
    return $thisType.get_ResourceManager().GetString("MenuPlayMultiplayerLocally", $thisType.resourceCulture);
  };

  function CommonMessages_get_MenuQuickMatchMultiplayer () {
    return $thisType.get_ResourceManager().GetString("MenuQuickMatchMultiplayer", $thisType.resourceCulture);
  };

  function CommonMessages_get_MenuSearchMultiplayer () {
    return $thisType.get_ResourceManager().GetString("MenuSearchMultiplayer", $thisType.resourceCulture);
  };

  function CommonMessages_get_MenuSystemLinkMultiplayer () {
    return $thisType.get_ResourceManager().GetString("MenuSystemLinkMultiplayer", $thisType.resourceCulture);
  };

  function CommonMessages_get_MenuUnlockFullGame () {
    return $thisType.get_ResourceManager().GetString("MenuUnlockFullGame", $thisType.resourceCulture);
  };

  function CommonMessages_get_MenuXboxLiveMultiplayer () {
    return $thisType.get_ResourceManager().GetString("MenuXboxLiveMultiplayer", $thisType.resourceCulture);
  };

  function CommonMessages_get_NoProfileGamertag1 () {
    return $thisType.get_ResourceManager().GetString("NoProfileGamertag1", $thisType.resourceCulture);
  };

  function CommonMessages_get_NoProfileGamertag2 () {
    return $thisType.get_ResourceManager().GetString("NoProfileGamertag2", $thisType.resourceCulture);
  };

  function CommonMessages_get_NoProfileGamertag3 () {
    return $thisType.get_ResourceManager().GetString("NoProfileGamertag3", $thisType.resourceCulture);
  };

  function CommonMessages_get_NoProfileGamertag4 () {
    return $thisType.get_ResourceManager().GetString("NoProfileGamertag4", $thisType.resourceCulture);
  };

  function CommonMessages_get_NoSessionsFound () {
    return $thisType.get_ResourceManager().GetString("NoSessionsFound", $thisType.resourceCulture);
  };

  function CommonMessages_get_PauseGamePaused () {
    return $thisType.get_ResourceManager().GetString("PauseGamePaused", $thisType.resourceCulture);
  };

  function CommonMessages_get_PauseQuitMode () {
    return $thisType.get_ResourceManager().GetString("PauseQuitMode", $thisType.resourceCulture);
  };

  function CommonMessages_get_PressStartToContinue () {
    return $thisType.get_ResourceManager().GetString("PressStartToContinue", $thisType.resourceCulture);
  };

  function CommonMessages_get_ResourceManager () {
    if ($thisType.resourceMan === null) {
      var temp = $S00().Construct("SharedXNA.CommonMessages", $thisType.__Type__.get_Assembly());
      $thisType.resourceMan = temp;
    }
    return $thisType.resourceMan;
  };

  function CommonMessages_get_SkipPrompt () {
    return $thisType.get_ResourceManager().GetString("SkipPrompt", $thisType.resourceCulture);
  };

  function CommonMessages_set_Culture (value) {
    $thisType.resourceCulture = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.CommonMessages", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      CommonMessages__ctor
    );

    $.Method({Static:true , Public:true }, "get_ConfirmCreatingLobbyAfterEmptySearch", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_ConfirmCreatingLobbyAfterEmptySearch
    );

    $.Method({Static:true , Public:true }, "get_ConfirmEndSession", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_ConfirmEndSession
    );

    $.Method({Static:true , Public:true }, "get_ConfirmExitGame", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_ConfirmExitGame
    );

    $.Method({Static:true , Public:true }, "get_ConfirmForceStartSession", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_ConfirmForceStartSession
    );

    $.Method({Static:true , Public:true }, "get_ConfirmLeaveSession", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_ConfirmLeaveSession
    );

    $.Method({Static:true , Public:true }, "get_ConfirmMarketplace", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_ConfirmMarketplace
    );

    $.Method({Static:true , Public:true }, "get_Culture", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Globalization.CultureInfo"), [], []), 
      CommonMessages_get_Culture
    );

    $.Method({Static:true , Public:true }, "get_DialogCancel", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_DialogCancel
    );

    $.Method({Static:true , Public:true }, "get_DialogNo", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_DialogNo
    );

    $.Method({Static:true , Public:true }, "get_DialogOK", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_DialogOK
    );

    $.Method({Static:true , Public:true }, "get_DialogYes", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_DialogYes
    );

    $.Method({Static:true , Public:true }, "get_ErrorDisconnected", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_ErrorDisconnected
    );

    $.Method({Static:true , Public:true }, "get_ErrorGamerPrivilege", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_ErrorGamerPrivilege
    );

    $.Method({Static:true , Public:true }, "get_ErrorHostEndedSession", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_ErrorHostEndedSession
    );

    $.Method({Static:true , Public:true }, "get_ErrorNetwork", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_ErrorNetwork
    );

    $.Method({Static:true , Public:true }, "get_ErrorNetworkNotAvailable", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_ErrorNetworkNotAvailable
    );

    $.Method({Static:true , Public:true }, "get_ErrorRemovedByHost", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_ErrorRemovedByHost
    );

    $.Method({Static:true , Public:true }, "get_ErrorSessionFull", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_ErrorSessionFull
    );

    $.Method({Static:true , Public:true }, "get_ErrorSessionNotFound", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_ErrorSessionNotFound
    );

    $.Method({Static:true , Public:true }, "get_ErrorSessionNotJoinable", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_ErrorSessionNotJoinable
    );

    $.Method({Static:true , Public:true }, "get_ErrorTrialMode", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_ErrorTrialMode
    );

    $.Method({Static:true , Public:true }, "get_ErrorUnknown", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_ErrorUnknown
    );

    $.Method({Static:true , Public:true }, "get_MenuAvailableSessions", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_MenuAvailableSessions
    );

    $.Method({Static:true , Public:true }, "get_MenuControls", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_MenuControls
    );

    $.Method({Static:true , Public:true }, "get_MenuControls_Tooltip", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_MenuControls_Tooltip
    );

    $.Method({Static:true , Public:true }, "get_MenuCreateLobby", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_MenuCreateLobby
    );

    $.Method({Static:true , Public:true }, "get_MenuCredits_Tooltip", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_MenuCredits_Tooltip
    );

    $.Method({Static:true , Public:true }, "get_MenuExitGame", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_MenuExitGame
    );

    $.Method({Static:true , Public:true }, "get_MenuExitGame_Tooltip", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_MenuExitGame_Tooltip
    );

    $.Method({Static:true , Public:true }, "get_MenuLobby", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_MenuLobby
    );

    $.Method({Static:true , Public:true }, "get_MenuPlayMultiplayerLocally", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_MenuPlayMultiplayerLocally
    );

    $.Method({Static:true , Public:true }, "get_MenuQuickMatchMultiplayer", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_MenuQuickMatchMultiplayer
    );

    $.Method({Static:true , Public:true }, "get_MenuSearchMultiplayer", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_MenuSearchMultiplayer
    );

    $.Method({Static:true , Public:true }, "get_MenuSystemLinkMultiplayer", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_MenuSystemLinkMultiplayer
    );

    $.Method({Static:true , Public:true }, "get_MenuUnlockFullGame", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_MenuUnlockFullGame
    );

    $.Method({Static:true , Public:true }, "get_MenuXboxLiveMultiplayer", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_MenuXboxLiveMultiplayer
    );

    $.Method({Static:true , Public:true }, "get_NoProfileGamertag1", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_NoProfileGamertag1
    );

    $.Method({Static:true , Public:true }, "get_NoProfileGamertag2", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_NoProfileGamertag2
    );

    $.Method({Static:true , Public:true }, "get_NoProfileGamertag3", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_NoProfileGamertag3
    );

    $.Method({Static:true , Public:true }, "get_NoProfileGamertag4", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_NoProfileGamertag4
    );

    $.Method({Static:true , Public:true }, "get_NoSessionsFound", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_NoSessionsFound
    );

    $.Method({Static:true , Public:true }, "get_PauseGamePaused", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_PauseGamePaused
    );

    $.Method({Static:true , Public:true }, "get_PauseQuitMode", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_PauseQuitMode
    );

    $.Method({Static:true , Public:true }, "get_PressStartToContinue", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_PressStartToContinue
    );

    $.Method({Static:true , Public:true }, "get_ResourceManager", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Resources.ResourceManager"), [], []), 
      CommonMessages_get_ResourceManager
    );

    $.Method({Static:true , Public:true }, "get_SkipPrompt", 
      new JSIL.MethodSignature($.String, [], []), 
      CommonMessages_get_SkipPrompt
    );

    $.Method({Static:true , Public:true }, "set_Culture", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Globalization.CultureInfo")], []), 
      CommonMessages_set_Culture
    );

    $.Field({Static:true , Public:false}, "resourceMan", $asm09.TypeRef("System.Resources.ResourceManager")); 
    $.Field({Static:true , Public:false}, "resourceCulture", $asm09.TypeRef("System.Globalization.CultureInfo")); 
    $.Property({Static:true , Public:true }, "ResourceManager", $asm09.TypeRef("System.Resources.ResourceManager"))
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:true }, "Culture", $asm09.TypeRef("System.Globalization.CultureInfo"))
      .Attribute($asm0B.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm0B.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:true }, "ConfirmCreatingLobbyAfterEmptySearch", $.String);

    $.Property({Static:true , Public:true }, "ConfirmEndSession", $.String);

    $.Property({Static:true , Public:true }, "ConfirmExitGame", $.String);

    $.Property({Static:true , Public:true }, "ConfirmForceStartSession", $.String);

    $.Property({Static:true , Public:true }, "ConfirmLeaveSession", $.String);

    $.Property({Static:true , Public:true }, "ConfirmMarketplace", $.String);

    $.Property({Static:true , Public:true }, "DialogCancel", $.String);

    $.Property({Static:true , Public:true }, "DialogNo", $.String);

    $.Property({Static:true , Public:true }, "DialogOK", $.String);

    $.Property({Static:true , Public:true }, "DialogYes", $.String);

    $.Property({Static:true , Public:true }, "ErrorDisconnected", $.String);

    $.Property({Static:true , Public:true }, "ErrorGamerPrivilege", $.String);

    $.Property({Static:true , Public:true }, "ErrorHostEndedSession", $.String);

    $.Property({Static:true , Public:true }, "ErrorNetwork", $.String);

    $.Property({Static:true , Public:true }, "ErrorNetworkNotAvailable", $.String);

    $.Property({Static:true , Public:true }, "ErrorRemovedByHost", $.String);

    $.Property({Static:true , Public:true }, "ErrorSessionFull", $.String);

    $.Property({Static:true , Public:true }, "ErrorSessionNotFound", $.String);

    $.Property({Static:true , Public:true }, "ErrorSessionNotJoinable", $.String);

    $.Property({Static:true , Public:true }, "ErrorTrialMode", $.String);

    $.Property({Static:true , Public:true }, "ErrorUnknown", $.String);

    $.Property({Static:true , Public:true }, "MenuAvailableSessions", $.String);

    $.Property({Static:true , Public:true }, "MenuControls", $.String);

    $.Property({Static:true , Public:true }, "MenuControls_Tooltip", $.String);

    $.Property({Static:true , Public:true }, "MenuCreateLobby", $.String);

    $.Property({Static:true , Public:true }, "MenuCredits_Tooltip", $.String);

    $.Property({Static:true , Public:true }, "MenuExitGame", $.String);

    $.Property({Static:true , Public:true }, "MenuExitGame_Tooltip", $.String);

    $.Property({Static:true , Public:true }, "MenuLobby", $.String);

    $.Property({Static:true , Public:true }, "MenuPlayMultiplayerLocally", $.String);

    $.Property({Static:true , Public:true }, "MenuQuickMatchMultiplayer", $.String);

    $.Property({Static:true , Public:true }, "MenuSearchMultiplayer", $.String);

    $.Property({Static:true , Public:true }, "MenuSystemLinkMultiplayer", $.String);

    $.Property({Static:true , Public:true }, "MenuUnlockFullGame", $.String);

    $.Property({Static:true , Public:true }, "MenuXboxLiveMultiplayer", $.String);

    $.Property({Static:true , Public:true }, "NoProfileGamertag1", $.String);

    $.Property({Static:true , Public:true }, "NoProfileGamertag2", $.String);

    $.Property({Static:true , Public:true }, "NoProfileGamertag3", $.String);

    $.Property({Static:true , Public:true }, "NoProfileGamertag4", $.String);

    $.Property({Static:true , Public:true }, "NoSessionsFound", $.String);

    $.Property({Static:true , Public:true }, "PauseGamePaused", $.String);

    $.Property({Static:true , Public:true }, "PauseQuitMode", $.String);

    $.Property({Static:true , Public:true }, "PressStartToContinue", $.String);

    $.Property({Static:true , Public:true }, "SkipPrompt", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerNonUserCodeAttribute"))
    .Attribute($asm0B.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0"]; });

})();

/* interface SharedXNA.IDebugEchoListner */ 

JSIL.MakeInterface(
  "SharedXNA.IDebugEchoListner", true, [], function ($) {
    $.Method({}, "Echo", new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.DebugCommandMessage"), $.String], []));
  }, []);

/* interface SharedXNA.IDebugCommandExecutioner */ 

JSIL.MakeInterface(
  "SharedXNA.IDebugCommandExecutioner", true, [], function ($) {
    $.Method({}, "ExecuteCommand", new JSIL.MethodSignature(null, [$.String], []));
  }, []);

/* interface SharedXNA.IDebugCommandHost */ 

JSIL.MakeInterface(
  "SharedXNA.IDebugCommandHost", true, [], function ($) {
    $.Method({}, "RegisterCommand", new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm0A.TypeRef("SharedXNA.DebugCommandExecute")
        ], []));
    $.Method({}, "UnregisterCommand", new JSIL.MethodSignature(null, [$.String], []));
    $.Method({}, "Echo", new JSIL.MethodSignature(null, [$.String], []));
    $.Method({}, "EchoWarning", new JSIL.MethodSignature(null, [$.String], []));
    $.Method({}, "EchoError", new JSIL.MethodSignature(null, [$.String], []));
    $.Method({}, "RegisterEchoListner", new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.IDebugEchoListner")], []));
    $.Method({}, "UnregisterEchoListner", new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.IDebugEchoListner")], []));
    $.Method({}, "PushExecutioner", new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.IDebugCommandExecutioner")], []));
    $.Method({}, "PopExecutioner", new JSIL.MethodSignature(null, [], []));
  }, [$asm0A.TypeRef("SharedXNA.IDebugEchoListner"), $asm0A.TypeRef("SharedXNA.IDebugCommandExecutioner")]);

/* class SharedXNA.DebugCommandUI */ 

(function DebugCommandUI$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.IDebugEchoListner))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0B.System.Collections.Generic.Stack$b1.Of($asm0A.SharedXNA.IDebugCommandExecutioner))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Collections.Generic.Dictionary$b2.Of($asm09.System.String, $asm0A.SharedXNA.DebugCommandUI_CommandInfo))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0B.System.Collections.Generic.Queue$b1.Of($asm09.System.String))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm09.System.String))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.DrawableGameComponent)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameServiceContainer)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameComponent)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.SharedXNA.IDebugCommandHost)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0A.SharedXNA.DebugManager)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteSortMode)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm0A.SharedXNA.DebugCommandMessage)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0A.SharedXNA.IDebugEchoListner)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm09.System.Exception)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm0A.SharedXNA.DebugCommandUI_CommandInfo)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm0A.SharedXNA.IDebugCommandExecutioner)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize(System.Array.Of($asm09.System.Char))) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm09.System.Char)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize(System.Array.Of($asm09.System.String))) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm0A.SharedXNA.DebugCommandUI_State)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm09.System.InvalidOperationException)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keyboard)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Input.Keys))) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm0A.SharedXNA.KeyboardUtils)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm09.System.Math)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm0A.SharedXNA.DebugCommandExecute)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm09.System.TimeSpan)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.IDebugEchoListner")]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0B.TypeRef("System.Collections.Generic.Stack`1", [$asm0A.TypeRef("SharedXNA.IDebugCommandExecutioner")]), []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.String"), $asm0A.TypeRef("SharedXNA.DebugCommandUI/CommandInfo")]), []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0B.TypeRef("System.Collections.Generic.Queue`1", [$asm09.TypeRef("System.String")]), []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.String")]), []))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [
        $asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single"), 
        $asm09.TypeRef("System.Single")
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.String")]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm09.TypeRef("System.String")])]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.InvalidOperationException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.String"), [$asm09.TypeRef("System.Char"), $asm09.TypeRef("System.Int32")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0A.SharedXNA.IDebugEchoListner.Echo)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0A.SharedXNA.IDebugCommandExecutioner.ExecuteCommand)) ();
  };

  function DebugCommandUI__ctor (game) {
    this.listenrs = $S00().Construct();
    this.executioners = $S01().Construct();
    this.commandTable = $S02().Construct();
    this.commandLine = $T04().Empty;
    this.lines = $S03().Construct();
    this.commandHistory = $S04().Construct();
    this.keyRepeatStartDuration = +0.3;
    this.keyRepeatDuration = +0.03;
    $T07().prototype._ctor.call(this, game);
    this.DebugCommandUI$Prompt$value = "CMD>";
    this.get_Game().get_Services().AddService($T0A().__Type__, this);
    this.set_DrawOrder(2147483647);
    this.RegisterCommand("help", "Show Command helps", function (host, command, args) {
        var maxLen = 0;
        var enumerator = this.commandTable.get_Values().GetEnumerator();

        while (enumerator.MoveNext()) {
          var cmd = enumerator.get_Current();
          maxLen = $asm09.System.Math.Max(maxLen, cmd.command.length);
        }
        var fmt = $asm09.System.String.Format("{{0,-{0}}}    {{1}}", maxLen);
        var enumerator2 = this.commandTable.get_Values().GetEnumerator();

        while (enumerator2.MoveNext()) {
          var cmd2 = enumerator2.get_Current();
          this.Echo($asm09.System.String.Format(fmt, cmd2.command, cmd2.description));
        }
      }.bind(this));
    this.RegisterCommand("cls", "Clear Screen", function (host, command, args) {
        $asm0B.System.Collections.Generic.Queue$b1.Of($asm09.System.String).prototype.Clear.call(this.lines);
      }.bind(this));
    this.RegisterCommand("echo", "Display Messages", function (host, command, args) {
        this.Echo(command.substr(5));
      }.bind(this));
  };

  function DebugCommandUI_Draw (gameTime) {
    var $temp00;
    if (this.state.valueOf() === 0) {
      return;
    }
    var font = this.debugManager.DebugManager$DebugFont$value;
    var spriteBatch = this.debugManager.DebugManager$SpriteBatch$value;
    var whiteTexture = this.debugManager.DebugManager$WhiteTexture$value;
    var w = +$T10().$Cast(this.get_GraphicsDevice().get_Viewport().get_Width());
    var h = +$T10().$Cast(this.get_GraphicsDevice().get_Viewport().get_Height());
    var topMargin = +(h * 0.1);
    var leftMargin = +(w * 0.1);
    var rect = new ($T13())();
    rect.X = ((leftMargin) | 0);
    rect.Y = ((topMargin) | 0);
    rect.Width = ((w * 0.8) | 0);
    rect.Height = ((20 * font.get_LineSpacing()) | 0);
    var mtx = $T14().CreateTranslation($S05().Construct(0, ($T10().$Cast(-$T10().$Cast(rect.Height)) * (1 - this.stateTransition)), 0)).MemberwiseClone();
    spriteBatch.Begin(
      $T16().Deferred, 
      null, 
      null, 
      null, 
      null, 
      null, 
      mtx.MemberwiseClone()
    );
    spriteBatch.DrawRect(whiteTexture, rect, $jsilxna.ColorFromPremultipliedInts(null, 0, 0, 0, 200));
    var pos = $S06().Construct(leftMargin, topMargin);

    for (var a$0 = this.lines._items, i$0 = 0, l$0 = this.lines._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var line = a$0[i$0];
      spriteBatch.DrawString(font, line, pos, $T17().get_White());
      pos.Y += +$T10().$Cast(font.get_LineSpacing());
    }
    var leftPart = (JSIL.ConcatString(this.DebugCommandUI$Prompt$value, this.commandLine.substr(0, this.cursorIndex)));
    var cursorPos = $T19().op_Addition(pos, font.MeasureString(leftPart));
    cursorPos.Y = +pos.Y;
    spriteBatch.DrawString(
      font, 
      $T04().Format("{0}{1}", this.DebugCommandUI$Prompt$value, this.commandLine), 
      pos, 
      $T17().get_White()
    );
    spriteBatch.DrawString(font, "_", cursorPos, $T17().get_White());
    spriteBatch.End();
  };

  function DebugCommandUI_Echo$00 (messageType, text) {
    var $temp00;
    $T05().prototype.Enqueue.call(this.lines, text);

    while (this.lines.get_Count() >= 20) {
      $T05().prototype.Dequeue.call(this.lines);
    }

    for (var a$0 = this.listenrs._items, i$0 = 0, l$0 = this.listenrs._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var listner = a$0[i$0];
      $IM00().Call(listner, null, messageType, text);
    }
  };

  function DebugCommandUI_Echo$01 (text) {
    this.Echo($T1B().Standard, text);
  };

  function DebugCommandUI_EchoError (text) {
    this.Echo($T1B().Error, text);
  };

  function DebugCommandUI_EchoWarning (text) {
    this.Echo($T1B().Warning, text);
  };

  function DebugCommandUI_ExecuteCommand (command, $exception) {
    var cmd = new JSIL.BoxedVariable(null);

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          if (this.executioners.get_Count() !== 0) {
            $IM01().Call($T02().prototype.Peek.call(this.executioners), null, command);
            return;
          }
          var spaceChars = JSIL.Array.New($T21(), [" "]);
          this.Echo(JSIL.ConcatString(this.DebugCommandUI$Prompt$value, command));
          command = command.TrimStart(spaceChars);
          var args = $S07().Construct(JSIL.SplitString(command, spaceChars));
          var cmdText = args.get_Item(0);
          args.RemoveAt(0);
          if (this.commandTable.TryGetValue(cmdText.toLowerCase(), /* ref */ cmd)) {
            try {
              cmd.get().callback(this, command, args);
              $label0 = 1 /* goto IL_EA */ ;
              continue $labelgroup0;
            } catch ($exception) {
              this.EchoError("Unhandled Exception occurred");
              var lines = (JSIL.SplitString($exception.get_Message(), JSIL.Array.New($T21(), ["\n"])));
              var array = lines;

              for (var i = 0; i < array.length; i = ((i + 1) | 0)) {
                var line = array[i];
                this.EchoError(line);
              }
            }
          }
          this.Echo("Unknown Command");

          $label0 = 1 /* goto IL_EA */ ;
          continue $labelgroup0;
        case 1: /* IL_EA */ 
          this.commandHistory.Add(command);

          while (this.commandHistory.get_Count() > 32) {
            this.commandHistory.RemoveAt(0);
          }
          this.commandHistoryIndex = this.commandHistory.get_Count();

          break $labelgroup0;
      }
    }
  };

  function DebugCommandUI_get_Focused () {
    return (this.state !== $T23().Closed);
  };

  function DebugCommandUI_get_Prompt () {
    return this.DebugCommandUI$Prompt$value;
  };

  function DebugCommandUI_Hide () {
    if (this.state === $T23().Opened) {
      this.stateTransition = +1;
      this.state = $T23().Closing;
    }
  };

  function DebugCommandUI_Initialize () {
    this.debugManager = $T0D().$As(this.get_Game().get_Services().GetService($T0D().__Type__));
    if (this.debugManager === null) {
      throw $S08().Construct("Coudn't find DebugManager.");
    }
    $T07().prototype.Initialize.call(this);
  };

  function DebugCommandUI_IsKeyPressed (key, dt) {
    if (this.prevKeyState.IsKeyUp(key)) {
      this.keyRepeatTimer = +this.keyRepeatStartDuration;
      this.pressedKey = key;
      return true;
    }
    if (key === this.pressedKey) {
      this.keyRepeatTimer -= +dt;
      if (this.keyRepeatTimer <= 0) {
        this.keyRepeatTimer += +this.keyRepeatDuration;
        return true;
      }
    }
    return false;
  };

  function DebugCommandUI_PopExecutioner () {
    $T02().prototype.Pop.call(this.executioners);
  };

  function DebugCommandUI_ProcessKeyInputs (dt) {
    var ch = new JSIL.BoxedVariable("\0");
    var keyState = $T27().GetState().MemberwiseClone();
    var keys = keyState.GetPressedKeys();
    var shift = (keyState.IsKeyDown($T25().LeftShift) || 
      keyState.IsKeyDown($T25().RightShift));
    var array = keys;

    for (var i = 0; i < array.length; i = ((i + 1) | 0)) {
      var key = array[i];
      if (this.IsKeyPressed(key, dt)) {
        if ($T2A().KeyToString(key, shift, /* ref */ ch)) {
          this.commandLine = this.commandLine.Insert(this.cursorIndex, $S09().Construct(ch.get(), 1));
          this.cursorIndex = ((this.cursorIndex + 1) | 0);
        } else {
          var keys2 = key;
          if (keys2 <= $T25().Enter) {
            switch (keys2.valueOf()) {
              case 8: 
                if (this.cursorIndex > 0) {
                  this.commandLine = (System.String.Remove(this.commandLine, (this.cursorIndex = ((this.cursorIndex - 1) | 0)), 1));
                }
                break;

              case 9: 
                this.Hide();
                break;

              default: 
                if (keys2 === $T25().Enter) {
                  this.ExecuteCommand(this.commandLine);
                  this.commandLine = $T04().Empty;
                  this.cursorIndex = 0;
                }
                break;

            }
          } else {
            switch (keys2.valueOf()) {
              case 37: 
                if (this.cursorIndex > 0) {
                  this.cursorIndex = ((this.cursorIndex - 1) | 0);
                }
                break;

              case 38: 
                if (this.commandHistory.get_Count() > 0) {
                  this.commandHistoryIndex = $T2B().Max(0, ((this.commandHistoryIndex - 1) | 0));
                  this.commandLine = this.commandHistory.get_Item(this.commandHistoryIndex);
                  this.cursorIndex = this.commandLine.length;
                }
                break;

              case 39: 
                if (this.cursorIndex < this.commandLine.length) {
                  this.cursorIndex = ((this.cursorIndex + 1) | 0);
                }
                break;

              case 40: 
                if (this.commandHistory.get_Count() > 0) {
                  this.commandHistoryIndex = $T2B().Min(((this.commandHistory.get_Count() - 1) | 0), ((this.commandHistoryIndex + 1) | 0));
                  this.commandLine = this.commandHistory.get_Item(this.commandHistoryIndex);
                  this.cursorIndex = this.commandLine.length;
                }
                break;

              default: 
                if (keys2 === $T25().Delete) {
                  if (this.cursorIndex < this.commandLine.length) {
                    this.commandLine = (System.String.Remove(this.commandLine, this.cursorIndex, 1));
                  }
                }
                break;

            }
          }
        }
      }
    }
  };

  function DebugCommandUI_PushExecutioner (executioner) {
    $T02().prototype.Push.call(this.executioners, executioner);
  };

  function DebugCommandUI_RegisterCommand (command, description, callback) {
    var lowerCommand = (command.toLowerCase());
    if (this.commandTable.ContainsKey(lowerCommand)) {
      throw $S08().Construct($T04().Format("Command \"{0}\" is already registered.", command));
    }
    this.commandTable.Add(lowerCommand, new ($T1E())(command, description, callback));
  };

  function DebugCommandUI_RegisterEchoListner (listner) {
    this.listenrs.Add(listner);
  };

  function DebugCommandUI_set_Prompt (value) {
    this.DebugCommandUI$Prompt$value = value;
  };

  function DebugCommandUI_Show () {
    if (this.state.valueOf() === 0) {
      this.stateTransition = +0;
      this.state = $T23().Opening;
    }
  };

  function DebugCommandUI_UnregisterCommand (command) {
    var lowerCommand = (command.toLowerCase());
    if (!this.commandTable.ContainsKey(lowerCommand)) {
      throw $S08().Construct($T04().Format("Command \"{0}\" is not registered.", command));
    }
    this.commandTable.Remove(command);
  };

  function DebugCommandUI_UnregisterEchoListner (listner) {
    this.listenrs.Remove(listner);
  };

  function DebugCommandUI_Update (gameTime) {
    var keyState = $T27().GetState().MemberwiseClone();
    var dt = +$T10().$Cast(gameTime.get_ElapsedGameTime().get_TotalSeconds());
    switch (this.state.valueOf()) {
      case 0: 
        if (keyState.IsKeyDown($T25().Tab)) {
          this.Show();
        }
        break;

      case 1: 
        this.stateTransition += +(dt * 8);
        if (this.stateTransition > 1) {
          this.stateTransition = +1;
          this.state = $T23().Opened;
        }
        break;

      case 2: 
        this.ProcessKeyInputs(dt);
        break;

      case 3: 
        this.stateTransition -= +(dt * 8);
        if (this.stateTransition < 0) {
          this.stateTransition = +0;
          this.state = $T23().Closed;
        }
        break;

    }
    this.prevKeyState = keyState.MemberwiseClone();
    $T09().prototype.Update.call(this, gameTime);
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Xna.Framework.DrawableGameComponent"), 
      Name: "SharedXNA.DebugCommandUI", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.Game")], []), 
      DebugCommandUI__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      DebugCommandUI_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Echo", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.DebugCommandMessage"), $.String], []), 
      DebugCommandUI_Echo$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Echo", 
      new JSIL.MethodSignature(null, [$.String], []), 
      DebugCommandUI_Echo$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "EchoError", 
      new JSIL.MethodSignature(null, [$.String], []), 
      DebugCommandUI_EchoError
    );

    $.Method({Static:false, Public:true , Virtual:true }, "EchoWarning", 
      new JSIL.MethodSignature(null, [$.String], []), 
      DebugCommandUI_EchoWarning
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ExecuteCommand", 
      new JSIL.MethodSignature(null, [$.String], []), 
      DebugCommandUI_ExecuteCommand
    );

    $.Method({Static:false, Public:true }, "get_Focused", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      DebugCommandUI_get_Focused
    );

    $.Method({Static:false, Public:true }, "get_Prompt", 
      new JSIL.MethodSignature($.String, [], []), 
      DebugCommandUI_get_Prompt
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "Hide", 
      new JSIL.MethodSignature(null, [], []), 
      DebugCommandUI_Hide
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], []), 
      DebugCommandUI_Initialize
    );

    $.Method({Static:false, Public:false}, "IsKeyPressed", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"), $.Single], []), 
      DebugCommandUI_IsKeyPressed
    );

    $.Method({Static:false, Public:true , Virtual:true }, "PopExecutioner", 
      new JSIL.MethodSignature(null, [], []), 
      DebugCommandUI_PopExecutioner
    );

    $.Method({Static:false, Public:true }, "ProcessKeyInputs", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      DebugCommandUI_ProcessKeyInputs
    );

    $.Method({Static:false, Public:true , Virtual:true }, "PushExecutioner", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.IDebugCommandExecutioner")], []), 
      DebugCommandUI_PushExecutioner
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RegisterCommand", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm0A.TypeRef("SharedXNA.DebugCommandExecute")
        ], []), 
      DebugCommandUI_RegisterCommand
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RegisterEchoListner", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.IDebugEchoListner")], []), 
      DebugCommandUI_RegisterEchoListner
    );

    $.Method({Static:false, Public:true }, "set_Prompt", 
      new JSIL.MethodSignature(null, [$.String], []), 
      DebugCommandUI_set_Prompt
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "Show", 
      new JSIL.MethodSignature(null, [], []), 
      DebugCommandUI_Show
    );

    $.Method({Static:false, Public:true , Virtual:true }, "UnregisterCommand", 
      new JSIL.MethodSignature(null, [$.String], []), 
      DebugCommandUI_UnregisterCommand
    );

    $.Method({Static:false, Public:true , Virtual:true }, "UnregisterEchoListner", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.IDebugEchoListner")], []), 
      DebugCommandUI_UnregisterEchoListner
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      DebugCommandUI_Update
    );

    $.Constant({Static:true , Public:false}, "MaxLineCount", 20); 
    $.Constant({Static:true , Public:false}, "MaxCommandHistory", 32); 
    $.Constant({Static:true , Public:false}, "Cursor", "_"); 
    $.Constant({Static:true , Public:true }, "DefaultPrompt", "CMD>"); 
    $.Field({Static:false, Public:false}, "debugManager", $asm0A.TypeRef("SharedXNA.DebugManager")); 
    $.Field({Static:false, Public:false}, "state", $asm0A.TypeRef("SharedXNA.DebugCommandUI/State")); 
    $.Field({Static:false, Public:false}, "stateTransition", $.Single); 
    $.Field({Static:false, Public:false}, "listenrs", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.IDebugEchoListner")])); 
    $.Field({Static:false, Public:false}, "executioners", $asm0B.TypeRef("System.Collections.Generic.Stack`1", [$asm0A.TypeRef("SharedXNA.IDebugCommandExecutioner")])); 
    $.Field({Static:false, Public:false}, "commandTable", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm0A.TypeRef("SharedXNA.DebugCommandUI/CommandInfo")])); 
    $.Field({Static:false, Public:false}, "commandLine", $.String); 
    $.Field({Static:false, Public:false}, "cursorIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "lines", $asm0B.TypeRef("System.Collections.Generic.Queue`1", [$.String])); 
    $.Field({Static:false, Public:false}, "commandHistory", $asm09.TypeRef("System.Collections.Generic.List`1", [$.String])); 
    $.Field({Static:false, Public:false}, "commandHistoryIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "prevKeyState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")); 
    $.Field({Static:false, Public:false}, "pressedKey", $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys")); 
    $.Field({Static:false, Public:false}, "keyRepeatTimer", $.Single); 
    $.Field({Static:false, Public:false}, "keyRepeatStartDuration", $.Single); 
    $.Field({Static:false, Public:false}, "keyRepeatDuration", $.Single); 
    $.Field({Static:false, Public:false}, "DebugCommandUI$Prompt$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Prompt", $.String);

    $.Property({Static:false, Public:true }, "Focused", $.Boolean);

    $.ImplementInterfaces(
      /* 4 */ $asm0A.TypeRef("SharedXNA.IDebugCommandHost"), 
      /* 5 */ $asm0A.TypeRef("SharedXNA.IDebugEchoListner"), 
      /* 6 */ $asm0A.TypeRef("SharedXNA.IDebugCommandExecutioner")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SharedXNA.DebugCommandUI/State */ 

JSIL.MakeEnum(
  "SharedXNA.DebugCommandUI/State", false, {
    Closed: 0, 
    Opening: 1, 
    Opened: 2, 
    Closing: 3
  }, false
);

/* class SharedXNA.DebugCommandUI/CommandInfo */ 

(function CommandInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.DebugCommandExecute)) ();
  };

  function CommandInfo__ctor (command, description, callback) {
    this.command = command;
    this.description = description;
    this.callback = callback;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.DebugCommandUI/CommandInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm0A.TypeRef("SharedXNA.DebugCommandExecute")
        ], []), 
      CommandInfo__ctor
    );

    $.Field({Static:false, Public:true }, "command", $.String); 
    $.Field({Static:false, Public:true }, "description", $.String); 
    $.Field({Static:false, Public:true }, "callback", $asm0A.TypeRef("SharedXNA.DebugCommandExecute")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.DebugManager */ 

(function DebugManager$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.DrawableGameComponent)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameServiceContainer)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameComponent)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm01.Microsoft.Xna.Framework.Color))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Int32")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", ["!!0"])], ["T"]))) ();
  };

  function DebugManager__ctor (game, debugFont) {
    $T02().prototype._ctor.call(this, game);
    this.get_Game().get_Services().AddService($thisType.__Type__, this);
    this.debugFont = debugFont;
    this.set_Enabled(false);
    this.set_Visible(false);
  };

  function DebugManager_get_DebugFont () {
    return this.DebugManager$DebugFont$value;
  };

  function DebugManager_get_SpriteBatch () {
    return this.DebugManager$SpriteBatch$value;
  };

  function DebugManager_get_WhiteTexture () {
    return this.DebugManager$WhiteTexture$value;
  };

  function DebugManager_LoadContent () {
    this.DebugManager$SpriteBatch$value = new ($T05())(this.get_GraphicsDevice());
    this.DebugManager$DebugFont$value = this.get_Game().get_Content().Load$b1($T06())(this.debugFont);
    this.DebugManager$WhiteTexture$value = $S00().Construct(this.get_GraphicsDevice(), 1, 1);
    var whitePixels = JSIL.Array.New($T0A(), [$T0A().get_White()]);
    $S01().CallVirtual("SetData$b1", [$asm01.Microsoft.Xna.Framework.Color], this.DebugManager$WhiteTexture$value, whitePixels);
    $T02().prototype.LoadContent.call(this);
  };

  function DebugManager_set_DebugFont (value) {
    this.DebugManager$DebugFont$value = value;
  };

  function DebugManager_set_SpriteBatch (value) {
    this.DebugManager$SpriteBatch$value = value;
  };

  function DebugManager_set_WhiteTexture (value) {
    this.DebugManager$WhiteTexture$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Xna.Framework.DrawableGameComponent"), 
      Name: "SharedXNA.DebugManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.Game"), $.String], []), 
      DebugManager__ctor
    );

    $.Method({Static:false, Public:true }, "get_DebugFont", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), [], []), 
      DebugManager_get_DebugFont
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SpriteBatch", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), [], []), 
      DebugManager_get_SpriteBatch
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_WhiteTexture", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), [], []), 
      DebugManager_get_WhiteTexture
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "LoadContent", 
      new JSIL.MethodSignature(null, [], []), 
      DebugManager_LoadContent
    );

    $.Method({Static:false, Public:false}, "set_DebugFont", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")], []), 
      DebugManager_set_DebugFont
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_SpriteBatch", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")], []), 
      DebugManager_set_SpriteBatch
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_WhiteTexture", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")], []), 
      DebugManager_set_WhiteTexture
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "debugFont", $.String); 
    $.Field({Static:false, Public:false}, "DebugManager$SpriteBatch$value", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DebugManager$WhiteTexture$value", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "DebugManager$DebugFont$value", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "SpriteBatch", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"));

    $.Property({Static:false, Public:true }, "WhiteTexture", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"));

    $.Property({Static:false, Public:true }, "DebugFont", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.FpsCounter */ 

(function FpsCounter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Text.StringBuilder)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.DrawableGameComponent)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.TimeSpan)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.IDebugCommandHost)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Collections.Generic.IList$b1.Of($asm09.System.String))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.Collections.Generic.ICollection$b1.Of($asm09.System.String))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.Collections.Generic.IEnumerator$b1.Of($asm09.System.String))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.Collections.Generic.IEnumerable$b1.Of($asm09.System.String))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm09.System.Collections.IEnumerator)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm09.System.IDisposable)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0A.SharedXNA.DebugManager)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0A.SharedXNA.Layout)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0A.SharedXNA.Alignment)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameServiceContainer)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameComponent)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm09.System.InvalidOperationException)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0A.SharedXNA.DebugCommandExecute)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm0B.System.Diagnostics.Stopwatch)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm0A.SharedXNA.StringBuilderExtensions)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Text.StringBuilder"), [$asm09.TypeRef("System.Int32")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("SharedXNA.Layout"), [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Viewport")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), [
        $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm09.TypeRef("System.Single"), 
        $asm09.TypeRef("System.Single"), $asm0A.TypeRef("SharedXNA.Alignment")
      ], []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [
        $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm09.TypeRef("System.Single"), 
        $asm09.TypeRef("System.Single"), $asm0A.TypeRef("SharedXNA.Alignment")
      ], []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.InvalidOperationException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Text.StringBuilder"), [$asm09.TypeRef("System.String")], []))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Text.StringBuilder"), $asm09.TypeRef("System.Single")], []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm09.System.Collections.Generic.ICollection$b1.Of($asm09.System.String).get_Count)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm09.System.Collections.Generic.IEnumerable$b1.Of($asm09.System.String).GetEnumerator)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm09.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm09.System.Collections.Generic.IEnumerator$b1.Of($asm09.System.String).get_Current)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm09.System.IDisposable.Dispose)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm0A.SharedXNA.IDebugCommandHost.RegisterCommand)) ();
  };

  function FpsCounter__ctor (game) {
    this.stringBuilder = $S00().Construct(16);
    $T02().prototype._ctor.call(this, game);
    (this.FpsCounter$SampleSpan$value = $T03().FromSeconds(1).MemberwiseClone());
  };

  function FpsCounter_CommandExecute (host, command, arguments) {
    var a = null;
    if ($IM00().Call(arguments, null) === 0) {
      this.set_Visible(!this.get_Visible());
    }
    var enumerator = $IM01().Call(arguments, null);
    try {

      while ($IM02().Call(enumerator, null)) {
        var arg = $IM03().Call(enumerator, null);
        if ((a = (arg.toLowerCase())) !== null) {
          if (!(a == "on")) {
            if (a == "off") {
              this.set_Visible(false);
            }
          } else {
            this.set_Visible(true);
          }
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM04().Call(enumerator, null);
      }
    }
  };

  function FpsCounter_Draw (gameTime) {
    this.sampleFrames = ((this.sampleFrames + 1) | 0);
    var spriteBatch = this.debugManager.DebugManager$SpriteBatch$value;
    var font = this.debugManager.DebugManager$DebugFont$value;
    var size = font.MeasureString("X").MemberwiseClone();
    var rc = new ($T13())(0, 0, ((size.X * 14) | 0), ((size.Y * 1.3) | 0));
    var layout = $S01().Construct(spriteBatch.get_GraphicsDevice().get_Viewport().MemberwiseClone());
    rc = $S02().CallVirtual("Place", null, layout, rc.MemberwiseClone(), 0.01, 0.01, $T17().$Flags("Left", "Top", "TopLeft")).MemberwiseClone();
    size = font.MeasureStringBuilder(this.stringBuilder).MemberwiseClone();
    layout.ClientArea = rc.MemberwiseClone();
    var pos = $S03().CallVirtual("Place", null, layout, size.MemberwiseClone(), 0, 0.1, $T17().$Flags("Center", "HorizontalCenter", "VerticalCenter"));
    spriteBatch.Begin();
    spriteBatch.DrawRect(this.debugManager.DebugManager$WhiteTexture$value, rc, $jsilxna.ColorFromPremultipliedInts(null, 0, 0, 0, 128));
    spriteBatch.DrawStringBuilder(font, this.stringBuilder, pos, $T18().get_White());
    spriteBatch.End();
    $T02().prototype.Draw.call(this, gameTime);
  };

  function FpsCounter_get_Fps () {
    return +this.FpsCounter$Fps$value;
  };

  function FpsCounter_get_SampleSpan () {
    return this.FpsCounter$SampleSpan$value;
  };

  function FpsCounter_Initialize () {
    this.debugManager = $T10().$As(this.get_Game().get_Services().GetService($T10().__Type__));
    if (this.debugManager === null) {
      throw $S04().Construct("DebugManaer is not registered.");
    }
    var host = $T04().$As(this.get_Game().get_Services().GetService($T04().__Type__));
    if (host !== null) {
      $IM05().Call(host, null, "fps", "FPS Counter", $T1C().New(this, $thisType.prototype.CommandExecute));
      this.set_Visible(true);
    }
    this.FpsCounter$Fps$value = +0;
    this.sampleFrames = 0;
    this.stopwatch = $T1D().StartNew();
    this.stringBuilder.set_Length(0);
    $T02().prototype.Initialize.call(this);
  };

  function FpsCounter_set_Fps (value) {
    this.FpsCounter$Fps$value = +value;
  };

  function FpsCounter_set_SampleSpan (value) {
    this.FpsCounter$SampleSpan$value = value;
  };

  function FpsCounter_Update (gameTime) {
    if ($T03().op_GreaterThan(this.stopwatch.get_Elapsed().MemberwiseClone(), this.FpsCounter$SampleSpan$value.MemberwiseClone())) {
      this.FpsCounter$Fps$value = +($T1E().$Cast(this.sampleFrames) / $T1E().$Cast(this.stopwatch.get_Elapsed().get_TotalSeconds()));
      this.stopwatch.Reset();
      this.stopwatch.Start();
      this.sampleFrames = 0;
      this.stringBuilder.set_Length(0);
      $S05().CallVirtual("Append", null, this.stringBuilder, "FPS: ");
      $S06().CallStatic($T1F(), "AppendNumber", null, this.stringBuilder, this.FpsCounter$Fps$value);
    }
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Xna.Framework.DrawableGameComponent"), 
      Name: "SharedXNA.FpsCounter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.Game")], []), 
      FpsCounter__ctor
    );

    $.Method({Static:false, Public:false}, "CommandExecute", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("SharedXNA.IDebugCommandHost"), $.String, 
          $asm09.TypeRef("System.Collections.Generic.IList`1", [$.String])
        ], []), 
      FpsCounter_CommandExecute
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      FpsCounter_Draw
    );

    $.Method({Static:false, Public:true }, "get_Fps", 
      new JSIL.MethodSignature($.Single, [], []), 
      FpsCounter_get_Fps
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_SampleSpan", 
      new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [], []), 
      FpsCounter_get_SampleSpan
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], []), 
      FpsCounter_Initialize
    );

    $.Method({Static:false, Public:false}, "set_Fps", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      FpsCounter_set_Fps
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_SampleSpan", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.TimeSpan")], []), 
      FpsCounter_set_SampleSpan
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      FpsCounter_Update
    );

    $.Field({Static:false, Public:false}, "debugManager", $asm0A.TypeRef("SharedXNA.DebugManager")); 
    $.Field({Static:false, Public:false}, "stopwatch", $asm0B.TypeRef("System.Diagnostics.Stopwatch")); 
    $.Field({Static:false, Public:false}, "sampleFrames", $.Int32); 
    $.Field({Static:false, Public:false}, "stringBuilder", $asm09.TypeRef("System.Text.StringBuilder")); 
    $.Field({Static:false, Public:false}, "FpsCounter$Fps$value", $.Single)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "FpsCounter$SampleSpan$value", $asm09.TypeRef("System.TimeSpan"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Fps", $.Single);

    $.Property({Static:false, Public:true }, "SampleSpan", $asm09.TypeRef("System.TimeSpan"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SharedXNA.DebugCommandMessage */ 

JSIL.MakeEnum(
  "SharedXNA.DebugCommandMessage", true, {
    Standard: 1, 
    Error: 2, 
    Warning: 3
  }, false
);

/* delegate SharedXNA.DebugCommandExecute */ 

JSIL.MakeDelegate("SharedXNA.DebugCommandExecute", true, []);

/* class SharedXNA.KeyboardUtils */ 

(function KeyboardUtils$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Collections.Generic.Dictionary$b2.Of($asm01.Microsoft.Xna.Framework.Input.Keys, $asm0A.SharedXNA.KeyboardUtils_CharPair))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Char)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.SharedXNA.KeyboardUtils_CharPair)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"), $asm0A.TypeRef("SharedXNA.KeyboardUtils/CharPair")]), []))) ();
  };

  function KeyboardUtils_AddKeyMap (key, charPair) {
    var char = (charPair[0]);
    var char2 = null;
    if (charPair.length > 1) {
      char2 = (charPair[1]);
    }
    $thisType.keyMap.Add(key, new ($T05())(char, char2));
  };

  function KeyboardUtils_InitializeKeyMap () {
    $thisType.AddKeyMap($T01().OemTilde, "`~");
    $thisType.AddKeyMap($T01().D1, "1!");
    $thisType.AddKeyMap($T01().D2, "2@");
    $thisType.AddKeyMap($T01().D3, "3#");
    $thisType.AddKeyMap($T01().D4, "4$");
    $thisType.AddKeyMap($T01().D5, "5%");
    $thisType.AddKeyMap($T01().D6, "6^");
    $thisType.AddKeyMap($T01().D7, "7&");
    $thisType.AddKeyMap($T01().D8, "8*");
    $thisType.AddKeyMap($T01().D9, "9(");
    $thisType.AddKeyMap($T01().D0, "0)");
    $thisType.AddKeyMap($T01().OemMinus, "-_");
    $thisType.AddKeyMap($T01().OemPlus, "=+");
    $thisType.AddKeyMap($T01().OemOpenBrackets, "[{");
    $thisType.AddKeyMap($T01().OemCloseBrackets, "]}");
    $thisType.AddKeyMap($T01().OemPipe, "\\|");
    $thisType.AddKeyMap($T01().OemSemicolon, ";:");
    $thisType.AddKeyMap($T01().OemQuotes, "'\"");
    $thisType.AddKeyMap($T01().OemComma, ",<");
    $thisType.AddKeyMap($T01().OemPeriod, ".>");
    $thisType.AddKeyMap($T01().OemQuestion, "/?");
    $thisType.AddKeyMap($T01().NumPad1, "1");
    $thisType.AddKeyMap($T01().NumPad2, "2");
    $thisType.AddKeyMap($T01().NumPad3, "3");
    $thisType.AddKeyMap($T01().NumPad4, "4");
    $thisType.AddKeyMap($T01().NumPad5, "5");
    $thisType.AddKeyMap($T01().NumPad6, "6");
    $thisType.AddKeyMap($T01().NumPad7, "7");
    $thisType.AddKeyMap($T01().NumPad8, "8");
    $thisType.AddKeyMap($T01().NumPad9, "9");
    $thisType.AddKeyMap($T01().NumPad0, "0");
    $thisType.AddKeyMap($T01().Add, "+");
    $thisType.AddKeyMap($T01().Divide, "/");
    $thisType.AddKeyMap($T01().Multiply, "*");
    $thisType.AddKeyMap($T01().Subtract, "-");
    $thisType.AddKeyMap($T01().Decimal, ".");
  };

  function KeyboardUtils_KeyToString (key, shitKeyPressed, /* ref */ character) {
    var charPair = new JSIL.BoxedVariable(null);
    var result = false;
    character.set(" ");
    if (!(!(($T01().A <= key) && 
          (key <= $T01().Z)) && (key !== $T01().Space))) {
      character.set((shitKeyPressed ? String.fromCharCode(key) : $T03().ToLower(String.fromCharCode(key))));
      result = true;
    } else if ($thisType.keyMap.TryGetValue(key, /* ref */ charPair)) {
      if (!shitKeyPressed) {
        character.set(charPair.get().NormalChar);
        result = true;
      } else if (charPair.get().ShiftChar !== null) {
        character.set(charPair.get().ShiftChar);
        result = true;
      }
    }
    return result;
  };

  JSIL.MakeStaticClass("SharedXNA.KeyboardUtils", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "AddKeyMap", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"), $.String], []), 
      KeyboardUtils_AddKeyMap
    );

    $.Method({Static:true , Public:false}, "InitializeKeyMap", 
      new JSIL.MethodSignature(null, [], []), 
      KeyboardUtils_InitializeKeyMap
    );

    $.Method({Static:true , Public:true }, "KeyToString", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Char])
        ], []), 
      KeyboardUtils_KeyToString
    );

    $.Field({Static:true , Public:false}, "keyMap", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"), $asm0A.TypeRef("SharedXNA.KeyboardUtils/CharPair")])); 
    function KeyboardUtils__cctor () {
      $thisType.keyMap = $S00().Construct();
      $thisType.InitializeKeyMap();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      KeyboardUtils__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.KeyboardUtils/CharPair */ 

(function CharPair$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Char)) ();
  };

  function CharPair__ctor (normalChar, shiftChar) {
    this.NormalChar = normalChar;
    this.ShiftChar = shiftChar;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.KeyboardUtils/CharPair", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Char, $asm09.TypeRef("System.Nullable`1", [$.Char])], []), 
      CharPair__ctor
    );

    $.Field({Static:false, Public:true }, "NormalChar", $.Char); 
    $.Field({Static:false, Public:true }, "ShiftChar", $asm09.TypeRef("System.Nullable`1", [$.Char])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SharedXNA.Alignment */ 

JSIL.MakeEnum(
  "SharedXNA.Alignment", true, {
    None: 0, 
    Left: 1, 
    Right: 2, 
    HorizontalCenter: 4, 
    Top: 8, 
    TopLeft: 9, 
    TopRight: 10, 
    TopCenter: 12, 
    Bottom: 16, 
    BottomLeft: 17, 
    BottomRight: 18, 
    BottomCenter: 20, 
    VerticalCenter: 32, 
    CenterLeft: 33, 
    CenterRight: 34, 
    Center: 36
  }, true
);

/* struct SharedXNA.Layout */ 

(function Layout$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.Alignment)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), [
        $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm09.TypeRef("System.Single"), 
        $asm09.TypeRef("System.Single"), $asm0A.TypeRef("SharedXNA.Alignment")
      ], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };

  function Layout__ctor$00 (clientArea, safeArea) {
    this.ClientArea = clientArea;
    this.SafeArea = safeArea;
  };

  function Layout__ctor$01 (clientArea) {
    $thisType.prototype._ctor.call(this, clientArea.MemberwiseClone(), clientArea.MemberwiseClone());
  };

  function Layout__ctor$02 (viewport) {
    this.ClientArea = new ($T00())(viewport.get_X(), viewport.get_Y(), viewport.get_Width(), viewport.get_Height());
    this.SafeArea = viewport.get_TitleSafeArea().MemberwiseClone();
  };

  function Layout_Place$03 (size, horizontalMargin, verticalMargine, alignment) {
    var rc = new ($T00())(0, 0, ((size.X) | 0), ((size.Y) | 0));
    rc = $S00().CallVirtual("Place", null, this, rc.MemberwiseClone(), horizontalMargin, verticalMargine, alignment).MemberwiseClone();
    return $S01().Construct($T03().$Cast(rc.X), $T03().$Cast(rc.Y));
  };

  function Layout_Place$04 (region, horizontalMargin, verticalMargine, alignment) {
    if ($T04().$Cast((alignment & $T04().Left)).valueOf() !== 0) {
      region.X = ((this.ClientArea.X + (($T03().$Cast(this.ClientArea.Width) * horizontalMargin) | 0)) | 0);
    } else if ($T04().$Cast((alignment & $T04().Right)).valueOf() !== 0) {
      region.X = ((((this.ClientArea.X + (($T03().$Cast(this.ClientArea.Width) * (1 - horizontalMargin)) | 0)) | 0) - region.Width) | 0);
    } else if ($T04().$Cast((alignment & $T04().HorizontalCenter)).valueOf() !== 0) {
      region.X = ((((this.ClientArea.X + ((((this.ClientArea.Width - region.Width) | 0) / 2) | 0)) | 0) + ((horizontalMargin * $T03().$Cast(this.ClientArea.Width)) | 0)) | 0);
    }
    if ($T04().$Cast((alignment & $T04().Top)).valueOf() !== 0) {
      region.Y = ((this.ClientArea.Y + (($T03().$Cast(this.ClientArea.Height) * verticalMargine) | 0)) | 0);
    } else if ($T04().$Cast((alignment & $T04().Bottom)).valueOf() !== 0) {
      region.Y = ((((this.ClientArea.Y + (($T03().$Cast(this.ClientArea.Height) * (1 - verticalMargine)) | 0)) | 0) - region.Height) | 0);
    } else if ($T04().$Cast((alignment & $T04().VerticalCenter)).valueOf() !== 0) {
      region.Y = ((((this.ClientArea.Y + ((((this.ClientArea.Height - region.Height) | 0) / 2) | 0)) | 0) + ((verticalMargine * $T03().$Cast(this.ClientArea.Height)) | 0)) | 0);
    }
    if (region.get_Left() < this.SafeArea.get_Left()) {
      region.X = this.SafeArea.get_Left();
    }
    if (region.get_Right() > this.SafeArea.get_Right()) {
      region.X = ((this.SafeArea.get_Right() - region.Width) | 0);
    }
    if (region.get_Top() < this.SafeArea.get_Top()) {
      region.Y = this.SafeArea.get_Top();
    }
    if (region.get_Bottom() > this.SafeArea.get_Bottom()) {
      region.Y = ((this.SafeArea.get_Bottom() - region.Height) | 0);
    }
    return region;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "SharedXNA.Layout", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")], []), 
      Layout__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")], []), 
      Layout__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Viewport")], []), 
      Layout__ctor$02
    );

    $.Method({Static:false, Public:true }, "Place", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Single, 
          $.Single, $asm0A.TypeRef("SharedXNA.Alignment")
        ], []), 
      Layout_Place$03
    );

    $.Method({Static:false, Public:true }, "Place", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), [
          $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $.Single, 
          $.Single, $asm0A.TypeRef("SharedXNA.Alignment")
        ], []), 
      Layout_Place$04
    );

    $.Field({Static:false, Public:true }, "ClientArea", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")); 
    $.Field({Static:false, Public:true }, "SafeArea", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.PIXTools */ 

(function PIXTools$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };

  function PIXTools_BeginEvent$00 (eventName) {
  };

  function PIXTools_BeginEvent$01 (color, eventName) {
  };

  function PIXTools_EndEvent () {
  };

  function PIXTools_SetMarker (color, eventName) {
  };

  function PIXTools_SetRegion (color, eventName) {
  };

  JSIL.MakeStaticClass("SharedXNA.PIXTools", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "BeginEvent", 
      new JSIL.MethodSignature(null, [$.String], []), 
      PIXTools_BeginEvent$00
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["WINDOWS"]; });

    $.Method({Static:true , Public:true }, "BeginEvent", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Color"), $.String], []), 
      PIXTools_BeginEvent$01
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["WINDOWS"]; })
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "EndEvent", 
      new JSIL.MethodSignature(null, [], []), 
      PIXTools_EndEvent
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["WINDOWS"]; })
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "SetMarker", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Color"), $.String], []), 
      PIXTools_SetMarker
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["WINDOWS"]; });

    $.Method({Static:true , Public:true }, "SetRegion", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Color"), $.String], []), 
      PIXTools_SetRegion
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["WINDOWS"]; });

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.PIXTools/PIXToolsException */ 

(function PIXToolsException$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Exception)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Runtime.Serialization.SerializationInfo)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Runtime.Serialization.StreamingContext)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("System.String")], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.Exception")], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], []))) ();
  };

  function PIXToolsException__ctor$00 () {
    $T00().prototype._ctor.call(this);
  };

  function PIXToolsException__ctor$01 (message) {
    $S00().Call($T00().prototype, "_ctor", null, this, message);
  };

  function PIXToolsException__ctor$02 (message, inner) {
    $S01().Call($T00().prototype, "_ctor", null, this, message, inner);
  };

  function PIXToolsException__ctor$03 (info, context) {
    $S02().Call($T00().prototype, "_ctor", null, this, info, context);
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Exception"), 
      Name: "SharedXNA.PIXTools/PIXToolsException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      PIXToolsException__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], []), 
      PIXToolsException__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.Exception")], []), 
      PIXToolsException__ctor$02
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm09.TypeRef("System.Runtime.Serialization.StreamingContext")], []), 
      PIXToolsException__ctor$03
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.RemoteDebugCommand */ 

(function RemoteDebugCommand$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0B.System.Text.RegularExpressions.Regex)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.Microsoft.Xna.Framework.Net.PacketReader)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.Microsoft.Xna.Framework.Net.PacketWriter)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameComponent)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.SharedXNA.IDebugCommandHost)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameServiceContainer)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.SharedXNA.DebugCommandExecute)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.SharedXNA.DebugCommandUI)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.Microsoft.Xna.Framework.Net.NetworkSession)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.SharedXNA.DebugCommandMessage)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm09.System.Collections.Generic.IList$b1.Of($asm09.System.String))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm09.System.Exception)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm03.Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameWindow)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm09.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm03.Microsoft.Xna.Framework.GamerServices.SignedInGamer))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm03.Microsoft.Xna.Framework.GamerServices.Gamer)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm06.Microsoft.Xna.Framework.Net.NetworkSessionType)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0A.SharedXNA.RemoteDebugCommand_ConnectionPahse)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm09.System.Object)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm06.Microsoft.Xna.Framework.Net.NetworkSessionEndedEventArgs)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0B.System.Text.RegularExpressions.Match)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0B.System.Text.RegularExpressions.Group)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm0B.System.Text.RegularExpressions.Capture)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0B.System.Text.RegularExpressions.GroupCollection)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm0A.SharedXNA.IDebugCommandExecutioner)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm09.System.IO.BinaryWriter)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm06.Microsoft.Xna.Framework.Net.LocalNetworkGamer)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm09.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm06.Microsoft.Xna.Framework.Net.LocalNetworkGamer))) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm06.Microsoft.Xna.Framework.Net.SendDataOptions)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm06.Microsoft.Xna.Framework.Net.NetworkGamer)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm09.System.IAsyncResult)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm06.Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm09.System.Collections.ObjectModel.ReadOnlyCollection$b1.Of($asm06.Microsoft.Xna.Framework.Net.AvailableNetworkSession))) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm09.System.EventHandler$b1.Of($asm06.Microsoft.Xna.Framework.Net.NetworkSessionEndedEventArgs))) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm03.Microsoft.Xna.Framework.GamerServices.GamerCollection$b1_GamerCollectionEnumerator.Of($asm06.Microsoft.Xna.Framework.Net.LocalNetworkGamer))) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm03.Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.Of($asm06.Microsoft.Xna.Framework.Net.LocalNetworkGamer))) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm09.System.IO.BinaryReader)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm09.System.IDisposable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0B.TypeRef("System.Text.RegularExpressions.Regex"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("Microsoft.Xna.Framework.Net.PacketReader"), []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("Microsoft.Xna.Framework.Net.PacketWriter"), []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.IAsyncResult"), [
        $asm06.TypeRef("Microsoft.Xna.Framework.Net.NetworkSessionType"), $asm09.TypeRef("System.Int32"), 
        $asm06.TypeRef("Microsoft.Xna.Framework.Net.NetworkSessionProperties"), $asm09.TypeRef("System.AsyncCallback"), 
        $asm09.TypeRef("System.Object")
      ], []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm0B.TypeRef("System.Text.RegularExpressions.Group"), [$asm09.TypeRef("System.String")], []))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("System.String")], []))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm06.TypeRef("Microsoft.Xna.Framework.Net.PacketWriter"), $asm06.TypeRef("Microsoft.Xna.Framework.Net.SendDataOptions")], []))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("Microsoft.Xna.Framework.Net.LocalNetworkGamer"), [$asm09.TypeRef("System.Int32")], []))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("Microsoft.Xna.Framework.Net.AvailableNetworkSession"), [$asm09.TypeRef("System.Int32")], []))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$asm06.TypeRef("Microsoft.Xna.Framework.Net.PacketReader"), $jsilcore.TypeRef("JSIL.Reference", [$asm06.TypeRef("Microsoft.Xna.Framework.Net.NetworkGamer")])], []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0A.SharedXNA.IDebugCommandHost.RegisterCommand)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0A.SharedXNA.IDebugCommandHost.PushExecutioner)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm0A.SharedXNA.IDebugCommandHost.UnregisterCommand)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm0A.SharedXNA.IDebugCommandHost.PopExecutioner)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm0A.SharedXNA.IDebugCommandHost.Echo)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm0A.SharedXNA.IDebugCommandHost.RegisterEchoListner)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm0A.SharedXNA.IDebugCommandHost.EchoWarning)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm0A.SharedXNA.IDebugCommandHost.EchoError)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm0A.SharedXNA.IDebugCommandExecutioner.ExecuteCommand)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm09.System.IAsyncResult.get_IsCompleted)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm09.System.IDisposable.Dispose)) ();
  };

  function RemoteDebugCommand__ctor (game) {
    this.packetRe = $S00().Construct("\\$(?<header>[^$]+)\\$:(?<text>.+)");
    this.packetReader = $S01().Construct();
    this.packetWriter = $S02().Construct();
    $T04().prototype._ctor.call(this, game);
    this.commandHost = $T05().$As(game.get_Services().GetService($T05().__Type__));
    if (!this.IsHost) {
      $IM00().Call(this.commandHost, null, "remote", "Start remote command", $T07().New(this, $thisType.prototype.ExecuteRemoteCommand));
    }
  };

  function RemoteDebugCommand_ConnectedToRemote () {
    var commandUI = $T08().$As(this.commandHost);
    if (this.IsHost) {
      if (commandUI !== null) {
        commandUI.DebugCommandUI$Prompt$value = "[Host]>";
      }
    } else {
      if (commandUI !== null) {
        commandUI.DebugCommandUI$Prompt$value = "[Client]>";
      }
      $IM01().Call(this.commandHost, null, this);
      this.SendPacket("RmtStart", "Remote Debug Command Started!!");
    }
    $IM00().Call(this.commandHost, null, "quit", "Quit from remote command", $T07().New(this, $thisType.prototype.ExecuteQuitCommand));
  };

  function RemoteDebugCommand_DisconnectedFromRemote () {
    var commandUI = $T08().$As(this.commandHost);
    if (commandUI !== null) {
      commandUI.DebugCommandUI$Prompt$value = "CMD>";
    }
    $IM02().Call(this.commandHost, null, "quit");
    if (!this.IsHost) {
      $IM03().Call(this.commandHost, null);
      if (this.RemoteDebugCommand$OwnsNetworkSession$value) {
        this.RemoteDebugCommand$NetworkSession$value.Dispose();
        this.RemoteDebugCommand$NetworkSession$value = null;
        this.RemoteDebugCommand$OwnsNetworkSession$value = false;
      }
    }
  };

  function RemoteDebugCommand_Echo (messageType, text) {
    switch (messageType.valueOf()) {
      case 1: 
        this.SendPacket("RmtEcho", text);
        return;

      case 2: 
        this.SendPacket("RmtErr", text);
        return;

      case 3: 
        this.SendPacket("RmtWrn", text);
        return;

      default: 
        return;

    }
  };

  function RemoteDebugCommand_ExecuteCommand (command) {
    this.SendPacket("RmtCmd", command);
  };

  function RemoteDebugCommand_ExecuteQuitCommand (host, command, arguments) {
    this.SendPacket("RmtQuit", "End Remote Debug Command.");
    this.DisconnectedFromRemote();
  };

  function RemoteDebugCommand_ExecuteRemoteCommand (host, command, arguments, $exception) {
    if (this.RemoteDebugCommand$NetworkSession$value !== null) {
      this.ConnectedToRemote();
      return;
    }
    try {
      $T0E().set_WindowHandle(this.get_Game().get_Window().get_Handle());
      $T0E().Initialize(this.get_Game().get_Services());
    } catch ($exception) {
    }
    if ($T11().get_SignedInGamers().get_Count() > 0) {
      $IM04().Call(this.commandHost, null, "Finding available sessions...");
      this.asyncResult = $S03().CallStatic($T09(), "BeginFind", null, 
        $T12().SystemLink, 
        1, 
        null, 
        null, 
        null
      );
      this.phase = $T13().FindSessions;
      return;
    }
    $IM04().Call(host, null, "Please signed in.");
    this.phase = $T13().EnsureSignedIn;
  };

  function RemoteDebugCommand_get_NetworkSession () {
    return this.RemoteDebugCommand$NetworkSession$value;
  };

  function RemoteDebugCommand_get_OwnsNetworkSession () {
    return this.RemoteDebugCommand$OwnsNetworkSession$value;
  };

  function RemoteDebugCommand_Initialize () {
    if (this.IsHost) {
      $IM05().Call(this.commandHost, null, this);
      if (this.RemoteDebugCommand$NetworkSession$value === null) {
        $T0E().set_WindowHandle(this.get_Game().get_Window().get_Handle());
        $T0E().Initialize(this.get_Game().get_Services());
        this.RemoteDebugCommand$NetworkSession$value = $T09().Create($T12().SystemLink, 1, 2);
        this.RemoteDebugCommand$OwnsNetworkSession$value = true;
      }
    }
    $T04().prototype.Initialize.call(this);
  };

  function RemoteDebugCommand_NetworkSession_SessionEnded (sender, e) {
    this.DisconnectedFromRemote();
    $IM06().Call(this.commandHost, null, "Disconnected from the Host.");
  };

  function RemoteDebugCommand_ProcessRecievedPacket (packetString) {
    var a = null;
    var processed = false;
    var mc = this.packetRe.Match(packetString);
    if (mc.get_Success()) {
      var packetHeader = $S04().CallVirtual("get_Item", null, mc.get_Groups(), "header").get_Value();
      var text = $S04().CallVirtual("get_Item", null, mc.get_Groups(), "text").get_Value();
      if ((a = packetHeader) !== null) {
        if (!(a == "RmtCmd")) {
          if (!(a == "RmtEcho")) {
            if (!(a == "RmtErr")) {
              if (!(a == "RmtWrn")) {
                if (!(a == "RmtStart")) {
                  if (a == "RmtQuit") {
                    $IM04().Call(this.commandHost, null, text);
                    this.DisconnectedFromRemote();
                    processed = true;
                  }
                } else {
                  this.ConnectedToRemote();
                  $IM04().Call(this.commandHost, null, text);
                  processed = true;
                }
              } else {
                $IM06().Call(this.commandHost, null, text);
                processed = true;
              }
            } else {
              $IM07().Call(this.commandHost, null, text);
              processed = true;
            }
          } else {
            $IM04().Call(this.commandHost, null, text);
            processed = true;
          }
        } else {
          $IM08().Call(this.commandHost, null, text);
          processed = true;
        }
      }
    }
    return processed;
  };

  function RemoteDebugCommand_SendPacket (header, text) {
    if (this.RemoteDebugCommand$NetworkSession$value !== null) {
      $S05().CallVirtual("Write", null, this.packetWriter, ("$" + header + "$:" + text));
      $S06().CallVirtual("SendData", null, $S07().Call($T1F().prototype, "get_Item", null, this.RemoteDebugCommand$NetworkSession$value.get_LocalGamers(), 0), this.packetWriter, $T20().$Flags("InOrder", "Reliable", "ReliableInOrder"));
    }
  };

  function RemoteDebugCommand_set_NetworkSession (value) {
    this.RemoteDebugCommand$NetworkSession$value = value;
  };

  function RemoteDebugCommand_set_OwnsNetworkSession (value) {
    this.RemoteDebugCommand$OwnsNetworkSession$value = value;
  };

  function RemoteDebugCommand_Update (gameTime) {
    var sender = new JSIL.BoxedVariable(null);
    switch (this.phase.valueOf()) {
      case 1: 
        $T0E().Update();
        break;

      case 2: 
        $T0E().Update();
        if ($IM09().Call(this.asyncResult, null)) {
          var sessions = $T09().EndFind(this.asyncResult);
          if (sessions.get_Count() > 0) {
            this.asyncResult = $T09().BeginJoin($S08().Call($T25().prototype, "get_Item", null, sessions, 0), null, null);
            $IM07().Call(this.commandHost, null, "Connecting to the host...");
            this.phase = $T13().Joining;
          } else {
            $IM07().Call(this.commandHost, null, "Couldn't find a session.");
            this.phase = $T13().None;
          }
        }
        break;

      case 3: 
        $T0E().Update();
        if ($IM09().Call(this.asyncResult, null)) {
          this.RemoteDebugCommand$NetworkSession$value = $T09().EndJoin(this.asyncResult);
          this.RemoteDebugCommand$NetworkSession$value.add_SessionEnded($T26().New(this, $thisType.prototype.NetworkSession_SessionEnded));
          this.RemoteDebugCommand$OwnsNetworkSession$value = true;
          $IM07().Call(this.commandHost, null, "Connected to the host.");
          this.phase = $T13().None;
          this.asyncResult = null;
          this.ConnectedToRemote();
        }
        break;

    }
    if (this.RemoteDebugCommand$OwnsNetworkSession$value) {
      $T0E().Update();
      this.RemoteDebugCommand$NetworkSession$value.Update();
      if (this.RemoteDebugCommand$NetworkSession$value !== null) {
        var enumerator = $T28().prototype.GetEnumerator.call(this.RemoteDebugCommand$NetworkSession$value.get_LocalGamers()).MemberwiseClone();
        try {

          while (enumerator.MoveNext()) {

            for (var gamer = enumerator.get_Current(); gamer.get_IsDataAvailable(); ) {
              $S09().CallVirtual("ReceiveData", null, gamer, this.packetReader, /* ref */ sender);
              if (!sender.get().get_IsLocal()) {
                this.ProcessRecievedPacket(this.packetReader.ReadString());
              }
            }
          }
        } finally {
          $IM0A().Call(enumerator, null);
        }
      }
    }
    $T04().prototype.Update.call(this, gameTime);
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Xna.Framework.GameComponent"), 
      Name: "SharedXNA.RemoteDebugCommand", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.Game")], []), 
      RemoteDebugCommand__ctor
    );

    $.Method({Static:false, Public:false}, "ConnectedToRemote", 
      new JSIL.MethodSignature(null, [], []), 
      RemoteDebugCommand_ConnectedToRemote
    );

    $.Method({Static:false, Public:false}, "DisconnectedFromRemote", 
      new JSIL.MethodSignature(null, [], []), 
      RemoteDebugCommand_DisconnectedFromRemote
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Echo", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.DebugCommandMessage"), $.String], []), 
      RemoteDebugCommand_Echo
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ExecuteCommand", 
      new JSIL.MethodSignature(null, [$.String], []), 
      RemoteDebugCommand_ExecuteCommand
    );

    $.Method({Static:false, Public:false}, "ExecuteQuitCommand", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("SharedXNA.IDebugCommandHost"), $.String, 
          $asm09.TypeRef("System.Collections.Generic.IList`1", [$.String])
        ], []), 
      RemoteDebugCommand_ExecuteQuitCommand
    );

    $.Method({Static:false, Public:false}, "ExecuteRemoteCommand", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("SharedXNA.IDebugCommandHost"), $.String, 
          $asm09.TypeRef("System.Collections.Generic.IList`1", [$.String])
        ], []), 
      RemoteDebugCommand_ExecuteRemoteCommand
    );

    $.Method({Static:false, Public:true }, "get_NetworkSession", 
      new JSIL.MethodSignature($asm06.TypeRef("Microsoft.Xna.Framework.Net.NetworkSession"), [], []), 
      RemoteDebugCommand_get_NetworkSession
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_OwnsNetworkSession", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      RemoteDebugCommand_get_OwnsNetworkSession
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], []), 
      RemoteDebugCommand_Initialize
    );

    $.Method({Static:false, Public:false}, "NetworkSession_SessionEnded", 
      new JSIL.MethodSignature(null, [$.Object, $asm06.TypeRef("Microsoft.Xna.Framework.Net.NetworkSessionEndedEventArgs")], []), 
      RemoteDebugCommand_NetworkSession_SessionEnded
    );

    $.Method({Static:false, Public:true }, "ProcessRecievedPacket", 
      new JSIL.MethodSignature($.Boolean, [$.String], []), 
      RemoteDebugCommand_ProcessRecievedPacket
    );

    $.Method({Static:false, Public:false}, "SendPacket", 
      new JSIL.MethodSignature(null, [$.String, $.String], []), 
      RemoteDebugCommand_SendPacket
    );

    $.Method({Static:false, Public:true }, "set_NetworkSession", 
      new JSIL.MethodSignature(null, [$asm06.TypeRef("Microsoft.Xna.Framework.Net.NetworkSession")], []), 
      RemoteDebugCommand_set_NetworkSession
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_OwnsNetworkSession", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      RemoteDebugCommand_set_OwnsNetworkSession
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      RemoteDebugCommand_Update
    );

    $.Constant({Static:true , Public:false}, "StartPacketHeader", "RmtStart"); 
    $.Constant({Static:true , Public:false}, "ExecutePacketHeader", "RmtCmd"); 
    $.Constant({Static:true , Public:false}, "EchoPacketHeader", "RmtEcho"); 
    $.Constant({Static:true , Public:false}, "ErrorPacketHeader", "RmtErr"); 
    $.Constant({Static:true , Public:false}, "WarningPacketHeader", "RmtWrn"); 
    $.Constant({Static:true , Public:false}, "QuitPacketHeader", "RmtQuit"); 
    $.Field({Static:false, Public:false}, "commandHost", $asm0A.TypeRef("SharedXNA.IDebugCommandHost")); 
    $.Field({Static:false, Public:false}, "IsHost", $.Boolean); 
    $.Field({Static:false, Public:false}, "packetRe", $asm0B.TypeRef("System.Text.RegularExpressions.Regex")); 
    $.Field({Static:false, Public:false}, "packetReader", $asm06.TypeRef("Microsoft.Xna.Framework.Net.PacketReader")); 
    $.Field({Static:false, Public:false}, "packetWriter", $asm06.TypeRef("Microsoft.Xna.Framework.Net.PacketWriter")); 
    $.Field({Static:false, Public:false}, "asyncResult", $asm09.TypeRef("System.IAsyncResult")); 
    $.Field({Static:false, Public:false}, "phase", $asm0A.TypeRef("SharedXNA.RemoteDebugCommand/ConnectionPahse")); 
    $.Field({Static:false, Public:false}, "RemoteDebugCommand$NetworkSession$value", $asm06.TypeRef("Microsoft.Xna.Framework.Net.NetworkSession"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "RemoteDebugCommand$OwnsNetworkSession$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "NetworkSession", $asm06.TypeRef("Microsoft.Xna.Framework.Net.NetworkSession"));

    $.Property({Static:false, Public:true }, "OwnsNetworkSession", $.Boolean);

    $.ImplementInterfaces(
      /* 3 */ $asm0A.TypeRef("SharedXNA.IDebugCommandExecutioner"), 
      /* 4 */ $asm0A.TypeRef("SharedXNA.IDebugEchoListner")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SharedXNA.RemoteDebugCommand/ConnectionPahse */ 

JSIL.MakeEnum(
  "SharedXNA.RemoteDebugCommand/ConnectionPahse", false, {
    None: 0, 
    EnsureSignedIn: 1, 
    FindSessions: 2, 
    Joining: 3
  }, false
);

/* enum SharedXNA.AppendNumberOptions */ 

JSIL.MakeEnum(
  "SharedXNA.AppendNumberOptions", true, {
    None: 0, 
    PositiveSign: 1, 
    NumberGroup: 2
  }, true
);

/* class SharedXNA.StringBuilderExtensions */ 

(function StringBuilderExtensions$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Globalization.NumberFormatInfo)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Globalization.CultureInfo)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Char)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Text.StringBuilder)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.SharedXNA.AppendNumberOptions)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.Double)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm09.System.Char))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm09.System.Int32))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Text.StringBuilder"), [$asm09.TypeRef("System.String")], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Text.StringBuilder"), [
        $jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Char")]), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Int32")
      ], []))) ();
  };

  function StringBuilderExtensions_AppendNumber$00 (builder, number) {
    $thisType.AppendNumbernternal(builder, number, 0, $T05().None);
  };

  function StringBuilderExtensions_AppendNumber$01 (builder, number, options) {
    $thisType.AppendNumbernternal(builder, number, 0, options);
  };

  function StringBuilderExtensions_AppendNumber$02 (builder, number) {
    $thisType.AppendNumber(builder, number, 2, $T05().None);
  };

  function StringBuilderExtensions_AppendNumber$03 (builder, number, options) {
    $thisType.AppendNumber(builder, number, 2, options);
  };

  function StringBuilderExtensions_AppendNumber$04 (builder, number, decimalCount, options) {
    if (isNaN(number)) {
      $S00().CallVirtual("Append", null, builder, "NaN");
      return;
    }
    if ($T06().IsNegativeInfinity(number)) {
      $S00().CallVirtual("Append", null, builder, "-Infinity");
      return;
    }
    if ($T06().IsPositiveInfinity(number)) {
      $S00().CallVirtual("Append", null, builder, "+Infinity");
      return;
    }
    var intNumber = (((number * $T06().$Cast(Math.pow(10, decimalCount))) + 0.5) | 0);
    $thisType.AppendNumbernternal(builder, intNumber, decimalCount, options);
  };

  function StringBuilderExtensions_AppendNumbernternal (builder, number, decimalCount, options) {
    var nfi = $T01().get_CurrentCulture().get_NumberFormat();
    var idx = $thisType.numberString.length;
    var decimalPos = ((idx - decimalCount) | 0);
    if (decimalPos === idx) {
      decimalPos = ((idx + 1) | 0);
    }
    var numberGroupIdx = 0;
    var numberGroupCount = (($thisType.numberGroupSizes[numberGroupIdx] + decimalCount) | 0);
    number = (Math.abs(number));

    do {
      if (idx === decimalPos) {
        $thisType.numberString[(idx = ((idx - 1) | 0))] = (nfi.get_NumberDecimalSeparator()[0]);
      }
      if (!(((numberGroupCount = ((numberGroupCount - 1) | 0)) >= 0) || ($T05().$Cast((options & $T05().NumberGroup)) === $T05().None))) {
        $thisType.numberString[(idx = ((idx - 1) | 0))] = (nfi.get_NumberGroupSeparator()[0]);
        if (numberGroupIdx < (($thisType.numberGroupSizes.length - 1) | 0)) {
          numberGroupIdx = ((numberGroupIdx + 1) | 0);
        }
        numberGroupCount = (($thisType.numberGroupSizes[numberGroupIdx] - 1) | 0);
      }
      $thisType.numberString[(idx = ((idx - 1) | 0))] = String.fromCharCode(((48 + ((number % 10) | 0)) | 0));
      number = ((number / 10) | 0);
    } while ((number > 0) || (decimalPos <= idx));
    if (number < 0) {
      $thisType.numberString[(idx = ((idx - 1) | 0))] = (nfi.get_NegativeSign()[0]);
    } else if ($T05().$Cast((options & $T05().PositiveSign)) !== $T05().None) {
      $thisType.numberString[(idx = ((idx - 1) | 0))] = (nfi.get_PositiveSign()[0]);
    }
    $S01().CallVirtual("Append", null, builder, $thisType.numberString, idx, (($thisType.numberString.length - idx) | 0));
  };

  JSIL.MakeStaticClass("SharedXNA.StringBuilderExtensions", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "AppendNumber", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Text.StringBuilder"), $.Int32], []), 
      StringBuilderExtensions_AppendNumber$00
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "AppendNumber", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $asm0A.TypeRef("SharedXNA.AppendNumberOptions")
        ], []), 
      StringBuilderExtensions_AppendNumber$01
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "AppendNumber", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Text.StringBuilder"), $.Single], []), 
      StringBuilderExtensions_AppendNumber$02
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "AppendNumber", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Text.StringBuilder"), $.Single, 
          $asm0A.TypeRef("SharedXNA.AppendNumberOptions")
        ], []), 
      StringBuilderExtensions_AppendNumber$03
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "AppendNumber", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Text.StringBuilder"), $.Single, 
          $.Int32, $asm0A.TypeRef("SharedXNA.AppendNumberOptions")
        ], []), 
      StringBuilderExtensions_AppendNumber$04
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:false}, "AppendNumbernternal", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $.Int32, $asm0A.TypeRef("SharedXNA.AppendNumberOptions")
        ], []), 
      StringBuilderExtensions_AppendNumbernternal
    );

    $.Field({Static:true , Public:false}, "numberGroupSizes", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:true , Public:false}, "numberString", $jsilcore.TypeRef("System.Array", [$.Char]), function ($pi) {
        return JSIL.Array.New($asm09.System.Char, 32);
      }); 
    function StringBuilderExtensions__cctor () {
      $thisType.numberGroupSizes = $T01().get_CurrentCulture().get_NumberFormat().get_NumberGroupSizes();
      $thisType.numberString = JSIL.Array.New($T02(), 32);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      StringBuilderExtensions__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class SharedXNA.TimeRuler */ 

(function TimeRuler$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0B.System.Diagnostics.Stopwatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.TimeRuler_MarkerInfo))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Collections.Generic.Dictionary$b2.Of($asm09.System.String, $asm09.System.Int32))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Text.StringBuilder)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.DrawableGameComponent)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameServiceContainer)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameComponent)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0A.SharedXNA.TimeRuler_FrameLog)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm09.System.Threading.Monitor)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm09.System.ArgumentOutOfRangeException)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0A.SharedXNA.TimeRuler_MarkerCollection)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm09.System.OverflowException)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0A.SharedXNA.TimeRuler_MarkerInfo)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm09.System.TimeSpan)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0A.SharedXNA.IDebugCommandHost)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm09.System.Collections.Generic.IList$b1.Of($asm09.System.String))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm09.System.Collections.Generic.ICollection$b1.Of($asm09.System.String))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize(System.Array.Of($asm09.System.Char))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm09.System.Char)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm09.System.Collections.Generic.IEnumerator$b1.Of($asm09.System.String))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm09.System.Collections.Generic.IEnumerable$b1.Of($asm09.System.String))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm09.System.Collections.IEnumerator)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize(System.Array.Of($asm09.System.String))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm09.System.Math)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm09.System.IDisposable)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm09.System.Threading.Interlocked)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm0A.SharedXNA.DebugManager)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize(System.Array.Of($asm0A.SharedXNA.TimeRuler_MarkerCollection))) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm0A.SharedXNA.StringBuilderExtensions)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm09.System.InvalidOperationException)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm0A.SharedXNA.DebugCommandExecute)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize(System.Array.Of($asm0A.SharedXNA.TimeRuler_FrameLog))) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm0A.SharedXNA.Layout)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm0A.SharedXNA.Alignment)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize(System.Array.Of($asm0A.SharedXNA.TimeRuler_MarkerLog))) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm0A.SharedXNA.TimeRuler_MarkerLog)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm09.System.Double)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.TimeRuler/MarkerInfo")]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.Int32")]), []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Text.StringBuilder"), [$asm09.TypeRef("System.Int32")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.ArgumentOutOfRangeException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.OverflowException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Int32")]), $asm09.TypeRef("System.Int32")], []))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Text.StringBuilder"), [$asm09.TypeRef("System.String")], []))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Text.StringBuilder"), $asm09.TypeRef("System.Int32")], []))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Text.StringBuilder"), $asm09.TypeRef("System.Single")], []))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.InvalidOperationException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("SharedXNA.Layout"), [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Viewport")]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [
        $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm09.TypeRef("System.Single"), 
        $asm09.TypeRef("System.Single"), $asm0A.TypeRef("SharedXNA.Alignment")
      ], []))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$jsilcore.TypeRef("JSIL.Reference", [$asm09.TypeRef("System.Int32")])], []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm09.System.Collections.Generic.ICollection$b1.Of($asm09.System.String).get_Count)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm09.System.Collections.Generic.IEnumerable$b1.Of($asm09.System.String).GetEnumerator)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm09.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm09.System.Collections.Generic.IEnumerator$b1.Of($asm09.System.String).get_Current)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm0A.SharedXNA.IDebugCommandHost.Echo)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm09.System.IDisposable.Dispose)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm0A.SharedXNA.IDebugCommandHost.RegisterCommand)) ();
  };

  function TimeRuler__ctor (game) {
    this.stopwatch = new ($T01())();
    this.markers = $S00().Construct();
    this.markerNameToIdMap = $S01().Construct();
    this.logString = $S02().Construct(512);
    $T05().prototype._ctor.call(this, game);
    this.get_Game().get_Services().AddService($thisType.__Type__, this);
  };

  function TimeRuler_BeginMark$00 (markerName, color) {
    this.BeginMark(0, markerName, color);
  };

  function TimeRuler_BeginMark$01 (barIndex, markerName, color) {
    var $temp00;
    var markerId = new JSIL.BoxedVariable(0);
    if (this.curLog === null) {
      return;
    }
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T0D().Enter(this, /* ref */ flag);
      if (!((barIndex >= 0) && (barIndex < 8))) {
        throw $S03().Construct("barIndex");
      }
      var bar = this.curLog.Bars[barIndex];
      if (bar.MarkCount >= 256) {
        throw $S04().Construct("Exceeded sample count.\nEither set larger number to TimeRuler.MaxSmpale orlower sample count.");
      }
      if (bar.NestCount >= 32) {
        throw $S04().Construct("Exceeded nest count.\nEither set larget number to TimeRuler.MaxNestCall orlower nest calls.");
      }
      if (!this.markerNameToIdMap.TryGetValue(markerName, /* ref */ markerId)) {
        markerId.set(this.markers.get_Count());
        this.markerNameToIdMap.Add(markerName, markerId.get());
        this.markers.Add(new ($T11())(markerName));
      }
      bar.MarkerNests[($temp00 = bar.NestCount, 
        bar.NestCount = ((bar.NestCount + 1) | 0), 
        $temp00)] = bar.MarkCount;
      bar.Markers[bar.MarkCount].MarkerId = markerId.get();
      bar.Markers[bar.MarkCount].Color = color;
      bar.Markers[bar.MarkCount].BeginTime = +$T12().$Cast(this.stopwatch.get_Elapsed().get_TotalMilliseconds());
      bar.Markers[bar.MarkCount].EndTime = +-1;
      bar.MarkCount = ((bar.MarkCount + 1) | 0);
    } finally {
      if (flag.get()) {
        $T0D().Exit(this);
      }
    }
  };

  function TimeRuler_CommandExecute (host, command, arguments) {
    var key = null;
    var previousVisible = this.get_Visible();
    if ($IM00().Call(arguments, null) === 0) {
      this.set_Visible(!this.get_Visible());
    }
    var subArgSeparator = JSIL.Array.New($T18(), [":"]);
    var enumerator = $IM01().Call(arguments, null);
    try {

      while ($IM02().Call(enumerator, null)) {
        var orgArg = $IM03().Call(enumerator, null);
        var arg = (orgArg.toLowerCase());
        var subargs = (JSIL.SplitString(arg, subArgSeparator));
        if ((key = subargs[0]) !== null) {
          switch (key) {
            case "on": 
              this.set_Visible(true);
              break;

            case "off": 
              this.set_Visible(false);
              break;

            case "reset": 
              this.ResetLog();
              break;

            case "log": 
              if (subargs.length > 1) {
                if ($T08().Compare(subargs[1], "on") === 0) {
                  this.TimeRuler$ShowLog$value = true;
                }
                if ($T08().Compare(subargs[1], "off") === 0) {
                  this.TimeRuler$ShowLog$value = false;
                }
              } else {
                this.TimeRuler$ShowLog$value = !this.TimeRuler$ShowLog$value;
              }
              break;

            case "frame": 
              var a = $T0A().Parse(subargs[1]);
              a = $T1D().Max(a, 1);
              a = $T1D().Min(a, 4);
              this.TimeRuler$TargetSampleFrames$value = a;
              break;

            case "/?": 
            case "--help": 
              $IM04().Call(host, null, "tr [log|on|off|reset|frame]");
              $IM04().Call(host, null, "Options:");
              $IM04().Call(host, null, "       on     Display TimeRuler.");
              $IM04().Call(host, null, "       off    Hide TimeRuler.");
              $IM04().Call(host, null, "       log    Show/Hide marker log.");
              $IM04().Call(host, null, "       reset  Reset marker log.");
              $IM04().Call(host, null, "       frame:sampleFrames");
              $IM04().Call(host, null, "              Change target sample frame count");
              break;

          }
        }
      }
    } finally {
      if (enumerator !== null) {
        $IM05().Call(enumerator, null);
      }
    }
    if (this.get_Visible() !== previousVisible) {
      $S05().CallStatic($T1F(), "Exchange", null, /* ref */ new JSIL.MemberReference(this, "updateCount"), 0);
    }
  };

  function TimeRuler_Draw$02 (gameTime) {
    this.Draw(this.position.MemberwiseClone(), this.TimeRuler$Width$value);
    $T05().prototype.Draw.call(this, gameTime);
  };

  function TimeRuler_Draw$03 (position, width) {
    var $temp00, $temp01;
    var rc2 = new ($T22())();
    if (this.prevLog === null) {
      return;
    }
    $S05().CallStatic($T1F(), "Exchange", null, /* ref */ new JSIL.MemberReference(this, "updateCount"), 0);
    var spriteBatch = this.debugManager.DebugManager$SpriteBatch$value;
    var font = this.debugManager.DebugManager$DebugFont$value;
    var texture = this.debugManager.DebugManager$WhiteTexture$value;
    var height = 0;
    var maxTime = +0;
    var bars = this.prevLog.Bars;

    for (var m = 0; m < bars.length; m = ((m + 1) | 0)) {
      var bar = bars[m];
      if (bar.MarkCount > 0) {
        height = ((height + 12) | 0);
        maxTime = +$T1D().Max(maxTime, bar.Markers[((bar.MarkCount - 1) | 0)].EndTime);
      }
    }
    var sampleSpan = +($T12().$Cast(this.sampleFrames) * 16.666666);
    if (maxTime > sampleSpan) {
      this.frameAdjust = (($T1D().Max(0, this.frameAdjust) + 1) | 0);
    } else {
      this.frameAdjust = (($T1D().Min(0, this.frameAdjust) - 1) | 0);
    }
    if ((Math.abs(this.frameAdjust)) > 30) {
      this.sampleFrames = $T1D().Min(4, this.sampleFrames);
      this.sampleFrames = $T1D().Max(this.TimeRuler$TargetSampleFrames$value, ((((maxTime / 16.666666) | 0) + 1) | 0));
      this.frameAdjust = 0;
    }
    var msToPs = +($T12().$Cast(width) / sampleSpan);
    var startY = ((((position.Y) | 0) - ((height - 8) | 0)) | 0);
    var y = startY;
    spriteBatch.Begin();
    var rc = new ($T22())(((position.X) | 0), y, width, height);
    spriteBatch.DrawRect(texture, rc, $jsilxna.ColorFromPremultipliedInts(null, 0, 0, 0, 128));
    rc.Height = 8;
    var bars2 = this.prevLog.Bars;

    for (var n = 0; n < bars2.length; n = ((n + 1) | 0)) {
      var bar2 = bars2[n];
      rc.Y = ((y + 2) | 0);
      if (bar2.MarkCount > 0) {

        for (var i = 0; i < bar2.MarkCount; i = ((i + 1) | 0)) {
          var bt = +bar2.Markers[i].BeginTime;
          var et = +bar2.Markers[i].EndTime;
          var sx = ((position.X + (bt * msToPs)) | 0);
          var ex = ((position.X + (et * msToPs)) | 0);
          rc.X = sx;
          rc.Width = $T1D().Max(((ex - sx) | 0), 1);
          spriteBatch.DrawRect(texture, rc, bar2.Markers[i].Color);
        }
      }
      y = ((y + 10) | 0);
    }
    $T22().prototype._ctor.call(rc, ((position.X) | 0), startY, 1, height);

    for (var t = +1; t < sampleSpan; t += +1) {
      rc.X = ((position.X + (t * msToPs)) | 0);
      spriteBatch.DrawRect(texture, rc, $T09().get_Gray());
    }

    for (var j = 0; j <= this.sampleFrames; j = ((j + 1) | 0)) {
      rc.X = ((position.X + ((16.666666 * $T12().$Cast(j)) * msToPs)) | 0);
      spriteBatch.DrawRect(texture, rc, $T09().get_White());
    }
    if (this.TimeRuler$ShowLog$value) {
      y = ((startY - font.get_LineSpacing()) | 0);
      this.logString.set_Length(0);

      for (var a$0 = this.markers._items, i$0 = 0, l$0 = this.markers._size; i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var markerInfo = a$0[i$0];

        for (var k = 0; k < 8; k = ((k + 1) | 0)) {
          if (markerInfo.Logs[k].Initialized) {
            if (this.logString.get_Length() > 0) {
              $S06().CallVirtual("Append", null, this.logString, "\n");
            }
            $S06().CallVirtual("Append", null, this.logString, " Bar ");
            $S07().CallStatic($T29(), "AppendNumber", null, this.logString, k);
            $S06().CallVirtual("Append", null, this.logString, " ");
            $S06().CallVirtual("Append", null, this.logString, markerInfo.Name);
            $S06().CallVirtual("Append", null, this.logString, " Avg.:");
            $S08().CallStatic($T29(), "AppendNumber", null, this.logString, markerInfo.Logs[k].SnapAvg);
            $S06().CallVirtual("Append", null, this.logString, "ms ");
            y = ((y - font.get_LineSpacing()) | 0);
          }
        }
      }
      var size = font.MeasureStringBuilder(this.logString).MemberwiseClone();
      $T22().prototype._ctor.call(rc, ((position.X) | 0), y, ((((size.X) | 0) + 12) | 0), ((size.Y) | 0));
      spriteBatch.DrawRect(texture, rc, $jsilxna.ColorFromPremultipliedInts(null, 0, 0, 0, 128));
      spriteBatch.DrawStringBuilder(font, this.logString, $S09().Construct((position.X + 12), $T12().$Cast(y)), $T09().get_White());
      y = ((y + (($T12().$Cast(font.get_LineSpacing()) * 0.3) | 0)) | 0);
      $T22().prototype._ctor.call(rc, ((((position.X) | 0) + 4) | 0), y, 10, 10);
      $T22().prototype._ctor.call(rc2, ((((position.X) | 0) + 5) | 0), ((y + 1) | 0), 8, 8);

      for (var a$1 = this.markers._items, i$1 = 0, l$1 = this.markers._size; i$1 < l$1; ($temp01 = i$1, 
          i$1 = ((i$1 + 1) | 0), 
          $temp01)) {
        var markerInfo2 = a$1[i$1];

        for (var l = 0; l < 8; l = ((l + 1) | 0)) {
          if (markerInfo2.Logs[l].Initialized) {
            rc.Y = y;
            rc2.Y = ((y + 1) | 0);
            spriteBatch.DrawRect(texture, rc, $T09().get_White());
            spriteBatch.DrawRect(texture, rc2, markerInfo2.Logs[l].Color);
            y = ((y + font.get_LineSpacing()) | 0);
          }
        }
      }
    }
    spriteBatch.End();
  };

  function TimeRuler_EndMark$04 (markerName) {
    this.EndMark(0, markerName);
  };

  function TimeRuler_EndMark$05 (barIndex, markerName) {
    var markerId = new JSIL.BoxedVariable(0);
    if (this.curLog === null) {
      return;
    }
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T0D().Enter(this, /* ref */ flag);
      if (!((barIndex >= 0) && (barIndex < 8))) {
        throw $S03().Construct("barIndex");
      }
      var bar = this.curLog.Bars[barIndex];
      if (bar.NestCount <= 0) {
        throw $S0A().Construct("Call BeingMark method before call EndMark method.");
      }
      if (!this.markerNameToIdMap.TryGetValue(markerName, /* ref */ markerId)) {
        throw $S0A().Construct($T08().Format("Maker '{0}' is not registered.Make sure you specified same name as you used for BeginMark method.", markerName));
      }
      var markerIdx = bar.MarkerNests[(bar.NestCount = ((bar.NestCount - 1) | 0))];
      if (bar.Markers[markerIdx].MarkerId !== markerId.get()) {
        throw $S0A().Construct("Incorrect call order of BeginMark/EndMark method.You call it like BeginMark(A), BeginMark(B), EndMark(B), EndMark(A) But you can't call it like BeginMark(A), BeginMark(B), EndMark(A), EndMark(B).");
      }
      bar.Markers[markerIdx].EndTime = +$T12().$Cast(this.stopwatch.get_Elapsed().get_TotalMilliseconds());
    } finally {
      if (flag.get()) {
        $T0D().Exit(this);
      }
    }
  };

  function TimeRuler_get_Position () {
    return this.position;
  };

  function TimeRuler_get_ShowLog () {
    return this.TimeRuler$ShowLog$value;
  };

  function TimeRuler_get_TargetSampleFrames () {
    return this.TimeRuler$TargetSampleFrames$value;
  };

  function TimeRuler_get_Width () {
    return this.TimeRuler$Width$value;
  };

  function TimeRuler_GetAverageTime (barIndex, markerName) {
    var markerId = new JSIL.BoxedVariable(0);
    if (!((barIndex >= 0) && (barIndex < 8))) {
      throw $S03().Construct("barIndex");
    }
    var result = +0;
    if (this.markerNameToIdMap.TryGetValue(markerName, /* ref */ markerId)) {
      result = +this.markers.get_Item(markerId.get()).Logs[barIndex].Avg;
    }
    return +result;
  };

  function TimeRuler_Initialize () {
    this.debugManager = $T24().$As(this.get_Game().get_Services().GetService($T24().__Type__));
    if (this.debugManager === null) {
      throw $S0A().Construct("DebugManager is not registered.");
    }
    var host = $T14().$As(this.get_Game().get_Services().GetService($T14().__Type__));
    if (host !== null) {
      $IM06().Call(host, null, "tr", "TimeRuler", $T2B().New(this, $thisType.prototype.CommandExecute));
      this.set_Visible(true);
    }
    this.logs = JSIL.Array.New($T0B(), 2);

    for (var i = 0; i < this.logs.length; i = ((i + 1) | 0)) {
      this.logs[i] = new ($T0B())();
    }
    this.sampleFrames = (this.TimeRuler$TargetSampleFrames$value = 1);
    this.set_Enabled(false);
    $T05().prototype.Initialize.call(this);
  };

  function TimeRuler_LoadContent () {
    this.TimeRuler$Width$value = (($T12().$Cast(this.get_GraphicsDevice().get_Viewport().get_Width()) * 0.8) | 0);
    var layout = $S0B().Construct(this.get_GraphicsDevice().get_Viewport().MemberwiseClone());
    this.position = $S0C().CallVirtual("Place", null, layout, $S09().Construct($T12().$Cast(this.TimeRuler$Width$value), 8), 0, 0.01, $T30().$Flags("Bottom", "BottomCenter", "HorizontalCenter"));
    $T05().prototype.LoadContent.call(this);
  };

  function TimeRuler_ResetLog () {
    var $temp00;
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T0D().Enter(this, /* ref */ flag);

      for (var a$0 = this.markers._items, i$0 = 0, l$0 = this.markers._size; i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var markerInfo = a$0[i$0];

        for (var i = 0; i < markerInfo.Logs.length; i = ((i + 1) | 0)) {
          var log = markerInfo.Logs[i];
          log.Initialized = false;
          log.SnapMin = +0;
          log.SnapMax = +0;
          log.SnapAvg = +0;
          log.Min = +0;
          log.Max = +0;
          log.Avg = +0;

          for (var j = 0; j < 60; j = ((j + 1) | 0)) {
            log.Samples[j] = +0;
          }
        }
      }
    } finally {
      if (flag.get()) {
        $T0D().Exit(this);
      }
    }
  };

  function TimeRuler_set_Position (value) {
    this.position = value;
  };

  function TimeRuler_set_ShowLog (value) {
    this.TimeRuler$ShowLog$value = value;
  };

  function TimeRuler_set_TargetSampleFrames (value) {
    this.TimeRuler$TargetSampleFrames$value = value;
  };

  function TimeRuler_set_Width (value) {
    this.TimeRuler$Width$value = value;
  };

  function TimeRuler_StartFrame () {
    var $temp00;
    var flag = new JSIL.BoxedVariable(false);
    try {
      $T0D().Enter(this, /* ref */ flag);
      var count = $S0D().CallStatic($T1F(), "Increment", null, /* ref */ new JSIL.MemberReference(this, "updateCount"));
      if (!this.get_Visible() || 
        (1 >= count) || (count >= 4)) {
        this.prevLog = this.logs[(($temp00 = this.frameCount, 
            this.frameCount = ((this.frameCount + 1) | 0), 
            $temp00) & 1)];
        this.curLog = this.logs[(this.frameCount & 1)];
        var endFrameTime = +$T12().$Cast(this.stopwatch.get_Elapsed().get_TotalMilliseconds());

        for (var barIdx = 0; barIdx < this.prevLog.Bars.length; barIdx = ((barIdx + 1) | 0)) {
          var prevBar = this.prevLog.Bars[barIdx];
          var nextBar = this.curLog.Bars[barIdx];

          for (var nest = 0; nest < prevBar.NestCount; nest = ((nest + 1) | 0)) {
            var markerIdx = prevBar.MarkerNests[nest];
            prevBar.Markers[markerIdx].EndTime = +endFrameTime;
            nextBar.MarkerNests[nest] = nest;
            nextBar.Markers[nest].MarkerId = prevBar.Markers[markerIdx].MarkerId;
            nextBar.Markers[nest].BeginTime = +0;
            nextBar.Markers[nest].EndTime = +-1;
            nextBar.Markers[nest].Color = prevBar.Markers[markerIdx].Color.MemberwiseClone();
          }

          for (var markerIdx2 = 0; markerIdx2 < prevBar.MarkCount; markerIdx2 = ((markerIdx2 + 1) | 0)) {
            var duration = +(prevBar.Markers[markerIdx2].EndTime - prevBar.Markers[markerIdx2].BeginTime);
            var markerId = prevBar.Markers[markerIdx2].MarkerId;
            var i = this.markers.get_Item(markerId);
            var log = i.Logs[barIdx];
            log.Color = prevBar.Markers[markerIdx2].Color.MemberwiseClone();
            if (!log.Initialized) {
              log.Min = +duration;
              log.Max = +duration;
              log.Samples[log.SampleIndex] = +duration;
              log.Initialized = true;
            } else {
              log.Min = +$T1D().Min(log.Min, duration);
              log.Max = +$T1D().Min(log.Max, duration);
              log.Samples[log.SampleIndex] = +duration;
              log.SnapMin = +log.Min;
              log.SnapMax = +log.Max;
            }
            var sampleTotal = +0;

            for (var j = 0; j < 60; j = ((j + 1) | 0)) {
              sampleTotal += +log.Samples[j];
            }
            log.Avg = +$T12().$Cast((sampleTotal / 60));
            log.SnapAvg = +$T12().$Cast((sampleTotal / 60));
            log.SampleIndex = ((((log.SampleIndex + 1) | 0) % 60) | 0);
          }
          nextBar.MarkCount = prevBar.NestCount;
          nextBar.NestCount = prevBar.NestCount;
        }
        this.stopwatch.Reset();
        this.stopwatch.Start();
      }
    } finally {
      if (flag.get()) {
        $T0D().Exit(this);
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Xna.Framework.DrawableGameComponent"), 
      Name: "SharedXNA.TimeRuler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.Game")], []), 
      TimeRuler__ctor
    );

    $.Method({Static:false, Public:true }, "BeginMark", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("Microsoft.Xna.Framework.Color")], []), 
      TimeRuler_BeginMark$00
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["TRACE"]; });

    $.Method({Static:false, Public:true }, "BeginMark", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      TimeRuler_BeginMark$01
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["TRACE"]; });

    $.Method({Static:false, Public:false}, "CommandExecute", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("SharedXNA.IDebugCommandHost"), $.String, 
          $asm09.TypeRef("System.Collections.Generic.IList`1", [$.String])
        ], []), 
      TimeRuler_CommandExecute
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      TimeRuler_Draw$02
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Int32], []), 
      TimeRuler_Draw$03
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["TRACE"]; });

    $.Method({Static:false, Public:true }, "EndMark", 
      new JSIL.MethodSignature(null, [$.String], []), 
      TimeRuler_EndMark$04
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["TRACE"]; });

    $.Method({Static:false, Public:true }, "EndMark", 
      new JSIL.MethodSignature(null, [$.Int32, $.String], []), 
      TimeRuler_EndMark$05
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["TRACE"]; });

    $.Method({Static:false, Public:true }, "get_Position", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], []), 
      TimeRuler_get_Position
    );

    $.Method({Static:false, Public:true }, "get_ShowLog", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      TimeRuler_get_ShowLog
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TargetSampleFrames", 
      new JSIL.MethodSignature($.Int32, [], []), 
      TimeRuler_get_TargetSampleFrames
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Width", 
      new JSIL.MethodSignature($.Int32, [], []), 
      TimeRuler_get_Width
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "GetAverageTime", 
      new JSIL.MethodSignature($.Single, [$.Int32, $.String], []), 
      TimeRuler_GetAverageTime
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], []), 
      TimeRuler_Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "LoadContent", 
      new JSIL.MethodSignature(null, [], []), 
      TimeRuler_LoadContent
    );

    $.Method({Static:false, Public:true }, "ResetLog", 
      new JSIL.MethodSignature(null, [], []), 
      TimeRuler_ResetLog
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["TRACE"]; });

    $.Method({Static:false, Public:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      TimeRuler_set_Position
    );

    $.Method({Static:false, Public:true }, "set_ShowLog", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      TimeRuler_set_ShowLog
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_TargetSampleFrames", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      TimeRuler_set_TargetSampleFrames
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Width", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      TimeRuler_set_Width
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "StartFrame", 
      new JSIL.MethodSignature(null, [], []), 
      TimeRuler_StartFrame
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["TRACE"]; });

    $.Constant({Static:true , Public:false}, "MaxBars", 8); 
    $.Constant({Static:true , Public:false}, "MaxSamples", 256); 
    $.Constant({Static:true , Public:false}, "MaxNestCall", 32); 
    $.Constant({Static:true , Public:false}, "MaxSampleFrames", 4); 
    $.Constant({Static:true , Public:false}, "BarHeight", 8); 
    $.Constant({Static:true , Public:false}, "BarPadding", 2); 
    $.Constant({Static:true , Public:false}, "AutoAdjustDelay", 30); 
    $.Field({Static:false, Public:false}, "debugManager", $asm0A.TypeRef("SharedXNA.DebugManager")); 
    $.Field({Static:false, Public:false}, "logs", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("SharedXNA.TimeRuler/FrameLog")])); 
    $.Field({Static:false, Public:false}, "prevLog", $asm0A.TypeRef("SharedXNA.TimeRuler/FrameLog")); 
    $.Field({Static:false, Public:false}, "curLog", $asm0A.TypeRef("SharedXNA.TimeRuler/FrameLog")); 
    $.Field({Static:false, Public:false}, "frameCount", $.Int32); 
    $.Field({Static:false, Public:false}, "stopwatch", $asm0B.TypeRef("System.Diagnostics.Stopwatch")); 
    $.Field({Static:false, Public:false}, "markers", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.TimeRuler/MarkerInfo")])); 
    $.Field({Static:false, Public:false}, "markerNameToIdMap", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32])); 
    $.Field({Static:false, Public:false}, "frameAdjust", $.Int32); 
    $.Field({Static:false, Public:false}, "sampleFrames", $.Int32); 
    $.Field({Static:false, Public:false}, "logString", $asm09.TypeRef("System.Text.StringBuilder")); 
    $.Field({Static:false, Public:false}, "updateCount", $.Int32); 
    $.Field({Static:false, Public:false}, "position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "TimeRuler$ShowLog$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TimeRuler$TargetSampleFrames$value", $.Int32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TimeRuler$Width$value", $.Int32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "ShowLog", $.Boolean);

    $.Property({Static:false, Public:true }, "TargetSampleFrames", $.Int32);

    $.Property({Static:false, Public:true }, "Position", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SharedXNA.TimeRuler/Marker */ 

(function Marker$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "SharedXNA.TimeRuler/Marker", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "MarkerId", $.Int32); 
    $.Field({Static:false, Public:true }, "BeginTime", $.Single); 
    $.Field({Static:false, Public:true }, "EndTime", $.Single); 
    $.Field({Static:false, Public:true }, "Color", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.TimeRuler/MarkerCollection */ 

(function MarkerCollection$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.TimeRuler_Marker)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Int32)) ();
  };

  function MarkerCollection__ctor () {
    this.Markers = JSIL.Array.New($T00(), 256);
    this.MarkerNests = JSIL.Array.New($T01(), 32);
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.TimeRuler/MarkerCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      MarkerCollection__ctor
    );

    $.Field({Static:false, Public:true }, "Markers", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("SharedXNA.TimeRuler/Marker")])); 
    $.Field({Static:false, Public:true }, "MarkCount", $.Int32); 
    $.Field({Static:false, Public:true }, "MarkerNests", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:true }, "NestCount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.TimeRuler/FrameLog */ 

(function FrameLog$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.TimeRuler_MarkerCollection)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Int32)) ();
  };

  function FrameLog__ctor () {
    this.Bars = JSIL.Array.New($T00(), 8);

    for (var i = 0; i < 8; i = ((i + 1) | 0)) {
      this.Bars[i] = new ($T00())();
    }
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.TimeRuler/FrameLog", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      FrameLog__ctor
    );

    $.Field({Static:false, Public:true }, "Bars", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("SharedXNA.TimeRuler/MarkerCollection")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.TimeRuler/MarkerInfo */ 

(function MarkerInfo$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.TimeRuler_MarkerLog)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm0A.SharedXNA.TimeRuler_MarkerLog))) ();
  };

  function MarkerInfo__ctor (name) {
    this.Logs = JSIL.Array.New($T01(), 8);
    this.Name = name;

    for (var i = 0; i < this.Logs.length; i = ((i + 1) | 0)) {
      this.Logs[i] = new ($T01())();
    }
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.TimeRuler/MarkerInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], []), 
      MarkerInfo__ctor
    );

    $.Field({Static:false, Public:true }, "Name", $.String); 
    $.Field({Static:false, Public:true }, "Logs", $jsilcore.TypeRef("System.Array", [$asm0A.TypeRef("SharedXNA.TimeRuler/MarkerLog")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.TimeRuler/MarkerLog */ 

(function MarkerLog$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Single)) ();
  };

  function MarkerLog__ctor () {
    this.Samples = JSIL.Array.New($T00(), 60);
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.TimeRuler/MarkerLog", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      MarkerLog__ctor
    );

    $.Constant({Static:true , Public:true }, "MaxSamples", 60); 
    $.Field({Static:false, Public:true }, "SnapMin", $.Single); 
    $.Field({Static:false, Public:true }, "SnapMax", $.Single); 
    $.Field({Static:false, Public:true }, "SnapAvg", $.Single); 
    $.Field({Static:false, Public:true }, "Min", $.Single); 
    $.Field({Static:false, Public:true }, "Max", $.Single); 
    $.Field({Static:false, Public:true }, "Avg", $.Single); 
    $.Field({Static:false, Public:true }, "Samples", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Field({Static:false, Public:true }, "SampleIndex", $.Int32); 
    $.Field({Static:false, Public:true }, "Color", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:true }, "Initialized", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.Dispatcher */ 

(function Dispatcher$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.Dispatcher_ActionEntry))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameComponent)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Collections.ObjectModel.Collection$b1.Of($asm02.Microsoft.Xna.Framework.IGameComponent))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Action$b1.Of($asm02.Microsoft.Xna.Framework.Game))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0A.SharedXNA.Dispatcher_$l$gc__DisplayClass1)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.SharedXNA.Dispatcher_ActionEntry)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.Math)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0D.System.Linq.Enumerable)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm09.System.TimeSpan)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.Dispatcher/ActionEntry")]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.IGameComponent")], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Boolean")])], ["TSource"]))) ();
  };

  function Dispatcher__ctor (game) {
    this.m_events = $S00().Construct();
    $T02().prototype._ctor.call(this, game);
    $S01().CallVirtual("Add", null, game.get_Components(), this);
  };

  function Dispatcher_Invoke$00 (action) {
    this.Invoke(action, 0);
  };

  function Dispatcher_Invoke$01 (action, delaySeconds) {
    var $closure0 = new ($T06())();
    $closure0.delaySeconds = +delaySeconds;
    var actionStruct = new ($T07())();
    actionStruct.Action = action;
    actionStruct.OriginalDelay = +($closure0.delaySeconds * 1000);
    actionStruct.TimeLeft = +($closure0.delaySeconds * 1000);
    var index = $T09().Max(0, this.m_events.IndexOf($S02().CallStatic($T0A(), "FirstOrDefault$b1", [$asm0A.SharedXNA.Dispatcher_ActionEntry], this.m_events, function (ae) {
            return (ae.TimeLeft > (this.delaySeconds * 1000));
          }.bind($closure0))));
    this.m_events.Insert(index, actionStruct);
  };

  function Dispatcher_Update (gameTime) {
    var elapsedMS = gameTime.get_ElapsedGameTime().get_Milliseconds();

    for (var i = 0; i < this.m_events.get_Count(); i = ((i + 1) | 0)) {
      var entry = this.m_events.get_Item(i);
      entry.TimeLeft -= +$T05().$Cast(elapsedMS);
      if (entry.TimeLeft <= 0) {
        entry.Action(this.get_Game());
        this.m_events.RemoveAt(i);
        i = ((i - 1) | 0);
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Xna.Framework.GameComponent"), 
      Name: "SharedXNA.Dispatcher", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.Game")], []), 
      Dispatcher__ctor
    );

    $.Method({Static:false, Public:true }, "Invoke", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action`1", [$asm02.TypeRef("Microsoft.Xna.Framework.Game")])], []), 
      Dispatcher_Invoke$00
    );

    $.Method({Static:false, Public:true }, "Invoke", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Action`1", [$asm02.TypeRef("Microsoft.Xna.Framework.Game")]), $.Single], []), 
      Dispatcher_Invoke$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      Dispatcher_Update
    );

    $.Field({Static:false, Public:false}, "m_events", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.Dispatcher/ActionEntry")])); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.Dispatcher/ActionEntry */ 

(function ActionEntry$Members () {
  var $, $thisType;
  function ActionEntry__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.Dispatcher/ActionEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ActionEntry__ctor
    );

    $.Field({Static:false, Public:true }, "Action", $asm09.TypeRef("System.Action`1", [$asm02.TypeRef("Microsoft.Xna.Framework.Game")])); 
    $.Field({Static:false, Public:true }, "OriginalDelay", $.Single); 
    $.Field({Static:false, Public:true }, "TimeLeft", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.Dispatcher/<>c__DisplayClass1 */ 

(function $l$gc__DisplayClass1$Members () {
  var $, $thisType;
  function $l$gc__DisplayClass1__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.Dispatcher/<>c__DisplayClass1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      $l$gc__DisplayClass1__ctor
    );

    $.Field({Static:false, Public:true }, "delaySeconds", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class SharedXNA.DoubleEx */ 

(function DoubleEx$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Double)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Math)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };

  function DoubleEx_ToVector2 (radians) {
    var rad = +($T01().IEEERemainder(radians, 6.2831854820251465) + ((radians < 0) ? 6.28318548 : 0));
    return $S00().Construct($T03().$Cast(Math.cos(rad)), $T03().$Cast(Math.sin(rad)));
  };

  JSIL.MakeStaticClass("SharedXNA.DoubleEx", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "ToVector2", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$.Double], []), 
      DoubleEx_ToVector2
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class SharedXNA.PointEx */ 

(function PointEx$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };

  function PointEx_ToVector2 (input) {
    return $S00().Construct($T02().$Cast(input.X), $T02().$Cast(input.Y));
  };

  JSIL.MakeStaticClass("SharedXNA.PointEx", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "ToVector2", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Point")], []), 
      PointEx_ToVector2
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class SharedXNA.RectangleEx */ 

(function RectangleEx$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };

  function RectangleEx_BottomCenter (rect) {
    return $S00().Construct(($T02().$Cast(rect.X) + ($T02().$Cast(rect.Width) / 2)), $T02().$Cast(rect.get_Bottom()));
  };

  function RectangleEx_GetIntersectionDepth (rectA, rectB) {
    var halfWidthA = +($T02().$Cast(rectA.Width) / 2);
    var halfHeightA = +($T02().$Cast(rectA.Height) / 2);
    var halfWidthB = +($T02().$Cast(rectB.Width) / 2);
    var halfHeightB = +($T02().$Cast(rectB.Height) / 2);
    var centerA = $S00().Construct(($T02().$Cast(rectA.get_Left()) + halfWidthA), ($T02().$Cast(rectA.get_Top()) + halfHeightA));
    var centerB = $S00().Construct(($T02().$Cast(rectB.get_Left()) + halfWidthB), ($T02().$Cast(rectB.get_Top()) + halfHeightB));
    var distanceX = +(centerA.X - centerB.X);
    var distanceY = +(centerA.Y - centerB.Y);
    var minDistanceX = +(halfWidthA + halfWidthB);
    var minDistanceY = +(halfHeightA + halfHeightB);
    if (!(((Math.abs(distanceX)) < minDistanceX) && ((Math.abs(distanceY)) < minDistanceY))) {
      return $T01().get_Zero();
    }
    var depthX = +((distanceX > 0) ? (minDistanceX - distanceX) : (-minDistanceX - distanceX));
    var depthY = +((distanceY > 0) ? (minDistanceY - distanceY) : (-minDistanceY - distanceY));
    return $S00().Construct(depthX, depthY);
  };

  function RectangleEx_LeftCenter (rect) {
    return $S00().Construct($T02().$Cast(rect.get_Left()), ($T02().$Cast(rect.Y) + ($T02().$Cast(rect.Height) / 2)));
  };

  function RectangleEx_RightCenter (rect) {
    return $S00().Construct($T02().$Cast(rect.get_Right()), ($T02().$Cast(rect.Y) + ($T02().$Cast(rect.Height) / 2)));
  };

  function RectangleEx_TopCenter (rect) {
    return $S00().Construct(($T02().$Cast(rect.X) + ($T02().$Cast(rect.Width) / 2)), $T02().$Cast(rect.get_Top()));
  };

  JSIL.MakeStaticClass("SharedXNA.RectangleEx", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "BottomCenter", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")], []), 
      RectangleEx_BottomCenter
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "GetIntersectionDepth", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")], []), 
      RectangleEx_GetIntersectionDepth
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "LeftCenter", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")], []), 
      RectangleEx_LeftCenter
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "RightCenter", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")], []), 
      RectangleEx_RightCenter
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "TopCenter", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")], []), 
      RectangleEx_TopCenter
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class SharedXNA.SingleEx */ 

(function SingleEx$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Double)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Math)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };

  function SingleEx_ToVector2 (radians) {
    var rad = +($T02().IEEERemainder(radians, 6.2831854820251465) + ((radians < 0) ? 6.28318548 : 0));
    return $S00().Construct($T00().$Cast(Math.cos(rad)), $T00().$Cast(Math.sin(rad)));
  };

  JSIL.MakeStaticClass("SharedXNA.SingleEx", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "ToVector2", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$.Single], []), 
      SingleEx_ToVector2
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* enum SharedXNA.Anchor */ 

JSIL.MakeEnum(
  "SharedXNA.Anchor", false, {
    TopLeft: 1, 
    BottomLeft: 2, 
    TopRight: 3, 
    BottomRight: 4
  }, false
);

/* class SharedXNA.Utils */ 

(function Utils$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Random)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Double)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Void)) ();
  };

  function Utils__ctor () {
  };

  function Utils_BoundedRandom$00 (RNG, min, max) {
    var t = +$T01().$Cast(RNG.NextDouble());
    return +((t * (max - min)) + min);
  };

  function Utils_BoundedRandom$01 (RNG, min, max) {
    var t = +$T01().$Cast(RNG.NextDouble());
    return (((t * $T01().$Cast(((max - min) | 0))) + $T01().$Cast(min)) | 0);
  };

  function Utils_Brighten (c, factor) {
    var result = new ($T03())();
    var r = +(c.get_R() * factor);
    var g = +(c.get_G() * factor);
    var b = +(c.get_B() * factor);
    $jsilxna.ColorFromPremultipliedInts(result, (($T04().Clamp(r, 0, 255)) | 0), (($T04().Clamp(g, 0, 255)) | 0), (($T04().Clamp(b, 0, 255)) | 0), c.get_A());
    return result;
  };

  function Utils_Pulsate (phase, time, frequency, min, max) {
    return +$T01().$Cast((min + ((max - min) * (0.5 + (0.5 * (Math.sin((phase + (((time * frequency) * 3.1415926535897931) * 2)))))))));
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.Utils", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Utils__ctor
    );

    $.Method({Static:true , Public:true }, "BoundedRandom", 
      new JSIL.MethodSignature($.Single, [
          $asm09.TypeRef("System.Random"), $.Single, 
          $.Single
        ], []), 
      Utils_BoundedRandom$00
    );

    $.Method({Static:true , Public:true }, "BoundedRandom", 
      new JSIL.MethodSignature($.Int32, [
          $asm09.TypeRef("System.Random"), $.Int32, 
          $.Int32
        ], []), 
      Utils_BoundedRandom$01
    );

    $.Method({Static:true , Public:true }, "Brighten", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Color"), [$asm01.TypeRef("Microsoft.Xna.Framework.Color"), $.Single], []), 
      Utils_Brighten
    );

    $.Method({Static:true , Public:true }, "Pulsate", 
      new JSIL.MethodSignature($.Single, [
          $.Double, $.Double, 
          $.Single, $.Single, 
          $.Single
        ], []), 
      Utils_Pulsate
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.Vector2Ex */ 

(function Vector2Ex$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Double)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [
        $asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single"), 
        $asm09.TypeRef("System.Single")
      ]))) ();
  };

  function Vector2Ex_DirectionTo$00 (cur, target) {
    var result = $T00().op_Subtraction($S00().Construct(target.X, target.Y), cur);
    result.Normalize();
    return result;
  };

  function Vector2Ex_DirectionTo$01 (cur, target) {
    var result = $T00().op_Subtraction($S00().Construct(target.X, target.Y), cur);
    result.Normalize();
    return result;
  };

  function Vector2Ex_ToPoint (input) {
    return new ($T02())(((input.X) | 0), ((input.Y) | 0));
  };

  function Vector2Ex_ToRadians (input) {
    return +$T03().$Cast(Math.atan2(input.Y, input.X));
  };

  function Vector2Ex_ToVector3 (v) {
    return $S01().Construct(v.X, v.Y, 0);
  };

  JSIL.MakeStaticClass("SharedXNA.Vector2Ex", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "DirectionTo", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], []), 
      Vector2Ex_DirectionTo$00
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "DirectionTo", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      Vector2Ex_DirectionTo$01
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "ToPoint", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Point"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      Vector2Ex_ToPoint
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "ToRadians", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      Vector2Ex_ToRadians
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "ToVector3", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      Vector2Ex_ToVector3
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class SharedXNA.Vector3Ex */ 

(function Vector3Ex$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Double)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };

  function Vector3Ex_DirectionTo (cur, target) {
    var result = $T00().op_Subtraction(target, cur);
    result.Normalize();
    return result;
  };

  function Vector3Ex_ToRadiansXY (input) {
    return +$T01().$Cast(Math.atan2(input.Y, input.X));
  };

  function Vector3Ex_ToRadiansXZ (input) {
    return +$T01().$Cast(Math.atan2(input.Z, input.X));
  };

  function Vector3Ex_ToRadiansYZ (input) {
    return +$T01().$Cast(Math.atan2(input.Z, input.Y));
  };

  function Vector3Ex_ToVector2 (v) {
    return $S00().Construct(v.X, v.Y);
  };

  JSIL.MakeStaticClass("SharedXNA.Vector3Ex", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "DirectionTo", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], []), 
      Vector3Ex_DirectionTo
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "ToRadiansXY", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], []), 
      Vector3Ex_ToRadiansXY
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "ToRadiansXZ", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], []), 
      Vector3Ex_ToRadiansXZ
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "ToRadiansYZ", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], []), 
      Vector3Ex_ToRadiansYZ
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.Method({Static:true , Public:true }, "ToVector2", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], []), 
      Vector3Ex_ToVector2
    )
      .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm0D.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class SharedXNA.GameMode */ 

(function GameMode$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };

  function GameMode__ctor$00 () {
  };

  function GameMode_Draw (gameTime) {
  };

  function GameMode_EnterState () {
  };

  function GameMode_ExitState () {
  };

  function GameMode_GUI (gameTime) {
  };

  function GameMode_IsExclusive () {
    return true;
  };

  function GameMode_Update (gameTime) {
  };

  function GameMode_UpdateInput (gameTime) {
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.GameMode", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      GameMode__ctor$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      GameMode_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "EnterState", 
      new JSIL.MethodSignature(null, [], []), 
      GameMode_EnterState
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ExitState", 
      new JSIL.MethodSignature(null, [], []), 
      GameMode_ExitState
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GUI", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      GameMode_GUI
    );

    $.Method({Static:false, Public:true , Virtual:true }, "IsExclusive", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      GameMode_IsExclusive
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      GameMode_Update
    );

    $.Method({Static:false, Public:true , Virtual:true }, "UpdateInput", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      GameMode_UpdateInput
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate SharedXNA.GameMode/GameModeEvent */ 

JSIL.MakeDelegate("SharedXNA.GameMode/GameModeEvent", false, []);

/* class SharedXNA.GameModeManager */ 

(function GameModeManager$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.GameMode))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.SharedXNA.GameMode)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.UI)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.GameMode")]), []))) ();
  };

  function GameModeManager__ctor () {
  };

  function GameModeManager_Draw (gameTime) {
    var firstVisibleMenu = (($thisType.Menus.get_Count() - 1) | 0);

  $loop0: 
    for (var i = (($thisType.Menus.get_Count() - 1) | 0); i >= 0; i = ((i - 1) | 0)) {
      firstVisibleMenu = i;
      if ($thisType.Menus.get_Item(i).IsExclusive()) {
        break $loop0;
      }
    }
    if (firstVisibleMenu >= 0) {

      for (var j = firstVisibleMenu; j < $thisType.Menus.get_Count(); j = ((j + 1) | 0)) {
        $thisType.Menus.get_Item(j).Draw(gameTime);
      }
    }
    var mode = $thisType.TopMenu();
    if (mode !== null) {
      $T04().BeginGUI();
      mode.GUI(gameTime);
      $T04().EndGUI();
    }
  };

  function GameModeManager_PopMenu () {
    if ($thisType.Menus.get_Count() > 0) {
      $thisType.TopMenu().ExitState();
      $thisType.Menus.RemoveAt((($thisType.Menus.get_Count() - 1) | 0));
      var NewTop = $thisType.TopMenu();
      if (NewTop !== null) {
        NewTop.EnterState();
      }
    }
  };

  function GameModeManager_PopToMenu (mode) {

    while (($thisType.Menus.get_Count() > 0) && ($thisType.TopMenu() !== mode)) {
      $thisType.PopMenu();
    }
    if ($thisType.Menus.get_Count() === 0) {
      $thisType.PushMenu(mode);
    }
  };

  function GameModeManager_PushMenu (mode) {
    var LastMode = $thisType.TopMenu();
    if (LastMode !== null) {
      LastMode.ExitState();
    }
    $thisType.Menus.Add(mode);
    mode.EnterState();
  };

  function GameModeManager_TopMenu () {
    if ($thisType.Menus.get_Count() <= 0) {
      return null;
    }
    return $thisType.Menus.get_Item((($thisType.Menus.get_Count() - 1) | 0));
  };

  function GameModeManager_Update (gameTime) {
    var mode = $thisType.TopMenu();
    if (mode !== null) {
      if ($T06().Game.get_IsActive()) {
        mode.UpdateInput(gameTime);
      }
      mode.Update(gameTime);
    }
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.GameModeManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      GameModeManager__ctor
    );

    $.Method({Static:true , Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      GameModeManager_Draw
    );

    $.Method({Static:true , Public:true }, "PopMenu", 
      new JSIL.MethodSignature(null, [], []), 
      GameModeManager_PopMenu
    );

    $.Method({Static:true , Public:true }, "PopToMenu", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.GameMode")], []), 
      GameModeManager_PopToMenu
    );

    $.Method({Static:true , Public:true }, "PushMenu", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.GameMode")], []), 
      GameModeManager_PushMenu
    );

    $.Method({Static:true , Public:true }, "TopMenu", 
      new JSIL.MethodSignature($asm0A.TypeRef("SharedXNA.GameMode"), [], []), 
      GameModeManager_TopMenu
    );

    $.Method({Static:true , Public:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      GameModeManager_Update
    );

    $.Field({Static:true , Public:false}, "Menus", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.GameMode")])); 
    function GameModeManager__cctor () {
      $thisType.Menus = $S00().Construct();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      GameModeManager__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.MenuSoundEvents */ 

(function MenuSoundEvents$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Int32)) ();
  };

  function MenuSoundEvents__ctor () {
  };

  function MenuSoundEvents_TriggerMenuCancel () {
  };

  function MenuSoundEvents_TriggerMenuDown (OldIndex, NewIndex, NumIndices) {
  };

  function MenuSoundEvents_TriggerMenuSelect () {
  };

  function MenuSoundEvents_TriggerMenuUp (OldIndex, NewIndex, NumIndices) {
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.MenuSoundEvents", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      MenuSoundEvents__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "TriggerMenuCancel", 
      new JSIL.MethodSignature(null, [], []), 
      MenuSoundEvents_TriggerMenuCancel
    );

    $.Method({Static:false, Public:true , Virtual:true }, "TriggerMenuDown", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ], []), 
      MenuSoundEvents_TriggerMenuDown
    );

    $.Method({Static:false, Public:true , Virtual:true }, "TriggerMenuSelect", 
      new JSIL.MethodSignature(null, [], []), 
      MenuSoundEvents_TriggerMenuSelect
    );

    $.Method({Static:false, Public:true , Virtual:true }, "TriggerMenuUp", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ], []), 
      MenuSoundEvents_TriggerMenuUp
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.MenuEventManager */ 

(function MenuEventManager$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.MenuSoundEvents)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Int32)) ();
  };

  function MenuEventManager__ctor () {
  };

  function MenuEventManager_TriggerMenuCancel () {
    $thisType.Handler.TriggerMenuSelect();
  };

  function MenuEventManager_TriggerMenuDown (OldIndex, NewIndex, NumIndices) {
    $thisType.Handler.TriggerMenuDown(OldIndex, NewIndex, NumIndices);
  };

  function MenuEventManager_TriggerMenuSelect () {
    $thisType.Handler.TriggerMenuSelect();
  };

  function MenuEventManager_TriggerMenuUp (OldIndex, NewIndex, NumIndices) {
    $thisType.Handler.TriggerMenuUp(OldIndex, NewIndex, NumIndices);
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.MenuEventManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      MenuEventManager__ctor
    );

    $.Method({Static:true , Public:true }, "TriggerMenuCancel", 
      new JSIL.MethodSignature(null, [], []), 
      MenuEventManager_TriggerMenuCancel
    );

    $.Method({Static:true , Public:true }, "TriggerMenuDown", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ], []), 
      MenuEventManager_TriggerMenuDown
    );

    $.Method({Static:true , Public:true }, "TriggerMenuSelect", 
      new JSIL.MethodSignature(null, [], []), 
      MenuEventManager_TriggerMenuSelect
    );

    $.Method({Static:true , Public:true }, "TriggerMenuUp", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ], []), 
      MenuEventManager_TriggerMenuUp
    );

    $.Field({Static:true , Public:true }, "Handler", $asm0A.TypeRef("SharedXNA.MenuSoundEvents")); 
    function MenuEventManager__cctor () {
      $thisType.Handler = new ($T00())();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      MenuEventManager__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.MenuItem */ 

(function MenuItem$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.MenuItem_MenuItemEvent)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.MenuItem_MenuItemEventQuery)) ();
  };

  function MenuItem__ctor$00 () {
    this.Text = "";
    this.OnItemSelected = null;
  };

  function MenuItem__ctor$01 (_text, _handler) {
    this.Text = _text;
    this.OnItemSelected = _handler;
  };

  function MenuItem__ctor$02 (_text, description, _handler) {
    this.Text = _text;
    this.OnItemSelected = _handler;
  };

  function MenuItem_get_IsVisible () {
    return ((this.OnIsItemVisible === null) || this.OnIsItemVisible(this));
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.MenuItem", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      MenuItem__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm0A.TypeRef("SharedXNA.MenuItem/MenuItemEvent")], []), 
      MenuItem__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm0A.TypeRef("SharedXNA.MenuItem/MenuItemEvent")
        ], []), 
      MenuItem__ctor$02
    );

    $.Method({Static:false, Public:true }, "get_IsVisible", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      MenuItem_get_IsVisible
    );

    $.Field({Static:false, Public:true }, "Tag", $.Object); 
    $.Field({Static:false, Public:true }, "Text", $.String); 
    $.Field({Static:false, Public:true }, "OnItemSelected", $asm0A.TypeRef("SharedXNA.MenuItem/MenuItemEvent")); 
    $.Field({Static:false, Public:true }, "OnIsItemVisible", $asm0A.TypeRef("SharedXNA.MenuItem/MenuItemEventQuery")); 
    $.Field({Static:false, Public:true }, "OnUpdate", $asm0A.TypeRef("SharedXNA.MenuItem/MenuItemEvent")); 
    $.Property({Static:false, Public:true }, "IsVisible", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate SharedXNA.MenuItem/MenuItemEvent */ 

JSIL.MakeDelegate("SharedXNA.MenuItem/MenuItemEvent", false, []);

/* delegate SharedXNA.MenuItem/MenuItemEventQuery */ 

JSIL.MakeDelegate("SharedXNA.MenuItem/MenuItemEventQuery", false, []);

/* class SharedXNA.UpdateIntegerMenuItem */ 

(function UpdateIntegerMenuItem$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.MenuItem)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.MenuItem_MenuItemEvent)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.SharedXNA.InputState)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };

  function UpdateIntegerMenuItem__ctor$00 (DefaultValue, MinValue, MaxValue, ChangeIncrement) {
    $T01().prototype._ctor.call(this);
    this.OnUpdate = $T02().New(this, $thisType.prototype.MyUpdate);
    this.MyValue = DefaultValue;
    this.MyMinValue = MinValue;
    this.MyMaxValue = MaxValue;
    this.MyChangeIncrement = ChangeIncrement;
  };

  function UpdateIntegerMenuItem__ctor$01 (DefaultValue, MinValue, MaxValue, ChangeIncrement, ChangeHandler) {
    $T01().prototype._ctor.call(this);
    this.OnUpdate = $T02().New(this, $thisType.prototype.MyUpdate);
    this.MyValue = DefaultValue;
    this.MyMinValue = MinValue;
    this.MyMaxValue = MaxValue;
    this.MyChangeIncrement = ChangeIncrement;
    this.OnValueChanged = ChangeHandler;
  };

  function UpdateIntegerMenuItem_get_Value () {
    return this.MyValue;
  };

  function UpdateIntegerMenuItem_MyUpdate (self) {
    if ($T04().IM.IsMenuLeft(null)) {
      this.MyValue = ((this.MyValue - this.MyChangeIncrement) | 0);
      if (this.MyValue < this.MyMinValue) {
        this.MyValue = this.MyMinValue;
      }
      if (this.OnValueChanged !== null) {
        this.OnValueChanged(self);
        return;
      }
    } else if ($T04().IM.IsMenuRight(null)) {
      this.MyValue = ((this.MyValue + this.MyChangeIncrement) | 0);
      if (this.MyValue > this.MyMaxValue) {
        this.MyValue = this.MyMaxValue;
      }
      if (this.OnValueChanged !== null) {
        this.OnValueChanged(self);
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.MenuItem"), 
      Name: "SharedXNA.UpdateIntegerMenuItem", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ], []), 
      UpdateIntegerMenuItem__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm0A.TypeRef("SharedXNA.MenuItem/MenuItemEvent")
        ], []), 
      UpdateIntegerMenuItem__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Int32, [], []), 
      UpdateIntegerMenuItem_get_Value
    );

    $.Method({Static:false, Public:false}, "MyUpdate", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.MenuItem")], []), 
      UpdateIntegerMenuItem_MyUpdate
    );

    $.Field({Static:false, Public:true }, "OnValueChanged", $asm0A.TypeRef("SharedXNA.MenuItem/MenuItemEvent")); 
    $.Field({Static:false, Public:false}, "MyValue", $.Int32); 
    $.Field({Static:false, Public:false}, "MyChangeIncrement", $.Int32); 
    $.Field({Static:false, Public:false}, "MyMinValue", $.Int32); 
    $.Field({Static:false, Public:false}, "MyMaxValue", $.Int32); 
    $.Property({Static:false, Public:true }, "Value", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.UpdateEnumerationMenuItem */ 

(function UpdateEnumerationMenuItem$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.MenuItem)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm09.System.String))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.SharedXNA.MenuItem_MenuItemEvent)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.InputState)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };

  function UpdateEnumerationMenuItem__ctor$00 () {
    $T00().prototype._ctor.call(this);
  };

  function UpdateEnumerationMenuItem__ctor$01 (values, defaultIndex, ChangeHandler) {
    $T00().prototype._ctor.call(this);
    this.SetList(values, defaultIndex, ChangeHandler);
  };

  function UpdateEnumerationMenuItem_get_Value () {
    return this.MyValue;
  };

  function UpdateEnumerationMenuItem_MyUpdate (self) {
    if ($T05().IM.IsMenuLeft(null)) {
      if (this.MyValue === 0) {
        this.MyValue = ((this.MyEnumerations.get_Count() - 1) | 0);
      } else {
        this.MyValue = ((this.MyValue - 1) | 0);
      }
      if (this.OnValueChanged !== null) {
        this.OnValueChanged(self);
        return;
      }
    } else if (!(!$T05().IM.IsMenuRight(null) && !$T05().IM.IsMenuSelect(null))) {
      this.MyValue = ((((this.MyValue + 1) | 0) % this.MyEnumerations.get_Count()) | 0);
      if (this.OnValueChanged !== null) {
        this.OnValueChanged(self);
      }
    }
  };

  function UpdateEnumerationMenuItem_SetList (values, defaultIndex, ChangeHandler) {
    this.OnUpdate = $T03().New(this, $thisType.prototype.MyUpdate);
    this.OnValueChanged = ChangeHandler;
    this.MyEnumerations = values;
    this.MyValue = defaultIndex;
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.MenuItem"), 
      Name: "SharedXNA.UpdateEnumerationMenuItem", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      UpdateEnumerationMenuItem__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.List`1", [$.String]), $.Int32, 
          $asm0A.TypeRef("SharedXNA.MenuItem/MenuItemEvent")
        ], []), 
      UpdateEnumerationMenuItem__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Int32, [], []), 
      UpdateEnumerationMenuItem_get_Value
    );

    $.Method({Static:false, Public:false}, "MyUpdate", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.MenuItem")], []), 
      UpdateEnumerationMenuItem_MyUpdate
    );

    $.Method({Static:false, Public:false}, "SetList", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.Collections.Generic.List`1", [$.String]), $.Int32, 
          $asm0A.TypeRef("SharedXNA.MenuItem/MenuItemEvent")
        ], []), 
      UpdateEnumerationMenuItem_SetList
    );

    $.Field({Static:false, Public:true }, "OnValueChanged", $asm0A.TypeRef("SharedXNA.MenuItem/MenuItemEvent")); 
    $.Field({Static:false, Public:false}, "MyEnumerations", $asm09.TypeRef("System.Collections.Generic.List`1", [$.String])); 
    $.Field({Static:false, Public:false}, "MyValue", $.Int32); 
    $.Property({Static:false, Public:true }, "Value", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.UpdateBooleanMenuItem */ 

(function UpdateBooleanMenuItem$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.MenuItem_MenuItemEvent)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.SharedXNA.UpdateEnumerationMenuItem)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm09.System.String))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.String")]), []))) ();
  };

  function UpdateBooleanMenuItem__ctor (Prefix, DefaultEnabled, ChangeHandler) {
    $T03().prototype._ctor.call(this);
    this.SetList(($S00().Construct()).__Initialize__([[JSIL.ConcatString(Prefix, ": Disabled")], [JSIL.ConcatString(Prefix, ": Enabled")]]), (DefaultEnabled ? 1 : 0), ChangeHandler);
    this.OnValueChanged(this);
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.UpdateEnumerationMenuItem"), 
      Name: "SharedXNA.UpdateBooleanMenuItem", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $asm0A.TypeRef("SharedXNA.MenuItem/MenuItemEvent")
        ], []), 
      UpdateBooleanMenuItem__ctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.MenuItemContainer */ 

(function MenuItemContainer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.MenuItem))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.MenuItem_MenuItemEvent)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.SharedXNA.MenuItem)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0A.SharedXNA.MenuEventManager)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.SharedXNA.UIHelper)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0A.SharedXNA.UIStyle)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0A.SharedXNA.UISkin)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0A.SharedXNA.UI)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0A.SharedXNA.InputState)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0A.SharedXNA.MenuItemContainer_MenuEvent)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.MenuItem")]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("SharedXNA.MenuItem"), [$asm09.TypeRef("System.String"), $asm0A.TypeRef("SharedXNA.MenuItem/MenuItemEvent")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Boolean"), [
        $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm09.TypeRef("System.String"), 
        $asm0A.TypeRef("SharedXNA.UIStyle")
      ], []))) ();
  };

  function MenuItemContainer__ctor () {
    this.MenuItems = $S00().Construct();
    this.MenuItemBackground = ($jsilxna.ColorFromPremultipliedInts(null, 64, 64, 64, 192));
    this.MenuItemForeground = ($jsilxna.ColorFromPremultipliedInts(null, 200, 200, 200, 255));
    this.MenuItemForegroundSelected = ($jsilxna.ColorFromPremultipliedInts(null, 255, 255, 225, 255));
    this.MenuItemShadow = ($jsilxna.ColorFromPremultipliedInts(null, 0, 0, 0, 0));
    this.DisplayX = +50;
    this.DisplayY = +260;
    this.DisplayWidth = +700;
    this.DisplayItemHeight = +50;
    this.DisplayItemPad = +10;
  };

  function MenuItemContainer_Add$00 (_text, _onClicked) {
    var result = $S01().Construct(_text, _onClicked);
    this.MenuItems.Add(result);
    return result;
  };

  function MenuItemContainer_Add$01 (item) {
    this.MenuItems.Add(item);
  };

  function MenuItemContainer_ChangeSelectedItem (delta) {

    for (var newIndex = ((this.MenuItemIndex + delta) | 0); (newIndex >= 0) && (newIndex < this.MenuItems.get_Count()); newIndex = ((newIndex + delta) | 0)) {
      if (this.MenuItems.get_Item(newIndex).get_IsVisible()) {
        if (!this.MySilenceIsGolden) {
          if (delta < 0) {
            $T06().TriggerMenuUp(this.MenuItemIndex, newIndex, this.MenuItems.get_Count());
          } else {
            $T06().TriggerMenuDown(this.MenuItemIndex, newIndex, this.MenuItems.get_Count());
          }
        }
        this.MenuItemIndex = newIndex;
        return;
      }
    }
  };

  function MenuItemContainer_Draw (gameTime) {
    var $temp00, $temp01;
    $temp01 = new ($T08())();
    $T0A().get_Batch().Begin();
    var y = +this.DisplayY;
    var h = +this.DisplayItemHeight;
    var index = 0;

    for (var a$0 = this.MenuItems._items, i$0 = 0, l$0 = this.MenuItems._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var mi = a$0[i$0];
      if (mi.get_IsVisible()) {
        var yboost = +((index === this.MenuItemIndex) ? 10 : 0);
        var xboost = +((index === this.MenuItemIndex) ? 0 : -100);
        var style = $T0D().ButtonDefault.Clone();
        style.Normal.ForegroundColor = ((index === this.MenuItemIndex) ? this.MenuItemForegroundSelected : this.MenuItemForeground).MemberwiseClone();
        if (!(!$S02().CallStatic($T0E(), "Button", null, ($temp01._ctor(((this.DisplayX - (xboost * 0.5)) | 0), ((y - (yboost * 0.5)) | 0), ((this.DisplayWidth + xboost) | 0), ((h + yboost) | 0)), 
                $temp01), mi.Text, style) || (mi.OnItemSelected === null))) {
          mi.OnItemSelected(mi);
        }
        y = +((y + h) + this.DisplayItemPad);
      }
      index = ((index + 1) | 0);
    }
    $T0A().get_Batch().End();
  };

  function MenuItemContainer_Update (gameTime) {
    if (!$T10().Game.get_IsActive()) {
      return;
    }
    if ($T10().IM.IsMenuUp(null)) {
      this.ChangeSelectedItem(-1);
    } else if ($T10().IM.IsMenuDown(null)) {
      this.ChangeSelectedItem(1);
    }
    if ($T10().IM.IsMenuCancel(null)) {
      if (this.OnMenuCancelled !== null) {
        this.OnMenuCancelled(this);
        if (!this.MySilenceIsGolden) {
          $T06().TriggerMenuCancel();
        }
        this.MenuItemIndex = 0;
      }
    } else if (!(!$T10().IM.IsMenuSelect(null) || 
        (this.MenuItemIndex < 0) || (this.MenuItemIndex >= this.MenuItems.get_Count()))) {
      if (!this.MySilenceIsGolden) {
        $T06().TriggerMenuSelect();
      }
      if (this.MenuItems.get_Item(this.MenuItemIndex).OnItemSelected !== null) {
        this.MenuItems.get_Item(this.MenuItemIndex).OnItemSelected(this.MenuItems.get_Item(this.MenuItemIndex));
      }
    }
    if (!((this.MenuItemIndex < 0) || (this.MenuItemIndex >= this.MenuItems.get_Count()))) {
      var item = this.MenuItems.get_Item(this.MenuItemIndex);
      if (item.OnUpdate !== null) {
        item.OnUpdate(item);
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.MenuItemContainer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      MenuItemContainer__ctor
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm0A.TypeRef("SharedXNA.MenuItem"), [$.String, $asm0A.TypeRef("SharedXNA.MenuItem/MenuItemEvent")], []), 
      MenuItemContainer_Add$00
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.MenuItem")], []), 
      MenuItemContainer_Add$01
    );

    $.Method({Static:false, Public:true }, "ChangeSelectedItem", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      MenuItemContainer_ChangeSelectedItem
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      MenuItemContainer_Draw
    );

    $.Method({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      MenuItemContainer_Update
    );

    $.Field({Static:false, Public:true }, "MySilenceIsGolden", $.Boolean); 
    $.Field({Static:false, Public:true }, "MenuItems", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.MenuItem")])); 
    $.Field({Static:false, Public:true }, "MenuItemIndex", $.Int32); 
    $.Field({Static:false, Public:true }, "MenuItemBackground", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:true }, "MenuItemForeground", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:true }, "MenuItemForegroundSelected", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:true }, "MenuItemShadow", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:true }, "OnMenuCancelled", $asm0A.TypeRef("SharedXNA.MenuItemContainer/MenuEvent")); 
    $.Field({Static:false, Public:true }, "DisplayX", $.Single); 
    $.Field({Static:false, Public:true }, "DisplayY", $.Single); 
    $.Field({Static:false, Public:true }, "DisplayWidth", $.Single); 
    $.Field({Static:false, Public:true }, "DisplayItemHeight", $.Single); 
    $.Field({Static:false, Public:true }, "DisplayItemPad", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate SharedXNA.MenuItemContainer/MenuEvent */ 

JSIL.MakeDelegate("SharedXNA.MenuItemContainer/MenuEvent", false, []);

/* struct SharedXNA.UIContent */ 

(function UIContent$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };

  function UIContent__ctor$00 (text) {
    this.Text = text;
    this.Image = null;
  };

  function UIContent__ctor$01 (text, image) {
    this.Text = text;
    this.Image = image;
  };

  function UIContent__ctor$02 (image) {
    this.Text = null;
    this.Image = image;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "SharedXNA.UIContent", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], []), 
      UIContent__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")], []), 
      UIContent__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")], []), 
      UIContent__ctor$02
    );

    $.Field({Static:false, Public:true }, "Text", $.String); 
    $.Field({Static:false, Public:true }, "Image", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.UISkin */ 

(function UISkin$Members () {
  var $, $thisType;
  function UISkin__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.UISkin", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      UISkin__ctor
    );

    $.Field({Static:true , Public:true }, "ButtonDefault", $asm0A.TypeRef("SharedXNA.UIStyle")); 
    $.Field({Static:true , Public:true }, "Font", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.UIStyle */ 

(function UIStyle$Members () {
  var $, $thisType;
  function UIStyle__ctor () {
  };

  function UIStyle_Clone () {
    return (new $thisType()).__Initialize__({
        Normal: this.Normal.MemberwiseClone(), 
        Hover: this.Hover.MemberwiseClone(), 
        Pressed: this.Pressed.MemberwiseClone(), 
        Font: this.Font}
    );
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.UIStyle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      UIStyle__ctor
    );

    $.Method({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [], []), 
      UIStyle_Clone
    );

    $.Field({Static:false, Public:true }, "Normal", $asm0A.TypeRef("SharedXNA.UIStyleState")); 
    $.Field({Static:false, Public:true }, "Hover", $asm0A.TypeRef("SharedXNA.UIStyleState")); 
    $.Field({Static:false, Public:true }, "Pressed", $asm0A.TypeRef("SharedXNA.UIStyleState")); 
    $.Field({Static:false, Public:true }, "Font", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SharedXNA.UIStyleState */ 

(function UIStyleState$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "SharedXNA.UIStyleState", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "Background", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:true }, "ForegroundColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:true }, "BackgroundColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.UI */ 

(function UI$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Mouse)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.MouseState)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.ButtonState)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Point)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.SharedXNA.UIContent)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.SharedXNA.UISkin)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.SharedXNA.UIStyle)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0A.SharedXNA.UIState)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0A.SharedXNA.ButtonRenderer)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm09.System.InvalidOperationException)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0A.SharedXNA.HAlign)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0A.SharedXNA.VAlign)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0A.SharedXNA.UIHelper)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Boolean"), [
        $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm0A.TypeRef("SharedXNA.UIContent"), 
        $asm0A.TypeRef("SharedXNA.UIStyle")
      ], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("SharedXNA.UIContent"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("SharedXNA.UIContent"), [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.InvalidOperationException"), [$asm09.TypeRef("System.String")]))) ();
  };

  function UI_BeginGUI () {
    $thisType.s_inGui = true;
    $thisType.CurrentMouseState = $T01().GetState().MemberwiseClone();
    if (!(($thisType.PreviousMouseState.get_LeftButton().valueOf() !== 0) || ($thisType.CurrentMouseState.get_LeftButton() !== $T03().Pressed))) {
      $thisType.mouseDown = true;
      $thisType.mouseDownPoint = new ($T04())($thisType.CurrentMouseState.get_X(), $thisType.CurrentMouseState.get_Y());
    }
  };

  function UI_Button$00 (rect, text) {
    return $S00().CallStatic($thisType, "Button", null, rect, $S01().Construct(text), $T08().ButtonDefault);
  };

  function UI_Button$01 (rect, image) {
    return $S00().CallStatic($thisType, "Button", null, rect, $S02().Construct(image), $T08().ButtonDefault);
  };

  function UI_Button$02 (rect, text, style) {
    return $S00().CallStatic($thisType, "Button", null, rect, $S01().Construct(text), style);
  };

  function UI_Button$03 (rect, image, style) {
    return $S00().CallStatic($thisType, "Button", null, rect, $S02().Construct(image), style);
  };

  function UI_Button$04 (rect, content, style) {
    var state = new JSIL.BoxedVariable($asm0A.SharedXNA.UIState.Normal);
    $thisType.CheckInGUIBlock();
    var released = $thisType.Test(rect.MemberwiseClone(), /* ref */ state);
    $T0D().Draw(rect, content, style, state.get());
    return released;
  };

  function UI_CheckInGUIBlock () {
    if (!$thisType.s_inGui) {
      throw $S03().Construct("Must call UI commands inside GameMode.GUI()");
    }
  };

  function UI_EndGUI () {
    if (!(($thisType.PreviousMouseState.get_LeftButton() !== $T03().Pressed) || ($thisType.CurrentMouseState.get_LeftButton().valueOf() !== 0))) {
      $thisType.mouseDown = false;
    }
    $thisType.PreviousMouseState = $thisType.CurrentMouseState.MemberwiseClone();
    $thisType.s_inGui = false;
  };

  function UI_Icon$05 (rect, icon) {
    return $thisType.Icon(
      rect, 
      icon, 
      0, 
      $T0F().Center, 
      $T10().Center, 
      $T00().get_White()
    );
  };

  function UI_Icon$06 (rect, icon, pad, hset, vset, color) {
    var state = new JSIL.BoxedVariable($asm0A.SharedXNA.UIState.Normal);
    $thisType.CheckInGUIBlock();
    var pos = $T12().get_Zero().MemberwiseClone();
    if (hset.valueOf() === 0) {
      pos.X = +($T11().$Cast(rect.X) + pad);
    } else if (hset === $T0F().Right) {
      pos.X = +($T11().$Cast(((rect.X + rect.Width) | 0)) - (pad + $T11().$Cast(icon.get_Width())));
    } else {
      pos.X = +($T11().$Cast(rect.X) + ($T11().$Cast(((rect.Width - icon.get_Width()) | 0)) * 0.5));
    }
    if (vset.valueOf() === 0) {
      pos.Y = +($T11().$Cast(rect.Y) + pad);
    } else if (vset === $T10().Bottom) {
      pos.Y = +($T11().$Cast(((rect.Y + rect.Height) | 0)) - (pad + $T11().$Cast(icon.get_Height())));
    } else {
      pos.Y = +($T11().$Cast(rect.Y) + ($T11().$Cast(((rect.Height - icon.get_Height()) | 0)) * 0.5));
    }
    $T14().get_Batch().Draw(icon, pos, color);
    return $thisType.Test(rect.MemberwiseClone(), /* ref */ state);
  };

  function UI_Test (rect, /* ref */ state) {
    $thisType.CheckInGUIBlock();
    state.set($T0B().Normal);
    var released = false;
    if ($thisType.mouseDown) {
      if (!(!rect.Contains(
            $thisType.CurrentMouseState.get_X(), 
            $thisType.CurrentMouseState.get_Y()
          ) || !rect.ContainsPoint($thisType.mouseDownPoint))) {
        state.set($T0B().Pressed);
      }
    } else if (!(($thisType.CurrentMouseState.get_LeftButton().valueOf() !== 0) || 
        ($thisType.PreviousMouseState.get_LeftButton().valueOf() !== 0) || 
        !rect.Contains(
          $thisType.CurrentMouseState.get_X(), 
          $thisType.CurrentMouseState.get_Y()
        ) || !rect.ContainsPoint($thisType.mouseDownPoint))) {
      released = true;
    }
    return released;
  };

  JSIL.MakeStaticClass("SharedXNA.UI", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "BeginGUI", 
      new JSIL.MethodSignature(null, [], []), 
      UI_BeginGUI
    );

    $.Method({Static:true , Public:true }, "Button", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $.String], []), 
      UI_Button$00
    );

    $.Method({Static:true , Public:true }, "Button", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")], []), 
      UI_Button$01
    );

    $.Method({Static:true , Public:true }, "Button", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $.String, 
          $asm0A.TypeRef("SharedXNA.UIStyle")
        ], []), 
      UI_Button$02
    );

    $.Method({Static:true , Public:true }, "Button", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), 
          $asm0A.TypeRef("SharedXNA.UIStyle")
        ], []), 
      UI_Button$03
    );

    $.Method({Static:true , Public:true }, "Button", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm0A.TypeRef("SharedXNA.UIContent"), 
          $asm0A.TypeRef("SharedXNA.UIStyle")
        ], []), 
      UI_Button$04
    );

    $.Method({Static:true , Public:false}, "CheckInGUIBlock", 
      new JSIL.MethodSignature(null, [], []), 
      UI_CheckInGUIBlock
    );

    $.Method({Static:true , Public:false}, "EndGUI", 
      new JSIL.MethodSignature(null, [], []), 
      UI_EndGUI
    );

    $.Method({Static:true , Public:true }, "Icon", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")], []), 
      UI_Icon$05
    );

    $.Method({Static:true , Public:true }, "Icon", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), 
          $.Single, $asm0A.TypeRef("SharedXNA.HAlign"), 
          $asm0A.TypeRef("SharedXNA.VAlign"), $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      UI_Icon$06
    );

    $.Method({Static:true , Public:true }, "Test", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $jsilcore.TypeRef("JSIL.Reference", [$asm0A.TypeRef("SharedXNA.UIState")])], []), 
      UI_Test
    );

    $.Field({Static:true , Public:false}, "CurrentMouseState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")); 
    $.Field({Static:true , Public:false}, "PreviousMouseState", $asm01.TypeRef("Microsoft.Xna.Framework.Input.MouseState")); 
    $.Field({Static:true , Public:false}, "mouseDown", $.Boolean); 
    $.Field({Static:true , Public:false}, "mouseDownPoint", $asm01.TypeRef("Microsoft.Xna.Framework.Point")); 
    $.Field({Static:true , Public:true }, "ShadowColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:true , Public:false}, "s_inGui", $.Boolean); 
    function UI__cctor () {
      $thisType.CurrentMouseState = new $asm01.Microsoft.Xna.Framework.Input.MouseState();
      $thisType.PreviousMouseState = new $asm01.Microsoft.Xna.Framework.Input.MouseState();
      $thisType.mouseDownPoint = new $asm01.Microsoft.Xna.Framework.Point();
      $thisType.ShadowColor = new $asm01.Microsoft.Xna.Framework.Color();
      $thisType.ShadowColor = $T00().get_DarkGray().MemberwiseClone();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      UI__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SharedXNA.UIState */ 

JSIL.MakeEnum(
  "SharedXNA.UIState", true, {
    Normal: 0, 
    Hover: 1, 
    Pressed: 2, 
    Count: 3
  }, false
);

/* class SharedXNA.ButtonRenderer */ 

(function ButtonRenderer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.UIContent)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.UIStyle)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.SharedXNA.UIState)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.SharedXNA.UISkin)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.SharedXNA.TextureRenderer)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0A.SharedXNA.TextRenderer)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.SharedXNA.UI)) ();
  };

  function ButtonRenderer_Draw (rect, content, style, state) {
    if (content.Image === null) {
      var text = content.Text;
      if (text === null) {
        text = $T05().Empty;
      }
      var font = JSIL.Coalesce(style.Font, $T07().ButtonDefault.Font);
      switch (state.valueOf()) {
        case 1: 
          $T08().Draw(rect, style.Hover.Background, style.Hover.BackgroundColor);
          $T09().Draw(
            rect, 
            text, 
            font, 
            style.Hover.ForegroundColor, 
            $T0A().ShadowColor
          );
          return;

        case 2: 
          $T08().Draw(rect, style.Pressed.Background, style.Pressed.BackgroundColor);
          $T09().Draw(
            rect, 
            text, 
            font, 
            style.Pressed.ForegroundColor, 
            $T0A().ShadowColor
          );
          return;

        default: 
          $T08().Draw(rect, style.Normal.Background, style.Normal.BackgroundColor);
          $T09().Draw(
            rect, 
            text, 
            font, 
            style.Normal.ForegroundColor, 
            $T0A().ShadowColor
          );
          return;

      }
    } else {
      switch (state.valueOf()) {
        case 1: 
          $T08().Draw(rect, style.Hover.Background, style.Hover.BackgroundColor);
          $T08().Draw(rect, content.Image, style.Hover.ForegroundColor);
          return;

        case 2: 
          $T08().Draw(rect, style.Pressed.Background, style.Pressed.BackgroundColor);
          $T08().Draw(rect, content.Image, style.Pressed.ForegroundColor);
          return;

        default: 
          $T08().Draw(rect, style.Normal.Background, style.Normal.BackgroundColor);
          $T08().Draw(rect, content.Image, style.Normal.ForegroundColor);
          return;

      }
    }
  };

  JSIL.MakeStaticClass("SharedXNA.ButtonRenderer", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm0A.TypeRef("SharedXNA.UIContent"), 
          $asm0A.TypeRef("SharedXNA.UIStyle"), $asm0A.TypeRef("SharedXNA.UIState")
        ], []), 
      ButtonRenderer_Draw
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.TextureRenderer */ 

(function TextureRenderer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.UIHelper)) ();
  };

  function TextureRenderer_Draw (rect, texture, color) {
    $T04().get_Batch().DrawRect(texture, rect, color);
  };

  JSIL.MakeStaticClass("SharedXNA.TextureRenderer", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      TextureRenderer_Draw
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.TextRenderer */ 

(function TextRenderer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.SharedXNA.UIHelper)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };

  function TextRenderer_Draw (rect, text, font, color, shadowColor) {
    var size = font.MeasureString(text).MemberwiseClone();
    var pos = $S00().Construct(($T05().$Cast(rect.X) + (0.5 * (($T05().$Cast(rect.Width) - size.X) + 2))), ($T05().$Cast(rect.Y) + (0.5 * (($T05().$Cast(rect.Height) - size.Y) + 2))));
    $T07().get_Batch().DrawString(font, text, pos, shadowColor);
    pos.X -= +2;
    pos.Y -= +2;
    $T07().get_Batch().DrawString(font, text, pos, color);
  };

  JSIL.MakeStaticClass("SharedXNA.TextRenderer", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), $.String, 
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $asm01.TypeRef("Microsoft.Xna.Framework.Color"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      TextRenderer_Draw
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.UIElement */ 

(function UIElement$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };

  function UIElement__ctor$00 () {
  };

  function UIElement_Update (time) {
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.UIElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      UIElement__ctor$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      UIElement_Update
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.UIHorizontalContainer */ 

(function UIHorizontalContainer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.UIHorizontalContainer_Alignment)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.UIElement))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.UIElement)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Math)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.UIElement")]), []))) ();
  };

  function UIHorizontalContainer__ctor (Mode) {
    this.Elements = $S00().Construct();
    $T02().prototype._ctor.call(this);
    this.AlignmentMode = Mode;
  };

  function UIHorizontalContainer_Draw (batch, position) {
    var $temp00;
    var TotalSize = this.GetSize().MemberwiseClone();
    var TopY = +position.Y;

    for (var a$0 = this.Elements._items, i$0 = 0, l$0 = this.Elements._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var e = a$0[i$0];
      var SingleSize = e.GetSize().MemberwiseClone();
      switch (this.AlignmentMode.valueOf()) {
        case 0: 
          position.Y = +TopY;
          break;

        case 1: 
          position.Y = +(TopY + ((TotalSize.Y - SingleSize.Y) * 0.5));
          break;

        case 2: 
          position.Y = +((TopY + TotalSize.Y) - SingleSize.Y);
          break;

      }
      e.Draw(batch, position.MemberwiseClone());
      position.X += +SingleSize.X;
    }
  };

  function UIHorizontalContainer_GetSize () {
    var $temp00;
    var result = $T04().get_Zero().MemberwiseClone();

    for (var a$0 = this.Elements._items, i$0 = 0, l$0 = this.Elements._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var e = a$0[i$0];
      var eSize = e.GetSize().MemberwiseClone();
      result.X += +eSize.X;
      result.Y = +$T06().Max(result.Y, eSize.Y);
    }
    return result;
  };

  function UIHorizontalContainer_Update (time) {
    var $temp00;

    for (var a$0 = this.Elements._items, i$0 = 0, l$0 = this.Elements._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var e = a$0[i$0];
      e.Update(time);
    }
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.UIElement"), 
      Name: "SharedXNA.UIHorizontalContainer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.UIHorizontalContainer/Alignment")], []), 
      UIHorizontalContainer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      UIHorizontalContainer_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetSize", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], []), 
      UIHorizontalContainer_GetSize
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      UIHorizontalContainer_Update
    );

    $.Field({Static:false, Public:true }, "Elements", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.UIElement")])); 
    $.Field({Static:false, Public:false}, "AlignmentMode", $asm0A.TypeRef("SharedXNA.UIHorizontalContainer/Alignment")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SharedXNA.UIHorizontalContainer/Alignment */ 

JSIL.MakeEnum(
  "SharedXNA.UIHorizontalContainer/Alignment", false, {
    Top: 0, 
    Center: 1, 
    Bottom: 2
  }, false
);

/* class SharedXNA.UIVerticalContainer */ 

(function UIVerticalContainer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.UIVerticalContainer_Alignment)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.UIElement))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.UIElement)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Math)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.UIElement")]), []))) ();
  };

  function UIVerticalContainer__ctor (Mode) {
    this.Elements = $S00().Construct();
    $T02().prototype._ctor.call(this);
    this.AlignmentMode = Mode;
  };

  function UIVerticalContainer_Draw (batch, position) {
    var $temp00;
    var TotalSize = this.GetSize().MemberwiseClone();
    var LeftX = +position.X;

    for (var a$0 = this.Elements._items, i$0 = 0, l$0 = this.Elements._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var e = a$0[i$0];
      var SingleSize = e.GetSize().MemberwiseClone();
      switch (this.AlignmentMode.valueOf()) {
        case 0: 
          position.X = +LeftX;
          break;

        case 1: 
          position.X = +(LeftX + ((TotalSize.X - SingleSize.X) * 0.5));
          break;

        case 2: 
          position.X = +((LeftX + TotalSize.X) - SingleSize.X);
          break;

      }
      e.Draw(batch, position.MemberwiseClone());
      position.Y += +SingleSize.Y;
    }
  };

  function UIVerticalContainer_GetSize () {
    var $temp00;
    var result = $T04().get_Zero().MemberwiseClone();

    for (var a$0 = this.Elements._items, i$0 = 0, l$0 = this.Elements._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var e = a$0[i$0];
      var eSize = e.GetSize().MemberwiseClone();
      result.X = +$T06().Max(result.X, eSize.X);
      result.Y += +eSize.Y;
    }
    return result;
  };

  function UIVerticalContainer_Update (time) {
    var $temp00;

    for (var a$0 = this.Elements._items, i$0 = 0, l$0 = this.Elements._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var e = a$0[i$0];
      e.Update(time);
    }
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.UIElement"), 
      Name: "SharedXNA.UIVerticalContainer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.UIVerticalContainer/Alignment")], []), 
      UIVerticalContainer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      UIVerticalContainer_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetSize", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], []), 
      UIVerticalContainer_GetSize
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      UIVerticalContainer_Update
    );

    $.Field({Static:false, Public:true }, "Elements", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.UIElement")])); 
    $.Field({Static:false, Public:false}, "AlignmentMode", $asm0A.TypeRef("SharedXNA.UIVerticalContainer/Alignment")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SharedXNA.UIVerticalContainer/Alignment */ 

JSIL.MakeEnum(
  "SharedXNA.UIVerticalContainer/Alignment", false, {
    Left: 0, 
    Center: 1, 
    Right: 2
  }, false
);

/* class SharedXNA.UIGlyph */ 

(function UIGlyph$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.UIElement)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };

  function UIGlyph__ctor (Xscale, Yscale, Glyph) {
    this.ReallyRescale = true;
    $T02().prototype._ctor.call(this);
    this.Scale.X = +Xscale;
    this.Scale.Y = +Yscale;
    this.GlyphTex = Glyph;
  };

  function UIGlyph_Draw (batch, position) {
    if (this.ReallyRescale) {
      batch.DrawRect(
        this.GlyphTex, 
        new ($T05())(((position.X) | 0), ((position.Y) | 0), (($T00().$Cast(this.GlyphTex.get_Width()) * this.Scale.X) | 0), (($T00().$Cast(this.GlyphTex.get_Height()) * this.Scale.Y) | 0)), 
        $T06().get_White()
      );
      return;
    }
    position.X -= +(($T00().$Cast(this.GlyphTex.get_Width()) * (1 - this.Scale.X)) * 0.5);
    position.Y -= +(($T00().$Cast(this.GlyphTex.get_Height()) * (1 - this.Scale.Y)) * 0.5);
    batch.DrawRect(
      this.GlyphTex, 
      new ($T05())(((position.X) | 0), ((position.Y) | 0), this.GlyphTex.get_Width(), this.GlyphTex.get_Height()), 
      $T06().get_White()
    );
  };

  function UIGlyph_GetSize () {
    var result = this.Scale.MemberwiseClone();
    result.X *= +$T00().$Cast(this.GlyphTex.get_Width());
    result.Y *= +$T00().$Cast(this.GlyphTex.get_Height());
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.UIElement"), 
      Name: "SharedXNA.UIGlyph", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")
        ], []), 
      UIGlyph__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      UIGlyph_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetSize", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], []), 
      UIGlyph_GetSize
    );

    $.Field({Static:false, Public:false}, "Scale", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "GlyphTex", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "ReallyRescale", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.UISpacer */ 

(function UISpacer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.UIElement)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };

  function UISpacer__ctor$00 (Width, Height) {
    $T01().prototype._ctor.call(this);
    this.MySize.X = +Width;
    this.MySize.Y = +Height;
  };

  function UISpacer__ctor$01 (Size) {
    $T01().prototype._ctor.call(this);
    this.MySize = Size;
  };

  function UISpacer_Draw (batch, position) {
  };

  function UISpacer_GetSize () {
    return this.MySize;
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.UIElement"), 
      Name: "SharedXNA.UISpacer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single, $.Single], []), 
      UISpacer__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      UISpacer__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      UISpacer_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetSize", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], []), 
      UISpacer_GetSize
    );

    $.Field({Static:false, Public:false}, "MySize", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.UILabel */ 

(function UILabel$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.UIElement)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };

  function UILabel__ctor$00 (Font, InitialText, FontColor, ShadowingEnabled, ShadowColor) {
    $T04().prototype._ctor.call(this);
    this.MyFont = Font;
    this.set_Text(InitialText);
    this.MyFontColor = FontColor;
    this.MyShadowColor = ShadowColor;
    this.MyDrawShadow = ShadowingEnabled;
  };

  function UILabel_Draw (batch, position) {
    if (this.MyDrawShadow) {
      var adjustedPos = position.MemberwiseClone();
      adjustedPos.X += +2;
      adjustedPos.Y += +2;
      batch.DrawString(this.MyFont, this.get_Text(), adjustedPos, this.MyShadowColor);
    }
    batch.DrawString(this.MyFont, this.get_Text(), position, this.MyFontColor);
  };

  function UILabel_get_Text () {
    return this.MyText;
  };

  function UILabel_GetSize () {
    var result = this.MyFont.MeasureString(this.get_Text()).MemberwiseClone();
    result.X += +2;
    result.Y += +2;
    return result;
  };

  function UILabel_set_Text (value) {
    this.MyText = value;
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.UIElement"), 
      Name: "SharedXNA.UILabel", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $.String, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $.Boolean, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      UILabel__ctor$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      UILabel_Draw
    );

    $.Method({Static:false, Public:true }, "get_Text", 
      new JSIL.MethodSignature($.String, [], []), 
      UILabel_get_Text
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetSize", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], []), 
      UILabel_GetSize
    );

    $.Method({Static:false, Public:true }, "set_Text", 
      new JSIL.MethodSignature(null, [$.String], []), 
      UILabel_set_Text
    );

    $.Constant({Static:true , Public:false}, "ShadowSpacing", 2); 
    $.Field({Static:false, Public:false}, "MyFontColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:false}, "MyShadowColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:false}, "MyDrawShadow", $.Boolean); 
    $.Field({Static:false, Public:false}, "MyFont", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")); 
    $.Field({Static:false, Public:false}, "MyText", $.String); 
    $.Property({Static:false, Public:true }, "Text", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.UIPulsatingLabel */ 

(function UIPulsatingLabel$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.UILabel)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.TimeSpan)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector4)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.Double)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $asm09.TypeRef("System.String"), 
        $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $asm09.TypeRef("System.Boolean"), 
        $asm01.TypeRef("Microsoft.Xna.Framework.Color")
      ], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Color"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector4")]))) ();
  };

  function UIPulsatingLabel__ctor (Font, InitialText, Target0, Target1, Rate) {
    $S00().Call($T04().prototype, "_ctor", null, this, 
      Font, 
      InitialText, 
      Target0.MemberwiseClone(), 
      true, 
      $T02().get_Black().MemberwiseClone()
    );
    this.MyTarget0 = Target0.ToVector4().MemberwiseClone();
    this.MyTarget1 = Target1.ToVector4().MemberwiseClone();
    this.MyRate = +Rate;
  };

  function UIPulsatingLabel_Update (time) {
    this.MyTimer = +$T03().$Cast(((this.MyTimer + (this.MyRate * time.get_ElapsedGameTime().get_TotalSeconds())) % 6.2831853071795862));
    var NewColor = $T07().Lerp(this.MyTarget0.MemberwiseClone(), this.MyTarget1.MemberwiseClone(), $T03().$Cast((((Math.cos(this.MyTimer)) * 0.5) + 0.5))).MemberwiseClone();
    this.MyFontColor = $S01().Construct(NewColor.MemberwiseClone());
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.UILabel"), 
      Name: "SharedXNA.UIPulsatingLabel", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $.String, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $asm01.TypeRef("Microsoft.Xna.Framework.Color"), 
          $.Single
        ], []), 
      UIPulsatingLabel__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      UIPulsatingLabel_Update
    );

    $.Field({Static:false, Public:false}, "MyTarget0", $asm01.TypeRef("Microsoft.Xna.Framework.Vector4")); 
    $.Field({Static:false, Public:false}, "MyTarget1", $asm01.TypeRef("Microsoft.Xna.Framework.Vector4")); 
    $.Field({Static:false, Public:false}, "MyRate", $.Single); 
    $.Field({Static:false, Public:false}, "MyTimer", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SharedXNA.HAlign */ 

JSIL.MakeEnum(
  "SharedXNA.HAlign", true, {
    Left: 0, 
    Center: 1, 
    Right: 2
  }, false
);

/* enum SharedXNA.VAlign */ 

JSIL.MakeEnum(
  "SharedXNA.VAlign", true, {
    Top: 0, 
    Center: 1, 
    Bottom: 2
  }, false
);

/* class SharedXNA.UIHelper */ 

(function UIHelper$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.ColorTexture)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.SharedXNA.HAlign)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.SharedXNA.VAlign)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };

  function UIHelper__ctor () {
  };

  function UIHelper_Begin () {
    $thisType.get_Batch().Begin();
  };

  function UIHelper_DrawBox (x, y, w, h, color) {
    var boxSize = $S00().Construct(w, h);
    var boxCorner = $S00().Construct(x, y);
    $thisType.get_Batch().DrawRect($T04().White, new ($T05())(((boxCorner.X) | 0), ((boxCorner.Y) | 0), ((boxSize.X) | 0), ((boxSize.Y) | 0)), color);
  };

  function UIHelper_DrawFilledBox (x, y, w, h, backColor, borderColor) {
    $thisType.DrawRectangle(
      x, 
      y, 
      w, 
      h, 
      borderColor
    );
    $thisType.DrawBox(
      (x + 1), 
      (y + 1), 
      (w - 2), 
      (h - 2), 
      backColor
    );
  };

  function UIHelper_DrawIcon$00 (icon, x, y, w, h, pad, hset, vset, color) {
    var pos = $T03().get_Zero().MemberwiseClone();
    if (hset.valueOf() === 0) {
      pos.X = +(x + pad);
    } else if (hset === $T07().Right) {
      pos.X = +((x + w) - (pad + $T01().$Cast(icon.get_Width())));
    } else {
      pos.X = +(x + ((w - $T01().$Cast(icon.get_Width())) * 0.5));
    }
    if (vset.valueOf() === 0) {
      pos.Y = +(y + pad);
    } else if (vset === $T08().Bottom) {
      pos.Y = +((y + h) - (pad + $T01().$Cast(icon.get_Height())));
    } else {
      pos.Y = +(y + ((h - $T01().$Cast(icon.get_Height())) * 0.5));
    }
    $thisType.get_Batch().Draw(icon, pos, color);
  };

  function UIHelper_DrawIcon$01 (icon, x, y, w, h) {
    $thisType.DrawIcon(
      icon, 
      x, 
      y, 
      w, 
      h, 
      0, 
      $T07().Center, 
      $T08().Center, 
      $T02().get_White()
    );
  };

  function UIHelper_DrawOutlinedString (font, text, x, y, w, h, color, shadowColor) {
    font.MeasureString(text);
    var pos = $S00().Construct(x, y);
    $thisType.get_Batch().DrawString(font, text, $T03().op_Addition(pos, $S00().Construct(2, 0)), shadowColor);
    $thisType.get_Batch().DrawString(font, text, $T03().op_Addition(pos, $S00().Construct(0, 2)), shadowColor);
    $thisType.get_Batch().DrawString(font, text, $T03().op_Addition(pos, $S00().Construct(-2, 0)), shadowColor);
    $thisType.get_Batch().DrawString(font, text, $T03().op_Addition(pos, $S00().Construct(0, -2)), shadowColor);
    $thisType.get_Batch().DrawString(font, text, pos, color);
  };

  function UIHelper_DrawOutlinedStringBoxed (font, text, x, y, w, h, color, shadowColor) {
    var size = font.MeasureString(text).MemberwiseClone();
    var pos = $S00().Construct((x + (0.5 * ((w - size.X) + 2))), (y + (0.5 * ((h - size.Y) + 2))));
    $thisType.get_Batch().DrawString(font, text, $T03().op_Addition(pos, $S00().Construct(2, 0)), shadowColor);
    $thisType.get_Batch().DrawString(font, text, $T03().op_Addition(pos, $S00().Construct(0, 2)), shadowColor);
    $thisType.get_Batch().DrawString(font, text, $T03().op_Addition(pos, $S00().Construct(-2, 0)), shadowColor);
    $thisType.get_Batch().DrawString(font, text, $T03().op_Addition(pos, $S00().Construct(0, -2)), shadowColor);
    $thisType.get_Batch().DrawString(font, text, pos, color);
  };

  function UIHelper_DrawOutlinedStringCentered (font, text, x, y, color, shadowColor) {
    var size = font.MeasureString(text).MemberwiseClone();
    $thisType.DrawOutlinedStringBoxed(
      font, 
      text, 
      (x - (size.X * 0.5)), 
      (y - (size.Y * 0.5)), 
      size.X, 
      size.Y, 
      color, 
      shadowColor
    );
  };

  function UIHelper_DrawRectangle (x, y, w, h, color) {
    $thisType.DrawBox(
      x, 
      y, 
      1, 
      h, 
      color
    );
    $thisType.DrawBox(
      ((x + w) - 1), 
      y, 
      1, 
      h, 
      color
    );
    $thisType.DrawBox(
      (x + 1), 
      y, 
      (w - 1), 
      1, 
      color
    );
    $thisType.DrawBox(
      (x + 1), 
      ((y + h) - 1), 
      (w - 1), 
      1, 
      color
    );
  };

  function UIHelper_DrawShadowedStringBoxed (font, text, x, y, w, h, color, shadowColor) {
    var size = font.MeasureString(text).MemberwiseClone();
    var pos = $S00().Construct((x + (0.5 * ((w - size.X) + 2))), (y + (0.5 * ((h - size.Y) + 2))));
    $thisType.get_Batch().DrawString(font, text, pos, shadowColor);
    pos.X -= +2;
    pos.Y -= +2;
    $thisType.get_Batch().DrawString(font, text, pos, color);
  };

  function UIHelper_DrawShadowedStringCentered (font, text, x, y, color, shadowColor) {
    var size = font.MeasureString(text).MemberwiseClone();
    $thisType.DrawShadowedStringBoxed(
      font, 
      text, 
      (x - (size.X * 0.5)), 
      (y - (size.Y * 0.5)), 
      size.X, 
      size.Y, 
      color, 
      shadowColor
    );
  };

  function UIHelper_DrawStringBoxed (font, text, x, y, w, h, color) {
    var size = font.MeasureString(text).MemberwiseClone();
    var pos = $S00().Construct((x + (0.5 * (w - size.X))), (y + (0.5 * (h - size.Y))));
    $thisType.get_Batch().DrawString(font, text, pos, color);
  };

  function UIHelper_DrawText4030 (x, y, color, text) {
    $thisType.get_Batch().Begin();
    $thisType.get_Batch().DrawString($T0B().MenuFont, text, $S00().Construct(((x * $T0B().ScreenWidth) / 40), ((y * $T0B().ScreenHeight) / 30)), color);
    $thisType.get_Batch().End();
  };

  function UIHelper_DrawTextBox$02 (text, x, y, w, h) {
    $thisType.DrawTextBox(
      text, 
      x, 
      y, 
      w, 
      h, 
      $T02().get_Gray(), 
      $T02().get_White(), 
      true
    );
  };

  function UIHelper_DrawTextBox$03 (text, x, y, w, h, color) {
    $thisType.DrawTextBox(
      text, 
      x, 
      y, 
      w, 
      h, 
      color, 
      $T02().get_White(), 
      true
    );
  };

  function UIHelper_DrawTextBox$04 (text, boxColor, textColor) {
    var pad = $S00().Construct(20, 20);
    var textSize = $T0B().MenuFont.MeasureString(text);
    var boxCenter = $S00().Construct(($T0B().ScreenWidth * 0.5), ($T0B().ScreenHeight * 0.5));
    var boxCorner = $T03().op_Subtraction($T03().op_Subtraction(boxCenter, $T03().op_MultiplyScalar(textSize, 0.5)), pad);
    var boxSize = $T03().op_Addition(textSize, $T03().op_MultiplyScalarLeft(2, pad));
    $thisType.get_Batch().DrawRect($T04().White, new ($T05())(((boxCorner.X) | 0), ((boxCorner.Y) | 0), ((boxSize.X) | 0), ((boxSize.Y) | 0)), boxColor);
    var textPos = $T03().op_Addition(boxCorner, pad);
    $thisType.get_Batch().DrawString($T0B().MenuFont, text, textPos, textColor);
  };

  function UIHelper_DrawTextBox$05 (text, x, y, w, h, color, textColor, center) {
    var boxSize = $S00().Construct(w, h);
    var boxCorner = $S00().Construct(x, y);
    $thisType.get_Batch().DrawRect($T04().White, new ($T05())(((boxCorner.X) | 0), ((boxCorner.Y) | 0), ((boxSize.X) | 0), ((boxSize.Y) | 0)), color);
    var textSize = $T0B().MenuFont.MeasureString(text);
    if (center) {
      var textPos = $T03().op_Addition(boxCorner, $T03().op_MultiplyScalar($T03().op_Subtraction(boxSize, textSize), 0.5));
    } else {
      textPos = boxCorner.MemberwiseClone();
    }
    $thisType.get_Batch().DrawString($T0B().MenuFont, text, textPos, textColor);
  };

  function UIHelper_DrawTextFR (x, y, color, text) {
    $thisType.get_Batch().Begin();
    $thisType.get_Batch().DrawString($T0B().MenuFont, text, $S00().Construct((x * $T0B().ScreenWidth), (y * $T0B().ScreenHeight)), color);
    $thisType.get_Batch().End();
  };

  function UIHelper_End () {
    $thisType.get_Batch().End();
  };

  function UIHelper_get_Batch () {
    return $T0B().CommonBatch;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.UIHelper", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      UIHelper__ctor
    );

    $.Method({Static:true , Public:true }, "Begin", 
      new JSIL.MethodSignature(null, [], []), 
      UIHelper_Begin
    );

    $.Method({Static:true , Public:true }, "DrawBox", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      UIHelper_DrawBox
    );

    $.Method({Static:true , Public:true }, "DrawFilledBox", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      UIHelper_DrawFilledBox
    );

    $.Method({Static:true , Public:true }, "DrawIcon", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $asm0A.TypeRef("SharedXNA.HAlign"), $asm0A.TypeRef("SharedXNA.VAlign"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      UIHelper_DrawIcon$00
    );

    $.Method({Static:true , Public:true }, "DrawIcon", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $.Single, 
          $.Single, $.Single, 
          $.Single
        ], []), 
      UIHelper_DrawIcon$01
    );

    $.Method({Static:true , Public:true }, "DrawOutlinedString", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $.String, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      UIHelper_DrawOutlinedString
    );

    $.Method({Static:true , Public:true }, "DrawOutlinedStringBoxed", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $.String, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      UIHelper_DrawOutlinedStringBoxed
    );

    $.Method({Static:true , Public:true }, "DrawOutlinedStringCentered", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $.String, 
          $.Single, $.Single, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      UIHelper_DrawOutlinedStringCentered
    );

    $.Method({Static:true , Public:true }, "DrawRectangle", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      UIHelper_DrawRectangle
    );

    $.Method({Static:true , Public:true }, "DrawShadowedStringBoxed", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $.String, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      UIHelper_DrawShadowedStringBoxed
    );

    $.Method({Static:true , Public:true }, "DrawShadowedStringCentered", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $.String, 
          $.Single, $.Single, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      UIHelper_DrawShadowedStringCentered
    );

    $.Method({Static:true , Public:true }, "DrawStringBoxed", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $.String, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      UIHelper_DrawStringBoxed
    );

    $.Method({Static:true , Public:true }, "DrawText4030", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $.String
        ], []), 
      UIHelper_DrawText4030
    );

    $.Method({Static:true , Public:true }, "DrawTextBox", 
      new JSIL.MethodSignature(null, [
          $.String, $.Single, 
          $.Single, $.Single, 
          $.Single
        ], []), 
      UIHelper_DrawTextBox$02
    );

    $.Method({Static:true , Public:true }, "DrawTextBox", 
      new JSIL.MethodSignature(null, [
          $.String, $.Single, 
          $.Single, $.Single, 
          $.Single, $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      UIHelper_DrawTextBox$03
    );

    $.Method({Static:true , Public:true }, "DrawTextBox", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Microsoft.Xna.Framework.Color"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      UIHelper_DrawTextBox$04
    );

    $.Method({Static:true , Public:true }, "DrawTextBox", 
      new JSIL.MethodSignature(null, [
          $.String, $.Single, 
          $.Single, $.Single, 
          $.Single, $asm01.TypeRef("Microsoft.Xna.Framework.Color"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $.Boolean
        ], []), 
      UIHelper_DrawTextBox$05
    );

    $.Method({Static:true , Public:true }, "DrawTextFR", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $.String
        ], []), 
      UIHelper_DrawTextFR
    );

    $.Method({Static:true , Public:true }, "End", 
      new JSIL.MethodSignature(null, [], []), 
      UIHelper_End
    );

    $.Method({Static:true , Public:true }, "get_Batch", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), [], []), 
      UIHelper_get_Batch
    );

    $.Property({Static:true , Public:true }, "Batch", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.PrimitiveBatch */ 

(function PrimitiveBatch$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.VertexPositionColor)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.BasicEffect)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Viewport)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.InvalidOperationException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm04.Microsoft.Xna.Framework.Graphics.VertexPositionColor))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.PrimitiveType)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm09.System.NotSupportedException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.EffectPass)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.EffectPassCollection)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.EffectTechnique)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Effect)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm09.System.GC)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsResource)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.ArgumentNullException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.BasicEffect"), [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.InvalidOperationException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm09.TypeRef("System.Single")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.NotSupportedException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.EffectPass"), [$asm09.TypeRef("System.Int32")], []))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.PrimitiveType"), $jsilcore.TypeRef("System.Array", ["!!0"]), 
        $asm09.TypeRef("System.Int32"), $asm09.TypeRef("System.Int32")
      ], ["T"]))) ();
  };

  function PrimitiveBatch__ctor (graphicsDevice) {
    this.vertices = JSIL.Array.New($T01(), 500);
    if (graphicsDevice === null) {
      throw $S00().Construct("graphicsDevice");
    }
    this.device = graphicsDevice;
    this.basicEffect = $S01().Construct(graphicsDevice);
    this.basicEffect.set_VertexColorEnabled(true);
    (this.basicEffect.Projection = $T04().CreateOrthographicOffCenter(
        0, 
        $T05().$Cast(graphicsDevice.get_Viewport().get_Width()), 
        $T05().$Cast(graphicsDevice.get_Viewport().get_Height()), 
        0, 
        0, 
        1
      ).MemberwiseClone());
  };

  function PrimitiveBatch_AddVertex (vertex, color) {
    if (!this.hasBegun) {
      throw $S02().Construct("Begin must be called before AddVertex can be called.");
    }
    if (!((((this.positionInBuffer % this.numVertsPerPrimitive) | 0) !== 0) || (((this.positionInBuffer + this.numVertsPerPrimitive) | 0) < this.vertices.length))) {
      this.Flush();
    }
    this.vertices[this.positionInBuffer].Position = $S03().Construct(vertex, 0);
    this.vertices[this.positionInBuffer].Color = color;
    this.positionInBuffer = ((this.positionInBuffer + 1) | 0);
  };

  function PrimitiveBatch_Begin (primitiveType) {
    if (this.hasBegun) {
      throw $S02().Construct("End must be called before Begin can be called again.");
    }
    if (!((primitiveType !== $T0C().LineStrip) && (primitiveType !== $T0C().TriangleStrip))) {
      throw $S04().Construct("The specified primitiveType is not supported by PrimitiveBatch.");
    }
    this.primitiveType = primitiveType;
    this.numVertsPerPrimitive = $thisType.NumVertsPerPrimitive(primitiveType);
    ($S05().CallVirtual("get_Item", null, this.basicEffect.get_CurrentTechnique().get_Passes(), 0)).Apply();
    this.hasBegun = true;
  };

  function PrimitiveBatch_Dispose$00 () {
    this.Dispose(true);
    $T12().SuppressFinalize(this);
  };

  function PrimitiveBatch_Dispose$01 (disposing) {
    if (!(!disposing || this.isDisposed)) {
      if (this.basicEffect !== null) {
        this.basicEffect.Dispose();
      }
      this.isDisposed = true;
    }
  };

  function PrimitiveBatch_End () {
    if (!this.hasBegun) {
      throw $S02().Construct("Begin must be called before End can be called.");
    }
    this.Flush();
    this.hasBegun = false;
  };

  function PrimitiveBatch_Flush () {
    if (!this.hasBegun) {
      throw $S02().Construct("Begin must be called before Flush can be called.");
    }
    if (this.positionInBuffer === 0) {
      return;
    }
    $S06().CallVirtual("DrawUserPrimitives$b1", [$asm04.Microsoft.Xna.Framework.Graphics.VertexPositionColor], this.device, this.primitiveType, this.vertices, 0, ((this.positionInBuffer / this.numVertsPerPrimitive) | 0));
    this.positionInBuffer = 0;
  };

  function PrimitiveBatch_NumVertsPerPrimitive (primitive) {
    switch (primitive.valueOf()) {
      case 0: 
        var numVertsPerPrimitive = 3;
        return numVertsPerPrimitive;

      case 2: 
        numVertsPerPrimitive = 2;
        return numVertsPerPrimitive;

    }
    throw $S02().Construct("primitive is not valid");
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.PrimitiveBatch", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")], []), 
      PrimitiveBatch__ctor
    );

    $.Method({Static:false, Public:true }, "AddVertex", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $asm01.TypeRef("Microsoft.Xna.Framework.Color")], []), 
      PrimitiveBatch_AddVertex
    );

    $.Method({Static:false, Public:true }, "Begin", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.PrimitiveType")], []), 
      PrimitiveBatch_Begin
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], []), 
      PrimitiveBatch_Dispose$00
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      PrimitiveBatch_Dispose$01
    );

    $.Method({Static:false, Public:true }, "End", 
      new JSIL.MethodSignature(null, [], []), 
      PrimitiveBatch_End
    );

    $.Method({Static:false, Public:false}, "Flush", 
      new JSIL.MethodSignature(null, [], []), 
      PrimitiveBatch_Flush
    );

    $.Method({Static:true , Public:false}, "NumVertsPerPrimitive", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.PrimitiveType")], []), 
      PrimitiveBatch_NumVertsPerPrimitive
    );

    $.Constant({Static:true , Public:false}, "DefaultBufferSize", 500); 
    $.Field({Static:false, Public:false}, "vertices", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.VertexPositionColor")])); 
    $.Field({Static:false, Public:false}, "positionInBuffer", $.Int32); 
    $.Field({Static:false, Public:false}, "basicEffect", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.BasicEffect")); 
    $.Field({Static:false, Public:false}, "device", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")); 
    $.Field({Static:false, Public:false}, "primitiveType", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.PrimitiveType")); 
    $.Field({Static:false, Public:false}, "numVertsPerPrimitive", $.Int32); 
    $.Field({Static:false, Public:false}, "hasBegun", $.Boolean); 
    $.Field({Static:false, Public:false}, "isDisposed", $.Boolean); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.SignedInGamerInfo */ 

(function SignedInGamerInfo$Members () {
  var $, $thisType;
  function SignedInGamerInfo__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.SignedInGamerInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      SignedInGamerInfo__ctor
    );

    $.Field({Static:false, Public:true }, "Gamer", $asm03.TypeRef("Microsoft.Xna.Framework.GamerServices.SignedInGamer")); 
    $.Field({Static:false, Public:true }, "Profile", $asm03.TypeRef("Microsoft.Xna.Framework.GamerServices.GamerProfile")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.ProfileManagement */ 

(function ProfileManagement$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.SignedInGamerInfo))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.PlayerIndex)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.SignedInGamerInfo)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm03.Microsoft.Xna.Framework.GamerServices.SignedInGamer)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.EventHandler$b1.Of($asm03.Microsoft.Xna.Framework.GamerServices.SignedInEventArgs))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.EventHandler$b1.Of($asm03.Microsoft.Xna.Framework.GamerServices.SignedOutEventArgs))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.IAsyncResult)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.Exception)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm03.Microsoft.Xna.Framework.GamerServices.Gamer)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.Object)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm03.Microsoft.Xna.Framework.GamerServices.SignedInEventArgs)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm09.System.AsyncCallback)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm03.Microsoft.Xna.Framework.GamerServices.SignedOutEventArgs)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.SignedInGamerInfo")]), []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm09.System.IAsyncResult.get_AsyncState)) ();
  };

  function ProfileManagement__ctor () {
    this.SignedInGamerProfiles = $S00().Construct();
  };

  function ProfileManagement_GetProfileForPlayerIndex (pi) {
    var $temp00;

    for (var a$0 = this.SignedInGamerProfiles._items, i$0 = 0, l$0 = this.SignedInGamerProfiles._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var info = a$0[i$0];
      if (info.Gamer.get_PlayerIndex() === pi) {
        return info.Profile;
      }
    }
    return null;
  };

  function ProfileManagement_Init () {
    $T03().add_SignedIn($T04().New(this, $thisType.prototype.SignedInGamer_SignedIn));
    $T03().add_SignedOut($T05().New(this, $thisType.prototype.SignedInGamer_SignedOut));
  };

  function ProfileManagement_OnGamerProfileGot (result, $exception) {
    try {
      var info = $T02().$As($IM00().Call(result, null));
      info.Profile = info.Gamer.EndGetProfile(result);
    } catch ($exception) {
    }
  };

  function ProfileManagement_SignedInGamer_SignedIn (sender, e, $exception) {
    try {
      var info = new ($T02())();
      info.Gamer = e.get_Gamer();
      e.get_Gamer().BeginGetProfile($T0B().New(this, $thisType.prototype.OnGamerProfileGot), info);
      this.SignedInGamerProfiles.Add(info);
    } catch ($exception) {
    }
  };

  function ProfileManagement_SignedInGamer_SignedOut (sender, e) {

    for (var i = 0; i < this.SignedInGamerProfiles.get_Count(); i = ((i + 1) | 0)) {
      if (this.SignedInGamerProfiles.get_Item(i).Gamer === e.get_Gamer()) {
        this.SignedInGamerProfiles.RemoveAt(i);
        return;
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.ProfileManagement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ProfileManagement__ctor
    );

    $.Method({Static:false, Public:true }, "GetProfileForPlayerIndex", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Xna.Framework.GamerServices.GamerProfile"), [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")], []), 
      ProfileManagement_GetProfileForPlayerIndex
    );

    $.Method({Static:false, Public:true }, "Init", 
      new JSIL.MethodSignature(null, [], []), 
      ProfileManagement_Init
    );

    $.Method({Static:false, Public:false}, "OnGamerProfileGot", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IAsyncResult")], []), 
      ProfileManagement_OnGamerProfileGot
    );

    $.Method({Static:false, Public:false}, "SignedInGamer_SignedIn", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Microsoft.Xna.Framework.GamerServices.SignedInEventArgs")], []), 
      ProfileManagement_SignedInGamer_SignedIn
    );

    $.Method({Static:false, Public:false}, "SignedInGamer_SignedOut", 
      new JSIL.MethodSignature(null, [$.Object, $asm03.TypeRef("Microsoft.Xna.Framework.GamerServices.SignedOutEventArgs")], []), 
      ProfileManagement_SignedInGamer_SignedOut
    );

    $.Field({Static:false, Public:true }, "SignedInGamerProfiles", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.SignedInGamerInfo")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.SpatialHash */ 

(function SpatialHash$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Collections.Generic.Dictionary$b2.Of($asm0A.SharedXNA.SpatialHash_HashCell, $asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.WorldObject)))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.WorldObject)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.WorldObject))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.SpatialHash_HashCell)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm0A.SharedXNA.SpatialHash_HashCell, $asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.WorldObject)))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Collections.Generic.KeyValuePair$b2.Of($asm0A.SharedXNA.SpatialHash_HashCell, $asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.WorldObject)))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.SharedXNA.SpatialHash_$l$gc__DisplayClass1)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm09.System.Double)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm09.System.Collections.Generic.IEnumerable$b1.Of($asm0A.SharedXNA.WorldObject))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0D.System.Linq.Enumerable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("SharedXNA.SpatialHash/HashCell"), $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.WorldObject")])]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("SharedXNA.SpatialHash/HashCell"), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.WorldObject")]), []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm09.TypeRef("System.Int32"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Int32")
      ], []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm09.TypeRef("System.Func`2", ["!!0", $asm09.TypeRef("System.Boolean")])], ["TSource"]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm09.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };

  function SpatialHash__ctor (cellSize) {
    this.m_cellSize = cellSize;
    this.m_space = $S00().Construct();
  };

  function SpatialHash_Add (spaceObject) {
    var cellList = new JSIL.BoxedVariable(null);
    var spaceCell = $S01().Construct($T00().op_Division(spaceObject.Pos, this.m_cellSize));
    if (!this.m_space.TryGetValue(spaceCell.MemberwiseClone(), /* ref */ cellList)) {
      cellList.set($S02().Construct());
      this.m_space.Add(spaceCell.MemberwiseClone(), cellList.get());
    }
    cellList.get().Add(spaceObject);
  };

  function SpatialHash_Clear () {
    var enumerator = $T01().prototype.GetEnumerator.call(this.m_space);

    while (enumerator.MoveNext()) {
      var cellEntry = enumerator.get_Current().MemberwiseClone();
      cellEntry.get_Value().Clear();
    }
  };

  function SpatialHash_GetNearest (point, radius) {
    var cellList = new JSIL.BoxedVariable(null);
    var hashCell = new ($T04())();
    var $closure0 = new ($T08())();
    $closure0.point = point;
    $closure0.radius = +radius;
    var leftCell = ((Math.floor((($closure0.point.X - $closure0.radius) / this.m_cellSize.X))) | 0);
    var rightCell = ((Math.ceil((($closure0.point.X + $closure0.radius) / this.m_cellSize.X))) | 0);
    var topCell = ((Math.floor((($closure0.point.Y - $closure0.radius) / this.m_cellSize.Y))) | 0);
    var bottomCell = ((Math.ceil((($closure0.point.Y + $closure0.radius) / this.m_cellSize.Y))) | 0);
    var frontCell = ((Math.floor((($closure0.point.Z - $closure0.radius) / this.m_cellSize.Z))) | 0);
    var backCell = ((Math.ceil((($closure0.point.Z + $closure0.radius) / this.m_cellSize.Z))) | 0);
    var items = $T0D().Empty$b1($T02())();

    for (var y = topCell; y <= bottomCell; y = ((y + 1) | 0)) {

      for (var x = leftCell; x <= rightCell; x = ((x + 1) | 0)) {

        for (var z = frontCell; z <= backCell; z = ((z + 1) | 0)) {
          $S03().Call($T04().prototype, "_ctor", null, hashCell, x, y, z);
          if (this.m_space.TryGetValue(hashCell.MemberwiseClone(), /* ref */ cellList)) {
            $T0D().Concat$b1($T02())(items, cellList.get());
          }
        }
      }
    }
    return $S04().CallStatic($T0D(), "Where$b1", [$asm0A.SharedXNA.WorldObject], 
      $S05().CallStatic($T0D(), "Distinct$b1", [$asm0A.SharedXNA.WorldObject], items), 
      function (wo) {
        return ($asm01.Microsoft.Xna.Framework.Vector3.op_Subtraction(wo.Pos, this.point).Length() <= this.radius);
      }.bind($closure0)
    );
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.SpatialHash", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], []), 
      SpatialHash__ctor
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.WorldObject")], []), 
      SpatialHash_Add
    );

    $.Method({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], []), 
      SpatialHash_Clear
    );

    $.Method({Static:false, Public:true }, "GetNearest", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm0A.TypeRef("SharedXNA.WorldObject")]), [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3"), $.Single], []), 
      SpatialHash_GetNearest
    );

    $.Field({Static:false, Public:false}, "m_cellSize", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:false}, "m_space", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm0A.TypeRef("SharedXNA.SpatialHash/HashCell"), $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.WorldObject")])])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SharedXNA.SpatialHash/HashCell */ 

(function HashCell$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector3)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Object)) ();
  };

  function HashCell__ctor$00 (x, y, z) {
    this.X = x;
    this.Y = y;
    this.Z = z;
  };

  function HashCell__ctor$01 (x, y, z) {
    this.X = ((x) | 0);
    this.Y = ((y) | 0);
    this.Z = ((z) | 0);
  };

  function HashCell__ctor$02 (position) {
    this.X = ((position.X) | 0);
    this.Y = ((position.Y) | 0);
    this.Z = ((position.Z) | 0);
  };

  function HashCell_Object_Equals (obj) {
    if ($thisType.$Is(obj)) {
      var cell = $thisType.$Cast(obj);
      return (!((this.X !== cell.X) || 
          (this.Y !== cell.Y)) && (this.Z === cell.Z));
    }
    return false;
  };

  function HashCell_Equals$03 (other) {
    return (!((this.X !== other.X) || 
        (this.Y !== other.Y)) && (this.Z === other.Z));
  };

  function HashCell_GetHashCode () {
    return ((this.X ^ this.Y) ^ this.Z);
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "SharedXNA.SpatialHash/HashCell", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ], []), 
      HashCell__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single
        ], []), 
      HashCell__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector3")], []), 
      HashCell__ctor$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], []), 
      HashCell_Object_Equals
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], []), 
      HashCell_Equals$03
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], []), 
      HashCell_GetHashCode
    );

    $.Field({Static:false, Public:true }, "X", $.Int32); 
    $.Field({Static:false, Public:true }, "Y", $.Int32); 
    $.Field({Static:false, Public:true }, "Z", $.Int32); 
    $.ImplementInterfaces(
      /* 0 */ $asm09.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.SpatialHash/<>c__DisplayClass1 */ 

(function $l$gc__DisplayClass1$Members () {
  var $, $thisType;
  function $l$gc__DisplayClass1__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.SpatialHash/<>c__DisplayClass1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      $l$gc__DisplayClass1__ctor
    );

    $.Field({Static:false, Public:true }, "point", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    $.Field({Static:false, Public:true }, "radius", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class SharedXNA.AsyncOperationScreenBase */ 

(function AsyncOperationScreenBase$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.IAsyncResult)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.GameMode)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.SharedXNA.GameModeManager)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm09.System.IAsyncResult.get_IsCompleted)) ();
  };

  function AsyncOperationScreenBase__ctor$00 (asyncResult) {
    $T01().prototype._ctor.call(this);
    this.MyAsyncResult = asyncResult;
  };

  function AsyncOperationScreenBase_DoOperationCompleted () {
  };

  function AsyncOperationScreenBase_get_AsyncResult () {
    return this.MyAsyncResult;
  };

  function AsyncOperationScreenBase_Update (gameTime) {
    if (!((this.MyAsyncResult === null) || !$IM00().Call(this.MyAsyncResult, null))) {
      $T03().PopMenu();
      this.DoOperationCompleted();
      this.MyAsyncResult = null;
    }
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.GameMode"), 
      Name: "SharedXNA.AsyncOperationScreenBase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IAsyncResult")], []), 
      AsyncOperationScreenBase__ctor$00
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoOperationCompleted", 
      new JSIL.MethodSignature(null, [], []), 
      AsyncOperationScreenBase_DoOperationCompleted
    );

    $.Method({Static:false, Public:true }, "get_AsyncResult", 
      new JSIL.MethodSignature($asm09.TypeRef("System.IAsyncResult"), [], []), 
      AsyncOperationScreenBase_get_AsyncResult
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      AsyncOperationScreenBase_Update
    );

    $.Field({Static:false, Public:false}, "MyAsyncResult", $asm09.TypeRef("System.IAsyncResult")); 
    $.Property({Static:false, Public:true }, "AsyncResult", $asm09.TypeRef("System.IAsyncResult"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.AnimatedWaitForAsyncOperationScreen */ 

(function AnimatedWaitForAsyncOperationScreen$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.IAsyncResult)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.AsyncOperationScreenBase)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.GameMode_GameModeEvent)) ();
  };

  function AnimatedWaitForAsyncOperationScreen__ctor$00 (asyncResult) {
    $T01().prototype._ctor.call(this, asyncResult);
  };

  function AnimatedWaitForAsyncOperationScreen_DoOperationCompleted () {
    if (this.OnOperationCompleted !== null) {
      this.OnOperationCompleted(this);
    }
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.AsyncOperationScreenBase"), 
      Name: "SharedXNA.AnimatedWaitForAsyncOperationScreen", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IAsyncResult")], []), 
      AnimatedWaitForAsyncOperationScreen__ctor$00
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoOperationCompleted", 
      new JSIL.MethodSignature(null, [], []), 
      AnimatedWaitForAsyncOperationScreen_DoOperationCompleted
    );

    $.Field({Static:false, Public:true }, "OnOperationCompleted", $asm0A.TypeRef("SharedXNA.GameMode/GameModeEvent")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.AnimatedWaitDialog */ 

(function AnimatedWaitDialog$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.IAsyncResult)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.AnimatedWaitForAsyncOperationScreen)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.SharedXNA.PrettyString)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.SharedXNA.UIHelper)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.SharedXNA.ColorEx)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("SharedXNA.PrettyString"), [$asm09.TypeRef("System.String")]))) ();
  };

  function AnimatedWaitDialog__ctor (asyncResult, CentralMessage) {
    $T02().prototype._ctor.call(this, asyncResult);
    this.MyCentralMessage = $S00().Construct(CentralMessage);
  };

  function AnimatedWaitDialog_Draw (gameTime) {
    $T05().Begin();
    var x = +($T07().ScreenWidth * 0.18);
    var y = +($T07().ScreenHeight * 0.18);
    var w = +($T07().ScreenWidth - (2 * x));
    var h = +($T07().ScreenHeight - (2 * y));
    $T05().DrawFilledBox(
      x, 
      y, 
      w, 
      h, 
      $T08().TransparentBlack80, 
      $T09().get_White()
    );
    this.MyCentralMessage.DrawBoxed((x + 20), (y + 20), (w - (2 * 20)), (h - (2 * 20)));
    $T05().End();
  };

  function AnimatedWaitDialog_IsExclusive () {
    return false;
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.AnimatedWaitForAsyncOperationScreen"), 
      Name: "SharedXNA.AnimatedWaitDialog", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IAsyncResult"), $.String], []), 
      AnimatedWaitDialog__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      AnimatedWaitDialog_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "IsExclusive", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      AnimatedWaitDialog_IsExclusive
    );

    $.Field({Static:false, Public:false}, "MyCentralMessage", $asm0A.TypeRef("SharedXNA.PrettyString")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.LoadingScreen */ 

(function LoadingScreen$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.GameMode_GameModeEvent)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.GameMode)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.SharedXNA.UIHelper)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Double)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0A.SharedXNA.GameModeManager)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.TimeSpan)) ();
  };

  function LoadingScreen__ctor (loadFunc, completeFunc) {
    $T01().prototype._ctor.call(this);
    this.DoLoadingFunction = loadFunc;
    this.OnLoadComplete = completeFunc;
    if (this.DoLoadingFunction !== null) {
      this.DoLoadingFunction(this);
    }
  };

  function LoadingScreen_Draw (gameTime) {
    $T03().Begin();
    this.MyAnimationTimer = +(this.MyAnimationTimer % 0.800000011920929);
    var loadString = "Loading.";

    for (var t = +0; t < this.MyAnimationTimer; t += +0.016000000759959221) {
      loadString = (JSIL.ConcatString(loadString, "."));
    }
    $T03().DrawStringBoxed(
      $T07().MenuFont, 
      loadString, 
      0, 
      0, 
      $T07().ScreenWidth, 
      $T07().ScreenHeight, 
      $T08().get_White()
    );
    $T03().End();
    $T01().prototype.Draw.call(this, gameTime);
  };

  function LoadingScreen_Update (gameTime) {
    $T01().prototype.Update.call(this, gameTime);
    $T09().PopMenu();
    if (this.OnLoadComplete !== null) {
      this.OnLoadComplete(this);
    }
    this.MyAnimationTimer += +gameTime.get_ElapsedGameTime().get_TotalSeconds();
  };

  function LoadingScreen_WorkerThread () {
    if (this.DoLoadingFunction !== null) {
      this.DoLoadingFunction(this);
    }
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.GameMode"), 
      Name: "SharedXNA.LoadingScreen", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.GameMode/GameModeEvent"), $asm0A.TypeRef("SharedXNA.GameMode/GameModeEvent")], []), 
      LoadingScreen__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      LoadingScreen_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      LoadingScreen_Update
    );

    $.Method({Static:false, Public:false}, "WorkerThread", 
      new JSIL.MethodSignature(null, [], []), 
      LoadingScreen_WorkerThread
    );

    $.Field({Static:false, Public:false}, "backgroundThread", $asm09.TypeRef("System.Threading.Thread")); 
    $.Field({Static:false, Public:false}, "MyAnimationTimer", $.Double); 
    $.Field({Static:false, Public:true }, "DoLoadingFunction", $asm0A.TypeRef("SharedXNA.GameMode/GameModeEvent")); 
    $.Field({Static:false, Public:true }, "OnLoadComplete", $asm0A.TypeRef("SharedXNA.GameMode/GameModeEvent")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.MenuScreen */ 

(function MenuScreen$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.GameMode)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.PrettyString)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.SharedXNA.MenuItemContainer)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0A.SharedXNA.ColorEx)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.TimeSpan)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.SharedXNA.UIHelper)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("SharedXNA.PrettyString"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };

  function MenuScreen__ctor (MenuTitle) {
    $T01().prototype._ctor.call(this);
    this.MyHelpText = $S00().Construct("[B] Back");
    this.MyMenuTitle = MenuTitle;
    this.MyMenu = new ($T03())();
    this.MyMenu.OnMenuCancelled = function (c) {
      $asm0A.SharedXNA.GameModeManager.PopMenu();
    };
  };

  function MenuScreen_Draw (gameTime) {
    var arg_29_0 = $T06().MenuBandColor;
    this.DrawBackground(
      0, 
      ($T07().ScreenHeight * 0.125), 
      $T07().ScreenWidth, 
      ($T07().ScreenHeight * 0.75), 
      $T08().$Cast(gameTime.get_ElapsedGameTime().get_TotalSeconds())
    );
  };

  function MenuScreen_DrawBackground (nx, ny, nw, nh, time) {
  };

  function MenuScreen_get_Menu () {
    return this.MyMenu;
  };

  function MenuScreen_get_Title () {
    return this.MyMenuTitle;
  };

  function MenuScreen_GUI (gameTime) {
    var x0 = +0;
    var w = +$T07().ScreenWidth;
    var y = +($T07().ScreenHeight * 0.125);
    var h = +($T07().ScreenHeight * 0.75);
    var c2 = $T06().MenuBandColor;
    $T0A().Begin();
    $T0A().DrawBox(
      x0, 
      (y - (10 * 0.5)), 
      w, 
      10, 
      c2
    );
    $T0A().DrawBox(
      x0, 
      ((y + h) - (10 * 0.5)), 
      w, 
      10, 
      c2
    );
    $T0A().End();
    this.MyMenu.Draw(gameTime);
    x0 = +($T07().ScreenWidth * 0.1);
    w = +$T07().ScreenWidth;
    y = +($T07().ScreenHeight * 0.125);
    h = +($T07().ScreenHeight * 0.75);
    $T0A().Begin();
    $T0A().get_Batch().DrawString($T07().LargeMenuFont, this.MyMenuTitle, $S01().Construct(x0, y), $T05().get_White());
    $T0A().End();
  };

  function MenuScreen_set_Title (value) {
    this.MyMenuTitle = value;
  };

  function MenuScreen_Update (gameTime) {
    this.MyMenu.Update(gameTime);
  };

  function MenuScreen_UpdateInput (gameTime) {
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.GameMode"), 
      Name: "SharedXNA.MenuScreen", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], []), 
      MenuScreen__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      MenuScreen_Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DrawBackground", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single
        ], []), 
      MenuScreen_DrawBackground
    );

    $.Method({Static:false, Public:true }, "get_Menu", 
      new JSIL.MethodSignature($asm0A.TypeRef("SharedXNA.MenuItemContainer"), [], []), 
      MenuScreen_get_Menu
    );

    $.Method({Static:false, Public:true }, "get_Title", 
      new JSIL.MethodSignature($.String, [], []), 
      MenuScreen_get_Title
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GUI", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      MenuScreen_GUI
    );

    $.Method({Static:false, Public:true }, "set_Title", 
      new JSIL.MethodSignature(null, [$.String], []), 
      MenuScreen_set_Title
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      MenuScreen_Update
    );

    $.Method({Static:false, Public:true , Virtual:true }, "UpdateInput", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      MenuScreen_UpdateInput
    );

    $.Field({Static:false, Public:false}, "MyMenu", $asm0A.TypeRef("SharedXNA.MenuItemContainer")); 
    $.Field({Static:false, Public:false}, "MyHelpText", $asm0A.TypeRef("SharedXNA.PrettyString")); 
    $.Field({Static:false, Public:false}, "MyMenuTitle", $.String); 
    $.Property({Static:false, Public:true }, "Title", $.String);

    $.Property({Static:false, Public:true }, "Menu", $asm0A.TypeRef("SharedXNA.MenuItemContainer"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.PopUpMenuScreen */ 

(function PopUpMenuScreen$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.MenuScreen)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.UIHelper)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.SharedXNA.ColorEx)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.SharedXNA.MenuItemContainer)) ();
  };

  function PopUpMenuScreen__ctor (title) {
    $T01().prototype._ctor.call(this, title);
    this.MyX = +($T02().ScreenWidth * 0.1);
    this.MyY = +($T02().ScreenHeight * 0.1);
    this.MyW = +($T02().ScreenWidth * 0.8);
    this.MyH = +($T02().ScreenHeight * 0.8);
    this.MyPadding = +15;
    this.MyMenu.DisplayWidth = +(this.MyW - (2 * this.MyPadding));
  };

  function PopUpMenuScreen_Draw (gameTime) {
  };

  function PopUpMenuScreen_GUI (gameTime) {
    $T04().Begin();
    $T04().DrawFilledBox(
      this.MyX, 
      this.MyY, 
      this.MyW, 
      this.MyH, 
      $T05().TransparentBlack80, 
      $T06().get_White()
    );
    var y = +(this.MyY + this.MyPadding);
    var size = $T02().LargeMenuFont.MeasureString(this.MyMenuTitle).MemberwiseClone();
    $T04().DrawStringBoxed(
      $T02().LargeMenuFont, 
      this.MyMenuTitle, 
      this.MyX, 
      y, 
      this.MyW, 
      size.Y, 
      $T06().get_White()
    );
    $T04().End();
    y += +(size.Y + this.MyPadding);
    this.MyMenu.DisplayX = +(this.MyX + this.MyPadding);
    this.MyMenu.DisplayY = +y;
    this.MyMenu.Draw(gameTime);
  };

  function PopUpMenuScreen_IsExclusive () {
    return false;
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.MenuScreen"), 
      Name: "SharedXNA.PopUpMenuScreen", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], []), 
      PopUpMenuScreen__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      PopUpMenuScreen_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GUI", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      PopUpMenuScreen_GUI
    );

    $.Method({Static:false, Public:true , Virtual:true }, "IsExclusive", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      PopUpMenuScreen_IsExclusive
    );

    $.Field({Static:false, Public:false}, "MyX", $.Single); 
    $.Field({Static:false, Public:false}, "MyY", $.Single); 
    $.Field({Static:false, Public:false}, "MyW", $.Single); 
    $.Field({Static:false, Public:false}, "MyH", $.Single); 
    $.Field({Static:false, Public:false}, "MyPadding", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SharedXNA.DialogType */ 

JSIL.MakeEnum(
  "SharedXNA.DialogType", true, {
    YesNo: 0, 
    YesCancel: 1, 
    Ok: 2, 
    OkCancel: 3, 
    OkHiddenCancel: 4
  }, false
);

/* class SharedXNA.MessageBoxScreen */ 

(function MessageBoxScreen$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.DialogType)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.GameMode)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.CommonMessages)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm09.System.String))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0A.SharedXNA.PrettyString)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.SharedXNA.UIHelper)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0A.SharedXNA.ColorEx)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0A.SharedXNA.InputState)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0A.SharedXNA.GameModeManager)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0A.SharedXNA.GameMode_GameModeEvent)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("SharedXNA.PrettyString"), [$asm09.TypeRef("System.String")]))) ();
  };

  function MessageBoxScreen__ctor$00 (type, defaultMessage) {
    $T02().prototype._ctor.call(this);
    this.MyType = type;
    switch (this.MyType.valueOf()) {
      case 0: 
        defaultMessage = (JSIL.ConcatString.apply(null, JSIL.Array.New($T01(), [defaultMessage, "[DefaultColor][BREAK][A] ", $T04().get_DialogYes(), "   [B]", $T04().get_DialogNo()])));
        this.CanCancel = true;
        break;

      case 1: 
        var text2 = defaultMessage;
        defaultMessage = (JSIL.ConcatString.apply(null, JSIL.Array.New($T01(), [text2, "[DefaultColor][BREAK][A] ", $T04().get_DialogYes(), "   [B]", $T04().get_DialogCancel()])));
        this.CanCancel = true;
        break;

      case 2: 
        defaultMessage = ((defaultMessage + "[DefaultColor][BREAK][A] " + $T04().get_DialogOK()));
        this.CanCancel = false;
        break;

      case 3: 
        var text3 = defaultMessage;
        defaultMessage = (JSIL.ConcatString.apply(null, JSIL.Array.New($T01(), [text3, "[DefaultColor][BREAK][A] ", $T04().get_DialogOK(), "   [B]", $T04().get_DialogCancel()])));
        this.CanCancel = true;
        break;

      case 4: 
        defaultMessage = ((defaultMessage + "[DefaultColor][BREAK][A] " + $T04().get_DialogOK()));
        this.CanCancel = true;
        break;

    }
    this.MyMessage = $S00().Construct(defaultMessage);
  };

  function MessageBoxScreen_Draw (gameTime) {
    $T08().Begin();
    var x = +($T0A().ScreenWidth * 0.18);
    var y = +($T0A().ScreenHeight * 0.18);
    var w = +($T0A().ScreenWidth - (2 * x));
    var h = +($T0A().ScreenHeight - (2 * y));
    $T08().DrawFilledBox(
      x, 
      y, 
      w, 
      h, 
      $T0B().TransparentBlack80, 
      $T0C().get_White()
    );
    this.MyMessage.DrawBoxed((x + 20), (y + 20), (w - (2 * 20)), (h - (2 * 20)));
    $T08().End();
  };

  function MessageBoxScreen_IsExclusive () {
    return false;
  };

  function MessageBoxScreen_SetMessage (message) {
    this.MyMessage.set_Text(message);
  };

  function MessageBoxScreen_Update (gameTime) {
    if ($T0A().IM.IsMenuSelect($T0A().ActivePlayerIndex)) {
      $T0E().PopMenu();
      if (this.OnMessageAccepted !== null) {
        this.OnMessageAccepted(this);
      }
    }
    if (!(!this.CanCancel || !$T0A().IM.IsMenuCancel($T0A().ActivePlayerIndex))) {
      $T0E().PopMenu();
      if (this.OnMessageCancelled !== null) {
        this.OnMessageCancelled(this);
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.GameMode"), 
      Name: "SharedXNA.MessageBoxScreen", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.DialogType"), $.String], []), 
      MessageBoxScreen__ctor$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      MessageBoxScreen_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "IsExclusive", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      MessageBoxScreen_IsExclusive
    );

    $.Method({Static:false, Public:true }, "SetMessage", 
      new JSIL.MethodSignature(null, [$.String], []), 
      MessageBoxScreen_SetMessage
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      MessageBoxScreen_Update
    );

    $.Field({Static:false, Public:false}, "MyMessage", $asm0A.TypeRef("SharedXNA.PrettyString")); 
    $.Field({Static:false, Public:false}, "CanCancel", $.Boolean); 
    $.Field({Static:false, Public:false}, "MyType", $asm0A.TypeRef("SharedXNA.DialogType")); 
    $.Field({Static:false, Public:true }, "OnMessageAccepted", $asm0A.TypeRef("SharedXNA.GameMode/GameModeEvent")); 
    $.Field({Static:false, Public:true }, "OnMessageCancelled", $asm0A.TypeRef("SharedXNA.GameMode/GameModeEvent")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.FullScreenTimedNotify */ 

(function FullScreenTimedNotify$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.GameMode_GameModeEvent)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.SharedXNA.GameMode)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.PrettyString)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0A.SharedXNA.UIHelper)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.SharedXNA.ColorEx)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.TimeSpan)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0A.SharedXNA.GameModeManager)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("SharedXNA.PrettyString"), [$asm09.TypeRef("System.String")]))) ();
  };

  function FullScreenTimedNotify__ctor (message, durationInSec, doAfter) {
    $T03().prototype._ctor.call(this);
    this.MyTimeLeft = +durationInSec;
    this.MyMessage = $S00().Construct(message);
    this.OnTimeout = doAfter;
  };

  function FullScreenTimedNotify_Draw (gameTime) {
    $T06().Begin();
    var w = +($T07().ScreenWidth * 0.7);
    var h = +($T07().ScreenHeight * 0.3);
    var x = +(($T07().ScreenWidth - w) * 0.5);
    var y = +(($T07().ScreenHeight - h) * 0.5);
    $T06().DrawFilledBox(
      x, 
      y, 
      w, 
      h, 
      $T08().TransparentBlack80, 
      $T09().get_White()
    );
    this.MyMessage.DrawBoxed((x + 20), (y + 20), (w - (2 * 20)), (h - (2 * 20)));
    $T06().End();
  };

  function FullScreenTimedNotify_IsExclusive () {
    return false;
  };

  function FullScreenTimedNotify_Update (gameTime) {
    this.MyTimeLeft -= +gameTime.get_ElapsedGameTime().get_TotalSeconds();
    if (this.MyTimeLeft <= 0) {
      $T0B().PopMenu();
      if (this.OnTimeout !== null) {
        this.OnTimeout(this);
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.GameMode"), 
      Name: "SharedXNA.FullScreenTimedNotify", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Single, 
          $asm0A.TypeRef("SharedXNA.GameMode/GameModeEvent")
        ], []), 
      FullScreenTimedNotify__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      FullScreenTimedNotify_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "IsExclusive", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      FullScreenTimedNotify_IsExclusive
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      FullScreenTimedNotify_Update
    );

    $.Field({Static:false, Public:false}, "MyMessage", $asm0A.TypeRef("SharedXNA.PrettyString")); 
    $.Field({Static:false, Public:true }, "OnTimeout", $asm0A.TypeRef("SharedXNA.GameMode/GameModeEvent")); 
    $.Field({Static:false, Public:false}, "MyTimeLeft", $.Double); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.NetworkErrorScreen */ 

(function NetworkErrorScreen$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Exception)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.MessageBoxScreen)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.DialogType)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm03.Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm03.Microsoft.Xna.Framework.GamerServices.Guide)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.SharedXNA.CommonMessages)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm06.Microsoft.Xna.Framework.Net.NetworkSessionJoinException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm03.Microsoft.Xna.Framework.GamerServices.NetworkNotAvailableException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm03.Microsoft.Xna.Framework.GamerServices.NetworkException)) ();
  };

  function NetworkErrorScreen__ctor (e) {
    $T01().prototype._ctor.call(this, $T02().Ok, $thisType.GetErrorMessage(e));
  };

  function NetworkErrorScreen_GetErrorMessage (exception) {
    if ($T03().$As(exception) !== null) {
      if ($T04().get_IsTrialMode()) {
        return $T05().get_ErrorTrialMode();
      }
      return $T05().get_ErrorGamerPrivilege();
    } else {
      var joinException = $T06().$As(exception);
      if (joinException !== null) {
        switch (joinException.get_JoinError().valueOf()) {
          case 0: 
            return $T05().get_ErrorSessionNotFound();

          case 1: 
            return $T05().get_ErrorSessionNotJoinable();

          case 2: 
            return $T05().get_ErrorSessionFull();

        }
      }
      if ($T07().$As(exception) !== null) {
        return $T05().get_ErrorNetworkNotAvailable();
      }
      if ($T08().$As(exception) !== null) {
        return $T05().get_ErrorNetwork();
      }
      return $T05().get_ErrorUnknown();
    }
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.MessageBoxScreen"), 
      Name: "SharedXNA.NetworkErrorScreen", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Exception")], []), 
      NetworkErrorScreen__ctor
    );

    $.Method({Static:true , Public:false}, "GetErrorMessage", 
      new JSIL.MethodSignature($.String, [$asm09.TypeRef("System.Exception")], []), 
      NetworkErrorScreen_GetErrorMessage
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.KeyboardEntryScreen */ 

(function KeyboardEntryScreen$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.PlayerIndex)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.AnimatedWaitForAsyncOperationScreen)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm03.Microsoft.Xna.Framework.GamerServices.Guide)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };

  function KeyboardEntryScreen__ctor (ForPlayer, Title, Description, DefaultValue) {
    this.MyMapName = "";
    $T02().prototype._ctor.call(this, null);
    this.MyAsyncResult = $T03().BeginShowKeyboardInput(
      ForPlayer, 
      Title, 
      Description, 
      DefaultValue, 
      null, 
      null
    );
  };

  function KeyboardEntryScreen_DoOperationCompleted () {
    this.MyMapName = $T03().EndShowKeyboardInput(this.MyAsyncResult);
    $T02().prototype.DoOperationCompleted.call(this);
  };

  function KeyboardEntryScreen_Draw (gameTime) {
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.AnimatedWaitForAsyncOperationScreen"), 
      Name: "SharedXNA.KeyboardEntryScreen", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex"), $.String, 
          $.String, $.String
        ], []), 
      KeyboardEntryScreen__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoOperationCompleted", 
      new JSIL.MethodSignature(null, [], []), 
      KeyboardEntryScreen_DoOperationCompleted
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      KeyboardEntryScreen_Draw
    );

    $.Field({Static:false, Public:true }, "MyMapName", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.ChooseStorageDeviceScreen */ 

(function ChooseStorageDeviceScreen$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.GameMode_GameModeEvent)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.AnimatedWaitForAsyncOperationScreen)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.Microsoft.Xna.Framework.Storage.StorageDevice)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Exception)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.SharedXNA.SafeGuide)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.IAsyncResult)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm03.Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.SharedXNA.AsyncOperationScreenBase)) ();
  };

  function ChooseStorageDeviceScreen__ctor (ForPlayer, OnCompleted) {
    $T01().prototype._ctor.call(this, null);
    this.MyPlayer = ForPlayer;
    this.FoundStorageDevice = null;
    this.OnOperationCompleted = OnCompleted;
  };

  function ChooseStorageDeviceScreen_DoOperationCompleted () {
    var result = $T02().EndShowSelector(this.MyAsyncResult);
    if (!((result !== null) && result.get_IsConnected())) {
      this.FoundStorageDevice = null;
    } else {
      this.FoundStorageDevice = result;
    }
    $T01().prototype.DoOperationCompleted.call(this);
  };

  function ChooseStorageDeviceScreen_Draw (gameTime) {
  };

  function ChooseStorageDeviceScreen_IsExclusive () {
    return false;
  };

  function ChooseStorageDeviceScreen_Update (gameTime, $exception) {
    if (!($T05().get_IsVisible() || (this.MyAsyncResult !== null))) {
      try {
        if (this.MyPlayer !== null) {
          this.MyAsyncResult = $T02().BeginShowSelector(this.MyPlayer, null, null);
        } else {
          this.MyAsyncResult = $T02().BeginShowSelector(null, null);
        }
      } catch ($exception) {
        if ($T07().$Is($exception)) {
        } else {
          throw $exception;
        }
      }
    }
    $T08().prototype.Update.call(this, gameTime);
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.AnimatedWaitForAsyncOperationScreen"), 
      Name: "SharedXNA.ChooseStorageDeviceScreen", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")]), $asm0A.TypeRef("SharedXNA.GameMode/GameModeEvent")], []), 
      ChooseStorageDeviceScreen__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoOperationCompleted", 
      new JSIL.MethodSignature(null, [], []), 
      ChooseStorageDeviceScreen_DoOperationCompleted
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      ChooseStorageDeviceScreen_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "IsExclusive", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ChooseStorageDeviceScreen_IsExclusive
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      ChooseStorageDeviceScreen_Update
    );

    $.Field({Static:false, Public:true }, "FoundStorageDevice", $asm07.TypeRef("Microsoft.Xna.Framework.Storage.StorageDevice")); 
    $.Field({Static:false, Public:true }, "MyPlayer", $asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.TitleScreenThingy */ 

(function TitleScreenThingy$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.GameMode_GameModeEvent)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.GameMode)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.UIHelper)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.SharedXNA.CommonMessages)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.SharedXNA.UIState)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0A.SharedXNA.UI)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0A.SharedXNA.InputState)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };

  function TitleScreenThingy__ctor (Backdrop, PressStartEvent) {
    this.bDrawGhettoStartPrompt = true;
    $T02().prototype._ctor.call(this);
    this.MyBackdrop = Backdrop;
    this.OnPressStart = PressStartEvent;
  };

  function TitleScreenThingy_Draw (gameTime) {
    $T04().Begin();
    $T04().get_Batch().DrawRect(this.MyBackdrop, $T06().FixedAspectWindow, $T07().get_White());
    if (this.bDrawGhettoStartPrompt) {
      $T04().get_Batch().DrawString(
        $T06().MenuFont, 
        $T08().get_PressStartToContinue(), 
        $S00().Construct(320, 400), 
        $T07().get_White()
      );
    }
    $T04().End();
  };

  function TitleScreenThingy_GUI (gameTime) {
    var state = new JSIL.BoxedVariable($asm0A.SharedXNA.UIState.Normal);
    if (!(!$T0B().Test(new ($T0C())(0, 0, (($T06().ScreenWidth) | 0), (($T06().ScreenHeight) | 0)), /* ref */ state) || (state.get() !== $T0A().Pressed))) {
      this.OnPressStart(this);
    }
  };

  function TitleScreenThingy_Update (gameTime) {
    if ($T06().IM.IsMenuSelect(null, /* ref */ new JSIL.MemberReference($T06(), "ActivePlayerIndex"))) {
      this.OnPressStart(this);
    }
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.GameMode"), 
      Name: "SharedXNA.TitleScreenThingy", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $asm0A.TypeRef("SharedXNA.GameMode/GameModeEvent")], []), 
      TitleScreenThingy__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      TitleScreenThingy_Draw
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GUI", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      TitleScreenThingy_GUI
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      TitleScreenThingy_Update
    );

    $.Field({Static:false, Public:false}, "MyBackdrop", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:false}, "OnPressStart", $asm0A.TypeRef("SharedXNA.GameMode/GameModeEvent")); 
    $.Field({Static:false, Public:false}, "bDrawGhettoStartPrompt", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.SharedGameBase */ 

(function SharedGameBase$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.Game)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.GameMode)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Console)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.Object)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.TimeSpan)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0A.SharedXNA.ColorEx)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0A.SharedXNA.GameModeManager)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GamerServices.GamerServicesComponent)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm09.System.Collections.ObjectModel.Collection$b1.Of($asm02.Microsoft.Xna.Framework.IGameComponent))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameComponent)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0A.SharedXNA.LoadingScreen)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0A.SharedXNA.GameMode_GameModeEvent)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0A.SharedXNA.InputState)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm08.Microsoft.Xna.Framework.Audio.AudioEngine)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), [$asm09.TypeRef("System.IServiceProvider"), $asm09.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.IGameComponent")], []))) ();
  };

  function SharedGameBase__ctor () {
    this.bWantGamerServices = true;
    $T00().prototype._ctor.call(this);
    this.graphics = new ($T01())(this);
    this.graphics.set_PreferredBackBufferWidth((($T02().ScreenWidth) | 0));
    this.graphics.set_PreferredBackBufferHeight((($T02().ScreenHeight) | 0));
    this.graphics.set_IsFullScreen(true);
    this.get_Content().set_RootDirectory("Content");
    this.SharedXNAContent = $S00().Construct(this.get_Services(), "Content");
  };

  function SharedGameBase_BeginDraw () {
    return $T00().prototype.BeginDraw.call(this);
  };

  function SharedGameBase_DoneWithInitialLoading (mode) {
    this.FirstLoad_EndTime = this.TimeSinceStart.MemberwiseClone();
    $T05().WriteLine(JSIL.ConcatString("Total loading time was ", $T09().op_Subtraction(this.FirstLoad_EndTime, this.FirstLoad_StartTime).toString()));
  };

  function SharedGameBase_Draw (gameTime) {
    if (!$T02().GameQuitRequested) {
      this.get_GraphicsDevice().InternalClear($T0C().ClearScreenColor);
      $T0E().Draw(gameTime);
      $T00().prototype.Draw.call(this, gameTime);
      return;
    }
    this.get_GraphicsDevice().InternalClear($T0D().get_Black());
  };

  function SharedGameBase_EndDraw () {
    $T00().prototype.EndDraw.call(this);
  };

  function SharedGameBase_Initialize () {
    $T02().Initialize(this);
    $T00().prototype.Initialize.call(this);
    if (this.bWantGamerServices) {
      var GamerServices = new ($T0F())(this);
      $S01().CallVirtual("Add", null, this.get_Components(), GamerServices);
      GamerServices.Initialize();
    }
  };

  function SharedGameBase_LoadContent () {
    this.FirstLoad_StartTime = this.TimeSinceStart.MemberwiseClone();
    $T02().PreloadContent(this.SharedXNAContent, this.get_GraphicsDevice());
    $T0E().PushMenu(new ($T12())($T13().New(this, $thisType.prototype.OnLoadContentInBackground), $T13().New(this, $thisType.prototype.OnDoneWithInitialLoading)));
  };

  function SharedGameBase_LoadContentInBackground (mode) {
    $T05().WriteLine("SharedGameBase.LoadContentInBackground");
    $T02().LoadContentThatCouldWait(this.SharedXNAContent);
  };

  function SharedGameBase_OnDoneWithInitialLoading (mode) {
    this.DoneWithInitialLoading(mode);
  };

  function SharedGameBase_OnLoadContentInBackground (mode) {
    this.LoadContentInBackground(mode);
  };

  function SharedGameBase_PostUpdate () {
  };

  function SharedGameBase_PreUpdate () {
  };

  function SharedGameBase_UnloadContent () {
    $T02().UnloadContent(this.SharedXNAContent);
  };

  function SharedGameBase_Update (gameTime) {
    if ($T02().GameQuitRequested) {
      this.Exit();
    }
    this.TimeSinceStart = gameTime.get_TotalGameTime().MemberwiseClone();
    $T02().IM.Update();
    $T0E().Update(gameTime);
    if ($T02().AudioEngineReady) {
      $T02().AudioEngine.Update();
    }
    $T00().prototype.Update.call(this, gameTime);
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Microsoft.Xna.Framework.Game"), 
      Name: "SharedXNA.SharedGameBase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      SharedGameBase__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "BeginDraw", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      SharedGameBase_BeginDraw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "DoneWithInitialLoading", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.GameMode")], []), 
      SharedGameBase_DoneWithInitialLoading
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      SharedGameBase_Draw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "EndDraw", 
      new JSIL.MethodSignature(null, [], []), 
      SharedGameBase_EndDraw
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], []), 
      SharedGameBase_Initialize
    );

    $.Method({Static:false, Public:false, Virtual:true }, "LoadContent", 
      new JSIL.MethodSignature(null, [], []), 
      SharedGameBase_LoadContent
    );

    $.Method({Static:false, Public:false, Virtual:true }, "LoadContentInBackground", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.GameMode")], []), 
      SharedGameBase_LoadContentInBackground
    );

    $.Method({Static:false, Public:false}, "OnDoneWithInitialLoading", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.GameMode")], []), 
      SharedGameBase_OnDoneWithInitialLoading
    );

    $.Method({Static:false, Public:false}, "OnLoadContentInBackground", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.GameMode")], []), 
      SharedGameBase_OnLoadContentInBackground
    );

    $.Method({Static:false, Public:false}, "PostUpdate", 
      new JSIL.MethodSignature(null, [], []), 
      SharedGameBase_PostUpdate
    );

    $.Method({Static:false, Public:false}, "PreUpdate", 
      new JSIL.MethodSignature(null, [], []), 
      SharedGameBase_PreUpdate
    );

    $.Method({Static:false, Public:false, Virtual:true }, "UnloadContent", 
      new JSIL.MethodSignature(null, [], []), 
      SharedGameBase_UnloadContent
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime")], []), 
      SharedGameBase_Update
    );

    $.Field({Static:false, Public:true }, "graphics", $asm02.TypeRef("Microsoft.Xna.Framework.GraphicsDeviceManager")); 
    $.Field({Static:false, Public:false}, "bWantGamerServices", $.Boolean); 
    $.Field({Static:false, Public:false}, "FirstLoad_StartTime", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "FirstLoad_EndTime", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "SharedXNAContent", $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")); 
    $.Field({Static:false, Public:true }, "TimeSinceStart", $asm09.TypeRef("System.TimeSpan")); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.SafeGuide */ 

(function SafeGuide$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm03.Microsoft.Xna.Framework.GamerServices.Guide)) ();
  };

  function SafeGuide__ctor () {
  };

  function SafeGuide_get_IsTrialMode () {
    return false;
  };

  function SafeGuide_get_IsVisible () {
    return $T00().get_IsVisible();
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.SafeGuide", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      SafeGuide__ctor
    );

    $.Method({Static:true , Public:true }, "get_IsTrialMode", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      SafeGuide_get_IsTrialMode
    );

    $.Method({Static:true , Public:true }, "get_IsVisible", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      SafeGuide_get_IsVisible
    );

    $.Property({Static:true , Public:true }, "IsVisible", $.Boolean);

    $.Property({Static:true , Public:true }, "IsTrialMode", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.SharedGlobals */ 

(function SharedGlobals$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.SharedGameBase)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Console)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.InputState)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.SharedXNA.CommonMessages)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Globalization.CultureInfo)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.GraphicsDevice)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Audio.SoundEffect)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0A.SharedXNA.UISkin)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0A.SharedXNA.UIStyle)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0A.SharedXNA.UIStyleState)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0A.SharedXNA.ColorTexture)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.PresentationParameters)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GraphicsDeviceManager)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };

  function SharedGlobals__ctor () {
  };

  function SharedGlobals_Initialize (InGame) {
    $T03().WriteLine("Initialize");
    $thisType.Game = InGame;
    $thisType.IM = new ($T04())();
    $T05().set_Culture($T06().get_CurrentCulture());
  };

  function SharedGlobals_LoadContentThatCouldWait (Content) {
    $thisType.GuideIcons = JSIL.Array.New($T08(), 4);
    $thisType.GuideIcons[0] = Content.Load$b1($T08())("UI\\guide_p1");
    $thisType.GuideIcons[1] = Content.Load$b1($T08())("UI\\guide_p2");
    $thisType.GuideIcons[2] = Content.Load$b1($T08())("UI\\guide_p3");
    $thisType.GuideIcons[3] = Content.Load$b1($T08())("UI\\guide_p4");
  };

  function SharedGlobals_PreloadContent (Content, Device) {
    $T03().WriteLine("Preload Content");
    $thisType.GraphicsDevice = Device;
    $thisType.CommonBatch = new ($T0A())($thisType.GraphicsDevice);
    $thisType.Silence = Content.Load$b1($T0B())("SFX\\silence");
    $T0C().ButtonDefault = (new ($T0D())()).__Initialize__({
        Normal: (new ($T0E())()).__Initialize__({
            Background: $T0F().DarkGray, 
            ForegroundColor: $T10().get_White().MemberwiseClone(), 
            BackgroundColor: $T10().get_White().MemberwiseClone()}
        ), 
        Hover: (new ($T0E())()).__Initialize__({
            Background: $T0F().Gray, 
            ForegroundColor: $T10().get_White().MemberwiseClone(), 
            BackgroundColor: $T10().get_White().MemberwiseClone()}
        ), 
        Pressed: (new ($T0E())()).__Initialize__({
            Background: $T0F().LightGray, 
            ForegroundColor: $T10().get_White().MemberwiseClone(), 
            BackgroundColor: $T10().get_White().MemberwiseClone()}
        ), 
        Font: $thisType.MenuFont}
    );
  };

  function SharedGlobals_UnloadContent (Content) {
  };

  function SharedGlobals_UpdateWindowSize () {
    var presentation = $thisType.Game.graphics.get_GraphicsDevice().get_PresentationParameters();
    var outputAspect = +($T13().$Cast(presentation.get_BackBufferWidth()) / $T13().$Cast(presentation.get_BackBufferHeight()));
    if (outputAspect <= ($thisType.PreferredWindowSize.X / $thisType.PreferredWindowSize.Y)) {
      var presentHeight = ((($T13().$Cast(presentation.get_BackBufferWidth()) / ($thisType.PreferredWindowSize.X / $thisType.PreferredWindowSize.Y)) + 0.5) | 0);
      var barHeight = ((((presentation.get_BackBufferHeight() - presentHeight) | 0) / 2) | 0);
      $thisType.FixedAspectWindow = new ($T01())(0, barHeight, presentation.get_BackBufferWidth(), presentHeight);
    } else {
      var presentWidth = ((($T13().$Cast(presentation.get_BackBufferHeight()) * ($thisType.PreferredWindowSize.X / $thisType.PreferredWindowSize.Y)) + 0.5) | 0);
      var barWidth = ((((presentation.get_BackBufferWidth() - presentWidth) | 0) / 2) | 0);
      $thisType.FixedAspectWindow = new ($T01())(barWidth, 0, presentWidth, presentation.get_BackBufferHeight());
    }
    $thisType.ScreenSafeZone.Width = (($T13().$Cast($thisType.FixedAspectWindow.Width) * 0.9) | 0);
    $thisType.ScreenSafeZone.X = (($thisType.FixedAspectWindow.get_Left() + (((($thisType.FixedAspectWindow.Width - $thisType.ScreenSafeZone.Width) | 0) / 2) | 0)) | 0);
    $thisType.ScreenSafeZone.Height = (($T13().$Cast($thisType.FixedAspectWindow.Height) * 0.9) | 0);
    $thisType.ScreenSafeZone.Y = (($thisType.FixedAspectWindow.get_Top() + (((($thisType.FixedAspectWindow.Height - $thisType.ScreenSafeZone.Height) | 0) / 2) | 0)) | 0);
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.SharedGlobals", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      SharedGlobals__ctor
    );

    $.Method({Static:true , Public:true }, "Initialize", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.SharedGameBase")], []), 
      SharedGlobals_Initialize
    );

    $.Method({Static:true , Public:true }, "LoadContentThatCouldWait", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")], []), 
      SharedGlobals_LoadContentThatCouldWait
    );

    $.Method({Static:true , Public:true }, "PreloadContent", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")], []), 
      SharedGlobals_PreloadContent
    );

    $.Method({Static:true , Public:true }, "UnloadContent", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager")], []), 
      SharedGlobals_UnloadContent
    );

    $.Method({Static:true , Public:true }, "UpdateWindowSize", 
      new JSIL.MethodSignature(null, [], []), 
      SharedGlobals_UpdateWindowSize
    );

    $.Constant({Static:true , Public:true }, "SafeZoneRatio", 0.9); 
    $.Constant({Static:true , Public:true }, "GravityAcceleration", 3400); 
    $.Field({Static:true , Public:true }, "Game", $asm0A.TypeRef("SharedXNA.SharedGameBase")); 
    $.Field({Static:true , Public:true }, "GraphicsDevice", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.GraphicsDevice")); 
    $.Field({Static:true , Public:true }, "CommonBatch", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch")); 
    $.Field({Static:true , Public:true }, "AudioEngine", $asm08.TypeRef("Microsoft.Xna.Framework.Audio.AudioEngine")); 
    $.Field({Static:true , Public:true }, "AudioEngineReady", $.Boolean, false); 
    $.Field({Static:true , Public:true }, "BaseScore", $.Int32, 50); 
    $.Field({Static:true , Public:true }, "ComboMultiplier", $.Int32, 1); 
    $.Field({Static:true , Public:true }, "GameQuitRequested", $.Boolean, false); 
    $.Field({Static:true , Public:true }, "NaturalScreenWidth", $.Single, 1280); 
    $.Field({Static:true , Public:true }, "NaturalScreenHeight", $.Single, 720); 
    $.Field({Static:true , Public:true }, "PreferredWindowSize", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:true , Public:true }, "ScreenWidth", $.Single, 1280); 
    $.Field({Static:true , Public:true }, "ScreenHeight", $.Single, 720); 
    $.Field({Static:true , Public:true }, "ScreenRectangle", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")); 
    $.Field({Static:true , Public:true }, "FixedAspectWindow", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")); 
    $.Field({Static:true , Public:true }, "WorldWidth", $.Single, 1280); 
    $.Field({Static:true , Public:true }, "WorldHeight", $.Single, 720); 
    $.Field({Static:true , Public:true }, "ScreenSafeZone", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")); 
    $.Field({Static:true , Public:true }, "ActivePlayerIndex", $asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")); 
    $.Field({Static:true , Public:true }, "IM", $asm0A.TypeRef("SharedXNA.InputState")); 
    $.Field({Static:true , Public:true }, "CurrentStorageDevice", $asm07.TypeRef("Microsoft.Xna.Framework.Storage.StorageDevice")); 
    $.Field({Static:true , Public:true }, "SmallMenuFont", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")); 
    $.Field({Static:true , Public:true }, "MenuFont", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")); 
    $.Field({Static:true , Public:true }, "LargeMenuFont", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")); 
    $.Field({Static:true , Public:true }, "ButtonFont", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")); 
    $.Field({Static:true , Public:true }, "ButtonFontOld", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")); 
    $.Field({Static:true , Public:true }, "GuideIcons", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")])); 
    $.Field({Static:true , Public:true }, "Silence", $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")); 
    $.Field({Static:true , Public:true }, "Dispatcher", $asm0A.TypeRef("SharedXNA.Dispatcher")); 
    function SharedGlobals__cctor () {
      $thisType.PreferredWindowSize = new $asm01.Microsoft.Xna.Framework.Vector2();
      $thisType.ScreenRectangle = new $asm01.Microsoft.Xna.Framework.Rectangle();
      $thisType.FixedAspectWindow = new $asm01.Microsoft.Xna.Framework.Rectangle();
      $thisType.ScreenSafeZone = new $asm01.Microsoft.Xna.Framework.Rectangle();
      $thisType.AudioEngineReady = false;
      $thisType.BaseScore = 50;
      $thisType.ComboMultiplier = 1;
      $thisType.GameQuitRequested = false;
      $thisType.NaturalScreenWidth = +1280;
      $thisType.NaturalScreenHeight = +720;
      $thisType.PreferredWindowSize = $S00().Construct(1280, 720);
      $thisType.ScreenWidth = +1280;
      $thisType.ScreenHeight = +720;
      $thisType.ScreenRectangle = new ($T01())(0, 0, (($thisType.ScreenWidth) | 0), (($thisType.ScreenHeight) | 0));
      $thisType.FixedAspectWindow = new ($T01())(0, 0, 1280, 720);
      $thisType.WorldWidth = +1280;
      $thisType.WorldHeight = +720;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      SharedGlobals__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.SFX */ 

(function SFX$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Audio.SoundEffect)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.MathHelper)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Single)) ();
  };

  function SFX__ctor () {
  };

  function SFX_Play$00 (fx) {
    if (fx !== null) {
      fx.Play($T01().Clamp(($T02().$Cast($thisType.GlobalEffectVolume) * 0.01), 0, 1), 0, 0);
    }
  };

  function SFX_Play$01 (fx, volume, pitch, pan) {
    if (fx !== null) {
      volume = +$T01().Clamp(((volume * $T02().$Cast($thisType.GlobalEffectVolume)) * 0.01), 0, 1);
      fx.Play(
        volume, 
        $T01().Clamp(pitch, -1, 1), 
        $T01().Clamp(pan, -1, 1)
      );
    }
  };

  function SFX_Play$02 (fx, volume, pitch) {
    if (fx !== null) {
      volume = +$T01().Clamp(((volume * $T02().$Cast($thisType.GlobalEffectVolume)) * 0.01), 0, 1);
      fx.Play(volume, $T01().Clamp(pitch, -1, 1), 0);
    }
  };

  function SFX_Play$03 (fx, volume) {
    if (fx !== null) {
      volume = +$T01().Clamp(((volume * $T02().$Cast($thisType.GlobalEffectVolume)) * 0.01), 0, 1);
      fx.Play(volume, 0, 0);
    }
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.SFX", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      SFX__ctor
    );

    $.Method({Static:true , Public:true }, "Play", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect")], []), 
      SFX_Play$00
    );

    $.Method({Static:true , Public:true }, "Play", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect"), $.Single, 
          $.Single, $.Single
        ], []), 
      SFX_Play$01
    );

    $.Method({Static:true , Public:true }, "Play", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect"), $.Single, 
          $.Single
        ], []), 
      SFX_Play$02
    );

    $.Method({Static:true , Public:true }, "Play", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Audio.SoundEffect"), $.Single], []), 
      SFX_Play$03
    );

    $.Field({Static:true , Public:true }, "GlobalEffectVolume", $.Int32, 100); 
    function SFX__cctor () {
      $thisType.GlobalEffectVolume = 100;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      SFX__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.AnimatedSprite */ 

(function AnimatedSprite$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Collections.Generic.Dictionary$b2.Of($asm09.System.String, $asm0A.SharedXNA.SpriteSheet))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.SpriteSheet_AnimationState)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.EventHandler)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Delegate)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Threading.Interlocked)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0A.SharedXNA.SpriteSheet)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm09.System.TimeSpan)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm09.System.EventArgs)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.String"), $asm0A.TypeRef("SharedXNA.SpriteSheet")]), []))) ();
  };

  function AnimatedSprite__ctor (defaultSprite) {
    this.m_sheets = $S00().Construct();
    this.m_defaultSprite = defaultSprite;
    this.m_animstate = new ($T02())();
  };

  function AnimatedSprite_add_PlayEnd (value) {
    var eventHandler = this.PlayEnd;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T04().Combine(eventHandler2, value);
      eventHandler = $T05().CompareExchange$b1($T03())(/* ref */ new JSIL.MemberReference(this, "PlayEnd"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function AnimatedSprite_AddSheet (name, sheet) {
    this.m_sheets.Add(name, sheet);
  };

  function AnimatedSprite_Draw (spriteBatch, pos, angle, color, transformation, scale, Swap) {
    if (this.m_playSprite) {
      if (!((this.m_playingSpriteRemainingTime.get_TotalMilliseconds() <= 0) || !this.m_sheets.ContainsKey(this.m_playingSprite))) {
        this.m_sheets.get_Item(this.m_playingSprite).Draw(
          spriteBatch, 
          pos, 
          angle, 
          this.m_animstate, 
          color, 
          scale, 
          transformation, 
          Swap
        );
        return;
      }
    } else if (!((this.m_defaultSprite === null) || !this.m_sheets.ContainsKey(this.m_defaultSprite))) {
      this.m_sheets.get_Item(this.m_defaultSprite).Draw(
        spriteBatch, 
        pos, 
        angle, 
        this.m_animstate, 
        color, 
        scale, 
        transformation, 
        Swap
      );
    }
  };

  function AnimatedSprite_get_DefaultSprite () {
    return this.m_defaultSprite;
  };

  function AnimatedSprite_get_IsBusy () {
    return this.m_playSprite;
  };

  function AnimatedSprite_get_PlaySprite () {
    return this.m_playingSprite;
  };

  function AnimatedSprite_Play (name) {
    this.m_playingSprite = name;
    this.m_playingSpriteRemainingTime = $T0D().FromSeconds(this.m_sheets.get_Item(name).get_Duration()).MemberwiseClone();
    this.m_playSprite = true;
    this.m_animstate = new ($T02())();
  };

  function AnimatedSprite_remove_PlayEnd (value) {
    var eventHandler = this.PlayEnd;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T04().Remove(eventHandler2, value);
      eventHandler = $T05().CompareExchange$b1($T03())(/* ref */ new JSIL.MemberReference(this, "PlayEnd"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function AnimatedSprite_set_DefaultSprite (value) {
    if (this.m_defaultSprite != value) {
      this.m_defaultSprite = value;
      this.m_animstate = new ($T02())();
    }
  };

  function AnimatedSprite_Update (time, timeScale) {
    if (this.m_playSprite) {
      this.m_playingSpriteRemainingTime = this.m_playingSpriteRemainingTime.Subtract($T0D().FromMilliseconds((time.get_ElapsedGameTime().get_TotalMilliseconds() * timeScale)).MemberwiseClone()).MemberwiseClone();
      if (this.m_playingSpriteRemainingTime.get_TotalMilliseconds() > 0) {
        if (this.m_sheets.ContainsKey(this.m_playingSprite)) {
          this.m_sheets.get_Item(this.m_playingSprite).Update(this.m_animstate, time, timeScale);
        }
        return;
      }
      this.m_playSprite = false;
      this.m_animstate = new ($T02())();
      if (this.PlayEnd !== null) {
        this.PlayEnd(this, $T10().Empty);
      }
    }
    if (!((this.m_defaultSprite === null) || !this.m_sheets.ContainsKey(this.m_defaultSprite))) {
      this.m_sheets.get_Item(this.m_defaultSprite).Update(this.m_animstate, time, timeScale);
    }
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.AnimatedSprite", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], []), 
      AnimatedSprite__ctor
    );

    $.Method({Static:false, Public:true }, "add_PlayEnd", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler")], []), 
      AnimatedSprite_add_PlayEnd
    );

    $.Method({Static:false, Public:true }, "AddSheet", 
      new JSIL.MethodSignature(null, [$.String, $asm0A.TypeRef("SharedXNA.SpriteSheet")], []), 
      AnimatedSprite_AddSheet
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $.Single, $asm01.TypeRef("Microsoft.Xna.Framework.Color"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Matrix"), $.Single, 
          $.Boolean
        ], []), 
      AnimatedSprite_Draw
    );

    $.Method({Static:false, Public:true }, "get_DefaultSprite", 
      new JSIL.MethodSignature($.String, [], []), 
      AnimatedSprite_get_DefaultSprite
    );

    $.Method({Static:false, Public:true }, "get_IsBusy", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      AnimatedSprite_get_IsBusy
    );

    $.Method({Static:false, Public:true }, "get_PlaySprite", 
      new JSIL.MethodSignature($.String, [], []), 
      AnimatedSprite_get_PlaySprite
    );

    $.Method({Static:false, Public:true }, "Play", 
      new JSIL.MethodSignature(null, [$.String], []), 
      AnimatedSprite_Play
    );

    $.Method({Static:false, Public:true }, "remove_PlayEnd", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.EventHandler")], []), 
      AnimatedSprite_remove_PlayEnd
    );

    $.Method({Static:false, Public:true }, "set_DefaultSprite", 
      new JSIL.MethodSignature(null, [$.String], []), 
      AnimatedSprite_set_DefaultSprite
    );

    $.Method({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Microsoft.Xna.Framework.GameTime"), $.Single], []), 
      AnimatedSprite_Update
    );

    $.Field({Static:false, Public:false}, "PlayEnd", $asm09.TypeRef("System.EventHandler")); 
    $.Field({Static:false, Public:false}, "m_sheets", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm0A.TypeRef("SharedXNA.SpriteSheet")])); 
    $.Field({Static:false, Public:false}, "m_defaultSprite", $.String); 
    $.Field({Static:false, Public:false}, "m_playSprite", $.Boolean); 
    $.Field({Static:false, Public:false}, "m_playingSprite", $.String); 
    $.Field({Static:false, Public:false}, "m_playingSpriteRemainingTime", $asm09.TypeRef("System.TimeSpan")); 
    $.Field({Static:false, Public:false}, "m_animstate", $asm0A.TypeRef("SharedXNA.SpriteSheet/AnimationState")); 
    $.Property({Static:false, Public:true }, "DefaultSprite", $.String);

    $.Property({Static:false, Public:true }, "IsBusy", $.Boolean);

    $.Property({Static:false, Public:true }, "PlaySprite", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["AnimatedSprite( Default={DefaultSprite} Play={PlaySprite}"]; });

})();

/* class SharedXNA.Animation */ 

(function Animation$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.SpriteAtlas)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };

  function Animation__ctor (atlas, frameTime, isLooping) {
    this.atlas = atlas;
    this.frameTime = +frameTime;
    this.isLooping = isLooping;
  };

  function Animation_FromTexture (manager, texture, framePixelWidth, framePixelHeight, frameTime, isLooping) {
    return new $thisType(new ($T00())(manager.Load$b1($T06())(texture), framePixelWidth, framePixelHeight), frameTime, isLooping);
  };

  function Animation_get_FrameCount () {
    return this.get_SpriteAtlas().TotalCellCount;
  };

  function Animation_get_FrameTime () {
    return +this.frameTime;
  };

  function Animation_get_IsLooping () {
    return this.isLooping;
  };

  function Animation_get_SpriteAtlas () {
    return this.atlas;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.Animation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("SharedXNA.SpriteAtlas"), $.Single, 
          $.Boolean
        ], []), 
      Animation__ctor
    );

    $.Method({Static:true , Public:true }, "FromTexture", 
      new JSIL.MethodSignature($.Type, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), $.String, 
          $.Int32, $.Int32, 
          $.Single, $.Boolean
        ], []), 
      Animation_FromTexture
    );

    $.Method({Static:false, Public:true }, "get_FrameCount", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Animation_get_FrameCount
    );

    $.Method({Static:false, Public:true }, "get_FrameTime", 
      new JSIL.MethodSignature($.Single, [], []), 
      Animation_get_FrameTime
    );

    $.Method({Static:false, Public:true }, "get_IsLooping", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Animation_get_IsLooping
    );

    $.Method({Static:false, Public:true }, "get_SpriteAtlas", 
      new JSIL.MethodSignature($asm0A.TypeRef("SharedXNA.SpriteAtlas"), [], []), 
      Animation_get_SpriteAtlas
    );

    $.Field({Static:false, Public:false}, "atlas", $asm0A.TypeRef("SharedXNA.SpriteAtlas")); 
    $.Field({Static:false, Public:false}, "frameTime", $.Single); 
    $.Field({Static:false, Public:false}, "isLooping", $.Boolean); 
    $.Property({Static:false, Public:true }, "SpriteAtlas", $asm0A.TypeRef("SharedXNA.SpriteAtlas"));

    $.Property({Static:false, Public:true }, "FrameTime", $.Single);

    $.Property({Static:false, Public:true }, "IsLooping", $.Boolean);

    $.Property({Static:false, Public:true }, "FrameCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct SharedXNA.AnimationPlayer */ 

(function AnimationPlayer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.SharedXNA.Animation)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.NotSupportedException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.TimeSpan)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.Math)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0A.SharedXNA.SpriteAtlas)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.NotSupportedException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };

  function AnimationPlayer_Draw (gameTime, spriteBatch, position, renderedWidth, renderedHeight, spriteEffects, color) {
    if (this.get_Animation() === null) {
      throw $S00().Construct("No animation is currently playing.");
    }
    if (color === null) {
      color = $T07().get_White().MemberwiseClone();
    }
    this.time += +$T08().$Cast(gameTime.get_ElapsedGameTime().get_TotalSeconds());

    while (this.time > this.get_Animation().get_FrameTime()) {
      this.time -= +this.get_Animation().get_FrameTime();
      if (this.get_Animation().get_IsLooping()) {
        this.frameIndex = ((((this.frameIndex + 1) | 0) % this.get_Animation().get_FrameCount()) | 0);
      } else {
        this.frameIndex = $T0A().Min(((this.frameIndex + 1) | 0), ((this.get_Animation().get_FrameCount() - 1) | 0));
      }
    }
    var posX = ((position.X) | 0);
    var posY = ((position.Y) | 0);
    var source = this.get_Animation().get_SpriteAtlas().GetRect(this.get_FrameIndex());
    var destination = new ($T0B())(posX, posY, renderedWidth, renderedHeight);
    spriteBatch.DrawRect(
      this.get_Animation().get_SpriteAtlas().Texture, 
      destination, 
      source.MemberwiseClone(), 
      color, 
      0, 
      this.get_Origin(), 
      spriteEffects, 
      0
    );
  };

  function AnimationPlayer_get_Animation () {
    return this.animation;
  };

  function AnimationPlayer_get_FrameIndex () {
    return this.frameIndex;
  };

  function AnimationPlayer_get_Origin () {
    return $S01().Construct(($T08().$Cast(this.get_Animation().get_SpriteAtlas().SpritePixelWidth) / 2), $T08().$Cast(this.get_Animation().get_SpriteAtlas().SpritePixelHeight));
  };

  function AnimationPlayer_PlayAnimation (animation) {
    if (this.get_Animation() === animation) {
      return;
    }
    this.animation = animation;
    this.frameIndex = 0;
    this.time = +0;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "SharedXNA.AnimationPlayer", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("Microsoft.Xna.Framework.GameTime"), $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), $.Int32, 
          $.Int32, $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteEffects"), 
          $asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Color")])
        ], []), 
      AnimationPlayer_Draw
    );

    $.Method({Static:false, Public:true }, "get_Animation", 
      new JSIL.MethodSignature($asm0A.TypeRef("SharedXNA.Animation"), [], []), 
      AnimationPlayer_get_Animation
    );

    $.Method({Static:false, Public:true }, "get_FrameIndex", 
      new JSIL.MethodSignature($.Int32, [], []), 
      AnimationPlayer_get_FrameIndex
    );

    $.Method({Static:false, Public:true }, "get_Origin", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], []), 
      AnimationPlayer_get_Origin
    );

    $.Method({Static:false, Public:true }, "PlayAnimation", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.Animation")], []), 
      AnimationPlayer_PlayAnimation
    );

    $.Field({Static:false, Public:false}, "animation", $asm0A.TypeRef("SharedXNA.Animation")); 
    $.Field({Static:false, Public:false}, "frameIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "time", $.Single); 
    $.Property({Static:false, Public:true }, "Animation", $asm0A.TypeRef("SharedXNA.Animation"));

    $.Property({Static:false, Public:true }, "FrameIndex", $.Int32);

    $.Property({Static:false, Public:true }, "Origin", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.SpriteAtlas */ 

(function SpriteAtlas$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };

  function SpriteAtlas__ctor (texture, spritePixelWidth, spritePixelHeight) {
    this.Texture = texture;
    this.SpritePixelWidth = spritePixelWidth;
    this.SpritePixelHeight = spritePixelHeight;
    this.CellWidth = ((texture.get_Width() / this.SpritePixelWidth) | 0);
    this.CellHeight = ((texture.get_Height() / this.SpritePixelHeight) | 0);
    this.CellSize = new ($T02())(0, 0, this.SpritePixelWidth, this.SpritePixelHeight);
    this.TotalCellCount = ((this.CellWidth * this.CellHeight) | 0);
  };

  function SpriteAtlas_GetRect (index) {
    return new ($T02())(((((index % this.CellWidth) | 0) * this.SpritePixelWidth) | 0), ((((index / this.CellWidth) | 0) * this.SpritePixelHeight) | 0), this.SpritePixelWidth, this.SpritePixelHeight);
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.SpriteAtlas", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $.Int32, 
          $.Int32
        ], []), 
      SpriteAtlas__ctor
    );

    $.Method({Static:false, Public:true }, "GetRect", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), [$.Int32], []), 
      SpriteAtlas_GetRect
    );

    $.Field({Static:false, Public:true }, "Texture", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:true }, "SpritePixelWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "SpritePixelHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "CellWidth", $.Int32); 
    $.Field({Static:false, Public:true }, "CellHeight", $.Int32); 
    $.Field({Static:false, Public:true }, "CellSize", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle")); 
    $.Field({Static:false, Public:true }, "TotalCellCount", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.SpriteSheet */ 

(function SpriteSheet$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.SpriteSheet_SpritePage))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.SharedXNA.SpriteSheet_SpritePage)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.SharedXNA.SpriteSheet_AnimationState)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Matrix)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteEffects)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm02.Microsoft.Xna.Framework.GameTime)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm09.System.TimeSpan)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.SpriteSheet/SpritePage")]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm09.TypeRef("System.Single"), $asm09.TypeRef("System.Single")]))) ();
  };

  function SpriteSheet__ctor$00 () {
    this.m_pages = $S00().Construct();
    this.m_origin = $S01().Construct(0.5, 0.5);
  };

  function SpriteSheet__ctor$01 (page, width, height, fps, origin) {
    this.m_pages = $S00().Construct();
    this.m_origin = $S01().Construct(0.5, 0.5);
    this.AddPage(page, width, height, fps);
    if (origin !== null) {
      this.m_origin = origin.MemberwiseClone();
    }
  };

  function SpriteSheet_AddPage (page, width, height, fps) {
    var x = new ($T05())();
    x.m_fps = +fps;
    x.m_image = page;
    x.m_horizontalCellCount = width;
    x.m_verticalCellCount = height;
    this.m_pages.Add(x);
  };

  function SpriteSheet_Draw (spriteBatch, pos, angle, state, color, scale, transformation, swap) {
    var srcRect = this.m_pages.get_Item(state.m_pageIndex).GetRect(state.m_cellIndex).MemberwiseClone();
    var oneRect = this.m_pages.get_Item(state.m_pageIndex).get_CellSize().MemberwiseClone();
    var center = new ($T01())();
    center.X = +($T04().$Cast(oneRect.Width) * this.m_origin.X);
    center.Y = +($T04().$Cast(oneRect.Height) * this.m_origin.Y);
    spriteBatch.DrawScaleF(
      this.m_pages.get_Item(state.m_pageIndex).m_image, 
      pos, 
      srcRect.MemberwiseClone(), 
      color, 
      angle, 
      center, 
      scale, 
      (swap ? $T0C().FlipHorizontally : $T0C().None), 
      0
    );
  };

  function SpriteSheet_get_Duration () {
    var $temp00;
    var totalDuration = +0;

    for (var a$0 = this.m_pages._items, i$0 = 0, l$0 = this.m_pages._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var page = a$0[i$0];
      totalDuration += +($T04().$Cast(page.get_TotalCellCount()) / page.m_fps);
    }
    return +totalDuration;
  };

  function SpriteSheet_get_Origin () {
    return this.m_origin;
  };

  function SpriteSheet_set_Origin (value) {
    this.m_origin = value;
  };

  function SpriteSheet_Update (state, time, timeScale) {
    state.m_timeAccumulator += +($T04().$Cast(time.get_ElapsedGameTime().get_TotalSeconds()) * timeScale);

    while (state.m_timeAccumulator > (1 / this.m_pages.get_Item(state.m_pageIndex).m_fps)) {
      state.m_timeAccumulator -= +(1 / this.m_pages.get_Item(state.m_pageIndex).m_fps);
      state.m_cellIndex = ((state.m_cellIndex + 1) | 0);
      if (state.m_cellIndex >= this.m_pages.get_Item(state.m_pageIndex).get_TotalCellCount()) {
        state.m_pageIndex = ((((state.m_pageIndex + 1) | 0) % this.m_pages.get_Count()) | 0);
        state.m_cellIndex = 0;
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.SpriteSheet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      SpriteSheet__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $.Int32, 
          $.Int32, $.Single, 
          $asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")])
        ], []), 
      SpriteSheet__ctor$01
    );

    $.Method({Static:false, Public:true }, "AddPage", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D"), $.Int32, 
          $.Int32, $.Single
        ], []), 
      SpriteSheet_AddPage
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteBatch"), $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), 
          $.Single, $asm0A.TypeRef("SharedXNA.SpriteSheet/AnimationState"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $.Single, 
          $asm01.TypeRef("Microsoft.Xna.Framework.Matrix"), $.Boolean
        ], []), 
      SpriteSheet_Draw
    );

    $.Method({Static:false, Public:true }, "get_Duration", 
      new JSIL.MethodSignature($.Single, [], []), 
      SpriteSheet_get_Duration
    );

    $.Method({Static:false, Public:true }, "get_Origin", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], []), 
      SpriteSheet_get_Origin
    );

    $.Method({Static:false, Public:true }, "set_Origin", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      SpriteSheet_set_Origin
    );

    $.Method({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("SharedXNA.SpriteSheet/AnimationState"), $asm02.TypeRef("Microsoft.Xna.Framework.GameTime"), 
          $.Single
        ], []), 
      SpriteSheet_Update
    );

    $.Field({Static:false, Public:false}, "m_pages", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.SpriteSheet/SpritePage")])); 
    $.Field({Static:false, Public:false}, "m_origin", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:false}, "m_totalAnimationLength", $.Single); 
    $.Property({Static:false, Public:true }, "Origin", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    $.Property({Static:false, Public:true }, "Duration", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.SpriteSheet/SpritePage */ 

(function SpritePage$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Rectangle)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.Texture2D)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Int32)) ();
  };

  function SpritePage__ctor () {
  };

  function SpritePage_get_CellSize () {
    return new ($T00())(0, 0, ((this.m_image.get_Width() / this.m_horizontalCellCount) | 0), ((this.m_image.get_Height() / this.m_verticalCellCount) | 0));
  };

  function SpritePage_get_TotalCellCount () {
    return ((this.m_horizontalCellCount * this.m_verticalCellCount) | 0);
  };

  function SpritePage_GetRect (index) {
    var z = this.get_CellSize().MemberwiseClone();
    z.X = ((z.X + ((((index % this.m_horizontalCellCount) | 0) * z.Width) | 0)) | 0);
    z.Y = ((z.Y + ((((index / this.m_horizontalCellCount) | 0) * z.Height) | 0)) | 0);
    return z;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.SpriteSheet/SpritePage", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      SpritePage__ctor
    );

    $.Method({Static:false, Public:true }, "get_CellSize", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), [], []), 
      SpritePage_get_CellSize
    );

    $.Method({Static:false, Public:true }, "get_TotalCellCount", 
      new JSIL.MethodSignature($.Int32, [], []), 
      SpritePage_get_TotalCellCount
    );

    $.Method({Static:false, Public:true }, "GetRect", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"), [$.Int32], []), 
      SpritePage_GetRect
    );

    $.Field({Static:false, Public:true }, "m_image", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.Texture2D")); 
    $.Field({Static:false, Public:true }, "m_horizontalCellCount", $.Int32); 
    $.Field({Static:false, Public:true }, "m_verticalCellCount", $.Int32); 
    $.Field({Static:false, Public:true }, "m_fps", $.Single); 
    $.Property({Static:false, Public:true }, "CellSize", $asm01.TypeRef("Microsoft.Xna.Framework.Rectangle"));

    $.Property({Static:false, Public:true }, "TotalCellCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.SpriteSheet/AnimationState */ 

(function AnimationState$Members () {
  var $, $thisType;
  function AnimationState__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.SpriteSheet/AnimationState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      AnimationState__ctor
    );

    $.Field({Static:false, Public:true }, "m_pageIndex", $.Int32); 
    $.Field({Static:false, Public:true }, "m_cellIndex", $.Int32); 
    $.Field({Static:false, Public:true }, "m_timeAccumulator", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface SharedXNA.ITmxLayer */ 

JSIL.MakeInterface(
  "SharedXNA.ITmxLayer", true, [], function ($) {
    $.Method({}, "get_Visible", new JSIL.MethodSignature($.Boolean, [], []));
    $.Property({}, "Visible");
  }, []);

/* class SharedXNA.TmxDocument */ 

(function TmxDocument$Members () {
  var $, $thisType;
  function TmxDocument__ctor$00 () {
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.TmxDocument", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      TmxDocument__ctor$00
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.TmxMap */ 

(function TmxMap$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.IO.Stream)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Func$b2.Of($asm09.System.String, $asm09.System.IO.Stream))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.TmxDocument)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.SharedXNA.XMLDocument)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.XMLElement)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0A.SharedXNA.TmxOrientationType)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.Enum)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.TmxTileset))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.SharedXNA.TmxTileset)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.ITmxLayer))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0A.SharedXNA.TmxTileLayer)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0A.SharedXNA.TmxObjectLayer)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm0A.SharedXNA.TmxPropertyDict)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream")], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.TmxTileset")]), []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("SharedXNA.TmxTileset"), [$asm0A.TypeRef("SharedXNA.XMLElement"), $asm09.TypeRef("System.Func`2", [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.IO.Stream")])]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.ITmxLayer")]), []))) ();
  };

  function TmxMap__ctor (stream, importer) {
    $T02().prototype._ctor.call(this);
    this.importer = importer;
    var doc = new ($T03())();
    $S00().CallVirtual("Parse", null, doc, stream);
    this.Load(doc);
  };

  function TmxMap_get_Height () {
    return this.TmxMap$Height$value;
  };

  function TmxMap_get_Layers () {
    return this.TmxMap$Layers$value;
  };

  function TmxMap_get_Orientation () {
    return this.TmxMap$Orientation$value;
  };

  function TmxMap_get_Properties () {
    return this.TmxMap$Properties$value;
  };

  function TmxMap_get_TileHeight () {
    return this.TmxMap$TileHeight$value;
  };

  function TmxMap_get_Tilesets () {
    return this.TmxMap$Tilesets$value;
  };

  function TmxMap_get_TileWidth () {
    return this.TmxMap$TileWidth$value;
  };

  function TmxMap_get_Version () {
    return this.TmxMap$Version$value;
  };

  function TmxMap_get_Width () {
    return this.TmxMap$Width$value;
  };

  function TmxMap_Load (xDoc) {
    var $temp00, $temp01;
    var xMap = xDoc.RootNode;
    this.TmxMap$Version$value = xMap.GetAttribute("version");
    var xOrientation = xMap.GetAttribute("orientation");
    if (!$T05().IsNullOrEmpty(xOrientation)) {
      this.TmxMap$Orientation$value = $T06().$Cast($T07().Parse($T06().__Type__, xOrientation, true));
    }
    this.TmxMap$Width$value = $T08().Parse(xMap.GetAttribute("width"));
    this.TmxMap$Height$value = $T08().Parse(xMap.GetAttribute("height"));
    this.TmxMap$TileWidth$value = $T08().Parse(xMap.GetAttribute("tilewidth"));
    this.TmxMap$TileHeight$value = $T08().Parse(xMap.GetAttribute("tileheight"));
    this.TmxMap$Tilesets$value = $S01().Construct();

    for (var a$0 = xMap.GetElements("tileset")._items, i$0 = 0, l$0 = xMap.GetElements("tileset")._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var e = a$0[i$0];
      this.TmxMap$Tilesets$value.Add($S02().Construct(e, this.importer));
    }
    this.TmxMap$Layers$value = $S03().Construct();

    for (var a$1 = xMap.Children._items, i$1 = 0, l$1 = xMap.Children._size; i$1 < l$1; ($temp01 = i$1, 
        i$1 = ((i$1 + 1) | 0), 
        $temp01)) {
      var potentialLayer = a$1[i$1];
      if (potentialLayer.Name == "layer") {
        this.TmxMap$Layers$value.Add(new ($T0D())(potentialLayer, this.TmxMap$Width$value, this.TmxMap$Height$value));
      } else if (potentialLayer.Name == "objectgroup") {
        this.TmxMap$Layers$value.Add(new ($T0E())(potentialLayer));
      }
    }
    this.TmxMap$Properties$value = new ($T0F())(xMap.get_Item("properties"));
  };

  function TmxMap_set_Height (value) {
    this.TmxMap$Height$value = value;
  };

  function TmxMap_set_Layers (value) {
    this.TmxMap$Layers$value = value;
  };

  function TmxMap_set_Orientation (value) {
    this.TmxMap$Orientation$value = value;
  };

  function TmxMap_set_Properties (value) {
    this.TmxMap$Properties$value = value;
  };

  function TmxMap_set_TileHeight (value) {
    this.TmxMap$TileHeight$value = value;
  };

  function TmxMap_set_Tilesets (value) {
    this.TmxMap$Tilesets$value = value;
  };

  function TmxMap_set_TileWidth (value) {
    this.TmxMap$TileWidth$value = value;
  };

  function TmxMap_set_Version (value) {
    this.TmxMap$Version$value = value;
  };

  function TmxMap_set_Width (value) {
    this.TmxMap$Width$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.TmxDocument"), 
      Name: "SharedXNA.TmxMap", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Func`2", [$.String, $asm09.TypeRef("System.IO.Stream")])], []), 
      TmxMap__ctor
    );

    $.Method({Static:false, Public:true }, "get_Height", 
      new JSIL.MethodSignature($.Int32, [], []), 
      TmxMap_get_Height
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Layers", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.ITmxLayer")]), [], []), 
      TmxMap_get_Layers
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Orientation", 
      new JSIL.MethodSignature($asm0A.TypeRef("SharedXNA.TmxOrientationType"), [], []), 
      TmxMap_get_Orientation
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Properties", 
      new JSIL.MethodSignature($asm0A.TypeRef("SharedXNA.TmxPropertyDict"), [], []), 
      TmxMap_get_Properties
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TileHeight", 
      new JSIL.MethodSignature($.Int32, [], []), 
      TmxMap_get_TileHeight
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Tilesets", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.TmxTileset")]), [], []), 
      TmxMap_get_Tilesets
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TileWidth", 
      new JSIL.MethodSignature($.Int32, [], []), 
      TmxMap_get_TileWidth
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Version", 
      new JSIL.MethodSignature($.String, [], []), 
      TmxMap_get_Version
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Width", 
      new JSIL.MethodSignature($.Int32, [], []), 
      TmxMap_get_Width
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "Load", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.XMLDocument")], []), 
      TmxMap_Load
    );

    $.Method({Static:false, Public:false}, "set_Height", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      TmxMap_set_Height
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Layers", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.ITmxLayer")])], []), 
      TmxMap_set_Layers
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Orientation", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.TmxOrientationType")], []), 
      TmxMap_set_Orientation
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Properties", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.TmxPropertyDict")], []), 
      TmxMap_set_Properties
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TileHeight", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      TmxMap_set_TileHeight
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Tilesets", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.TmxTileset")])], []), 
      TmxMap_set_Tilesets
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TileWidth", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      TmxMap_set_TileWidth
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Version", 
      new JSIL.MethodSignature(null, [$.String], []), 
      TmxMap_set_Version
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Width", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      TmxMap_set_Width
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "importer", $asm09.TypeRef("System.Func`2", [$.String, $asm09.TypeRef("System.IO.Stream")])); 
    $.Field({Static:false, Public:false}, "TmxMap$Version$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxMap$Orientation$value", $asm0A.TypeRef("SharedXNA.TmxOrientationType"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxMap$Width$value", $.Int32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxMap$Height$value", $.Int32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxMap$TileWidth$value", $.Int32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxMap$TileHeight$value", $.Int32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxMap$Tilesets$value", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.TmxTileset")]))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxMap$Layers$value", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.ITmxLayer")]))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxMap$Properties$value", $asm0A.TypeRef("SharedXNA.TmxPropertyDict"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Version", $.String);

    $.Property({Static:false, Public:true }, "Orientation", $asm0A.TypeRef("SharedXNA.TmxOrientationType"));

    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);

    $.Property({Static:false, Public:true }, "TileWidth", $.Int32);

    $.Property({Static:false, Public:true }, "TileHeight", $.Int32);

    $.Property({Static:false, Public:true }, "Tilesets", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.TmxTileset")]));

    $.Property({Static:false, Public:true }, "Layers", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.ITmxLayer")]));

    $.Property({Static:false, Public:true }, "Properties", $asm0A.TypeRef("SharedXNA.TmxPropertyDict"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SharedXNA.TmxOrientationType */ 

JSIL.MakeEnum(
  "SharedXNA.TmxOrientationType", true, {
    Orthogonal: 0, 
    Isometric: 1, 
    Hexagonal: 2, 
    Shifted: 3
  }, false
);

/* interface SharedXNA.ITmxElement */ 

JSIL.MakeInterface(
  "SharedXNA.ITmxElement", true, [], function ($) {
    $.Method({}, "get_Name", new JSIL.MethodSignature($.String, [], []));
    $.Property({}, "Name");
  }, []);

/* class SharedXNA.TmxTileLayer */ 

(function TmxTileLayer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.XMLElement)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Double)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.TmxLayerTile))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm09.System.Byte))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.Convert)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.IO.Stream)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.IO.MemoryStream)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0A.Ionic.Zlib.GZipStream)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionMode)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibStream)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm09.System.Exception)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm09.System.IO.BinaryReader)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0A.SharedXNA.TmxLayerTile)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm09.System.IDisposable)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm09.System.UInt32)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize(System.Array.Of($asm09.System.String))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm09.System.Char)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize(System.Array.Of($asm09.System.Char))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0A.SharedXNA.TmxPropertyDict)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.TmxLayerTile")]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.IO.MemoryStream"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Byte")]), $asm09.TypeRef("System.Boolean")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.GZipStream"), [
        $asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode"), 
        $asm09.TypeRef("System.Boolean")
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.ZlibStream"), [
        $asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode"), 
        $asm09.TypeRef("System.Boolean")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Exception"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.IO.BinaryReader"), [$asm09.TypeRef("System.IO.Stream")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm09.System.IDisposable.Dispose)) ();
  };

  function TmxTileLayer__ctor (xLayer, width, height) {
    var $temp00;

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          this.set_Name(xLayer.GetAttribute("name"));
          var xOpacity = xLayer.GetAttribute("opacity");
          if ($T02().IsNullOrEmpty(xOpacity)) {
            this.TmxTileLayer$Opacity$value = +1;
          } else {
            this.TmxTileLayer$Opacity$value = +$T03().Parse(xOpacity);
          }
          var xVisible = xLayer.GetAttribute("visible");
          if ($T02().IsNullOrEmpty(xVisible)) {
            this.set_Visible(true);
          } else {
            this.set_Visible($T04().Parse(xVisible));
          }
          var xData = xLayer.get_Item("data");
          var encoding = xData.GetAttribute("encoding");
          this.TmxTileLayer$Tiles$value = $S00().Construct();
          if (encoding == "base64") {
            var base64data = $T08().FromBase64String(xData.Value.trim());
            var stream = $S01().Construct(base64data, false);
            var compression = xData.GetAttribute("compression");
            if (compression == "gzip") {
              stream = $S02().Construct(stream, $T0C().Decompress, false);
            } else if (compression == "zlib") {
              stream = $S03().Construct(stream, $T0C().Decompress, false);
            } else if (!$T02().IsNullOrEmpty(compression)) {
              throw $S04().Construct("Tiled: Unknown compression.");
            }
            var stream2 = stream;
            try {
              var br = $S05().Construct(stream);
              try {

                for (var i = 0; i < height; i = ((i + 1) | 0)) {

                  for (var j = 0; j < width; j = ((j + 1) | 0)) {
                    this.TmxTileLayer$Tiles$value.Add(new ($T10())(br.ReadUInt32(), j, i));
                  }
                }
              } finally {
                if (br !== null) {
                  $IM00().Call(br, null);
                }
              }
              break $labelgroup0;
            } finally {
              if (stream2 !== null) {
                $IM00().Call(stream2, null);
              }
            }
          }
          if (!(encoding == "csv")) {
            if (encoding === null) {
              var k = 0;

              for (var a$0 = xData.GetElements("tile")._items, i$0 = 0, l$0 = xData.GetElements("tile")._size; i$0 < l$0; ($temp00 = i$0, 
                  i$0 = ((i$0 + 1) | 0), 
                  $temp00)) {
                var e = a$0[i$0];
                var gid = $T12().Parse(e.GetAttribute("gid"));
                var x = ((k % width) | 0);
                var y = ((k / width) | 0);
                this.TmxTileLayer$Tiles$value.Add(new ($T10())(gid, x, y));
                k = ((k + 1) | 0);
              }
              break $labelgroup0;
            }
            throw $S04().Construct("Tiled: Unknown encoding.");
          }
          var csvData = xData.Value;
          var l = 0;
          var array = (JSIL.SplitString(csvData, JSIL.Array.New($T14(), [","])));

          for (var m = 0; m < array.length; m = ((m + 1) | 0)) {
            var s = array[m];
            var gid2 = $T12().Parse(s.trim());
            var x2 = ((l % width) | 0);
            var y2 = ((l / width) | 0);
            this.TmxTileLayer$Tiles$value.Add(new ($T10())(gid2, x2, y2));
            l = ((l + 1) | 0);
          }
          break $labelgroup0;

      }
    }
    /* Original label IL_286 */ 
    this.TmxTileLayer$Properties$value = new ($T16())(xLayer.get_Item("properties"));
  };

  function TmxTileLayer_get_Name () {
    return this.TmxTileLayer$Name$value;
  };

  function TmxTileLayer_get_Opacity () {
    return +this.TmxTileLayer$Opacity$value;
  };

  function TmxTileLayer_get_Properties () {
    return this.TmxTileLayer$Properties$value;
  };

  function TmxTileLayer_get_Tiles () {
    return this.TmxTileLayer$Tiles$value;
  };

  function TmxTileLayer_get_Visible () {
    return this.TmxTileLayer$Visible$value;
  };

  function TmxTileLayer_set_Name (value) {
    this.TmxTileLayer$Name$value = value;
  };

  function TmxTileLayer_set_Opacity (value) {
    this.TmxTileLayer$Opacity$value = +value;
  };

  function TmxTileLayer_set_Properties (value) {
    this.TmxTileLayer$Properties$value = value;
  };

  function TmxTileLayer_set_Tiles (value) {
    this.TmxTileLayer$Tiles$value = value;
  };

  function TmxTileLayer_set_Visible (value) {
    this.TmxTileLayer$Visible$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.TmxTileLayer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("SharedXNA.XMLElement"), $.Int32, 
          $.Int32
        ], []), 
      TmxTileLayer__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], []), 
      TmxTileLayer_get_Name
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Opacity", 
      new JSIL.MethodSignature($.Double, [], []), 
      TmxTileLayer_get_Opacity
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Properties", 
      new JSIL.MethodSignature($asm0A.TypeRef("SharedXNA.TmxPropertyDict"), [], []), 
      TmxTileLayer_get_Properties
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Tiles", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.TmxLayerTile")]), [], []), 
      TmxTileLayer_get_Tiles
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_Visible", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      TmxTileLayer_get_Visible
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], []), 
      TmxTileLayer_set_Name
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Opacity", 
      new JSIL.MethodSignature(null, [$.Double], []), 
      TmxTileLayer_set_Opacity
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Properties", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.TmxPropertyDict")], []), 
      TmxTileLayer_set_Properties
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Tiles", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.TmxLayerTile")])], []), 
      TmxTileLayer_set_Tiles
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Visible", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      TmxTileLayer_set_Visible
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TmxTileLayer$Name$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxTileLayer$Opacity$value", $.Double)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxTileLayer$Visible$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxTileLayer$Tiles$value", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.TmxLayerTile")]))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxTileLayer$Properties$value", $asm0A.TypeRef("SharedXNA.TmxPropertyDict"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Opacity", $.Double);

    $.Property({Static:false, Public:true , Virtual:true }, "Visible", $.Boolean);

    $.Property({Static:false, Public:true }, "Tiles", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.TmxLayerTile")]));

    $.Property({Static:false, Public:true }, "Properties", $asm0A.TypeRef("SharedXNA.TmxPropertyDict"));

    $.ImplementInterfaces(
      /* 0 */ $asm0A.TypeRef("SharedXNA.ITmxElement"), 
      /* 1 */ $asm0A.TypeRef("SharedXNA.ITmxLayer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.TmxLayerTile */ 

(function TmxLayerTile$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.UInt32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Boolean)) ();
  };

  function TmxLayerTile__ctor (id, x, y) {
    this.TmxLayerTile$GID$value = id;
    this.TmxLayerTile$X$value = x;
    this.TmxLayerTile$Y$value = y;
    if ((this.TmxLayerTile$GID$value & 2147483648) !== 0) {
      this.TmxLayerTile$HorizontalFlip$value = true;
    } else {
      this.TmxLayerTile$HorizontalFlip$value = false;
    }
    if ((this.TmxLayerTile$GID$value & 1073741824) !== 0) {
      this.TmxLayerTile$VerticalFlip$value = true;
    } else {
      this.TmxLayerTile$VerticalFlip$value = false;
    }
    if ((this.TmxLayerTile$GID$value & 536870912) !== 0) {
      this.TmxLayerTile$DiagonalFlip$value = true;
    } else {
      this.TmxLayerTile$DiagonalFlip$value = false;
    }
    this.TmxLayerTile$GID$value = (this.TmxLayerTile$GID$value & 536870911);
  };

  function TmxLayerTile_get_DiagonalFlip () {
    return this.TmxLayerTile$DiagonalFlip$value;
  };

  function TmxLayerTile_get_GID () {
    return this.TmxLayerTile$GID$value;
  };

  function TmxLayerTile_get_HorizontalFlip () {
    return this.TmxLayerTile$HorizontalFlip$value;
  };

  function TmxLayerTile_get_VerticalFlip () {
    return this.TmxLayerTile$VerticalFlip$value;
  };

  function TmxLayerTile_get_X () {
    return this.TmxLayerTile$X$value;
  };

  function TmxLayerTile_get_Y () {
    return this.TmxLayerTile$Y$value;
  };

  function TmxLayerTile_set_DiagonalFlip (value) {
    this.TmxLayerTile$DiagonalFlip$value = value;
  };

  function TmxLayerTile_set_GID (value) {
    this.TmxLayerTile$GID$value = value;
  };

  function TmxLayerTile_set_HorizontalFlip (value) {
    this.TmxLayerTile$HorizontalFlip$value = value;
  };

  function TmxLayerTile_set_VerticalFlip (value) {
    this.TmxLayerTile$VerticalFlip$value = value;
  };

  function TmxLayerTile_set_X (value) {
    this.TmxLayerTile$X$value = value;
  };

  function TmxLayerTile_set_Y (value) {
    this.TmxLayerTile$Y$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.TmxLayerTile", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Int32, 
          $.Int32
        ], []), 
      TmxLayerTile__ctor
    );

    $.Method({Static:false, Public:true }, "get_DiagonalFlip", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      TmxLayerTile_get_DiagonalFlip
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_GID", 
      new JSIL.MethodSignature($.UInt32, [], []), 
      TmxLayerTile_get_GID
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_HorizontalFlip", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      TmxLayerTile_get_HorizontalFlip
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_VerticalFlip", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      TmxLayerTile_get_VerticalFlip
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_X", 
      new JSIL.MethodSignature($.Int32, [], []), 
      TmxLayerTile_get_X
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Y", 
      new JSIL.MethodSignature($.Int32, [], []), 
      TmxLayerTile_get_Y
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_DiagonalFlip", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      TmxLayerTile_set_DiagonalFlip
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_GID", 
      new JSIL.MethodSignature(null, [$.UInt32], []), 
      TmxLayerTile_set_GID
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_HorizontalFlip", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      TmxLayerTile_set_HorizontalFlip
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_VerticalFlip", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      TmxLayerTile_set_VerticalFlip
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_X", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      TmxLayerTile_set_X
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Y", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      TmxLayerTile_set_Y
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Constant({Static:true , Public:false}, "FLIPPED_HORIZONTALLY_FLAG", 2147483648); 
    $.Constant({Static:true , Public:false}, "FLIPPED_VERTICALLY_FLAG", 1073741824); 
    $.Constant({Static:true , Public:false}, "FLIPPED_DIAGONALLY_FLAG", 536870912); 
    $.Field({Static:false, Public:false}, "TmxLayerTile$GID$value", $.UInt32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxLayerTile$X$value", $.Int32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxLayerTile$Y$value", $.Int32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxLayerTile$HorizontalFlip$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxLayerTile$VerticalFlip$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxLayerTile$DiagonalFlip$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "GID", $.UInt32);

    $.Property({Static:false, Public:true }, "X", $.Int32);

    $.Property({Static:false, Public:true }, "Y", $.Int32);

    $.Property({Static:false, Public:true }, "HorizontalFlip", $.Boolean);

    $.Property({Static:false, Public:true }, "VerticalFlip", $.Boolean);

    $.Property({Static:false, Public:true }, "DiagonalFlip", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum SharedXNA.TmxObjectType */ 

JSIL.MakeEnum(
  "SharedXNA.TmxObjectType", true, {
    Basic: 0, 
    Tile: 1, 
    Polygon: 2, 
    Polyline: 3
  }, false
);

/* struct SharedXNA.TmxPoint */ 

(function TmxPoint$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Int32)) ();
  };

  function TmxPoint__ctor (x, y) {
    this.X = x;
    this.Y = y;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.ValueType"), 
      Name: "SharedXNA.TmxPoint", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], []), 
      TmxPoint__ctor
    );

    $.Field({Static:false, Public:true }, "X", $.Int32); 
    $.Field({Static:false, Public:true }, "Y", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.TmxObject */ 

(function TmxObject$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.XMLElement)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.SharedXNA.TmxObjectType)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.TmxPropertyDict)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.TmxPoint))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm09.System.String))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.Char)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm09.System.Char))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0A.SharedXNA.TmxPoint)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.TmxPoint")]), []))) ();
  };

  function TmxObject__ctor (xObject) {
    var w = new JSIL.BoxedVariable(0);
    var h = new JSIL.BoxedVariable(0);
    var xName = xObject.GetAttribute("name");
    if (xName === null) {
      this.set_Name("");
    } else {
      this.set_Name(xName);
    }
    this.TmxObject$Type$value = xObject.GetAttribute("type");
    this.TmxObject$X$value = $T01().Parse(xObject.GetAttribute("x"));
    this.TmxObject$Y$value = $T01().Parse(xObject.GetAttribute("y"));
    if ($T01().TryParse(xObject.GetAttribute("width"), /* ref */ w)) {
      (this.TmxObject$Width$value = w.get());
    }
    if ($T01().TryParse(xObject.GetAttribute("height"), /* ref */ h)) {
      (this.TmxObject$Height$value = h.get());
    }
    var xGid = xObject.GetAttribute("gid");
    var xPolygon = xObject.get_Item("polygon");
    var xPolyline = xObject.get_Item("polyline");
    if (!$T02().IsNullOrEmpty(xGid)) {
      (this.TmxObject$Gid$value = $T01().Parse(xGid));
      this.TmxObject$ObjectType$value = $T03().Tile;
    } else if (xPolygon !== null) {
      this.TmxObject$Points$value = this.ParsePoints(xPolygon);
      this.TmxObject$ObjectType$value = $T03().Polygon;
    } else if (xPolyline !== null) {
      this.TmxObject$Points$value = this.ParsePoints(xPolyline);
      this.TmxObject$ObjectType$value = $T03().Polyline;
    } else {
      this.TmxObject$ObjectType$value = $T03().Basic;
    }
    this.TmxObject$Properties$value = new ($T04())(xObject.get_Item("properties"));
  };

  function TmxObject_get_Gid () {
    return this.TmxObject$Gid$value;
  };

  function TmxObject_get_Height () {
    return this.TmxObject$Height$value;
  };

  function TmxObject_get_Name () {
    return this.TmxObject$Name$value;
  };

  function TmxObject_get_ObjectType () {
    return this.TmxObject$ObjectType$value;
  };

  function TmxObject_get_Points () {
    return this.TmxObject$Points$value;
  };

  function TmxObject_get_Properties () {
    return this.TmxObject$Properties$value;
  };

  function TmxObject_get_Type () {
    return this.TmxObject$Type$value;
  };

  function TmxObject_get_Width () {
    return this.TmxObject$Width$value;
  };

  function TmxObject_get_X () {
    return this.TmxObject$X$value;
  };

  function TmxObject_get_Y () {
    return this.TmxObject$Y$value;
  };

  function TmxObject_ParsePoints (xPoints) {
    var points = $S00().Construct();
    var pointString = xPoints.GetAttribute("points");
    var pointStringPair = (JSIL.SplitString(pointString, JSIL.Array.New($T07(), [" "])));
    var array = pointStringPair;

    for (var i = 0; i < array.length; i = ((i + 1) | 0)) {
      var s = array[i];
      var pt = (JSIL.SplitString(s, JSIL.Array.New($T07(), [","])));
      var x = $T01().Parse(pt[0]);
      var y = $T01().Parse(pt[1]);
      points.Add(new ($T09())(x, y));
    }
    return points;
  };

  function TmxObject_set_Gid (value) {
    this.TmxObject$Gid$value = value;
  };

  function TmxObject_set_Height (value) {
    this.TmxObject$Height$value = value;
  };

  function TmxObject_set_Name (value) {
    this.TmxObject$Name$value = value;
  };

  function TmxObject_set_ObjectType (value) {
    this.TmxObject$ObjectType$value = value;
  };

  function TmxObject_set_Points (value) {
    this.TmxObject$Points$value = value;
  };

  function TmxObject_set_Properties (value) {
    this.TmxObject$Properties$value = value;
  };

  function TmxObject_set_Type (value) {
    this.TmxObject$Type$value = value;
  };

  function TmxObject_set_Width (value) {
    this.TmxObject$Width$value = value;
  };

  function TmxObject_set_X (value) {
    this.TmxObject$X$value = value;
  };

  function TmxObject_set_Y (value) {
    this.TmxObject$Y$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.TmxObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.XMLElement")], []), 
      TmxObject__ctor
    );

    $.Method({Static:false, Public:true }, "get_Gid", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [], []), 
      TmxObject_get_Gid
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Height", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [], []), 
      TmxObject_get_Height
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], []), 
      TmxObject_get_Name
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_ObjectType", 
      new JSIL.MethodSignature($asm0A.TypeRef("SharedXNA.TmxObjectType"), [], []), 
      TmxObject_get_ObjectType
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Points", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.TmxPoint")]), [], []), 
      TmxObject_get_Points
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Properties", 
      new JSIL.MethodSignature($asm0A.TypeRef("SharedXNA.TmxPropertyDict"), [], []), 
      TmxObject_get_Properties
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($.String, [], []), 
      TmxObject_get_Type
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Width", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.Int32]), [], []), 
      TmxObject_get_Width
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_X", 
      new JSIL.MethodSignature($.Int32, [], []), 
      TmxObject_get_X
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Y", 
      new JSIL.MethodSignature($.Int32, [], []), 
      TmxObject_get_Y
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "ParsePoints", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.TmxPoint")]), [$asm0A.TypeRef("SharedXNA.XMLElement")], []), 
      TmxObject_ParsePoints
    );

    $.Method({Static:false, Public:false}, "set_Gid", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Nullable`1", [$.Int32])], []), 
      TmxObject_set_Gid
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Height", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Nullable`1", [$.Int32])], []), 
      TmxObject_set_Height
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], []), 
      TmxObject_set_Name
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ObjectType", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.TmxObjectType")], []), 
      TmxObject_set_ObjectType
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Points", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.TmxPoint")])], []), 
      TmxObject_set_Points
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Properties", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.TmxPropertyDict")], []), 
      TmxObject_set_Properties
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Type", 
      new JSIL.MethodSignature(null, [$.String], []), 
      TmxObject_set_Type
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Width", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Nullable`1", [$.Int32])], []), 
      TmxObject_set_Width
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_X", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      TmxObject_set_X
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Y", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      TmxObject_set_Y
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TmxObject$Name$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxObject$ObjectType$value", $asm0A.TypeRef("SharedXNA.TmxObjectType"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxObject$Type$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxObject$X$value", $.Int32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxObject$Y$value", $.Int32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxObject$Width$value", $asm09.TypeRef("System.Nullable`1", [$.Int32]))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxObject$Height$value", $asm09.TypeRef("System.Nullable`1", [$.Int32]))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxObject$Gid$value", $asm09.TypeRef("System.Nullable`1", [$.Int32]))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxObject$Points$value", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.TmxPoint")]))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxObject$Properties$value", $asm0A.TypeRef("SharedXNA.TmxPropertyDict"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "ObjectType", $asm0A.TypeRef("SharedXNA.TmxObjectType"));

    $.Property({Static:false, Public:true }, "Type", $.String);

    $.Property({Static:false, Public:true }, "X", $.Int32);

    $.Property({Static:false, Public:true }, "Y", $.Int32);

    $.Property({Static:false, Public:true }, "Width", $asm09.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "Height", $asm09.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "Gid", $asm09.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "Points", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.TmxPoint")]));

    $.Property({Static:false, Public:true }, "Properties", $asm0A.TypeRef("SharedXNA.TmxPropertyDict"));

    $.ImplementInterfaces(
      /* 0 */ $asm0A.TypeRef("SharedXNA.ITmxElement")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.TmxObjectLayer */ 

(function TmxObjectLayer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.XMLElement)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.UInt32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Globalization.NumberStyles)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Double)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.SharedXNA.TmxList)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.SharedXNA.TmxObject)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0A.SharedXNA.TmxPropertyDict)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.UInt32"), [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.Globalization.NumberStyles")], []))) ();
  };

  function TmxObjectLayer__ctor (xObjectGroup) {
    var $temp00;
    this.set_Name(xObjectGroup.GetAttribute("name"));
    var xColor = xObjectGroup.GetAttribute("color");
    if (!$T01().IsNullOrEmpty(xColor)) {
      xColor = (xColor.substr(1));
      (this.TmxObjectLayer$Color$value = $S00().CallStatic($T03(), "Parse", null, xColor, $T04().$Flags("AllowHexSpecifier", "AllowLeadingWhite", "AllowTrailingWhite", "HexNumber")));
    }
    var xOpacity = xObjectGroup.GetAttribute("opacity");
    if ($T01().IsNullOrEmpty(xOpacity)) {
      this.TmxObjectLayer$Opacity$value = +1;
    } else {
      this.TmxObjectLayer$Opacity$value = +$T05().Parse(xOpacity);
    }
    var xVisible = xObjectGroup.GetAttribute("visible");
    if ($T01().IsNullOrEmpty(xVisible)) {
      this.set_Visible(true);
    } else {
      this.set_Visible($T06().Parse(xVisible));
    }
    this.TmxObjectLayer$Objects$value = new ($T07())();

    for (var a$0 = xObjectGroup.GetElements("object")._items, i$0 = 0, l$0 = xObjectGroup.GetElements("object")._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var e = a$0[i$0];
      this.TmxObjectLayer$Objects$value.AddOrIncrement(new ($T08())(e));
    }
    this.TmxObjectLayer$Properties$value = new ($T09())(xObjectGroup.get_Item("properties"));
  };

  function TmxObjectLayer_get_Color () {
    return this.TmxObjectLayer$Color$value;
  };

  function TmxObjectLayer_get_Name () {
    return this.TmxObjectLayer$Name$value;
  };

  function TmxObjectLayer_get_Objects () {
    return this.TmxObjectLayer$Objects$value;
  };

  function TmxObjectLayer_get_Opacity () {
    return +this.TmxObjectLayer$Opacity$value;
  };

  function TmxObjectLayer_get_Properties () {
    return this.TmxObjectLayer$Properties$value;
  };

  function TmxObjectLayer_get_Visible () {
    return this.TmxObjectLayer$Visible$value;
  };

  function TmxObjectLayer_set_Color (value) {
    this.TmxObjectLayer$Color$value = value;
  };

  function TmxObjectLayer_set_Name (value) {
    this.TmxObjectLayer$Name$value = value;
  };

  function TmxObjectLayer_set_Objects (value) {
    this.TmxObjectLayer$Objects$value = value;
  };

  function TmxObjectLayer_set_Opacity (value) {
    this.TmxObjectLayer$Opacity$value = +value;
  };

  function TmxObjectLayer_set_Properties (value) {
    this.TmxObjectLayer$Properties$value = value;
  };

  function TmxObjectLayer_set_Visible (value) {
    this.TmxObjectLayer$Visible$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.TmxObjectLayer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.XMLElement")], []), 
      TmxObjectLayer__ctor
    );

    $.Method({Static:false, Public:true }, "get_Color", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.UInt32]), [], []), 
      TmxObjectLayer_get_Color
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], []), 
      TmxObjectLayer_get_Name
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Objects", 
      new JSIL.MethodSignature($asm0A.TypeRef("SharedXNA.TmxList"), [], []), 
      TmxObjectLayer_get_Objects
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Opacity", 
      new JSIL.MethodSignature($.Double, [], []), 
      TmxObjectLayer_get_Opacity
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Properties", 
      new JSIL.MethodSignature($asm0A.TypeRef("SharedXNA.TmxPropertyDict"), [], []), 
      TmxObjectLayer_get_Properties
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_Visible", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      TmxObjectLayer_get_Visible
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Color", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Nullable`1", [$.UInt32])], []), 
      TmxObjectLayer_set_Color
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], []), 
      TmxObjectLayer_set_Name
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Objects", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.TmxList")], []), 
      TmxObjectLayer_set_Objects
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Opacity", 
      new JSIL.MethodSignature(null, [$.Double], []), 
      TmxObjectLayer_set_Opacity
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Properties", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.TmxPropertyDict")], []), 
      TmxObjectLayer_set_Properties
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Visible", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      TmxObjectLayer_set_Visible
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TmxObjectLayer$Name$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxObjectLayer$Color$value", $asm09.TypeRef("System.Nullable`1", [$.UInt32]))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxObjectLayer$Opacity$value", $.Double)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxObjectLayer$Visible$value", $.Boolean)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxObjectLayer$Objects$value", $asm0A.TypeRef("SharedXNA.TmxList"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxObjectLayer$Properties$value", $asm0A.TypeRef("SharedXNA.TmxPropertyDict"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Color", $asm09.TypeRef("System.Nullable`1", [$.UInt32]));

    $.Property({Static:false, Public:true }, "Opacity", $.Double);

    $.Property({Static:false, Public:true , Virtual:true }, "Visible", $.Boolean);

    $.Property({Static:false, Public:true }, "Objects", $asm0A.TypeRef("SharedXNA.TmxList"));

    $.Property({Static:false, Public:true }, "Properties", $asm0A.TypeRef("SharedXNA.TmxPropertyDict"));

    $.ImplementInterfaces(
      /* 0 */ $asm0A.TypeRef("SharedXNA.ITmxElement"), 
      /* 1 */ $asm0A.TypeRef("SharedXNA.ITmxLayer")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.TmxList */ 

(function TmxList$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Collections.Generic.Dictionary$b2.Of($asm09.System.String, $asm09.System.Int32))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Collections.Generic.Dictionary$b2.Of($asm09.System.String, $asm0A.SharedXNA.ITmxElement))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.ITmxElement)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.Int32")]), []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0A.SharedXNA.ITmxElement.get_Name)) ();
  };

  function TmxList__ctor () {
    $T01().prototype._ctor.call(this);
    this.Id = $thisType.TmxListInstanceCount;
    $thisType.TmxListInstanceCount = (($thisType.TmxListInstanceCount + 1) | 0);
  };

  function TmxList_AddOrIncrement (t) {
    var dictionary = null, key2 = null;
    var key = (JSIL.ConcatString($IM00().Call(t, null), this.Id));
    if (this.ContainsKey($IM00().Call(t, null))) {
      (dictionary = $thisType.nameCount).set_Item((key2 = key), ((dictionary.get_Item(key2) + 1) | 0));
    } else {
      $thisType.nameCount.Add(key, 0);
    }
    this.Add(this.GetKeyForItem(t), t);
  };

  function TmxList_GetKeyForItem (t) {
    var count = new JSIL.BoxedVariable(0);
    var key = (JSIL.ConcatString($IM00().Call(t, null), this.Id));
    if (!$thisType.nameCount.TryGetValue(key, /* ref */ count)) {
      return $IM00().Call(t, null);
    }
    if (count.get() === 0) {
      return $IM00().Call(t, null);
    }
    return JSIL.ConcatString($IM00().Call(t, null), count.get());
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.String"), $asm0A.TypeRef("SharedXNA.ITmxElement")]), 
      Name: "SharedXNA.TmxList", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      TmxList__ctor
    );

    $.Method({Static:false, Public:true }, "AddOrIncrement", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.ITmxElement")], []), 
      TmxList_AddOrIncrement
    );

    $.Method({Static:false, Public:false}, "GetKeyForItem", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("SharedXNA.ITmxElement")], []), 
      TmxList_GetKeyForItem
    );

    $.Field({Static:true , Public:false}, "TmxListInstanceCount", $.Int32, 0); 
    $.Field({Static:true , Public:false}, "nameCount", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32])); 
    $.Field({Static:false, Public:true }, "Id", $.Int32); 
    function TmxList__cctor () {
      $thisType.TmxListInstanceCount = 0;
      $thisType.nameCount = $S00().Construct();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      TmxList__cctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.TmxPropertyDict */ 

(function TmxPropertyDict$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.XMLElement)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Collections.Generic.Dictionary$b2.Of($asm09.System.String, $asm09.System.String))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.String)) ();
  };

  function TmxPropertyDict__ctor (xmlProp) {
    var $temp00;
    $T01().prototype._ctor.call(this);
    if (xmlProp === null) {
      return;
    }

    for (var a$0 = xmlProp.GetElements("property")._items, i$0 = 0, l$0 = xmlProp.GetElements("property")._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var p = a$0[i$0];
      var pname = p.GetAttribute("name");
      var pval = p.GetAttribute("value");
      this.Add(pname, pval);
    }
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.String")]), 
      Name: "SharedXNA.TmxPropertyDict", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.XMLElement")], []), 
      TmxPropertyDict__ctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.TmxImage */ 

(function TmxImage$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.XMLElement)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.UInt32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Globalization.NumberStyles)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.UInt32"), [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.Globalization.NumberStyles")], []))) ();
  };

  function TmxImage__ctor (xImage) {
    this.TmxImage$Source$value = xImage.GetAttribute("source");
    var xTrans = xImage.GetAttribute("trans");
    if (!$T01().IsNullOrEmpty(xTrans)) {
      (this.TmxImage$Trans$value = $S00().CallStatic($T02(), "Parse", null, xTrans, $T03().$Flags("AllowHexSpecifier", "AllowLeadingWhite", "AllowTrailingWhite", "HexNumber")));
    }
    this.TmxImage$Width$value = $T04().Parse(xImage.GetAttribute("width"));
    this.TmxImage$Height$value = $T04().Parse(xImage.GetAttribute("height"));
  };

  function TmxImage_get_Height () {
    return this.TmxImage$Height$value;
  };

  function TmxImage_get_Source () {
    return this.TmxImage$Source$value;
  };

  function TmxImage_get_Trans () {
    return this.TmxImage$Trans$value;
  };

  function TmxImage_get_Width () {
    return this.TmxImage$Width$value;
  };

  function TmxImage_set_Height (value) {
    this.TmxImage$Height$value = value;
  };

  function TmxImage_set_Source (value) {
    this.TmxImage$Source$value = value;
  };

  function TmxImage_set_Trans (value) {
    this.TmxImage$Trans$value = value;
  };

  function TmxImage_set_Width (value) {
    this.TmxImage$Width$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.TmxImage", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.XMLElement")], []), 
      TmxImage__ctor
    );

    $.Method({Static:false, Public:true }, "get_Height", 
      new JSIL.MethodSignature($.Int32, [], []), 
      TmxImage_get_Height
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Source", 
      new JSIL.MethodSignature($.String, [], []), 
      TmxImage_get_Source
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Trans", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Nullable`1", [$.UInt32]), [], []), 
      TmxImage_get_Trans
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Width", 
      new JSIL.MethodSignature($.Int32, [], []), 
      TmxImage_get_Width
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Height", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      TmxImage_set_Height
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Source", 
      new JSIL.MethodSignature(null, [$.String], []), 
      TmxImage_set_Source
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Trans", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Nullable`1", [$.UInt32])], []), 
      TmxImage_set_Trans
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Width", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      TmxImage_set_Width
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "TmxImage$Source$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxImage$Trans$value", $asm09.TypeRef("System.Nullable`1", [$.UInt32]))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxImage$Width$value", $.Int32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxImage$Height$value", $.Int32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Source", $.String);

    $.Property({Static:false, Public:true }, "Trans", $asm09.TypeRef("System.Nullable`1", [$.UInt32]));

    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.TmxTileset */ 

(function TmxTileset$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.XMLDocument)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Func$b2.Of($asm09.System.String, $asm09.System.IO.Stream))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.XMLElement)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.SharedXNA.TmxDocument)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.UInt32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0A.SharedXNA.TmxImage)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.Collections.Generic.Dictionary$b2.Of($asm09.System.Int32, $asm0A.SharedXNA.TmxPropertyDict))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0A.SharedXNA.TmxPropertyDict)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.XMLElement"), $asm09.TypeRef("System.Func`2", [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.IO.Stream")])], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream")], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("SharedXNA.TmxTileset"), [$asm0A.TypeRef("SharedXNA.XMLDocument"), $asm09.TypeRef("System.Func`2", [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.IO.Stream")])]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.Int32"), $asm0A.TypeRef("SharedXNA.TmxPropertyDict")]), []))) ();
  };

  function TmxTileset__ctor$00 (xDoc, importer) {
    $S00().Call($thisType.prototype, "_ctor", null, this, xDoc.RootNode, importer);
  };

  function TmxTileset__ctor$01 (xTileset, importer) {
    var $temp00;
    $T03().prototype._ctor.call(this);
    this.importer = importer;
    var xFirstGid = xTileset.GetAttribute("firstgid");
    var source = xTileset.GetAttribute("source");
    if (!$T04().IsNullOrEmpty(source)) {
      this.TmxTileset$FirstGid$value = $T05().Parse(xFirstGid);
      var xDocTileset = new ($T00())();
      $S01().CallVirtual("Parse", null, xDocTileset, importer(source));
      var ts = $S02().Construct(xDocTileset, importer);
      this.set_Name(ts.get_Name());
      this.TmxTileset$TileWidth$value = ts.TmxTileset$TileWidth$value;
      this.TmxTileset$TileHeight$value = ts.TmxTileset$TileHeight$value;
      this.TmxTileset$Spacing$value = ts.TmxTileset$Spacing$value;
      this.TmxTileset$Margin$value = ts.TmxTileset$Margin$value;
      this.TmxTileset$Image$value = ts.TmxTileset$Image$value;
      this.TmxTileset$Tiles$value = ts.TmxTileset$Tiles$value;
      return;
    }
    if (!$T04().IsNullOrEmpty(xFirstGid)) {
      this.TmxTileset$FirstGid$value = $T05().Parse(xFirstGid);
    }
    this.set_Name(xTileset.GetAttribute("name"));
    this.TmxTileset$Image$value = new ($T06())(xTileset.get_Item("image"));
    this.TmxTileset$TileWidth$value = $T07().Parse(xTileset.GetAttribute("tilewidth"));
    this.TmxTileset$TileHeight$value = $T07().Parse(xTileset.GetAttribute("tileheight"));
    var xSpacing = xTileset.GetAttribute("spacing");
    if ($T04().IsNullOrEmpty(xSpacing)) {
      this.TmxTileset$Spacing$value = 0;
    } else {
      this.TmxTileset$Spacing$value = $T07().Parse(xSpacing);
    }
    var xMargin = xTileset.GetAttribute("margin");
    if ($T04().IsNullOrEmpty(xMargin)) {
      this.TmxTileset$Margin$value = 0;
    } else {
      this.TmxTileset$Margin$value = $T07().Parse(xMargin);
    }
    this.TmxTileset$Tiles$value = $S03().Construct();

    for (var a$0 = xTileset.GetElements("tile")._items, i$0 = 0, l$0 = xTileset.GetElements("tile")._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var xml_tile = a$0[i$0];
      var id = $T07().Parse(xml_tile.GetAttribute("id"));
      var xProp = xml_tile.get_Item("properties");
      this.TmxTileset$Tiles$value.Add(id, new ($T09())(xProp));
    }
  };

  function TmxTileset_get_FirstGid () {
    return this.TmxTileset$FirstGid$value;
  };

  function TmxTileset_get_Image () {
    return this.TmxTileset$Image$value;
  };

  function TmxTileset_get_Margin () {
    return this.TmxTileset$Margin$value;
  };

  function TmxTileset_get_Name () {
    return this.TmxTileset$Name$value;
  };

  function TmxTileset_get_Properties () {
    return this.TmxTileset$Properties$value;
  };

  function TmxTileset_get_Spacing () {
    return this.TmxTileset$Spacing$value;
  };

  function TmxTileset_get_TileHeight () {
    return this.TmxTileset$TileHeight$value;
  };

  function TmxTileset_get_Tiles () {
    return this.TmxTileset$Tiles$value;
  };

  function TmxTileset_get_TileWidth () {
    return this.TmxTileset$TileWidth$value;
  };

  function TmxTileset_set_FirstGid (value) {
    this.TmxTileset$FirstGid$value = value;
  };

  function TmxTileset_set_Image (value) {
    this.TmxTileset$Image$value = value;
  };

  function TmxTileset_set_Margin (value) {
    this.TmxTileset$Margin$value = value;
  };

  function TmxTileset_set_Name (value) {
    this.TmxTileset$Name$value = value;
  };

  function TmxTileset_set_Properties (value) {
    this.TmxTileset$Properties$value = value;
  };

  function TmxTileset_set_Spacing (value) {
    this.TmxTileset$Spacing$value = value;
  };

  function TmxTileset_set_TileHeight (value) {
    this.TmxTileset$TileHeight$value = value;
  };

  function TmxTileset_set_Tiles (value) {
    this.TmxTileset$Tiles$value = value;
  };

  function TmxTileset_set_TileWidth (value) {
    this.TmxTileset$TileWidth$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.TmxDocument"), 
      Name: "SharedXNA.TmxTileset", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.XMLDocument"), $asm09.TypeRef("System.Func`2", [$.String, $asm09.TypeRef("System.IO.Stream")])], []), 
      TmxTileset__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.XMLElement"), $asm09.TypeRef("System.Func`2", [$.String, $asm09.TypeRef("System.IO.Stream")])], []), 
      TmxTileset__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_FirstGid", 
      new JSIL.MethodSignature($.UInt32, [], []), 
      TmxTileset_get_FirstGid
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Image", 
      new JSIL.MethodSignature($asm0A.TypeRef("SharedXNA.TmxImage"), [], []), 
      TmxTileset_get_Image
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Margin", 
      new JSIL.MethodSignature($.Int32, [], []), 
      TmxTileset_get_Margin
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], []), 
      TmxTileset_get_Name
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Properties", 
      new JSIL.MethodSignature($asm0A.TypeRef("SharedXNA.TmxPropertyDict"), [], []), 
      TmxTileset_get_Properties
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Spacing", 
      new JSIL.MethodSignature($.Int32, [], []), 
      TmxTileset_get_Spacing
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TileHeight", 
      new JSIL.MethodSignature($.Int32, [], []), 
      TmxTileset_get_TileHeight
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Tiles", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm0A.TypeRef("SharedXNA.TmxPropertyDict")]), [], []), 
      TmxTileset_get_Tiles
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_TileWidth", 
      new JSIL.MethodSignature($.Int32, [], []), 
      TmxTileset_get_TileWidth
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_FirstGid", 
      new JSIL.MethodSignature(null, [$.UInt32], []), 
      TmxTileset_set_FirstGid
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Image", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.TmxImage")], []), 
      TmxTileset_set_Image
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Margin", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      TmxTileset_set_Margin
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], []), 
      TmxTileset_set_Name
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Properties", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.TmxPropertyDict")], []), 
      TmxTileset_set_Properties
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Spacing", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      TmxTileset_set_Spacing
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TileHeight", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      TmxTileset_set_TileHeight
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_Tiles", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm0A.TypeRef("SharedXNA.TmxPropertyDict")])], []), 
      TmxTileset_set_Tiles
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_TileWidth", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      TmxTileset_set_TileWidth
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "importer", $asm09.TypeRef("System.Func`2", [$.String, $asm09.TypeRef("System.IO.Stream")])); 
    $.Field({Static:false, Public:false}, "TmxTileset$Name$value", $.String)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxTileset$FirstGid$value", $.UInt32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxTileset$TileWidth$value", $.Int32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxTileset$TileHeight$value", $.Int32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxTileset$Spacing$value", $.Int32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxTileset$Margin$value", $.Int32)
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxTileset$Image$value", $asm0A.TypeRef("SharedXNA.TmxImage"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxTileset$Tiles$value", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm0A.TypeRef("SharedXNA.TmxPropertyDict")]))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "TmxTileset$Properties$value", $asm0A.TypeRef("SharedXNA.TmxPropertyDict"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "FirstGid", $.UInt32);

    $.Property({Static:false, Public:true }, "TileWidth", $.Int32);

    $.Property({Static:false, Public:true }, "TileHeight", $.Int32);

    $.Property({Static:false, Public:true }, "Spacing", $.Int32);

    $.Property({Static:false, Public:true }, "Margin", $.Int32);

    $.Property({Static:false, Public:true }, "Image", $asm0A.TypeRef("SharedXNA.TmxImage"));

    $.Property({Static:false, Public:true }, "Tiles", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm0A.TypeRef("SharedXNA.TmxPropertyDict")]));

    $.Property({Static:false, Public:true }, "Properties", $asm0A.TypeRef("SharedXNA.TmxPropertyDict"));

    $.ImplementInterfaces(
      /* 0 */ $asm0A.TypeRef("SharedXNA.ITmxElement")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Ionic");
JSIL.DeclareNamespace("Ionic.Crc");
/* class Ionic.Crc.CRC32 */ 

(function CRC32$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.UInt32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Byte)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm09.System.UInt32))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.IO.Stream)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Exception)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm09.System.Byte))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.Int64)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Byte"), [$asm09.TypeRef("System.Byte")], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.UInt32"), [$asm09.TypeRef("System.UInt32")], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Exception"), [$asm09.TypeRef("System.String")]))) ();
  };

  function CRC32__ctor$00 () {
    $thisType.prototype._ctor.call(this, false);
  };

  function CRC32__ctor$01 (reverseBits) {
    $thisType.prototype._ctor.call(this, -306674912, reverseBits);
  };

  function CRC32__ctor$02 (polynomial, reverseBits) {
    this._register = 4294967295;
    this.reverseBits = reverseBits;
    this.dwPolynomial = $T02().$Cast(polynomial);
    this.GenerateLookupTable();
  };

  function CRC32__InternalComputeCrc32 (W, B) {
    return $T01().$Cast((this.crc32Table[((W ^ B) & 255)] ^ (W >>> 8)));
  };

  function CRC32_Combine (crc, length) {
    var even = JSIL.Array.New($T02(), 32);
    var odd = JSIL.Array.New($T02(), 32);
    if (length === 0) {
      return;
    }
    var crc2 = (~this._register >>> 0);
    odd[0] = this.dwPolynomial;
    var row = 1;

    for (var i = 1; i < 32; i = ((i + 1) | 0)) {
      odd[i] = row;
      row = (row << 1);
    }
    this.gf2_matrix_square(even, odd);
    this.gf2_matrix_square(odd, even);
    var len2 = $T02().$Cast(length);

  $loop1: 
    do {
      this.gf2_matrix_square(even, odd);
      if ((len2 & 1) === 1) {
        crc2 = this.gf2_matrix_times(even, crc2);
      }
      len2 = (len2 >>> 1);
      if (len2 === 0) {
        break $loop1;
      }
      this.gf2_matrix_square(odd, even);
      if ((len2 & 1) === 1) {
        crc2 = this.gf2_matrix_times(odd, crc2);
      }
      len2 = (len2 >>> 1);
    } while (len2 !== 0);
    crc2 = (crc2 ^ $T02().$Cast(crc));
    this._register = (~crc2 >>> 0);
  };

  function CRC32_ComputeCrc32 (W, B) {
    return this._InternalComputeCrc32($T02().$Cast(W), B);
  };

  function CRC32_GenerateLookupTable () {
    this.crc32Table = JSIL.Array.New($T02(), 256);
    var i = 0;

    do {
      var dwCrc = i;

      for (var j = 8; j > 0; j = ((j - 1) | 0)) {
        if ((dwCrc & 1) === 1) {
          dwCrc = ((dwCrc >>> 1) ^ this.dwPolynomial);
        } else {
          dwCrc = (dwCrc >>> 1);
        }
      }
      if (this.reverseBits) {
        this.crc32Table[$S00().CallStatic($thisType, "ReverseBits", null, i)] = $S01().CallStatic($thisType, "ReverseBits", null, dwCrc);
      } else {
        this.crc32Table[i] = dwCrc;
      }
      i = ((i + 1) | 0);
    } while (i !== 0);
  };

  function CRC32_get_Crc32Result () {
    return $T01().$Cast((~$T01().$Cast(this._register) >>> 0));
  };

  function CRC32_get_TotalBytesRead () {
    return this._TotalBytesRead;
  };

  function CRC32_GetCrc32 (input) {
    return this.GetCrc32AndCopy(input, null);
  };

  function CRC32_GetCrc32AndCopy (input, output) {
    if (input === null) {
      throw $S02().Construct("The input stream must not be null.");
    }
    var buffer = JSIL.Array.New($T03(), 8192);
    this._TotalBytesRead = $T08().Create(0, 0, 0);
    var count = input.Read(buffer, 0, 8192);
    if (output !== null) {
      output.Write(buffer, 0, count);
    }
    this._TotalBytesRead = $T08().op_Addition(this._TotalBytesRead, $T08().FromNumber(count));

    while (count > 0) {
      this.SlurpBlock(buffer, 0, count);
      count = input.Read(buffer, 0, 8192);
      if (output !== null) {
        output.Write(buffer, 0, count);
      }
      this._TotalBytesRead = $T08().op_Addition(this._TotalBytesRead, $T08().FromNumber(count));
    }
    return $T01().$Cast((~$T01().$Cast(this._register) >>> 0));
  };

  function CRC32_gf2_matrix_square (square, mat) {

    for (var i = 0; i < 32; i = ((i + 1) | 0)) {
      square[i] = this.gf2_matrix_times(mat, mat[i]);
    }
  };

  function CRC32_gf2_matrix_times (matrix, vec) {
    var sum = 0;
    var i = 0;

    while (vec !== 0) {
      if ((vec & 1) === 1) {
        sum = (sum ^ matrix[i]);
      }
      vec = (vec >>> 1);
      i = ((i + 1) | 0);
    }
    return sum;
  };

  function CRC32_Reset () {
    this._register = 4294967295;
  };

  function CRC32_ReverseBits$03 (data) {
    var ret = (((data & 1431655765) << 1) | ((data >>> 1) & 1431655765));
    ret = (((ret & 858993459) << 2) | ((ret >>> 2) & 858993459));
    ret = (((ret & 252645135) << 4) | ((ret >>> 4) & 252645135));
    return ((((ret << 24) | ((ret & 65280) << 8)) | ((ret >>> 8) & 65280)) | (ret >>> 24));
  };

  function CRC32_ReverseBits$04 (data) {
    return $T03().$Cast((((16781313 * (((((data * 131586) >>> 0) & 17055760) + ((((data * 131586) >>> 0) << 2) & (17055760 << 1))) >>> 0)) >>> 0) >>> 24));
  };

  function CRC32_SlurpBlock (block, offset, count) {
    if (block === null) {
      throw $S02().Construct("The data buffer must not be null.");
    }

    for (var i = 0; i < count; i = ((i + 1) | 0)) {
      var x = ((offset + i) | 0);
      var b = block[x];
      if (this.reverseBits) {
        var temp = ((this._register >>> 24) ^ b);
        this._register = ((this._register << 8) ^ this.crc32Table[temp]);
      } else {
        var temp2 = ((this._register & 255) ^ b);
        this._register = ((this._register >>> 8) ^ this.crc32Table[temp2]);
      }
    }
    this._TotalBytesRead = $T08().op_Addition(this._TotalBytesRead, $T08().FromNumber(count));
  };

  function CRC32_UpdateCRC$05 (b) {
    if (this.reverseBits) {
      var temp = ((this._register >>> 24) ^ b);
      this._register = ((this._register << 8) ^ this.crc32Table[temp]);
      return;
    }
    var temp2 = ((this._register & 255) ^ b);
    this._register = ((this._register >>> 8) ^ this.crc32Table[temp2]);
  };

  function CRC32_UpdateCRC$06 (b, n) {
    var $temp00;

    while (($temp00 = n, 
        n = ((n - 1) | 0), 
        $temp00) > 0) {
      if (this.reverseBits) {
        var temp = ((this._register >>> 24) ^ b);
        this._register = ((this._register << 8) ^ this.crc32Table[((temp >= 0) ? temp : ((temp + 256) >>> 0))]);
      } else {
        var temp2 = ((this._register & 255) ^ b);
        this._register = ((this._register >>> 8) ^ this.crc32Table[((temp2 >= 0) ? temp2 : ((temp2 + 256) >>> 0))]);
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Ionic.Crc.CRC32", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      CRC32__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      CRC32__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean], []), 
      CRC32__ctor$02
    );

    $.Method({Static:false, Public:false}, "_InternalComputeCrc32", 
      new JSIL.MethodSignature($.Int32, [$.UInt32, $.Byte], []), 
      CRC32__InternalComputeCrc32
    );

    $.Method({Static:false, Public:true }, "Combine", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], []), 
      CRC32_Combine
    );

    $.Method({Static:false, Public:true }, "ComputeCrc32", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Byte], []), 
      CRC32_ComputeCrc32
    );

    $.Method({Static:false, Public:false}, "GenerateLookupTable", 
      new JSIL.MethodSignature(null, [], []), 
      CRC32_GenerateLookupTable
    );

    $.Method({Static:false, Public:true }, "get_Crc32Result", 
      new JSIL.MethodSignature($.Int32, [], []), 
      CRC32_get_Crc32Result
    );

    $.Method({Static:false, Public:true }, "get_TotalBytesRead", 
      new JSIL.MethodSignature($.Int64, [], []), 
      CRC32_get_TotalBytesRead
    );

    $.Method({Static:false, Public:true }, "GetCrc32", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.IO.Stream")], []), 
      CRC32_GetCrc32
    );

    $.Method({Static:false, Public:true }, "GetCrc32AndCopy", 
      new JSIL.MethodSignature($.Int32, [$asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.IO.Stream")], []), 
      CRC32_GetCrc32AndCopy
    );

    $.Method({Static:false, Public:false}, "gf2_matrix_square", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$.UInt32])], []), 
      CRC32_gf2_matrix_square
    );

    $.Method({Static:false, Public:false}, "gf2_matrix_times", 
      new JSIL.MethodSignature($.UInt32, [$jsilcore.TypeRef("System.Array", [$.UInt32]), $.UInt32], []), 
      CRC32_gf2_matrix_times
    );

    $.Method({Static:false, Public:true }, "Reset", 
      new JSIL.MethodSignature(null, [], []), 
      CRC32_Reset
    );

    $.Method({Static:true , Public:false}, "ReverseBits", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32], []), 
      CRC32_ReverseBits$03
    );

    $.Method({Static:true , Public:false}, "ReverseBits", 
      new JSIL.MethodSignature($.Byte, [$.Byte], []), 
      CRC32_ReverseBits$04
    );

    $.Method({Static:false, Public:true }, "SlurpBlock", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], []), 
      CRC32_SlurpBlock
    );

    $.Method({Static:false, Public:true }, "UpdateCRC", 
      new JSIL.MethodSignature(null, [$.Byte], []), 
      CRC32_UpdateCRC$05
    );

    $.Method({Static:false, Public:true }, "UpdateCRC", 
      new JSIL.MethodSignature(null, [$.Byte, $.Int32], []), 
      CRC32_UpdateCRC$06
    );

    $.Constant({Static:true , Public:false}, "BUFFER_SIZE", 8192); 
    $.Field({Static:false, Public:false}, "dwPolynomial", $.UInt32); 
    $.Field({Static:false, Public:false}, "_TotalBytesRead", $.Int64); 
    $.Field({Static:false, Public:false}, "reverseBits", $.Boolean); 
    $.Field({Static:false, Public:false}, "crc32Table", $jsilcore.TypeRef("System.Array", [$.UInt32])); 
    $.Field({Static:false, Public:false}, "_register", $.UInt32); 
    $.Property({Static:false, Public:true }, "TotalBytesRead", $.Int64);

    $.Property({Static:false, Public:true }, "Crc32Result", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.InteropServices.ClassInterfaceAttribute"), function () { return [$asm09.System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch]; })
    .Attribute($asm09.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["ebc25cf6-9120-4283-b972-0e5520d0000C"]; })
    .Attribute($asm09.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; });

})();

/* class Ionic.Crc.CrcCalculatorStream */ 

(function CrcCalculatorStream$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Int64)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.IO.Stream)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.ArgumentException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.Ionic.Crc.CRC32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm09.System.Byte))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.IO.SeekOrigin)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm09.TypeRef("System.Boolean"), $asm09.TypeRef("System.Int64"), 
        $asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Crc.CRC32")
      ], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.ArgumentException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Crc.CRC32"), []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.NotSupportedException"), []))) ();
  };

  function CrcCalculatorStream__ctor$00 (stream) {
    $S00().Call($thisType.prototype, "_ctor", null, this, true, $thisType.UnsetLengthLimit, stream, null);
  };

  function CrcCalculatorStream__ctor$01 (stream, leaveOpen) {
    $S00().Call($thisType.prototype, "_ctor", null, this, leaveOpen, $thisType.UnsetLengthLimit, stream, null);
  };

  function CrcCalculatorStream__ctor$02 (stream, length) {
    $S00().Call($thisType.prototype, "_ctor", null, this, true, length, stream, null);
    if (!$T00().op_GreaterThanOrEqual(
        length, 
        $T00().Create(0, 0, 0)
      )) {
      throw $S01().Construct("length");
    }
  };

  function CrcCalculatorStream__ctor$03 (stream, length, leaveOpen) {
    $S00().Call($thisType.prototype, "_ctor", null, this, leaveOpen, length, stream, null);
    if (!$T00().op_GreaterThanOrEqual(
        length, 
        $T00().Create(0, 0, 0)
      )) {
      throw $S01().Construct("length");
    }
  };

  function CrcCalculatorStream__ctor$04 (stream, length, leaveOpen, crc32) {
    $S00().Call($thisType.prototype, "_ctor", null, this, leaveOpen, length, stream, crc32);
    if (!$T00().op_GreaterThanOrEqual(
        length, 
        $T00().Create(0, 0, 0)
      )) {
      throw $S01().Construct("length");
    }
  };

  function CrcCalculatorStream__ctor$05 (leaveOpen, length, stream, crc32) {
    this._lengthLimit = $T00().Create(16777117, 16777215, 65535);
    $T01().prototype._ctor.call(this);
    this._innerStream = stream;
    this._Crc32 = JSIL.Coalesce(crc32, $S02().Construct());
    this._lengthLimit = length;
    this._leaveOpen = leaveOpen;
  };

  function CrcCalculatorStream_Close () {
    $T01().prototype.Close.call(this);
    if (!this._leaveOpen) {
      this._innerStream.Close();
    }
  };

  function CrcCalculatorStream_Flush () {
    this._innerStream.Flush();
  };

  function CrcCalculatorStream_get_CanRead () {
    return this._innerStream.get_CanRead();
  };

  function CrcCalculatorStream_get_CanSeek () {
    return false;
  };

  function CrcCalculatorStream_get_CanWrite () {
    return this._innerStream.get_CanWrite();
  };

  function CrcCalculatorStream_get_Crc () {
    return this._Crc32.get_Crc32Result();
  };

  function CrcCalculatorStream_get_LeaveOpen () {
    return this._leaveOpen;
  };

  function CrcCalculatorStream_get_Length () {
    if (!$T00().op_Inequality(this._lengthLimit, $thisType.UnsetLengthLimit)) {
      return this._innerStream.get_Length();
    }
    return this._lengthLimit;
  };

  function CrcCalculatorStream_get_Position () {
    return this._Crc32.get_TotalBytesRead();
  };

  function CrcCalculatorStream_get_TotalBytesSlurped () {
    return this._Crc32.get_TotalBytesRead();
  };

  function CrcCalculatorStream_Read (buffer, offset, count) {
    var bytesToRead = count;
    if (!$T00().op_Equality(this._lengthLimit, $thisType.UnsetLengthLimit)) {
      if (!$T00().op_LessThan(this._Crc32.get_TotalBytesRead(), this._lengthLimit)) {
        return 0;
      }
      var bytesRemaining = $T00().op_Subtraction(this._lengthLimit, this._Crc32.get_TotalBytesRead());
      if (!$T00().op_GreaterThanOrEqual(
          bytesRemaining, 
          $T00().FromNumber(count)
        )) {
        bytesToRead = (bytesRemaining).ToNumber(4294967295, true);
      }
    }
    var i = this._innerStream.Read(buffer, offset, bytesToRead);
    if (i > 0) {
      this._Crc32.SlurpBlock(buffer, offset, i);
    }
    return i;
  };

  function CrcCalculatorStream_Seek (offset, origin) {
    throw $S03().Construct();
  };

  function CrcCalculatorStream_set_LeaveOpen (value) {
    this._leaveOpen = value;
  };

  function CrcCalculatorStream_set_Position (value) {
    throw $S03().Construct();
  };

  function CrcCalculatorStream_SetLength (value) {
    throw $S03().Construct();
  };

  function CrcCalculatorStream_System_IDisposable_Dispose () {
    this.Close();
  };

  function CrcCalculatorStream_Write (buffer, offset, count) {
    if (count > 0) {
      this._Crc32.SlurpBlock(buffer, offset, count);
    }
    this._innerStream.Write(buffer, offset, count);
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.IO.Stream"), 
      Name: "Ionic.Crc.CrcCalculatorStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream")], []), 
      CrcCalculatorStream__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $.Boolean], []), 
      CrcCalculatorStream__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $.Int64], []), 
      CrcCalculatorStream__ctor$02
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $.Int64, 
          $.Boolean
        ], []), 
      CrcCalculatorStream__ctor$03
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $.Int64, 
          $.Boolean, $asm0A.TypeRef("Ionic.Crc.CRC32")
        ], []), 
      CrcCalculatorStream__ctor$04
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Int64, 
          $asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Crc.CRC32")
        ], []), 
      CrcCalculatorStream__ctor$05
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], []), 
      CrcCalculatorStream_Close
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], []), 
      CrcCalculatorStream_Flush
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      CrcCalculatorStream_get_CanRead
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      CrcCalculatorStream_get_CanSeek
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      CrcCalculatorStream_get_CanWrite
    );

    $.Method({Static:false, Public:true }, "get_Crc", 
      new JSIL.MethodSignature($.Int32, [], []), 
      CrcCalculatorStream_get_Crc
    );

    $.Method({Static:false, Public:true }, "get_LeaveOpen", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      CrcCalculatorStream_get_LeaveOpen
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], []), 
      CrcCalculatorStream_get_Length
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Position", 
      new JSIL.MethodSignature($.Int64, [], []), 
      CrcCalculatorStream_get_Position
    );

    $.Method({Static:false, Public:true }, "get_TotalBytesSlurped", 
      new JSIL.MethodSignature($.Int64, [], []), 
      CrcCalculatorStream_get_TotalBytesSlurped
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], []), 
      CrcCalculatorStream_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm09.TypeRef("System.IO.SeekOrigin")], []), 
      CrcCalculatorStream_Seek
    );

    $.Method({Static:false, Public:true }, "set_LeaveOpen", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      CrcCalculatorStream_set_LeaveOpen
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$.Int64], []), 
      CrcCalculatorStream_set_Position
    );

    $.Method({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int64], []), 
      CrcCalculatorStream_SetLength
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], []), 
      CrcCalculatorStream_System_IDisposable_Dispose
    )
      .Overrides(0, "Dispose");

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], []), 
      CrcCalculatorStream_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "UnsetLengthLimit", $.Int64, function ($pi) {
        return $asm09.System.Int64.FromNumber(-99);
      }); 
    $.Field({Static:false, Public:false}, "_innerStream", $asm09.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "_Crc32", $asm0A.TypeRef("Ionic.Crc.CRC32")); 
    $.Field({Static:false, Public:false}, "_lengthLimit", $.Int64); 
    $.Field({Static:false, Public:false}, "_leaveOpen", $.Boolean); 
    function CrcCalculatorStream__cctor () {
      $thisType.UnsetLengthLimit = $T00().Create(16777117, 16777215, 65535);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      CrcCalculatorStream__cctor
    );

    $.Property({Static:false, Public:true }, "TotalBytesSlurped", $.Int64);

    $.Property({Static:false, Public:true }, "Crc", $.Int32);

    $.Property({Static:false, Public:true }, "LeaveOpen", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
      /* 1 */ $asm09.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Ionic.Zlib");
/* enum Ionic.Zlib.BlockState */ 

JSIL.MakeEnum(
  "Ionic.Zlib.BlockState", false, {
    NeedMore: 0, 
    BlockDone: 1, 
    FinishStarted: 2, 
    FinishDone: 3
  }, false
);

/* enum Ionic.Zlib.DeflateFlavor */ 

JSIL.MakeEnum(
  "Ionic.Zlib.DeflateFlavor", false, {
    Store: 0, 
    Fast: 1, 
    Slow: 2
  }, false
);

/* class Ionic.Zlib.DeflateManager */ 

(function DeflateManager$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Ionic.Zlib.InternalConstants)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.Ionic.Zlib.Tree)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Int16)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.SByte)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Array)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibCodec)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm09.System.Int16))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0A.Ionic.Zlib.DeflateManager_Config)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0A.Ionic.Zlib.StaticTree)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm09.System.SByte))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionLevel)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm09.System.Byte)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm09.System.UInt32)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm09.System.Int64)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0A.Ionic.Zlib.FlushType)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize(System.Array.Of($asm09.System.Byte))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibException)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0A.Ionic.Zlib.Adler)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0A.Ionic.Zlib.BlockState)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionStrategy)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0A.Ionic.Zlib.DeflateManager_CompressFunc)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm09.TypeRef("System.Array"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Array"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Int32")
      ], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.ZlibException"), [$asm09.TypeRef("System.String")]))) ();
  };

  function DeflateManager__ctor () {
    this.treeLiterals = new ($T02())();
    this.treeDistances = new ($T02())();
    this.treeBitLengths = new ($T02())();
    this.bl_count = JSIL.Array.New($T03(), (($T01().MAX_BITS + 1) | 0));
    this.heap = JSIL.Array.New($T04(), ((((2 * $T01().L_CODES) | 0) + 1) | 0));
    this.depth = JSIL.Array.New($T05(), ((((2 * $T01().L_CODES) | 0) + 1) | 0));
    this._WantRfc1950HeaderBytes = true;
    this.dyn_ltree = JSIL.Array.New($T03(), (($thisType.HEAP_SIZE * 2) | 0));
    this.dyn_dtree = JSIL.Array.New($T03(), ((((((2 * $T01().D_CODES) | 0) + 1) | 0) * 2) | 0));
    this.bl_tree = JSIL.Array.New($T03(), ((((((2 * $T01().BL_CODES) | 0) + 1) | 0) * 2) | 0));
  };

  function DeflateManager__fillWindow () {

  $loop0: 
    while (true) {
      var more = ((((this.window_size - this.lookahead) | 0) - this.strstart) | 0);
      if (!((more !== 0) || 
          (this.strstart !== 0) || (this.lookahead !== 0))) {
        more = this.w_size;
      } else if (more === -1) {
        more = ((more - 1) | 0);
      } else if (this.strstart >= ((((this.w_size + this.w_size) | 0) - $thisType.MIN_LOOKAHEAD) | 0)) {
        $S00().CallStatic($T06(), "Copy", null, 
          this.window, 
          this.w_size, 
          this.window, 
          0, 
          this.w_size
        );
        this.match_start = ((this.match_start - this.w_size) | 0);
        this.strstart = ((this.strstart - this.w_size) | 0);
        this.block_start = ((this.block_start - this.w_size) | 0);
        var i = this.hash_size;
        var p = i;

        do {
          var j = (this.head[(p = ((p - 1) | 0))] & 65535);
          this.head[p] = $T03().$Cast(((j >= this.w_size) ? ((j - this.w_size) | 0) : 0));
        } while ((i = ((i - 1) | 0)) !== 0);
        i = this.w_size;
        p = i;

        do {
          j = (this.prev[(p = ((p - 1) | 0))] & 65535);
          this.prev[p] = $T03().$Cast(((j >= this.w_size) ? ((j - this.w_size) | 0) : 0));
        } while ((i = ((i - 1) | 0)) !== 0);
        more = ((more + this.w_size) | 0);
      }
      if (this._codec.AvailableBytesIn === 0) {
        break $loop0;
      }
      i = this._codec.read_buf(this.window, ((this.strstart + this.lookahead) | 0), more);
      this.lookahead = ((this.lookahead + i) | 0);
      if (this.lookahead >= $thisType.MIN_MATCH) {
        this.ins_h = (this.window[this.strstart] & 255);
        this.ins_h = (((this.ins_h << this.hash_shift) ^ (this.window[((this.strstart + 1) | 0)] & 255)) & this.hash_mask);
      }
      if (!((this.lookahead < $thisType.MIN_LOOKAHEAD) && (this._codec.AvailableBytesIn !== 0))) {
        return;
      }
    }
  };

  function DeflateManager__InitializeBlocks () {

    for (var i = 0; i < $T01().L_CODES; i = ((i + 1) | 0)) {
      this.dyn_ltree[((i * 2) | 0)] = 0;
    }

    for (var j = 0; j < $T01().D_CODES; j = ((j + 1) | 0)) {
      this.dyn_dtree[((j * 2) | 0)] = 0;
    }

    for (var k = 0; k < $T01().BL_CODES; k = ((k + 1) | 0)) {
      this.bl_tree[((k * 2) | 0)] = 0;
    }
    this.dyn_ltree[(($thisType.END_BLOCK * 2) | 0)] = 1;
    this.opt_len = (this.static_len = 0);
    this.last_lit = (this.matches = 0);
  };

  function DeflateManager__InitializeLazyMatch () {
    this.window_size = ((2 * this.w_size) | 0);
    JSIL.Array.Erase(this.head, $T03().__Type__, 0, this.hash_size);
    this.config = $T0A().Lookup(this.compressionLevel);
    this.SetDeflater();
    this.strstart = 0;
    this.block_start = 0;
    this.lookahead = 0;
    this.match_length = (this.prev_length = (($thisType.MIN_MATCH - 1) | 0));
    this.match_available = 0;
    this.ins_h = 0;
  };

  function DeflateManager__InitializeTreeData () {
    this.treeLiterals.dyn_tree = this.dyn_ltree;
    this.treeLiterals.staticTree = $T0B().Literals;
    this.treeDistances.dyn_tree = this.dyn_dtree;
    this.treeDistances.staticTree = $T0B().Distances;
    this.treeBitLengths.dyn_tree = this.bl_tree;
    this.treeBitLengths.staticTree = $T0B().BitLengths;
    this.bi_buf = 0;
    this.bi_valid = 0;
    this.last_eob_len = 8;
    this._InitializeBlocks();
  };

  function DeflateManager__IsSmaller (tree, n, m, depth) {
    var tn2 = tree[((n * 2) | 0)];
    var tm2 = tree[((m * 2) | 0)];
    return ((tn2 < tm2) || ((tn2 === tm2) && 
        (depth[n] <= depth[m])));
  };

  function DeflateManager__tr_align () {
    this.send_bits(($thisType.STATIC_TREES << 1), 3);
    this.send_code($thisType.END_BLOCK, $T0B().lengthAndLiteralsTreeCodes);
    this.bi_flush();
    if (((((((1 + this.last_eob_len) | 0) + 10) | 0) - this.bi_valid) | 0) < 9) {
      this.send_bits(($thisType.STATIC_TREES << 1), 3);
      this.send_code($thisType.END_BLOCK, $T0B().lengthAndLiteralsTreeCodes);
      this.bi_flush();
    }
    this.last_eob_len = 7;
  };

  function DeflateManager__tr_flush_block (buf, stored_len, eof) {
    var max_blindex = 0;
    if (this.compressionLevel > $T0E().Level0) {
      if (this.data_type === $thisType.Z_UNKNOWN) {
        this.set_data_type();
      }
      this.treeLiterals.build_tree(this);
      this.treeDistances.build_tree(this);
      max_blindex = this.build_bl_tree();
      var opt_lenb = (((((this.opt_len + 3) | 0) + 7) | 0) >> 3);
      var static_lenb = (((((this.static_len + 3) | 0) + 7) | 0) >> 3);
      if (static_lenb <= opt_lenb) {
        opt_lenb = static_lenb;
      }
    } else {
      static_lenb = (opt_lenb = ((stored_len + 5) | 0));
    }
    if (!((((stored_len + 4) | 0) > opt_lenb) || (buf === -1))) {
      this._tr_stored_block(buf, stored_len, eof);
    } else if (static_lenb === opt_lenb) {
      this.send_bits(((($thisType.STATIC_TREES << 1) + (eof ? 1 : 0)) | 0), 3);
      this.send_compressed_block($T0B().lengthAndLiteralsTreeCodes, $T0B().distTreeCodes);
    } else {
      this.send_bits(((($thisType.DYN_TREES << 1) + (eof ? 1 : 0)) | 0), 3);
      this.send_all_trees(((this.treeLiterals.max_code + 1) | 0), ((this.treeDistances.max_code + 1) | 0), ((max_blindex + 1) | 0));
      this.send_compressed_block(this.dyn_ltree, this.dyn_dtree);
    }
    this._InitializeBlocks();
    if (eof) {
      this.bi_windup();
    }
  };

  function DeflateManager__tr_stored_block (buf, stored_len, eof) {
    this.send_bits(((($thisType.STORED_BLOCK << 1) + (eof ? 1 : 0)) | 0), 3);
    this.copy_block(buf, stored_len, true);
  };

  function DeflateManager__tr_tally (dist, lc) {
    this.pending[((this._distanceOffset + ((this.last_lit * 2) | 0)) | 0)] = $T0F().$Cast(($T10().$Cast(dist) >>> 8));
    this.pending[((((this._distanceOffset + ((this.last_lit * 2) | 0)) | 0) + 1) | 0)] = $T0F().$Cast(dist);
    this.pending[((this._lengthOffset + this.last_lit) | 0)] = $T0F().$Cast(lc);
    this.last_lit = ((this.last_lit + 1) | 0);
    if (dist === 0) {
      var expr_69_cp_0 = this.dyn_ltree;
      var expr_69_cp_1 = ((lc * 2) | 0);
      expr_69_cp_0[expr_69_cp_1] = ((expr_69_cp_0[expr_69_cp_1] + 1) | 0);
    } else {
      this.matches = ((this.matches + 1) | 0);
      dist = ((dist - 1) | 0);
      var expr_A8_cp_0 = this.dyn_ltree;
      var expr_A8_cp_1 = (((((($T02().LengthCode[lc] + $T01().LITERALS) | 0) + 1) | 0) * 2) | 0);
      expr_A8_cp_0[expr_A8_cp_1] = ((expr_A8_cp_0[expr_A8_cp_1] + 1) | 0);
      var expr_C9_cp_0 = this.dyn_dtree;
      var expr_C9_cp_1 = (($T02().DistanceCode(dist) * 2) | 0);
      expr_C9_cp_0[expr_C9_cp_1] = ((expr_C9_cp_0[expr_C9_cp_1] + 1) | 0);
    }
    if (!(((this.last_lit & 8191) !== 0) || (this.compressionLevel <= $T0E().Level2))) {
      var out_length = (this.last_lit << 3);

      for (var dcode = 0; dcode < $T01().D_CODES; dcode = ((dcode + 1) | 0)) {
        out_length = ($T11().op_Addition(
            $T11().FromNumber(out_length), 
            $T11().op_Multiplication(
              $T11().FromNumber(this.dyn_dtree[((dcode * 2) | 0)]), 
              $T11().op_Addition(
                $T11().Create(5, 0, 0), 
                $T11().FromNumber($T02().ExtraDistanceBits[dcode])
              )
            )
          )).ToNumber(4294967295, true);
      }
      out_length = (out_length >> 3);
      if (!((this.matches >= ((this.last_lit / 2) | 0)) || (out_length >= ((((this.strstart - this.block_start) | 0) / 2) | 0)))) {
        return true;
      }
    }
    return ((this.last_lit === ((this.lit_bufsize - 1) | 0)) || (this.last_lit === this.lit_bufsize));
  };

  function DeflateManager_bi_flush () {
    var $temp00, $temp01, $temp02;
    if (this.bi_valid === 16) {
      this.pending[($temp00 = this.pendingCount, 
        this.pendingCount = ((this.pendingCount + 1) | 0), 
        $temp00)] = $T0F().$Cast(this.bi_buf);
      this.pending[($temp01 = this.pendingCount, 
        this.pendingCount = ((this.pendingCount + 1) | 0), 
        $temp01)] = $T0F().$Cast((this.bi_buf >> 8));
      this.bi_buf = 0;
      this.bi_valid = 0;
      return;
    }
    if (this.bi_valid >= 8) {
      this.pending[($temp02 = this.pendingCount, 
        this.pendingCount = ((this.pendingCount + 1) | 0), 
        $temp02)] = $T0F().$Cast(this.bi_buf);
      this.bi_buf = $T03().$Cast((this.bi_buf >> 8));
      this.bi_valid = ((this.bi_valid - 8) | 0);
    }
  };

  function DeflateManager_bi_windup () {
    var $temp00, $temp01, $temp02;
    if (this.bi_valid > 8) {
      this.pending[($temp00 = this.pendingCount, 
        this.pendingCount = ((this.pendingCount + 1) | 0), 
        $temp00)] = $T0F().$Cast(this.bi_buf);
      this.pending[($temp01 = this.pendingCount, 
        this.pendingCount = ((this.pendingCount + 1) | 0), 
        $temp01)] = $T0F().$Cast((this.bi_buf >> 8));
    } else if (this.bi_valid > 0) {
      this.pending[($temp02 = this.pendingCount, 
        this.pendingCount = ((this.pendingCount + 1) | 0), 
        $temp02)] = $T0F().$Cast(this.bi_buf);
    }
    this.bi_buf = 0;
    this.bi_valid = 0;
  };

  function DeflateManager_build_bl_tree () {
    this.scan_tree(this.dyn_ltree, this.treeLiterals.max_code);
    this.scan_tree(this.dyn_dtree, this.treeDistances.max_code);
    this.treeBitLengths.build_tree(this);

    for (var max_blindex = (($T01().BL_CODES - 1) | 0); !((max_blindex < 3) || (this.bl_tree[(((($T02().bl_order[max_blindex] * 2) | 0) + 1) | 0)] !== 0)); max_blindex = ((max_blindex - 1) | 0)) {
    }
    this.opt_len = ((this.opt_len + ((((((((3 * ((max_blindex + 1) | 0)) | 0) + 5) | 0) + 5) | 0) + 4) | 0)) | 0);
    return max_blindex;
  };

  function DeflateManager_copy_block (buf, len, header) {
    var $temp00, $temp01, $temp02, $temp03;
    this.bi_windup();
    this.last_eob_len = 8;
    if (header) {
      this.pending[($temp00 = this.pendingCount, 
        this.pendingCount = ((this.pendingCount + 1) | 0), 
        $temp00)] = $T0F().$Cast(len);
      this.pending[($temp01 = this.pendingCount, 
        this.pendingCount = ((this.pendingCount + 1) | 0), 
        $temp01)] = $T0F().$Cast((len >> 8));
      this.pending[($temp02 = this.pendingCount, 
        this.pendingCount = ((this.pendingCount + 1) | 0), 
        $temp02)] = $T0F().$Cast((~$T0F().$Cast(len) | 0));
      this.pending[($temp03 = this.pendingCount, 
        this.pendingCount = ((this.pendingCount + 1) | 0), 
        $temp03)] = $T0F().$Cast(((~len | 0) >> 8));
    }
    this.put_bytes(this.window, buf, len);
  };

  function DeflateManager_Deflate (flush) {
    var $temp00, $temp01, $temp02, $temp03, $temp04, $temp05, $temp06, $temp07, $temp08, $temp09;
    if (!(!((this._codec.OutputBuffer === null) || 
          ((this._codec.InputBuffer === null) && 
            (this._codec.AvailableBytesIn !== 0))) && ((this.status !== $thisType.FINISH_STATE) || 
          (flush === $T12().Finish)))) {
      this._codec.Message = $thisType._ErrorMessage[4];
      throw $S01().Construct($T00().Format("Something is fishy. [{0}]", this._codec.Message));
    }
    if (this._codec.AvailableBytesOut === 0) {
      this._codec.Message = $thisType._ErrorMessage[7];
      throw $S01().Construct("OutputBuffer is full (AvailableBytesOut == 0)");
    }
    var old_flush = this.last_flush;
    this.last_flush = flush.valueOf();
    if (this.status === $thisType.INIT_STATE) {
      var header = ((($thisType.Z_DEFLATED + (((this.w_bits - 8) | 0) << 4)) | 0) << 8);
      var level_flags = (((this.compressionLevel - $T0E().Level1) & 255) >> 1);
      if (level_flags > 3) {
        level_flags = 3;
      }
      header = (header | (level_flags << 6));
      if (this.strstart !== 0) {
        header = (header | $thisType.PRESET_DICT);
      }
      header = ((header + ((31 - ((header % 31) | 0)) | 0)) | 0);
      this.status = $thisType.BUSY_STATE;
      this.pending[($temp00 = this.pendingCount, 
        this.pendingCount = ((this.pendingCount + 1) | 0), 
        $temp00)] = $T0F().$Cast((header >> 8));
      this.pending[($temp01 = this.pendingCount, 
        this.pendingCount = ((this.pendingCount + 1) | 0), 
        $temp01)] = $T0F().$Cast(header);
      if (this.strstart !== 0) {
        this.pending[($temp02 = this.pendingCount, 
          this.pendingCount = ((this.pendingCount + 1) | 0), 
          $temp02)] = $T0F().$Cast(((this._codec._Adler32 & 4278190080) >>> 24));
        this.pending[($temp03 = this.pendingCount, 
          this.pendingCount = ((this.pendingCount + 1) | 0), 
          $temp03)] = $T0F().$Cast(((this._codec._Adler32 & 16711680) >>> 16));
        this.pending[($temp04 = this.pendingCount, 
          this.pendingCount = ((this.pendingCount + 1) | 0), 
          $temp04)] = $T0F().$Cast(((this._codec._Adler32 & 65280) >>> 8));
        this.pending[($temp05 = this.pendingCount, 
          this.pendingCount = ((this.pendingCount + 1) | 0), 
          $temp05)] = $T0F().$Cast((this._codec._Adler32 & 255));
      }
      this._codec._Adler32 = $T15().Adler32(0, null, 0, 0);
    }
    if (this.pendingCount !== 0) {
      this._codec.flush_pending();
      if (this._codec.AvailableBytesOut === 0) {
        this.last_flush = -1;
        return 0;
      }
    } else if (!((this._codec.AvailableBytesIn !== 0) || 
        (flush > $T12().$Cast(old_flush)) || (flush === $T12().Finish))) {
      return 0;
    }
    if (!((this.status !== $thisType.FINISH_STATE) || (this._codec.AvailableBytesIn === 0))) {
      this._codec.Message = $thisType._ErrorMessage[7];
      throw $S01().Construct("status == FINISH_STATE && _codec.AvailableBytesIn != 0");
    }
    if (!((this._codec.AvailableBytesIn === 0) && 
        (this.lookahead === 0) && ((flush.valueOf() === 0) || 
          (this.status === $thisType.FINISH_STATE)))) {
      var bstate = this.DeflateFunction(flush);
      if (!((bstate !== $T16().FinishStarted) && (bstate !== $T16().FinishDone))) {
        this.status = $thisType.FINISH_STATE;
      }
      if (!((bstate.valueOf() !== 0) && (bstate !== $T16().FinishStarted))) {
        if (this._codec.AvailableBytesOut === 0) {
          this.last_flush = -1;
        }
        return 0;
      }
      if (bstate === $T16().BlockDone) {
        if (flush === $T12().Partial) {
          this._tr_align();
        } else {
          this._tr_stored_block(0, 0, false);
          if (flush === $T12().Full) {

            for (var i = 0; i < this.hash_size; i = ((i + 1) | 0)) {
              this.head[i] = 0;
            }
          }
        }
        this._codec.flush_pending();
        if (this._codec.AvailableBytesOut === 0) {
          this.last_flush = -1;
          return 0;
        }
      }
    }
    if (flush !== $T12().Finish) {
      return 0;
    }
    if (!(this.get_WantRfc1950HeaderBytes() && !this.Rfc1950BytesEmitted)) {
      return 1;
    }
    this.pending[($temp06 = this.pendingCount, 
      this.pendingCount = ((this.pendingCount + 1) | 0), 
      $temp06)] = $T0F().$Cast(((this._codec._Adler32 & 4278190080) >>> 24));
    this.pending[($temp07 = this.pendingCount, 
      this.pendingCount = ((this.pendingCount + 1) | 0), 
      $temp07)] = $T0F().$Cast(((this._codec._Adler32 & 16711680) >>> 16));
    this.pending[($temp08 = this.pendingCount, 
      this.pendingCount = ((this.pendingCount + 1) | 0), 
      $temp08)] = $T0F().$Cast(((this._codec._Adler32 & 65280) >>> 8));
    this.pending[($temp09 = this.pendingCount, 
      this.pendingCount = ((this.pendingCount + 1) | 0), 
      $temp09)] = $T0F().$Cast((this._codec._Adler32 & 255));
    this._codec.flush_pending();
    this.Rfc1950BytesEmitted = true;
    if (this.pendingCount === 0) {
      return 1;
    }
    return 0;
  };

  function DeflateManager_DeflateFast (flush) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var hash_head = 0;

        $loop0: 
          while (true) {
            if (this.lookahead < $thisType.MIN_LOOKAHEAD) {
              this._fillWindow();
              if (!((this.lookahead >= $thisType.MIN_LOOKAHEAD) || (flush.valueOf() !== 0))) {
                break $loop0;
              }
              if (this.lookahead === 0) {
                $label0 = 1 /* goto IL_2EA */ ;
                continue $labelgroup0;
              }
            }
            if (this.lookahead >= $thisType.MIN_MATCH) {
              this.ins_h = (((this.ins_h << this.hash_shift) ^ (this.window[((this.strstart + (($thisType.MIN_MATCH - 1) | 0)) | 0)] & 255)) & this.hash_mask);
              hash_head = (this.head[this.ins_h] & 65535);
              this.prev[(this.strstart & this.w_mask)] = this.head[this.ins_h];
              this.head[this.ins_h] = $T03().$Cast(this.strstart);
            }
            if (!($T11().op_Equality(
                  $T11().FromNumber(hash_head), 
                  $T11().Create(0, 0, 0)
                ) || 
                (((((this.strstart - hash_head) | 0) & 65535) > ((this.w_size - $thisType.MIN_LOOKAHEAD) | 0))).valueOf() || (this.compressionStrategy === $T17().HuffmanOnly))) {
              this.match_length = this.longest_match(hash_head);
            }
            if (this.match_length >= $thisType.MIN_MATCH) {
              var bflush = this._tr_tally(((this.strstart - this.match_start) | 0), ((this.match_length - $thisType.MIN_MATCH) | 0));
              this.lookahead = ((this.lookahead - this.match_length) | 0);
              if (!((this.match_length > this.config.MaxLazy) || (this.lookahead < $thisType.MIN_MATCH))) {
                this.match_length = ((this.match_length - 1) | 0);

                do {
                  this.strstart = ((this.strstart + 1) | 0);
                  this.ins_h = (((this.ins_h << this.hash_shift) ^ (this.window[((this.strstart + (($thisType.MIN_MATCH - 1) | 0)) | 0)] & 255)) & this.hash_mask);
                  hash_head = (this.head[this.ins_h] & 65535);
                  this.prev[(this.strstart & this.w_mask)] = this.head[this.ins_h];
                  this.head[this.ins_h] = $T03().$Cast(this.strstart);
                } while ((this.match_length = ((this.match_length - 1) | 0)) !== 0);
                this.strstart = ((this.strstart + 1) | 0);
              } else {
                this.strstart = ((this.strstart + this.match_length) | 0);
                this.match_length = 0;
                this.ins_h = (this.window[this.strstart] & 255);
                this.ins_h = (((this.ins_h << this.hash_shift) ^ (this.window[((this.strstart + 1) | 0)] & 255)) & this.hash_mask);
              }
            } else {
              bflush = this._tr_tally(0, (this.window[this.strstart] & 255));
              this.lookahead = ((this.lookahead - 1) | 0);
              this.strstart = ((this.strstart + 1) | 0);
            }
            if (bflush) {
              this.flush_block_only(false);
              if (this._codec.AvailableBytesOut === 0) {
                return $T16().NeedMore;
              }
            }
          }
          return $T16().NeedMore;

          $label0 = 1 /* goto IL_2EA */ ;
          continue $labelgroup0;
        case 1: /* IL_2EA */ 
          this.flush_block_only((flush === $T12().Finish));
          if (this._codec.AvailableBytesOut === 0) {
            if (flush === $T12().Finish) {
              return $T16().FinishStarted;
            }
            return $T16().NeedMore;
          } else {
            if (flush !== $T12().Finish) {
              return $T16().BlockDone;
            }
            return $T16().FinishDone;
          }

          break $labelgroup0;
      }
    }
  };

  function DeflateManager_DeflateNone (flush) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var max_block_size = 65535;
          if (max_block_size > ((this.pending.length - 5) | 0)) {
            max_block_size = ((this.pending.length - 5) | 0);
          }

        $loop0: 
          while (true) {
            if (this.lookahead <= 1) {
              this._fillWindow();
              if (!((this.lookahead !== 0) || (flush.valueOf() !== 0))) {
                break $loop0;
              }
              if (this.lookahead === 0) {
                $label0 = 1 /* goto IL_DB */ ;
                continue $labelgroup0;
              }
            }
            this.strstart = ((this.strstart + this.lookahead) | 0);
            this.lookahead = 0;
            var max_start = ((this.block_start + max_block_size) | 0);
            if (!((this.strstart !== 0) && (this.strstart < max_start))) {
              this.lookahead = ((this.strstart - max_start) | 0);
              this.strstart = max_start;
              this.flush_block_only(false);
              if (this._codec.AvailableBytesOut === 0) {
                return $T16().NeedMore;
              }
            }
            if (((this.strstart - this.block_start) | 0) >= ((this.w_size - $thisType.MIN_LOOKAHEAD) | 0)) {
              this.flush_block_only(false);
              if (this._codec.AvailableBytesOut === 0) {
                return $T16().NeedMore;
              }
            }
          }
          return $T16().NeedMore;

          $label0 = 1 /* goto IL_DB */ ;
          continue $labelgroup0;
        case 1: /* IL_DB */ 
          this.flush_block_only((flush === $T12().Finish));
          if (this._codec.AvailableBytesOut === 0) {
            if (flush !== $T12().Finish) {
              return $T16().NeedMore;
            }
            return $T16().FinishStarted;
          } else {
            if (flush !== $T12().Finish) {
              return $T16().BlockDone;
            }
            return $T16().FinishDone;
          }

          break $labelgroup0;
      }
    }
  };

  function DeflateManager_DeflateSlow (flush) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var hash_head = 0;

        $loop0: 
          while (true) {
            if (this.lookahead < $thisType.MIN_LOOKAHEAD) {
              this._fillWindow();
              if (!((this.lookahead >= $thisType.MIN_LOOKAHEAD) || (flush.valueOf() !== 0))) {
                break $loop0;
              }
              if (this.lookahead === 0) {
                $label0 = 1 /* goto IL_365 */ ;
                continue $labelgroup0;
              }
            }
            if (this.lookahead >= $thisType.MIN_MATCH) {
              this.ins_h = (((this.ins_h << this.hash_shift) ^ (this.window[((this.strstart + (($thisType.MIN_MATCH - 1) | 0)) | 0)] & 255)) & this.hash_mask);
              hash_head = (this.head[this.ins_h] & 65535);
              this.prev[(this.strstart & this.w_mask)] = this.head[this.ins_h];
              this.head[this.ins_h] = $T03().$Cast(this.strstart);
            }
            this.prev_length = this.match_length;
            this.prev_match = this.match_start;
            this.match_length = (($thisType.MIN_MATCH - 1) | 0);
            if (!((hash_head === 0) || 
                (this.prev_length >= this.config.MaxLazy) || ((((this.strstart - hash_head) | 0) & 65535) > ((this.w_size - $thisType.MIN_LOOKAHEAD) | 0)))) {
              if (this.compressionStrategy !== $T17().HuffmanOnly) {
                this.match_length = this.longest_match(hash_head);
              }
              if (!((this.match_length > 5) || ((this.compressionStrategy !== $T17().Filtered) && 
                    ((this.match_length !== $thisType.MIN_MATCH) || 
                      (((this.strstart - this.match_start) | 0) <= 4096))))) {
                this.match_length = (($thisType.MIN_MATCH - 1) | 0);
              }
            }
            if (!((this.prev_length < $thisType.MIN_MATCH) || (this.match_length > this.prev_length))) {
              var max_insert = ((((this.strstart + this.lookahead) | 0) - $thisType.MIN_MATCH) | 0);
              var bflush = this._tr_tally(((((this.strstart - 1) | 0) - this.prev_match) | 0), ((this.prev_length - $thisType.MIN_MATCH) | 0));
              this.lookahead = ((this.lookahead - ((this.prev_length - 1) | 0)) | 0);
              this.prev_length = ((this.prev_length - 2) | 0);

              do {
                if ((this.strstart = ((this.strstart + 1) | 0)) <= max_insert) {
                  this.ins_h = (((this.ins_h << this.hash_shift) ^ (this.window[((this.strstart + (($thisType.MIN_MATCH - 1) | 0)) | 0)] & 255)) & this.hash_mask);
                  hash_head = (this.head[this.ins_h] & 65535);
                  this.prev[(this.strstart & this.w_mask)] = this.head[this.ins_h];
                  this.head[this.ins_h] = $T03().$Cast(this.strstart);
                }
              } while ((this.prev_length = ((this.prev_length - 1) | 0)) !== 0);
              this.match_available = 0;
              this.match_length = (($thisType.MIN_MATCH - 1) | 0);
              this.strstart = ((this.strstart + 1) | 0);
              if (bflush) {
                this.flush_block_only(false);
                if (this._codec.AvailableBytesOut === 0) {
                  return $T16().NeedMore;
                }
              }
            } else if (this.match_available !== 0) {
              bflush = this._tr_tally(0, (this.window[((this.strstart - 1) | 0)] & 255));
              if (bflush) {
                this.flush_block_only(false);
              }
              this.strstart = ((this.strstart + 1) | 0);
              this.lookahead = ((this.lookahead - 1) | 0);
              if (this._codec.AvailableBytesOut === 0) {
                return $T16().NeedMore;
              }
            } else {
              this.match_available = 1;
              this.strstart = ((this.strstart + 1) | 0);
              this.lookahead = ((this.lookahead - 1) | 0);
            }
          }
          return $T16().NeedMore;

          $label0 = 1 /* goto IL_365 */ ;
          continue $labelgroup0;
        case 1: /* IL_365 */ 
          if (this.match_available !== 0) {
            bflush = this._tr_tally(0, (this.window[((this.strstart - 1) | 0)] & 255));
            this.match_available = 0;
          }
          this.flush_block_only((flush === $T12().Finish));
          if (this._codec.AvailableBytesOut === 0) {
            if (flush === $T12().Finish) {
              return $T16().FinishStarted;
            }
            return $T16().NeedMore;
          } else {
            if (flush !== $T12().Finish) {
              return $T16().BlockDone;
            }
            return $T16().FinishDone;
          }

          break $labelgroup0;
      }
    }
  };

  function DeflateManager_End () {
    if (!((this.status === $thisType.INIT_STATE) || 
        (this.status === $thisType.BUSY_STATE) || (this.status === $thisType.FINISH_STATE))) {
      return -2;
    }
    this.pending = null;
    this.head = null;
    this.prev = null;
    this.window = null;
    if (this.status !== $thisType.BUSY_STATE) {
      return 0;
    }
    return -3;
  };

  function DeflateManager_flush_block_only (eof) {
    this._tr_flush_block(((this.block_start >= 0) ? this.block_start : -1), ((this.strstart - this.block_start) | 0), eof);
    this.block_start = this.strstart;
    this._codec.flush_pending();
  };

  function DeflateManager_get_WantRfc1950HeaderBytes () {
    return this._WantRfc1950HeaderBytes;
  };

  function DeflateManager_Initialize$00 (codec, level) {
    return this.Initialize(codec, level, 15);
  };

  function DeflateManager_Initialize$01 (codec, level, bits) {
    return this.Initialize(
      codec, 
      level, 
      bits, 
      $thisType.MEM_LEVEL_DEFAULT, 
      $T17().Default
    );
  };

  function DeflateManager_Initialize$02 (codec, level, bits, compressionStrategy) {
    return this.Initialize(
      codec, 
      level, 
      bits, 
      $thisType.MEM_LEVEL_DEFAULT, 
      compressionStrategy
    );
  };

  function DeflateManager_Initialize$03 (codec, level, windowBits, memLevel, strategy) {
    this._codec = codec;
    this._codec.Message = null;
    if (!((windowBits >= 9) && (windowBits <= 15))) {
      throw $S01().Construct("windowBits must be in the range 9..15.");
    }
    if (!((memLevel >= 1) && (memLevel <= $thisType.MEM_LEVEL_MAX))) {
      throw $S01().Construct($T00().Format("memLevel must be in the range 1.. {0}", $thisType.MEM_LEVEL_MAX));
    }
    this._codec.dstate = this;
    this.w_bits = windowBits;
    this.w_size = (1 << this.w_bits);
    this.w_mask = ((this.w_size - 1) | 0);
    this.hash_bits = ((memLevel + 7) | 0);
    this.hash_size = (1 << this.hash_bits);
    this.hash_mask = ((this.hash_size - 1) | 0);
    this.hash_shift = ((((((this.hash_bits + $thisType.MIN_MATCH) | 0) - 1) | 0) / $thisType.MIN_MATCH) | 0);
    this.window = JSIL.Array.New($T0F(), ((this.w_size * 2) | 0));
    this.prev = JSIL.Array.New($T03(), this.w_size);
    this.head = JSIL.Array.New($T03(), this.hash_size);
    this.lit_bufsize = (1 << ((memLevel + 6) | 0));
    this.pending = JSIL.Array.New($T0F(), ((this.lit_bufsize * 4) | 0));
    this._distanceOffset = this.lit_bufsize;
    this._lengthOffset = ((3 * this.lit_bufsize) | 0);
    this.compressionLevel = level;
    this.compressionStrategy = strategy;
    this.Reset();
    return 0;
  };

  function DeflateManager_longest_match (cur_match) {
    var chain_length = this.config.MaxChainLength;
    var scan = this.strstart;
    var best_len = this.prev_length;
    var niceLength = this.config.NiceLength;
    var strend = ((this.strstart + $thisType.MAX_MATCH) | 0);
    var scan_end = this.window[((((scan + best_len) | 0) - 1) | 0)];
    var scan_end2 = this.window[((scan + best_len) | 0)];
    if (this.prev_length >= this.config.GoodLength) {
      chain_length = (chain_length >> 2);
    }
    if (niceLength > this.lookahead) {
      niceLength = this.lookahead;
    }

  $loop0: 
    do {
      var match = cur_match;
      if (!((this.window[((match + best_len) | 0)] !== scan_end2) || 
          (this.window[((((match + best_len) | 0) - 1) | 0)] !== scan_end) || 
          (this.window[match] !== this.window[scan]) || (this.window[(match = ((match + 1) | 0))] !== this.window[((scan + 1) | 0)]))) {
        scan = ((scan + 2) | 0);

        for (match = ((match + 1) | 0); (this.window[(scan = ((scan + 1) | 0))] === this.window[(match = ((match + 1) | 0))]) && 
          (this.window[(scan = ((scan + 1) | 0))] === this.window[(match = ((match + 1) | 0))]) && 
          (this.window[(scan = ((scan + 1) | 0))] === this.window[(match = ((match + 1) | 0))]) && 
          (this.window[(scan = ((scan + 1) | 0))] === this.window[(match = ((match + 1) | 0))]) && 
          (this.window[(scan = ((scan + 1) | 0))] === this.window[(match = ((match + 1) | 0))]) && 
          (this.window[(scan = ((scan + 1) | 0))] === this.window[(match = ((match + 1) | 0))]) && 
          (this.window[(scan = ((scan + 1) | 0))] === this.window[(match = ((match + 1) | 0))]) && 
          (this.window[(scan = ((scan + 1) | 0))] === this.window[(match = ((match + 1) | 0))]) && (scan < strend); ) {
        }
        var len = (($thisType.MAX_MATCH - ((strend - scan) | 0)) | 0);
        scan = ((strend - $thisType.MAX_MATCH) | 0);
        if (len > best_len) {
          this.match_start = cur_match;
          best_len = len;
          if (len >= niceLength) {
            break $loop0;
          }
          scan_end = this.window[((((scan + best_len) | 0) - 1) | 0)];
          scan_end2 = this.window[((scan + best_len) | 0)];
        }
      }
    } while (((cur_match = (this.prev[(cur_match & this.w_mask)] & 65535)) > ((this.strstart > ((this.w_size - $thisType.MIN_LOOKAHEAD) | 0)) ? ((this.strstart - ((this.w_size - $thisType.MIN_LOOKAHEAD) | 0)) | 0) : 0)) && ((chain_length = ((chain_length - 1) | 0)) !== 0));
    if (best_len <= this.lookahead) {
      return best_len;
    }
    return this.lookahead;
  };

  function DeflateManager_pqdownheap (tree, k) {
    var v = this.heap[k];

  $loop0: 
    for (var i = (k << 1); i <= this.heap_len; i = (i << 1)) {
      if (!((i >= this.heap_len) || !$thisType._IsSmaller(tree, this.heap[((i + 1) | 0)], this.heap[i], this.depth))) {
        i = ((i + 1) | 0);
      }
      if ($thisType._IsSmaller(tree, v, this.heap[i], this.depth)) {
        break $loop0;
      }
      this.heap[k] = this.heap[i];
      k = i;
    }
    this.heap[k] = v;
  };

  function DeflateManager_put_bytes (p, start, len) {
    $S00().CallStatic($T06(), "Copy", null, 
      p, 
      start, 
      this.pending, 
      this.pendingCount, 
      len
    );
    this.pendingCount = ((this.pendingCount + len) | 0);
  };

  function DeflateManager_Reset () {
    this._codec.TotalBytesIn = (this._codec.TotalBytesOut = $T11().Create(0, 0, 0));
    this._codec.Message = null;
    this.pendingCount = 0;
    this.nextPending = 0;
    this.Rfc1950BytesEmitted = false;
    this.status = (this.get_WantRfc1950HeaderBytes() ? $thisType.INIT_STATE : $thisType.BUSY_STATE);
    this._codec._Adler32 = $T15().Adler32(0, null, 0, 0);
    this.last_flush = 0;
    this._InitializeTreeData();
    this._InitializeLazyMatch();
  };

  function DeflateManager_scan_tree (tree, max_code) {
    var prevlen = -1;
    var nextlen = tree[1];
    var count = 0;
    var max_count = 7;
    var min_count = 4;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }
    tree[((((((max_code + 1) | 0) * 2) | 0) + 1) | 0)] = 32767;

    for (var i = 0; i <= max_code; i = ((i + 1) | 0)) {
      var curlen = nextlen;
      nextlen = tree[((((((i + 1) | 0) * 2) | 0) + 1) | 0)];
      if (!(((count = ((count + 1) | 0)) < max_count) && (curlen === nextlen))) {
        if (count < min_count) {
          this.bl_tree[((curlen * 2) | 0)] = $T03().$Cast(((this.bl_tree[((curlen * 2) | 0)] + count) | 0));
        } else if (curlen !== 0) {
          if (curlen !== prevlen) {
            var expr_87_cp_0 = this.bl_tree;
            var expr_87_cp_1 = ((curlen * 2) | 0);
            expr_87_cp_0[expr_87_cp_1] = ((expr_87_cp_0[expr_87_cp_1] + 1) | 0);
          }
          var expr_A7_cp_0 = this.bl_tree;
          var expr_A7_cp_1 = (($T01().REP_3_6 * 2) | 0);
          expr_A7_cp_0[expr_A7_cp_1] = ((expr_A7_cp_0[expr_A7_cp_1] + 1) | 0);
        } else if (count <= 10) {
          var expr_CF_cp_0 = this.bl_tree;
          var expr_CF_cp_1 = (($T01().REPZ_3_10 * 2) | 0);
          expr_CF_cp_0[expr_CF_cp_1] = ((expr_CF_cp_0[expr_CF_cp_1] + 1) | 0);
        } else {
          var expr_F1_cp_0 = this.bl_tree;
          var expr_F1_cp_1 = (($T01().REPZ_11_138 * 2) | 0);
          expr_F1_cp_0[expr_F1_cp_1] = ((expr_F1_cp_0[expr_F1_cp_1] + 1) | 0);
        }
        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;
        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;
        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    }
  };

  function DeflateManager_send_all_trees (lcodes, dcodes, blcodes) {
    this.send_bits(((lcodes - 257) | 0), 5);
    this.send_bits(((dcodes - 1) | 0), 5);
    this.send_bits(((blcodes - 4) | 0), 4);

    for (var rank = 0; rank < blcodes; rank = ((rank + 1) | 0)) {
      this.send_bits(this.bl_tree[(((($T02().bl_order[rank] * 2) | 0) + 1) | 0)], 3);
    }
    this.send_tree(this.dyn_ltree, ((lcodes - 1) | 0));
    this.send_tree(this.dyn_dtree, ((dcodes - 1) | 0));
  };

  function DeflateManager_send_bits (value, length) {
    var $temp00, $temp01;
    if (this.bi_valid > (($thisType.Buf_size - length) | 0)) {
      this.bi_buf = (this.bi_buf | $T03().$Cast(((value << this.bi_valid) & 65535)));
      this.pending[($temp00 = this.pendingCount, 
        this.pendingCount = ((this.pendingCount + 1) | 0), 
        $temp00)] = $T0F().$Cast(this.bi_buf);
      this.pending[($temp01 = this.pendingCount, 
        this.pendingCount = ((this.pendingCount + 1) | 0), 
        $temp01)] = $T0F().$Cast((this.bi_buf >> 8));
      this.bi_buf = $T03().$Cast(($T10().$Cast(value) >>> (($thisType.Buf_size - this.bi_valid) | 0)));
      this.bi_valid = ((this.bi_valid + ((length - $thisType.Buf_size) | 0)) | 0);
      return;
    }
    this.bi_buf = (this.bi_buf | $T03().$Cast(((value << this.bi_valid) & 65535)));
    this.bi_valid = ((this.bi_valid + length) | 0);
  };

  function DeflateManager_send_code (c, tree) {
    var c2 = ((c * 2) | 0);
    this.send_bits((tree[c2] & 65535), (tree[((c2 + 1) | 0)] & 65535));
  };

  function DeflateManager_send_compressed_block (ltree, dtree) {
    var lx = 0;
    if (this.last_lit !== 0) {

      do {
        var ix = ((this._distanceOffset + ((lx * 2) | 0)) | 0);
        var distance = (((this.pending[ix] << 8) & 65280) | (this.pending[((ix + 1) | 0)] & 255));
        var lc = (this.pending[((this._lengthOffset + lx) | 0)] & 255);
        lx = ((lx + 1) | 0);
        if (distance === 0) {
          this.send_code(lc, ltree);
        } else {
          var code = $T02().LengthCode[lc];
          this.send_code(((((code + $T01().LITERALS) | 0) + 1) | 0), ltree);
          var extra = $T02().ExtraLengthBits[code];
          if (extra !== 0) {
            lc = ((lc - $T02().LengthBase[code]) | 0);
            this.send_bits(lc, extra);
          }
          distance = ((distance - 1) | 0);
          code = $T02().DistanceCode(distance);
          this.send_code(code, dtree);
          extra = $T02().ExtraDistanceBits[code];
          if (extra !== 0) {
            distance = ((distance - $T02().DistanceBase[code]) | 0);
            this.send_bits(distance, extra);
          }
        }
      } while (lx < this.last_lit);
    }
    this.send_code($thisType.END_BLOCK, ltree);
    this.last_eob_len = ltree[(((($thisType.END_BLOCK * 2) | 0) + 1) | 0)];
  };

  function DeflateManager_send_tree (tree, max_code) {
    var prevlen = -1;
    var nextlen = tree[1];
    var count = 0;
    var max_count = 7;
    var min_count = 4;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    }

    for (var i = 0; i <= max_code; i = ((i + 1) | 0)) {
      var curlen = nextlen;
      nextlen = tree[((((((i + 1) | 0) * 2) | 0) + 1) | 0)];
      if (!(((count = ((count + 1) | 0)) < max_count) && (curlen === nextlen))) {
        if (count < min_count) {

          do {
            this.send_code(curlen, this.bl_tree);
          } while ((count = ((count - 1) | 0)) !== 0);
        } else if (curlen !== 0) {
          if (curlen !== prevlen) {
            this.send_code(curlen, this.bl_tree);
            count = ((count - 1) | 0);
          }
          this.send_code($T01().REP_3_6, this.bl_tree);
          this.send_bits(((count - 3) | 0), 2);
        } else if (count <= 10) {
          this.send_code($T01().REPZ_3_10, this.bl_tree);
          this.send_bits(((count - 3) | 0), 3);
        } else {
          this.send_code($T01().REPZ_11_138, this.bl_tree);
          this.send_bits(((count - 11) | 0), 7);
        }
        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;
        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;
        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    }
  };

  function DeflateManager_set_data_type () {
    var i = 0;
    var ascii_freq = 0;
    var bin_freq = 0;

    while (i < 7) {
      bin_freq = ((bin_freq + this.dyn_ltree[((i * 2) | 0)]) | 0);
      i = ((i + 1) | 0);
    }

    for (; i < 128; i = ((i + 1) | 0)) {
      ascii_freq = ((ascii_freq + this.dyn_ltree[((i * 2) | 0)]) | 0);
    }

    for (; i < $T01().LITERALS; i = ((i + 1) | 0)) {
      bin_freq = ((bin_freq + this.dyn_ltree[((i * 2) | 0)]) | 0);
    }
    this.data_type = $T05().$Cast(((bin_freq > (ascii_freq >> 2)) ? $thisType.Z_BINARY : $thisType.Z_ASCII));
  };

  function DeflateManager_set_WantRfc1950HeaderBytes (value) {
    this._WantRfc1950HeaderBytes = value;
  };

  function DeflateManager_SetDeflater () {
    switch (this.config.Flavor.valueOf()) {
      case 0: 
        this.DeflateFunction = $T18().New(this, $thisType.prototype.DeflateNone);
        return;

      case 1: 
        this.DeflateFunction = $T18().New(this, $thisType.prototype.DeflateFast);
        return;

      case 2: 
        this.DeflateFunction = $T18().New(this, $thisType.prototype.DeflateSlow);
        return;

      default: 
        return;

    }
  };

  function DeflateManager_SetDictionary (dictionary) {
    var length = dictionary.length;
    var index = 0;
    if (!((dictionary !== null) && (this.status === $thisType.INIT_STATE))) {
      throw $S01().Construct("Stream error.");
    }
    this._codec._Adler32 = $T15().Adler32(this._codec._Adler32, dictionary, 0, dictionary.length);
    if (length < $thisType.MIN_MATCH) {
      return 0;
    }
    if (length > ((this.w_size - $thisType.MIN_LOOKAHEAD) | 0)) {
      length = ((this.w_size - $thisType.MIN_LOOKAHEAD) | 0);
      index = ((dictionary.length - length) | 0);
    }
    $S00().CallStatic($T06(), "Copy", null, 
      dictionary, 
      index, 
      this.window, 
      0, 
      length
    );
    this.strstart = length;
    this.block_start = length;
    this.ins_h = (this.window[0] & 255);
    this.ins_h = (((this.ins_h << this.hash_shift) ^ (this.window[1] & 255)) & this.hash_mask);

    for (var i = 0; i <= ((length - $thisType.MIN_MATCH) | 0); i = ((i + 1) | 0)) {
      this.ins_h = (((this.ins_h << this.hash_shift) ^ (this.window[((i + (($thisType.MIN_MATCH - 1) | 0)) | 0)] & 255)) & this.hash_mask);
      this.prev[(i & this.w_mask)] = this.head[this.ins_h];
      this.head[this.ins_h] = $T03().$Cast(i);
    }
    return 0;
  };

  function DeflateManager_SetParams (level, strategy) {
    var result = 0;
    if (this.compressionLevel !== level) {
      var newConfig = $T0A().Lookup(level);
      if (!((newConfig.Flavor === this.config.Flavor).valueOf() || $T11().op_Equality(this._codec.TotalBytesIn, $T11().Create(0, 0, 0)))) {
        result = this._codec.Deflate($T12().Partial);
      }
      this.compressionLevel = level;
      this.config = newConfig;
      this.SetDeflater();
    }
    this.compressionStrategy = strategy;
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Ionic.Zlib.DeflateManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      DeflateManager__ctor
    );

    $.Method({Static:false, Public:false}, "_fillWindow", 
      new JSIL.MethodSignature(null, [], []), 
      DeflateManager__fillWindow
    );

    $.Method({Static:false, Public:false}, "_InitializeBlocks", 
      new JSIL.MethodSignature(null, [], []), 
      DeflateManager__InitializeBlocks
    );

    $.Method({Static:false, Public:false}, "_InitializeLazyMatch", 
      new JSIL.MethodSignature(null, [], []), 
      DeflateManager__InitializeLazyMatch
    );

    $.Method({Static:false, Public:false}, "_InitializeTreeData", 
      new JSIL.MethodSignature(null, [], []), 
      DeflateManager__InitializeTreeData
    );

    $.Method({Static:true , Public:false}, "_IsSmaller", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.SByte])
        ], []), 
      DeflateManager__IsSmaller
    );

    $.Method({Static:false, Public:false}, "_tr_align", 
      new JSIL.MethodSignature(null, [], []), 
      DeflateManager__tr_align
    );

    $.Method({Static:false, Public:false}, "_tr_flush_block", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Boolean
        ], []), 
      DeflateManager__tr_flush_block
    );

    $.Method({Static:false, Public:false}, "_tr_stored_block", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Boolean
        ], []), 
      DeflateManager__tr_stored_block
    );

    $.Method({Static:false, Public:false}, "_tr_tally", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Int32], []), 
      DeflateManager__tr_tally
    );

    $.Method({Static:false, Public:false}, "bi_flush", 
      new JSIL.MethodSignature(null, [], []), 
      DeflateManager_bi_flush
    );

    $.Method({Static:false, Public:false}, "bi_windup", 
      new JSIL.MethodSignature(null, [], []), 
      DeflateManager_bi_windup
    );

    $.Method({Static:false, Public:false}, "build_bl_tree", 
      new JSIL.MethodSignature($.Int32, [], []), 
      DeflateManager_build_bl_tree
    );

    $.Method({Static:false, Public:false}, "copy_block", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Boolean
        ], []), 
      DeflateManager_copy_block
    );

    $.Method({Static:false, Public:false}, "Deflate", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("Ionic.Zlib.FlushType")], []), 
      DeflateManager_Deflate
    );

    $.Method({Static:false, Public:false}, "DeflateFast", 
      new JSIL.MethodSignature($asm0A.TypeRef("Ionic.Zlib.BlockState"), [$asm0A.TypeRef("Ionic.Zlib.FlushType")], []), 
      DeflateManager_DeflateFast
    );

    $.Method({Static:false, Public:false}, "DeflateNone", 
      new JSIL.MethodSignature($asm0A.TypeRef("Ionic.Zlib.BlockState"), [$asm0A.TypeRef("Ionic.Zlib.FlushType")], []), 
      DeflateManager_DeflateNone
    );

    $.Method({Static:false, Public:false}, "DeflateSlow", 
      new JSIL.MethodSignature($asm0A.TypeRef("Ionic.Zlib.BlockState"), [$asm0A.TypeRef("Ionic.Zlib.FlushType")], []), 
      DeflateManager_DeflateSlow
    );

    $.Method({Static:false, Public:false}, "End", 
      new JSIL.MethodSignature($.Int32, [], []), 
      DeflateManager_End
    );

    $.Method({Static:false, Public:false}, "flush_block_only", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      DeflateManager_flush_block_only
    );

    $.Method({Static:false, Public:false}, "get_WantRfc1950HeaderBytes", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      DeflateManager_get_WantRfc1950HeaderBytes
    );

    $.Method({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("Ionic.Zlib.ZlibCodec"), $asm0A.TypeRef("Ionic.Zlib.CompressionLevel")], []), 
      DeflateManager_Initialize$00
    );

    $.Method({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature($.Int32, [
          $asm0A.TypeRef("Ionic.Zlib.ZlibCodec"), $asm0A.TypeRef("Ionic.Zlib.CompressionLevel"), 
          $.Int32
        ], []), 
      DeflateManager_Initialize$01
    );

    $.Method({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature($.Int32, [
          $asm0A.TypeRef("Ionic.Zlib.ZlibCodec"), $asm0A.TypeRef("Ionic.Zlib.CompressionLevel"), 
          $.Int32, $asm0A.TypeRef("Ionic.Zlib.CompressionStrategy")
        ], []), 
      DeflateManager_Initialize$02
    );

    $.Method({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature($.Int32, [
          $asm0A.TypeRef("Ionic.Zlib.ZlibCodec"), $asm0A.TypeRef("Ionic.Zlib.CompressionLevel"), 
          $.Int32, $.Int32, 
          $asm0A.TypeRef("Ionic.Zlib.CompressionStrategy")
        ], []), 
      DeflateManager_Initialize$03
    );

    $.Method({Static:false, Public:false}, "longest_match", 
      new JSIL.MethodSignature($.Int32, [$.Int32], []), 
      DeflateManager_longest_match
    );

    $.Method({Static:false, Public:false}, "pqdownheap", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32], []), 
      DeflateManager_pqdownheap
    );

    $.Method({Static:false, Public:false}, "put_bytes", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], []), 
      DeflateManager_put_bytes
    );

    $.Method({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature(null, [], []), 
      DeflateManager_Reset
    );

    $.Method({Static:false, Public:false}, "scan_tree", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32], []), 
      DeflateManager_scan_tree
    );

    $.Method({Static:false, Public:false}, "send_all_trees", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ], []), 
      DeflateManager_send_all_trees
    );

    $.Method({Static:false, Public:false}, "send_bits", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], []), 
      DeflateManager_send_bits
    );

    $.Method({Static:false, Public:false}, "send_code", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Int16])], []), 
      DeflateManager_send_code
    );

    $.Method({Static:false, Public:false}, "send_compressed_block", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Int16]), $jsilcore.TypeRef("System.Array", [$.Int16])], []), 
      DeflateManager_send_compressed_block
    );

    $.Method({Static:false, Public:false}, "send_tree", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32], []), 
      DeflateManager_send_tree
    );

    $.Method({Static:false, Public:false}, "set_data_type", 
      new JSIL.MethodSignature(null, [], []), 
      DeflateManager_set_data_type
    );

    $.Method({Static:false, Public:false}, "set_WantRfc1950HeaderBytes", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      DeflateManager_set_WantRfc1950HeaderBytes
    );

    $.Method({Static:false, Public:false}, "SetDeflater", 
      new JSIL.MethodSignature(null, [], []), 
      DeflateManager_SetDeflater
    );

    $.Method({Static:false, Public:false}, "SetDictionary", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte])], []), 
      DeflateManager_SetDictionary
    );

    $.Method({Static:false, Public:false}, "SetParams", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("Ionic.Zlib.CompressionLevel"), $asm0A.TypeRef("Ionic.Zlib.CompressionStrategy")], []), 
      DeflateManager_SetParams
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "MEM_LEVEL_MAX", $.Int32, 9); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MEM_LEVEL_DEFAULT", $.Int32, 8); 
    $.Field({Static:false, Public:false}, "DeflateFunction", $asm0A.TypeRef("Ionic.Zlib.DeflateManager/CompressFunc")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_ErrorMessage", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "PRESET_DICT", $.Int32, 32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "INIT_STATE", $.Int32, 42); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BUSY_STATE", $.Int32, 113); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "FINISH_STATE", $.Int32, 666); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Z_DEFLATED", $.Int32, 8); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "STORED_BLOCK", $.Int32, 0); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "STATIC_TREES", $.Int32, 1); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DYN_TREES", $.Int32, 2); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Z_BINARY", $.Int32, 0); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Z_ASCII", $.Int32, 1); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Z_UNKNOWN", $.Int32, 2); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Buf_size", $.Int32, 16); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MIN_MATCH", $.Int32, 3); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MAX_MATCH", $.Int32, 258); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MIN_LOOKAHEAD", $.Int32, function ($pi) {
        return (((($pi.MAX_MATCH + $pi.MIN_MATCH) | 0) + 1) | 0);
      }); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "HEAP_SIZE", $.Int32, function ($pi) {
        return ((((2 * $asm0A.Ionic.Zlib.InternalConstants.L_CODES) | 0) + 1) | 0);
      }); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "END_BLOCK", $.Int32, 256); 
    $.Field({Static:false, Public:false}, "_codec", $asm0A.TypeRef("Ionic.Zlib.ZlibCodec")); 
    $.Field({Static:false, Public:false}, "status", $.Int32); 
    $.Field({Static:false, Public:false}, "pending", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "nextPending", $.Int32); 
    $.Field({Static:false, Public:false}, "pendingCount", $.Int32); 
    $.Field({Static:false, Public:false}, "data_type", $.SByte); 
    $.Field({Static:false, Public:false}, "last_flush", $.Int32); 
    $.Field({Static:false, Public:false}, "w_size", $.Int32); 
    $.Field({Static:false, Public:false}, "w_bits", $.Int32); 
    $.Field({Static:false, Public:false}, "w_mask", $.Int32); 
    $.Field({Static:false, Public:false}, "window", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "window_size", $.Int32); 
    $.Field({Static:false, Public:false}, "prev", $jsilcore.TypeRef("System.Array", [$.Int16])); 
    $.Field({Static:false, Public:false}, "head", $jsilcore.TypeRef("System.Array", [$.Int16])); 
    $.Field({Static:false, Public:false}, "ins_h", $.Int32); 
    $.Field({Static:false, Public:false}, "hash_size", $.Int32); 
    $.Field({Static:false, Public:false}, "hash_bits", $.Int32); 
    $.Field({Static:false, Public:false}, "hash_mask", $.Int32); 
    $.Field({Static:false, Public:false}, "hash_shift", $.Int32); 
    $.Field({Static:false, Public:false}, "block_start", $.Int32); 
    $.Field({Static:false, Public:false}, "config", $asm0A.TypeRef("Ionic.Zlib.DeflateManager/Config")); 
    $.Field({Static:false, Public:false}, "match_length", $.Int32); 
    $.Field({Static:false, Public:false}, "prev_match", $.Int32); 
    $.Field({Static:false, Public:false}, "match_available", $.Int32); 
    $.Field({Static:false, Public:false}, "strstart", $.Int32); 
    $.Field({Static:false, Public:false}, "match_start", $.Int32); 
    $.Field({Static:false, Public:false}, "lookahead", $.Int32); 
    $.Field({Static:false, Public:false}, "prev_length", $.Int32); 
    $.Field({Static:false, Public:false}, "compressionLevel", $asm0A.TypeRef("Ionic.Zlib.CompressionLevel")); 
    $.Field({Static:false, Public:false}, "compressionStrategy", $asm0A.TypeRef("Ionic.Zlib.CompressionStrategy")); 
    $.Field({Static:false, Public:false}, "dyn_ltree", $jsilcore.TypeRef("System.Array", [$.Int16])); 
    $.Field({Static:false, Public:false}, "dyn_dtree", $jsilcore.TypeRef("System.Array", [$.Int16])); 
    $.Field({Static:false, Public:false}, "bl_tree", $jsilcore.TypeRef("System.Array", [$.Int16])); 
    $.Field({Static:false, Public:false}, "treeLiterals", $asm0A.TypeRef("Ionic.Zlib.Tree")); 
    $.Field({Static:false, Public:false}, "treeDistances", $asm0A.TypeRef("Ionic.Zlib.Tree")); 
    $.Field({Static:false, Public:false}, "treeBitLengths", $asm0A.TypeRef("Ionic.Zlib.Tree")); 
    $.Field({Static:false, Public:false}, "bl_count", $jsilcore.TypeRef("System.Array", [$.Int16])); 
    $.Field({Static:false, Public:false}, "heap", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "heap_len", $.Int32); 
    $.Field({Static:false, Public:false}, "heap_max", $.Int32); 
    $.Field({Static:false, Public:false}, "depth", $jsilcore.TypeRef("System.Array", [$.SByte])); 
    $.Field({Static:false, Public:false}, "_lengthOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "lit_bufsize", $.Int32); 
    $.Field({Static:false, Public:false}, "last_lit", $.Int32); 
    $.Field({Static:false, Public:false}, "_distanceOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "opt_len", $.Int32); 
    $.Field({Static:false, Public:false}, "static_len", $.Int32); 
    $.Field({Static:false, Public:false}, "matches", $.Int32); 
    $.Field({Static:false, Public:false}, "last_eob_len", $.Int32); 
    $.Field({Static:false, Public:false}, "bi_buf", $.Int16); 
    $.Field({Static:false, Public:false}, "bi_valid", $.Int32); 
    $.Field({Static:false, Public:false}, "Rfc1950BytesEmitted", $.Boolean); 
    $.Field({Static:false, Public:false}, "_WantRfc1950HeaderBytes", $.Boolean); 
    function DeflateManager__cctor () {
      $thisType.MEM_LEVEL_MAX = 9;
      $thisType.MEM_LEVEL_DEFAULT = 8;
      $thisType._ErrorMessage = JSIL.Array.New($T00(), ["need dictionary", "stream end", "", "file error", "stream error", "data error", "insufficient memory", "buffer error", "incompatible version", ""]);
      $thisType.PRESET_DICT = 32;
      $thisType.INIT_STATE = 42;
      $thisType.BUSY_STATE = 113;
      $thisType.FINISH_STATE = 666;
      $thisType.Z_DEFLATED = 8;
      $thisType.STORED_BLOCK = 0;
      $thisType.STATIC_TREES = 1;
      $thisType.DYN_TREES = 2;
      $thisType.Z_BINARY = 0;
      $thisType.Z_ASCII = 1;
      $thisType.Z_UNKNOWN = 2;
      $thisType.Buf_size = 16;
      $thisType.MIN_MATCH = 3;
      $thisType.MAX_MATCH = 258;
      $thisType.MIN_LOOKAHEAD = (((($thisType.MAX_MATCH + $thisType.MIN_MATCH) | 0) + 1) | 0);
      $thisType.HEAP_SIZE = ((((2 * $T01().L_CODES) | 0) + 1) | 0);
      $thisType.END_BLOCK = 256;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      DeflateManager__cctor
    );

    $.Property({Static:false, Public:false}, "WantRfc1950HeaderBytes", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Ionic.Zlib.DeflateManager/CompressFunc */ 

JSIL.MakeDelegate("Ionic.Zlib.DeflateManager/CompressFunc", false, []);

/* class Ionic.Zlib.DeflateManager/Config */ 

(function Config$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.Ionic.Zlib.DeflateFlavor)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionLevel)) ();
  };

  function Config__ctor (goodLength, maxLazy, niceLength, maxChainLength, flavor) {
    this.GoodLength = goodLength;
    this.MaxLazy = maxLazy;
    this.NiceLength = niceLength;
    this.MaxChainLength = maxChainLength;
    this.Flavor = flavor;
  };

  function Config_Lookup (level) {
    return $thisType.Table[level.valueOf()];
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Ionic.Zlib.DeflateManager/Config", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $asm0A.TypeRef("Ionic.Zlib.DeflateFlavor")
        ], []), 
      Config__ctor
    );

    $.Method({Static:true , Public:true }, "Lookup", 
      new JSIL.MethodSignature($.Type, [$asm0A.TypeRef("Ionic.Zlib.CompressionLevel")], []), 
      Config_Lookup
    );

    $.Field({Static:false, Public:false}, "GoodLength", $.Int32); 
    $.Field({Static:false, Public:false}, "MaxLazy", $.Int32); 
    $.Field({Static:false, Public:false}, "NiceLength", $.Int32); 
    $.Field({Static:false, Public:false}, "MaxChainLength", $.Int32); 
    $.Field({Static:false, Public:false}, "Flavor", $asm0A.TypeRef("Ionic.Zlib.DeflateFlavor")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Table", $jsilcore.TypeRef("System.Array", [$.Type])); 
    function Config__cctor () {
      $thisType.Table = JSIL.Array.New($thisType, [new $thisType(0, 0, 0, 0, $T00().Store), new $thisType(4, 4, 8, 4, $T00().Fast), new $thisType(4, 5, 16, 8, $T00().Fast), new $thisType(4, 6, 32, 32, $T00().Fast), new $thisType(4, 4, 16, 16, $T00().Slow), new $thisType(8, 16, 32, 32, $T00().Slow), new $thisType(8, 16, 128, 128, $T00().Slow), new $thisType(8, 32, 128, 256, $T00().Slow), new $thisType(32, 128, 258, 1024, $T00().Slow), new $thisType(32, 258, 258, 4096, $T00().Slow)]);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      Config__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Ionic.Zlib.DeflateStream */ 

(function DeflateStream$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.IO.Stream)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionMode)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionLevel)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibBaseStream)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibStreamFlavor)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm09.System.Byte))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.IO.MemoryStream)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.IDisposable)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.ObjectDisposedException)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm09.System.NotImplementedException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibBaseStream_StreamMode)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm09.System.Int64)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm09.System.IO.SeekOrigin)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibException)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0A.Ionic.Zlib.FlushType)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionStrategy)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.IO.MemoryStream"), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.DeflateStream"), [
        $asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode"), 
        $asm0A.TypeRef("Ionic.Zlib.CompressionLevel")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.ObjectDisposedException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.NotImplementedException"), []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.ZlibException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.IO.MemoryStream"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Byte")])]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.DeflateStream"), [$asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm09.System.IDisposable.Dispose)) ();
  };

  function DeflateStream__ctor$00 (stream, mode) {
    $thisType.prototype._ctor.call(this, stream, mode, $T02().Level6, false);
  };

  function DeflateStream__ctor$01 (stream, mode, level) {
    $thisType.prototype._ctor.call(this, stream, mode, level, false);
  };

  function DeflateStream__ctor$02 (stream, mode, leaveOpen) {
    $thisType.prototype._ctor.call(this, stream, mode, $T02().Level6, leaveOpen);
  };

  function DeflateStream__ctor$03 (stream, mode, level, leaveOpen) {
    $T00().prototype._ctor.call(this);
    this._innerStream = stream;
    this._baseStream = new ($T04())(stream, mode, level, $T05().DEFLATE, leaveOpen);
  };

  function DeflateStream_CompressBuffer (b) {
    var ms = $S00().Construct();
    try {
      var compressor = $S01().Construct(ms, $T01().Compress, $T02().Level9);
      $T04().CompressBuffer(b, compressor);
      var result = ms.ToArray();
    } finally {
      if (ms !== null) {
        $IM00().Call(ms, null);
      }
    }
    return result;
  };

  function DeflateStream_CompressString (s) {
    var ms = $S00().Construct();
    try {
      var compressor = $S01().Construct(ms, $T01().Compress, $T02().Level9);
      $T04().CompressString(s, compressor);
      var result = ms.ToArray();
    } finally {
      if (ms !== null) {
        $IM00().Call(ms, null);
      }
    }
    return result;
  };

  function DeflateStream_Dispose (disposing) {
    try {
      if (!this._disposed) {
        if (!(!disposing || (this._baseStream === null))) {
          this._baseStream.Close();
        }
        this._disposed = true;
      }
    } finally {
      $T00().prototype.Dispose.call(this, disposing);
    }
  };

  function DeflateStream_Flush () {
    if (this._disposed) {
      throw $S02().Construct("DeflateStream");
    }
    this._baseStream.Flush();
  };

  function DeflateStream_get_BufferSize () {
    return this._baseStream._bufferSize;
  };

  function DeflateStream_get_CanRead () {
    if (this._disposed) {
      throw $S02().Construct("DeflateStream");
    }
    return this._baseStream._stream.get_CanRead();
  };

  function DeflateStream_get_CanSeek () {
    return false;
  };

  function DeflateStream_get_CanWrite () {
    if (this._disposed) {
      throw $S02().Construct("DeflateStream");
    }
    return this._baseStream._stream.get_CanWrite();
  };

  function DeflateStream_get_FlushMode () {
    return this._baseStream._flushMode;
  };

  function DeflateStream_get_Length () {
    throw $S03().Construct();
  };

  function DeflateStream_get_Position () {
    if (this._baseStream._streamMode.valueOf() === 0) {
      return this._baseStream._z.TotalBytesOut;
    }
    if (this._baseStream._streamMode === $T0C().Reader) {
      return this._baseStream._z.TotalBytesIn;
    }
    return $T0D().Create(0, 0, 0);
  };

  function DeflateStream_get_Strategy () {
    return this._baseStream.Strategy;
  };

  function DeflateStream_get_TotalIn () {
    return this._baseStream._z.TotalBytesIn;
  };

  function DeflateStream_get_TotalOut () {
    return this._baseStream._z.TotalBytesOut;
  };

  function DeflateStream_Read (buffer, offset, count) {
    if (this._disposed) {
      throw $S02().Construct("DeflateStream");
    }
    return this._baseStream.Read(buffer, offset, count);
  };

  function DeflateStream_Seek (offset, origin) {
    throw $S03().Construct();
  };

  function DeflateStream_set_BufferSize (value) {
    if (this._disposed) {
      throw $S02().Construct("DeflateStream");
    }
    if (this._baseStream._workingBuffer !== null) {
      throw $S04().Construct("The working buffer is already set.");
    }
    if (value < 1024) {
      throw $S04().Construct($T09().Format("Don't be silly. {0} bytes?? Use a bigger buffer, at least {1}.", value, 1024));
    }
    this._baseStream._bufferSize = value;
  };

  function DeflateStream_set_FlushMode (value) {
    if (this._disposed) {
      throw $S02().Construct("DeflateStream");
    }
    this._baseStream._flushMode = value;
  };

  function DeflateStream_set_Position (value) {
    throw $S03().Construct();
  };

  function DeflateStream_set_Strategy (value) {
    if (this._disposed) {
      throw $S02().Construct("DeflateStream");
    }
    this._baseStream.Strategy = value;
  };

  function DeflateStream_SetLength (value) {
    throw $S03().Construct();
  };

  function DeflateStream_UncompressBuffer (compressed) {
    var input = $S05().Construct(compressed);
    try {
      var decompressor = $S06().Construct(input, $T01().Decompress);
      var result = $T04().UncompressBuffer(compressed, decompressor);
    } finally {
      if (input !== null) {
        $IM00().Call(input, null);
      }
    }
    return result;
  };

  function DeflateStream_UncompressString (compressed) {
    var input = $S05().Construct(compressed);
    try {
      var decompressor = $S06().Construct(input, $T01().Decompress);
      var result = $T04().UncompressString(compressed, decompressor);
    } finally {
      if (input !== null) {
        $IM00().Call(input, null);
      }
    }
    return result;
  };

  function DeflateStream_Write (buffer, offset, count) {
    if (this._disposed) {
      throw $S02().Construct("DeflateStream");
    }
    this._baseStream.Write(buffer, offset, count);
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.IO.Stream"), 
      Name: "Ionic.Zlib.DeflateStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode")], []), 
      DeflateStream__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode"), 
          $asm0A.TypeRef("Ionic.Zlib.CompressionLevel")
        ], []), 
      DeflateStream__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode"), 
          $.Boolean
        ], []), 
      DeflateStream__ctor$02
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode"), 
          $asm0A.TypeRef("Ionic.Zlib.CompressionLevel"), $.Boolean
        ], []), 
      DeflateStream__ctor$03
    );

    $.Method({Static:true , Public:true }, "CompressBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], []), 
      DeflateStream_CompressBuffer
    );

    $.Method({Static:true , Public:true }, "CompressString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], []), 
      DeflateStream_CompressString
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      DeflateStream_Dispose
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], []), 
      DeflateStream_Flush
    );

    $.Method({Static:false, Public:true }, "get_BufferSize", 
      new JSIL.MethodSignature($.Int32, [], []), 
      DeflateStream_get_BufferSize
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      DeflateStream_get_CanRead
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      DeflateStream_get_CanSeek
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      DeflateStream_get_CanWrite
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FlushMode", 
      new JSIL.MethodSignature($asm0A.TypeRef("Ionic.Zlib.FlushType"), [], []), 
      DeflateStream_get_FlushMode
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], []), 
      DeflateStream_get_Length
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Position", 
      new JSIL.MethodSignature($.Int64, [], []), 
      DeflateStream_get_Position
    );

    $.Method({Static:false, Public:true }, "get_Strategy", 
      new JSIL.MethodSignature($asm0A.TypeRef("Ionic.Zlib.CompressionStrategy"), [], []), 
      DeflateStream_get_Strategy
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_TotalIn", 
      new JSIL.MethodSignature($.Int64, [], []), 
      DeflateStream_get_TotalIn
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_TotalOut", 
      new JSIL.MethodSignature($.Int64, [], []), 
      DeflateStream_get_TotalOut
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], []), 
      DeflateStream_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm09.TypeRef("System.IO.SeekOrigin")], []), 
      DeflateStream_Seek
    );

    $.Method({Static:false, Public:true }, "set_BufferSize", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      DeflateStream_set_BufferSize
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FlushMode", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Ionic.Zlib.FlushType")], []), 
      DeflateStream_set_FlushMode
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$.Int64], []), 
      DeflateStream_set_Position
    );

    $.Method({Static:false, Public:true }, "set_Strategy", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Ionic.Zlib.CompressionStrategy")], []), 
      DeflateStream_set_Strategy
    );

    $.Method({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int64], []), 
      DeflateStream_SetLength
    );

    $.Method({Static:true , Public:true }, "UncompressBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], []), 
      DeflateStream_UncompressBuffer
    );

    $.Method({Static:true , Public:true }, "UncompressString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])], []), 
      DeflateStream_UncompressString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], []), 
      DeflateStream_Write
    );

    $.Field({Static:false, Public:false}, "_baseStream", $asm0A.TypeRef("Ionic.Zlib.ZlibBaseStream")); 
    $.Field({Static:false, Public:false}, "_innerStream", $asm09.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "_disposed", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "FlushMode", $asm0A.TypeRef("Ionic.Zlib.FlushType"));

    $.Property({Static:false, Public:true }, "BufferSize", $.Int32);

    $.Property({Static:false, Public:true }, "Strategy", $asm0A.TypeRef("Ionic.Zlib.CompressionStrategy"));

    $.Property({Static:false, Public:true , Virtual:true }, "TotalIn", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "TotalOut", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Ionic.Zlib.GZipStream */ 

(function GZipStream$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.DateTime)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.DateTimeKind)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Text.Encoding)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.IO.Stream)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionMode)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionLevel)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibBaseStream)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibStreamFlavor)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm09.System.Byte))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.IO.MemoryStream)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm09.System.IDisposable)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm09.System.Byte)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm09.System.TimeSpan)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm09.System.Array)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm09.System.BitConverter)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm09.System.ObjectDisposedException)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm09.System.NotImplementedException)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm09.System.Int64)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibBaseStream_StreamMode)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm09.System.IO.SeekOrigin)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibException)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm09.System.Exception)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm09.System.IO.Path)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm0A.Ionic.Zlib.FlushType)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm09.System.InvalidOperationException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.DateTime"), [
        $asm09.TypeRef("System.Int32"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Int32"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Int32"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.DateTimeKind")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Text.Encoding"), [$asm09.TypeRef("System.String")], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.IO.MemoryStream"), []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.GZipStream"), [
        $asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode"), 
        $asm0A.TypeRef("Ionic.Zlib.CompressionLevel")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Byte")]), [$asm09.TypeRef("System.String")], []))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.TimeSpan"), [$asm09.TypeRef("System.DateTime"), $asm09.TypeRef("System.DateTime")], []))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm09.TypeRef("System.Array"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Array"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Int32")
      ], []))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Byte")]), [$asm09.TypeRef("System.Int32")], []))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.ObjectDisposedException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.NotImplementedException"), []))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.ZlibException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Exception"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.IO.MemoryStream"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Byte")])]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.GZipStream"), [$asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode")]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.InvalidOperationException"), []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm09.System.IDisposable.Dispose)) ();
  };

  function GZipStream__ctor$00 (stream, mode) {
    $thisType.prototype._ctor.call(this, stream, mode, $T05().Level6, false);
  };

  function GZipStream__ctor$01 (stream, mode, level) {
    $thisType.prototype._ctor.call(this, stream, mode, level, false);
  };

  function GZipStream__ctor$02 (stream, mode, leaveOpen) {
    $thisType.prototype._ctor.call(this, stream, mode, $T05().Level6, leaveOpen);
  };

  function GZipStream__ctor$03 (stream, mode, level, leaveOpen) {
    $T03().prototype._ctor.call(this);
    this._baseStream = new ($T07())(stream, mode, level, $T08().GZIP, leaveOpen);
  };

  function GZipStream_CompressBuffer (b) {
    var ms = $S02().Construct();
    try {
      var compressor = $S03().Construct(ms, $T04().Compress, $T05().Level9);
      $T07().CompressBuffer(b, compressor);
      var result = ms.ToArray();
    } finally {
      if (ms !== null) {
        $IM00().Call(ms, null);
      }
    }
    return result;
  };

  function GZipStream_CompressString (s) {
    var ms = $S02().Construct();
    try {
      var compressor = $S03().Construct(ms, $T04().Compress, $T05().Level9);
      $T07().CompressString(s, compressor);
      var result = ms.ToArray();
    } finally {
      if (ms !== null) {
        $IM00().Call(ms, null);
      }
    }
    return result;
  };

  function GZipStream_Dispose (disposing) {
    try {
      if (!this._disposed) {
        if (!(!disposing || (this._baseStream === null))) {
          this._baseStream.Close();
          this._Crc32 = this._baseStream.get_Crc32();
        }
        this._disposed = true;
      }
    } finally {
      $T03().prototype.Dispose.call(this, disposing);
    }
  };

  function GZipStream_EmitHeader () {
    var $temp00, $temp01, $temp02, $temp03, $temp04, $temp05, $temp06, $temp07;
    var commentBytes = ((this.get_Comment() === null) ? null : $S04().CallVirtual("GetBytes", null, $thisType.iso8859dash1, this.get_Comment()));
    var filenameBytes = ((this.get_FileName() === null) ? null : $S04().CallVirtual("GetBytes", null, $thisType.iso8859dash1, this.get_FileName()));
    var cbLength = ((this.get_Comment() === null) ? 0 : ((commentBytes.length + 1) | 0));
    var fnLength = ((this.get_FileName() === null) ? 0 : ((filenameBytes.length + 1) | 0));
    var header = JSIL.Array.New($T0E(), ((((10 + cbLength) | 0) + fnLength) | 0));
    var i = 0;
    header[($temp00 = i, 
      i = ((i + 1) | 0), 
      $temp00)] = 31;
    header[($temp01 = i, 
      i = ((i + 1) | 0), 
      $temp01)] = 139;
    header[($temp02 = i, 
      i = ((i + 1) | 0), 
      $temp02)] = 8;
    var flag = 0;
    if (this.get_Comment() !== null) {
      flag = (flag ^ 16);
    }
    if (this.get_FileName() !== null) {
      flag = (flag ^ 8);
    }
    header[($temp03 = i, 
      i = ((i + 1) | 0), 
      $temp03)] = flag;
    if (this.LastModified === null) {
      this.LastModified = $T00().get_Now().MemberwiseClone();
    }
    var timet = (($S05().CallStatic($T00(), "op_Subtraction", null, this.LastModified, $thisType._unixEpoch).get_TotalSeconds()) | 0);
    $S06().CallStatic($T10(), "Copy", null, 
      $S07().CallStatic($T11(), "GetBytes", null, timet), 
      0, 
      header, 
      i, 
      4
    );
    i = ((i + 4) | 0);
    header[($temp04 = i, 
      i = ((i + 1) | 0), 
      $temp04)] = 0;
    header[($temp05 = i, 
      i = ((i + 1) | 0), 
      $temp05)] = 255;
    if (fnLength !== 0) {
      $S06().CallStatic($T10(), "Copy", null, 
        filenameBytes, 
        0, 
        header, 
        i, 
        ((fnLength - 1) | 0)
      );
      i = ((i + ((fnLength - 1) | 0)) | 0);
      header[($temp06 = i, 
        i = ((i + 1) | 0), 
        $temp06)] = 0;
    }
    if (cbLength !== 0) {
      $S06().CallStatic($T10(), "Copy", null, 
        commentBytes, 
        0, 
        header, 
        i, 
        ((cbLength - 1) | 0)
      );
      i = ((i + ((cbLength - 1) | 0)) | 0);
      header[($temp07 = i, 
        i = ((i + 1) | 0), 
        $temp07)] = 0;
    }
    this._baseStream._stream.Write(header, 0, header.length);
    return header.length;
  };

  function GZipStream_Flush () {
    if (this._disposed) {
      throw $S08().Construct("GZipStream");
    }
    this._baseStream.Flush();
  };

  function GZipStream_get_BufferSize () {
    return this._baseStream._bufferSize;
  };

  function GZipStream_get_CanRead () {
    if (this._disposed) {
      throw $S08().Construct("GZipStream");
    }
    return this._baseStream._stream.get_CanRead();
  };

  function GZipStream_get_CanSeek () {
    return false;
  };

  function GZipStream_get_CanWrite () {
    if (this._disposed) {
      throw $S08().Construct("GZipStream");
    }
    return this._baseStream._stream.get_CanWrite();
  };

  function GZipStream_get_Comment () {
    return this._Comment;
  };

  function GZipStream_get_Crc32 () {
    return this._Crc32;
  };

  function GZipStream_get_FileName () {
    return this._FileName;
  };

  function GZipStream_get_FlushMode () {
    return this._baseStream._flushMode;
  };

  function GZipStream_get_Length () {
    throw $S09().Construct();
  };

  function GZipStream_get_Position () {
    if (this._baseStream._streamMode.valueOf() === 0) {
      return $T14().op_Addition(this._baseStream._z.TotalBytesOut, $T14().FromNumber(this._headerByteCount));
    }
    if (this._baseStream._streamMode === $T15().Reader) {
      return $T14().op_Addition(this._baseStream._z.TotalBytesIn, $T14().FromNumber(this._baseStream._gzipHeaderByteCount));
    }
    return $T14().Create(0, 0, 0);
  };

  function GZipStream_get_TotalIn () {
    return this._baseStream._z.TotalBytesIn;
  };

  function GZipStream_get_TotalOut () {
    return this._baseStream._z.TotalBytesOut;
  };

  function GZipStream_Read (buffer, offset, count) {
    if (this._disposed) {
      throw $S08().Construct("GZipStream");
    }
    var i = this._baseStream.Read(buffer, offset, count);
    if (!this._firstReadDone) {
      this._firstReadDone = true;
      this.set_FileName(this._baseStream._GzipFileName);
      this.set_Comment(this._baseStream._GzipComment);
    }
    return i;
  };

  function GZipStream_Seek (offset, origin) {
    throw $S09().Construct();
  };

  function GZipStream_set_BufferSize (value) {
    if (this._disposed) {
      throw $S08().Construct("GZipStream");
    }
    if (this._baseStream._workingBuffer !== null) {
      throw $S0A().Construct("The working buffer is already set.");
    }
    if (value < 1024) {
      throw $S0A().Construct($T0C().Format("Don't be silly. {0} bytes?? Use a bigger buffer, at least {1}.", value, 1024));
    }
    this._baseStream._bufferSize = value;
  };

  function GZipStream_set_Comment (value) {
    if (this._disposed) {
      throw $S08().Construct("GZipStream");
    }
    this._Comment = value;
  };

  function GZipStream_set_FileName (value) {
    if (this._disposed) {
      throw $S08().Construct("GZipStream");
    }
    this._FileName = value;
    if (this._FileName === null) {
      return;
    }
    if ((this._FileName.indexOf("/")) !== -1) {
      this._FileName = (System.String.Replace(this._FileName, "/", "\\"));
    }
    if (System.String.EndsWith(this._FileName, "\\")) {
      throw $S0B().Construct("Illegal filename");
    }
    if ((this._FileName.indexOf("\\")) !== -1) {
      this._FileName = $T19().GetFileName(this._FileName);
    }
  };

  function GZipStream_set_FlushMode (value) {
    if (this._disposed) {
      throw $S08().Construct("GZipStream");
    }
    this._baseStream._flushMode = value;
  };

  function GZipStream_set_Position (value) {
    throw $S09().Construct();
  };

  function GZipStream_SetLength (value) {
    throw $S09().Construct();
  };

  function GZipStream_UncompressBuffer (compressed) {
    var input = $S0C().Construct(compressed);
    try {
      var decompressor = $S0D().Construct(input, $T04().Decompress);
      var result = $T07().UncompressBuffer(compressed, decompressor);
    } finally {
      if (input !== null) {
        $IM00().Call(input, null);
      }
    }
    return result;
  };

  function GZipStream_UncompressString (compressed) {
    var input = $S0C().Construct(compressed);
    try {
      var decompressor = $S0D().Construct(input, $T04().Decompress);
      var result = $T07().UncompressString(compressed, decompressor);
    } finally {
      if (input !== null) {
        $IM00().Call(input, null);
      }
    }
    return result;
  };

  function GZipStream_Write (buffer, offset, count) {
    if (this._disposed) {
      throw $S08().Construct("GZipStream");
    }
    if (this._baseStream._streamMode === $T15().Undefined) {
      if (!this._baseStream.get__wantCompress()) {
        throw $S0E().Construct();
      }
      this._headerByteCount = this.EmitHeader();
    }
    this._baseStream.Write(buffer, offset, count);
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.IO.Stream"), 
      Name: "Ionic.Zlib.GZipStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode")], []), 
      GZipStream__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode"), 
          $asm0A.TypeRef("Ionic.Zlib.CompressionLevel")
        ], []), 
      GZipStream__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode"), 
          $.Boolean
        ], []), 
      GZipStream__ctor$02
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode"), 
          $asm0A.TypeRef("Ionic.Zlib.CompressionLevel"), $.Boolean
        ], []), 
      GZipStream__ctor$03
    );

    $.Method({Static:true , Public:true }, "CompressBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], []), 
      GZipStream_CompressBuffer
    );

    $.Method({Static:true , Public:true }, "CompressString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], []), 
      GZipStream_CompressString
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      GZipStream_Dispose
    );

    $.Method({Static:false, Public:false}, "EmitHeader", 
      new JSIL.MethodSignature($.Int32, [], []), 
      GZipStream_EmitHeader
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], []), 
      GZipStream_Flush
    );

    $.Method({Static:false, Public:true }, "get_BufferSize", 
      new JSIL.MethodSignature($.Int32, [], []), 
      GZipStream_get_BufferSize
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      GZipStream_get_CanRead
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      GZipStream_get_CanSeek
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      GZipStream_get_CanWrite
    );

    $.Method({Static:false, Public:true }, "get_Comment", 
      new JSIL.MethodSignature($.String, [], []), 
      GZipStream_get_Comment
    );

    $.Method({Static:false, Public:true }, "get_Crc32", 
      new JSIL.MethodSignature($.Int32, [], []), 
      GZipStream_get_Crc32
    );

    $.Method({Static:false, Public:true }, "get_FileName", 
      new JSIL.MethodSignature($.String, [], []), 
      GZipStream_get_FileName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FlushMode", 
      new JSIL.MethodSignature($asm0A.TypeRef("Ionic.Zlib.FlushType"), [], []), 
      GZipStream_get_FlushMode
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], []), 
      GZipStream_get_Length
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Position", 
      new JSIL.MethodSignature($.Int64, [], []), 
      GZipStream_get_Position
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_TotalIn", 
      new JSIL.MethodSignature($.Int64, [], []), 
      GZipStream_get_TotalIn
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_TotalOut", 
      new JSIL.MethodSignature($.Int64, [], []), 
      GZipStream_get_TotalOut
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], []), 
      GZipStream_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm09.TypeRef("System.IO.SeekOrigin")], []), 
      GZipStream_Seek
    );

    $.Method({Static:false, Public:true }, "set_BufferSize", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      GZipStream_set_BufferSize
    );

    $.Method({Static:false, Public:true }, "set_Comment", 
      new JSIL.MethodSignature(null, [$.String], []), 
      GZipStream_set_Comment
    );

    $.Method({Static:false, Public:true }, "set_FileName", 
      new JSIL.MethodSignature(null, [$.String], []), 
      GZipStream_set_FileName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FlushMode", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Ionic.Zlib.FlushType")], []), 
      GZipStream_set_FlushMode
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$.Int64], []), 
      GZipStream_set_Position
    );

    $.Method({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int64], []), 
      GZipStream_SetLength
    );

    $.Method({Static:true , Public:true }, "UncompressBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], []), 
      GZipStream_UncompressBuffer
    );

    $.Method({Static:true , Public:true }, "UncompressString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])], []), 
      GZipStream_UncompressString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], []), 
      GZipStream_Write
    );

    $.Field({Static:false, Public:true }, "LastModified", $asm09.TypeRef("System.Nullable`1", [$asm09.TypeRef("System.DateTime")])); 
    $.Field({Static:false, Public:false}, "_headerByteCount", $.Int32); 
    $.Field({Static:false, Public:false}, "_baseStream", $asm0A.TypeRef("Ionic.Zlib.ZlibBaseStream")); 
    $.Field({Static:false, Public:false}, "_disposed", $.Boolean); 
    $.Field({Static:false, Public:false}, "_firstReadDone", $.Boolean); 
    $.Field({Static:false, Public:false}, "_FileName", $.String); 
    $.Field({Static:false, Public:false}, "_Comment", $.String); 
    $.Field({Static:false, Public:false}, "_Crc32", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_unixEpoch", $asm09.TypeRef("System.DateTime")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "iso8859dash1", $asm09.TypeRef("System.Text.Encoding")); 
    function GZipStream__cctor () {
      $thisType._unixEpoch = new $asm09.System.DateTime();
      $thisType._unixEpoch = $S00().Construct(1970, 1, 1, 0, 0, 0, $T01().Utc);
      $thisType.iso8859dash1 = $S01().CallStatic($T02(), "GetEncoding", null, "iso-8859-1");
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      GZipStream__cctor
    );

    $.Property({Static:false, Public:true }, "Comment", $.String);

    $.Property({Static:false, Public:true }, "FileName", $.String);

    $.Property({Static:false, Public:true }, "Crc32", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "FlushMode", $asm0A.TypeRef("Ionic.Zlib.FlushType"));

    $.Property({Static:false, Public:true }, "BufferSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "TotalIn", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "TotalOut", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Ionic.Zlib.InflateBlocks */ 

(function InflateBlocks$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibCodec)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Ionic.Zlib.InflateCodes)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.Ionic.Zlib.InfTree)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Byte)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0A.Ionic.Zlib.InflateBlocks_InflateBlockMode)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.Int64)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.Ionic.Zlib.Adler)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.Array)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.UInt32)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm09.System.Int32))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0A.Ionic.Zlib.InternalInflateConstants)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize(System.Array.Of($asm09.System.Byte))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm09.TypeRef("System.Array"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Array"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Int32")
      ], []))) ();
  };

  function InflateBlocks__ctor (codec, checkfn, w) {
    this.bb = JSIL.Array.New($T00(), 1);
    this.tb = JSIL.Array.New($T00(), 1);
    this.codes = new ($T03())();
    this.inftree = new ($T04())();
    this._codec = codec;
    this.hufts = JSIL.Array.New($T00(), 4320);
    this.window = JSIL.Array.New($T05(), w);
    this.end = w;
    this.checkfn = checkfn;
    this.mode = $T06().TYPE;
    this.Reset();
  };

  function InflateBlocks_Flush (r) {

    for (var pass = 0; pass < 2; pass = ((pass + 1) | 0)) {
      if (pass === 0) {
        var nBytes = ((((this.readAt <= this.writeAt) ? this.writeAt : this.end) - this.readAt) | 0);
      } else {
        nBytes = ((this.writeAt - this.readAt) | 0);
      }
      if (nBytes === 0) {
        if (r === -5) {
          r = 0;
        }
        return r;
      }
      if (nBytes > this._codec.AvailableBytesOut) {
        nBytes = this._codec.AvailableBytesOut;
      }
      if (!((nBytes === 0) || (r !== -5))) {
        r = 0;
      }
      this._codec.AvailableBytesOut = ((this._codec.AvailableBytesOut - nBytes) | 0);
      this._codec.TotalBytesOut = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesOut, $T07().FromNumber(nBytes)));
      if (this.checkfn !== null) {
        this._codec._Adler32 = (this.check = $T08().Adler32(this.check, this.window, this.readAt, nBytes));
      }
      $S00().CallStatic($T09(), "Copy", null, 
        this.window, 
        this.readAt, 
        this._codec.OutputBuffer, 
        this._codec.NextOut, 
        nBytes
      );
      this._codec.NextOut = ((this._codec.NextOut + nBytes) | 0);
      this.readAt = ((this.readAt + nBytes) | 0);
      if (!((this.readAt !== this.end) || (pass !== 0))) {
        this.readAt = 0;
        if (this.writeAt === this.end) {
          this.writeAt = 0;
        }
      } else {
        pass = ((pass + 1) | 0);
      }
    }
    return r;
  };

  function InflateBlocks_Free () {
    this.Reset();
    this.window = null;
    this.hufts = null;
  };

  function InflateBlocks_Process (r) {
    var $temp00, $temp01, $temp02, $temp03, $temp04, $temp05, $temp06, $temp07, $temp08, $temp09;

    var $label2 = 0;
  $labelgroup2: 
    while (true) {
      switch ($label2) {
        case 0: /* $entry2 */ 
          var p = this._codec.NextIn;
          var i = this._codec.AvailableBytesIn;
          var b = this.bitb;
          var j = this.bitk;
          var q = this.writeAt;
          var k = ((q < this.readAt) ? ((((this.readAt - q) | 0) - 1) | 0) : ((this.end - q) | 0));

        $loop0: 
          while (true) {

            var $label0 = 0;
          $labelgroup0: 
            while (true) {
              switch ($label0) {
                case 0: /* $entry0 */ 
                  switch (this.mode.valueOf()) {
                    case 0: 

                      for (; j < 3; j = ((j + 8) | 0)) {
                        if (i === 0) {
                          $label2 = 1 /* goto IL_96 */ ;
                          continue $labelgroup2;
                        }
                        r = 0;
                        i = ((i - 1) | 0);
                        b = (b | ((this._codec.InputBuffer[($temp00 = p, 
                                p = ((p + 1) | 0), 
                                $temp00)] & 255) << j));
                      }
                      var t = (b & 7);
                      this.last = (t & 1);
                      switch ($T0A().$Cast(t) >>> 1) {
                        case 0: 
                          b = (b >> 3);
                          j = ((j - 3) | 0);
                          t = (j & 7);
                          b = (b >> t);
                          j = ((j - t) | 0);
                          this.mode = $T06().LENS;
                          continue $labelgroup0;

                        case 1: 
                          var bl = JSIL.Array.New($T00(), 1);
                          var bd = JSIL.Array.New($T00(), 1);
                          var tl = JSIL.Array.New($T0B(), 1);
                          var td = JSIL.Array.New($T0B(), 1);
                          $T04().inflate_trees_fixed(
                            bl, 
                            bd, 
                            tl, 
                            td, 
                            this._codec
                          );
                          this.codes.Init(
                            bl[0], 
                            bd[0], 
                            tl[0], 
                            0, 
                            td[0], 
                            0
                          );
                          b = (b >> 3);
                          j = ((j - 3) | 0);
                          this.mode = $T06().CODES;
                          continue $labelgroup0;

                        case 2: 
                          b = (b >> 3);
                          j = ((j - 3) | 0);
                          this.mode = $T06().TABLE;
                          continue $labelgroup0;

                        case 3: 
                          $label2 = 2 /* goto IL_1E7 */ ;
                          continue $labelgroup2;

                        default: 
                          continue $labelgroup0;

                      }
                      break;

                    case 1: 

                      for (; j < 32; j = ((j + 8) | 0)) {
                        if (i === 0) {
                          $label2 = 3 /* goto IL_26B */ ;
                          continue $labelgroup2;
                        }
                        r = 0;
                        i = ((i - 1) | 0);
                        b = (b | ((this._codec.InputBuffer[($temp01 = p, 
                                p = ((p + 1) | 0), 
                                $temp01)] & 255) << j));
                      }
                      if ((((~b | 0) >> 16) & 65535) !== (b & 65535)) {
                        $label2 = 4 /* goto Block_8 */ ;
                        continue $labelgroup2;
                      }
                      this.left = (b & 65535);
                      j = (b = 0);
                      this.mode = ((this.left !== 0) ? $T06().STORED : ((this.last !== 0) ? $T06().DRY : $T06().TYPE));
                      continue $labelgroup0;

                    case 2: 
                      if (i === 0) {
                        $label2 = 5 /* goto Block_11 */ ;
                        continue $labelgroup2;
                      }
                      if (k === 0) {
                        if (!((q !== this.end) || (this.readAt === 0))) {
                          q = 0;
                          k = ((q < this.readAt) ? ((((this.readAt - q) | 0) - 1) | 0) : ((this.end - q) | 0));
                        }
                        if (k === 0) {
                          this.writeAt = q;
                          r = this.Flush(r);
                          q = this.writeAt;
                          k = ((q < this.readAt) ? ((((this.readAt - q) | 0) - 1) | 0) : ((this.end - q) | 0));
                          if (!((q !== this.end) || (this.readAt === 0))) {
                            q = 0;
                            k = ((q < this.readAt) ? ((((this.readAt - q) | 0) - 1) | 0) : ((this.end - q) | 0));
                          }
                          if (k === 0) {
                            $label2 = 6 /* goto Block_21 */ ;
                            continue $labelgroup2;
                          }
                        }
                      }
                      r = 0;
                      t = this.left;
                      if (t > i) {
                        t = i;
                      }
                      if (t > k) {
                        t = k;
                      }
                      $S00().CallStatic($T09(), "Copy", null, 
                        this._codec.InputBuffer, 
                        p, 
                        this.window, 
                        q, 
                        t
                      );
                      p = ((p + t) | 0);
                      i = ((i - t) | 0);
                      q = ((q + t) | 0);
                      k = ((k - t) | 0);
                      if ((this.left = ((this.left - t) | 0)) === 0) {
                        this.mode = ((this.last !== 0) ? $T06().DRY : $T06().TYPE);
                        continue $labelgroup0;
                      }
                      continue $labelgroup0;

                    case 3: 

                      for (; j < 14; j = ((j + 8) | 0)) {
                        if (i === 0) {
                          $label2 = 7 /* goto IL_59C */ ;
                          continue $labelgroup2;
                        }
                        r = 0;
                        i = ((i - 1) | 0);
                        b = (b | ((this._codec.InputBuffer[($temp02 = p, 
                                p = ((p + 1) | 0), 
                                $temp02)] & 255) << j));
                      }
                      t = (this.table = (b & 16383));
                      if (!(((t & 31) <= 29) && (((t >> 5) & 31) <= 29))) {
                        $label2 = 8 /* goto IL_645 */ ;
                        continue $labelgroup2;
                      }
                      t = ((((258 + (t & 31)) | 0) + ((t >> 5) & 31)) | 0);
                      if (!((this.blens !== null) && (this.blens.length >= t))) {
                        this.blens = JSIL.Array.New($T00(), t);
                      } else {
                        JSIL.Array.Erase(this.blens, $T00().__Type__, 0, t);
                      }
                      b = (b >> 14);
                      j = ((j - 14) | 0);
                      this.index = 0;
                      this.mode = $T06().BTREE;
                      $label0 = 1 /* goto IL_7D0 */ ;
                      continue $labelgroup0;

                    case 4: 
                      $label0 = 1 /* goto IL_7D0 */ ;
                      continue $labelgroup0;

                    case 5: 
                      JSIL.UntranslatableInstruction("goto IL_8C2");

                    case 6: 
                      $label0 = 2 /* goto IL_CD0 */ ;
                      continue $labelgroup0;

                    case 7: 
                      $label2 = 17 /* goto IL_DA9 */ ;
                      continue $labelgroup2;

                    case 8: 
                      $label2 = 18 /* goto IL_E50 */ ;
                      continue $labelgroup2;

                    case 9: 
                      $label2 = 19 /* goto IL_EAA */ ;
                      continue $labelgroup2;

                  }
                  break $loop0;

                case 1: /* IL_7D0 */ 

                  while (this.index < ((4 + (this.table >> 10)) | 0)) {

                    for (; j < 3; j = ((j + 8) | 0)) {
                      if (i === 0) {
                        $label2 = 9 /* goto IL_71E */ ;
                        continue $labelgroup2;
                      }
                      r = 0;
                      i = ((i - 1) | 0);
                      b = (b | ((this._codec.InputBuffer[($temp03 = p, 
                              p = ((p + 1) | 0), 
                              $temp03)] & 255) << j));
                    }
                    this.blens[$thisType.border[($temp04 = this.index, 
                      this.index = ((this.index + 1) | 0), 
                      $temp04)]] = (b & 7);
                    b = (b >> 3);
                    j = ((j - 3) | 0);
                  }

                  while (this.index < 19) {
                    this.blens[$thisType.border[($temp05 = this.index, 
                      this.index = ((this.index + 1) | 0), 
                      $temp05)]] = 0;
                  }
                  this.bb[0] = 7;
                  t = this.inftree.inflate_trees_bits(
                    this.blens, 
                    this.bb, 
                    this.tb, 
                    this.hufts, 
                    this._codec
                  );
                  if (t !== 0) {
                    $label2 = 10 /* goto Block_34 */ ;
                    continue $labelgroup2;
                  }
                  this.index = 0;
                  this.mode = $T06().DTREE;

                $loop7: 
                  while (true) {

                    var $label1 = 0;
                  $labelgroup1: 
                    while (true) {
                      switch ($label1) {
                        case 0: /* $entry1 */ 

                          $label1 = 1 /* goto IL_8C2 */ ;
                          continue $labelgroup1;
                        case 1: /* IL_8C2 */ 
                          t = this.table;
                          if (this.index >= ((((258 + (t & 31)) | 0) + ((t >> 5) & 31)) | 0)) {
                            break $loop7;
                          }

                          for (t = this.bb[0]; j < t; ) {
                            if (i === 0) {
                              $label2 = 11 /* goto IL_8FC */ ;
                              continue $labelgroup2;
                            }
                            r = 0;
                            i = ((i - 1) | 0);
                            b = (b | ((this._codec.InputBuffer[($temp06 = p, 
                                    p = ((p + 1) | 0), 
                                    $temp06)] & 255) << j));
                            j = ((j + 8) | 0);
                          }
                          t = this.hufts[((((((this.tb[0] + (b & $T0D().InflateMask[t])) | 0) * 3) | 0) + 1) | 0)];
                          var c = this.hufts[((((((this.tb[0] + (b & $T0D().InflateMask[t])) | 0) * 3) | 0) + 2) | 0)];
                          if (c < 16) {
                            b = (b >> t);
                            j = ((j - t) | 0);
                            this.blens[($temp07 = this.index, 
                              this.index = ((this.index + 1) | 0), 
                              $temp07)] = c;
                          } else {
                            var l = ((c === 18) ? 7 : ((c - 14) | 0));
                            var m = ((c === 18) ? 11 : 3);

                            while (j < ((t + l) | 0)) {
                              if (i === 0) {
                                $label2 = 12 /* goto IL_A1D */ ;
                                continue $labelgroup2;
                              }
                              r = 0;
                              i = ((i - 1) | 0);
                              b = (b | ((this._codec.InputBuffer[($temp08 = p, 
                                      p = ((p + 1) | 0), 
                                      $temp08)] & 255) << j));
                              j = ((j + 8) | 0);
                            }
                            b = (b >> t);
                            j = ((j - t) | 0);
                            m = ((m + (b & $T0D().InflateMask[l])) | 0);
                            b = (b >> l);
                            j = ((j - l) | 0);
                            l = this.index;
                            t = this.table;
                            if (!((((l + m) | 0) <= ((((258 + (t & 31)) | 0) + ((t >> 5) & 31)) | 0)) && ((c !== 16) || 
                                  (l >= 1)))) {
                              $label2 = 13 /* goto IL_B00 */ ;
                              continue $labelgroup2;
                            }
                            c = ((c === 16) ? this.blens[((l - 1) | 0)] : 0);

                            do {
                              this.blens[($temp09 = l, 
                                l = ((l + 1) | 0), 
                                $temp09)] = c;
                            } while ((m = ((m - 1) | 0)) !== 0);
                            this.index = l;
                          }
                          break $labelgroup1;

                      }
                    }
                  }
                  this.tb[0] = -1;
                  var bl2 = JSIL.Array.New($T00(), [9]);
                  var bd2 = JSIL.Array.New($T00(), [6]);
                  var tl2 = JSIL.Array.New($T00(), 1);
                  var td2 = JSIL.Array.New($T00(), 1);
                  t = this.table;
                  t = this.inftree.inflate_trees_dynamic(
                    ((257 + (t & 31)) | 0), 
                    ((1 + ((t >> 5) & 31)) | 0), 
                    this.blens, 
                    bl2, 
                    bd2, 
                    tl2, 
                    td2, 
                    this.hufts, 
                    this._codec
                  );
                  if (t !== 0) {
                    $label2 = 14 /* goto Block_48 */ ;
                    continue $labelgroup2;
                  }
                  this.codes.Init(
                    bl2[0], 
                    bd2[0], 
                    this.hufts, 
                    tl2[0], 
                    this.hufts, 
                    td2[0]
                  );
                  this.mode = $T06().CODES;

                  $label0 = 2 /* goto IL_CD0 */ ;
                  continue $labelgroup0;
                case 2: /* IL_CD0 */ 
                  this.bitb = b;
                  this.bitk = j;
                  this._codec.AvailableBytesIn = i;
                  this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
                  this._codec.NextIn = p;
                  this.writeAt = q;
                  r = this.codes.Process(this, r);
                  if (r !== 1) {
                    $label2 = 15 /* goto Block_50 */ ;
                    continue $labelgroup2;
                  }
                  r = 0;
                  p = this._codec.NextIn;
                  i = this._codec.AvailableBytesIn;
                  b = this.bitb;
                  j = this.bitk;
                  q = this.writeAt;
                  k = ((q < this.readAt) ? ((((this.readAt - q) | 0) - 1) | 0) : ((this.end - q) | 0));
                  if (this.last !== 0) {
                    $label2 = 16 /* goto IL_DA2 */ ;
                    continue $labelgroup2;
                  }
                  this.mode = $T06().TYPE;
                  break $labelgroup0;

              }
            }
          }
          r = -2;
          this.bitb = b;
          this.bitk = j;
          this._codec.AvailableBytesIn = i;
          this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
          this._codec.NextIn = p;
          this.writeAt = q;
          return this.Flush(r);

          $label2 = 1 /* goto IL_96 */ ;
          continue $labelgroup2;
        case 1: /* IL_96 */ 
          this.bitb = b;
          this.bitk = j;
          this._codec.AvailableBytesIn = i;
          this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
          this._codec.NextIn = p;
          this.writeAt = q;
          return this.Flush(r);

          $label2 = 2 /* goto IL_1E7 */ ;
          continue $labelgroup2;
        case 2: /* IL_1E7 */ 
          b = (b >> 3);
          j = ((j - 3) | 0);
          this.mode = $T06().BAD;
          this._codec.Message = "invalid block type";
          r = -3;
          this.bitb = b;
          this.bitk = j;
          this._codec.AvailableBytesIn = i;
          this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
          this._codec.NextIn = p;
          this.writeAt = q;
          return this.Flush(r);

          $label2 = 3 /* goto IL_26B */ ;
          continue $labelgroup2;
        case 3: /* IL_26B */ 
          this.bitb = b;
          this.bitk = j;
          this._codec.AvailableBytesIn = i;
          this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
          this._codec.NextIn = p;
          this.writeAt = q;
          return this.Flush(r);

          $label2 = 4 /* goto Block_8 */ ;
          continue $labelgroup2;
        case 4: /* Block_8 */ 
          this.mode = $T06().BAD;
          this._codec.Message = "invalid stored block lengths";
          r = -3;
          this.bitb = b;
          this.bitk = j;
          this._codec.AvailableBytesIn = i;
          this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
          this._codec.NextIn = p;
          this.writeAt = q;
          return this.Flush(r);

          $label2 = 5 /* goto Block_11 */ ;
          continue $labelgroup2;
        case 5: /* Block_11 */ 
          this.bitb = b;
          this.bitk = j;
          this._codec.AvailableBytesIn = i;
          this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
          this._codec.NextIn = p;
          this.writeAt = q;
          return this.Flush(r);

          $label2 = 6 /* goto Block_21 */ ;
          continue $labelgroup2;
        case 6: /* Block_21 */ 
          this.bitb = b;
          this.bitk = j;
          this._codec.AvailableBytesIn = i;
          this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
          this._codec.NextIn = p;
          this.writeAt = q;
          return this.Flush(r);

          $label2 = 7 /* goto IL_59C */ ;
          continue $labelgroup2;
        case 7: /* IL_59C */ 
          this.bitb = b;
          this.bitk = j;
          this._codec.AvailableBytesIn = i;
          this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
          this._codec.NextIn = p;
          this.writeAt = q;
          return this.Flush(r);

          $label2 = 8 /* goto IL_645 */ ;
          continue $labelgroup2;
        case 8: /* IL_645 */ 
          this.mode = $T06().BAD;
          this._codec.Message = "too many length or distance symbols";
          r = -3;
          this.bitb = b;
          this.bitk = j;
          this._codec.AvailableBytesIn = i;
          this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
          this._codec.NextIn = p;
          this.writeAt = q;
          return this.Flush(r);

          $label2 = 9 /* goto IL_71E */ ;
          continue $labelgroup2;
        case 9: /* IL_71E */ 
          this.bitb = b;
          this.bitk = j;
          this._codec.AvailableBytesIn = i;
          this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
          this._codec.NextIn = p;
          this.writeAt = q;
          return this.Flush(r);

          $label2 = 10 /* goto Block_34 */ ;
          continue $labelgroup2;
        case 10: /* Block_34 */ 
          r = t;
          if (r === -3) {
            this.blens = null;
            this.mode = $T06().BAD;
          }
          this.bitb = b;
          this.bitk = j;
          this._codec.AvailableBytesIn = i;
          this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
          this._codec.NextIn = p;
          this.writeAt = q;
          return this.Flush(r);

          $label2 = 11 /* goto IL_8FC */ ;
          continue $labelgroup2;
        case 11: /* IL_8FC */ 
          this.bitb = b;
          this.bitk = j;
          this._codec.AvailableBytesIn = i;
          this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
          this._codec.NextIn = p;
          this.writeAt = q;
          return this.Flush(r);

          $label2 = 12 /* goto IL_A1D */ ;
          continue $labelgroup2;
        case 12: /* IL_A1D */ 
          this.bitb = b;
          this.bitk = j;
          this._codec.AvailableBytesIn = i;
          this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
          this._codec.NextIn = p;
          this.writeAt = q;
          return this.Flush(r);

          $label2 = 13 /* goto IL_B00 */ ;
          continue $labelgroup2;
        case 13: /* IL_B00 */ 
          this.blens = null;
          this.mode = $T06().BAD;
          this._codec.Message = "invalid bit length repeat";
          r = -3;
          this.bitb = b;
          this.bitk = j;
          this._codec.AvailableBytesIn = i;
          this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
          this._codec.NextIn = p;
          this.writeAt = q;
          return this.Flush(r);

          $label2 = 14 /* goto Block_48 */ ;
          continue $labelgroup2;
        case 14: /* Block_48 */ 
          if (t === -3) {
            this.blens = null;
            this.mode = $T06().BAD;
          }
          r = t;
          this.bitb = b;
          this.bitk = j;
          this._codec.AvailableBytesIn = i;
          this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
          this._codec.NextIn = p;
          this.writeAt = q;
          return this.Flush(r);

          $label2 = 15 /* goto Block_50 */ ;
          continue $labelgroup2;
        case 15: /* Block_50 */ 
          return this.Flush(r);

          $label2 = 16 /* goto IL_DA2 */ ;
          continue $labelgroup2;
        case 16: /* IL_DA2 */ 
          this.mode = $T06().DRY;

          $label2 = 17 /* goto IL_DA9 */ ;
          continue $labelgroup2;
        case 17: /* IL_DA9 */ 
          this.writeAt = q;
          r = this.Flush(r);
          q = this.writeAt;
          var arg_DE2_0 = ((q < this.readAt) ? ((((this.readAt - q) | 0) - 1) | 0) : ((this.end - q) | 0));
          if (this.readAt !== this.writeAt) {
            this.bitb = b;
            this.bitk = j;
            this._codec.AvailableBytesIn = i;
            this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
            this._codec.NextIn = p;
            this.writeAt = q;
            return this.Flush(r);
          }
          this.mode = $T06().DONE;

          $label2 = 18 /* goto IL_E50 */ ;
          continue $labelgroup2;
        case 18: /* IL_E50 */ 
          r = 1;
          this.bitb = b;
          this.bitk = j;
          this._codec.AvailableBytesIn = i;
          this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
          this._codec.NextIn = p;
          this.writeAt = q;
          return this.Flush(r);

          $label2 = 19 /* goto IL_EAA */ ;
          continue $labelgroup2;
        case 19: /* IL_EAA */ 
          r = -3;
          this.bitb = b;
          this.bitk = j;
          this._codec.AvailableBytesIn = i;
          this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
          this._codec.NextIn = p;
          this.writeAt = q;
          return this.Flush(r);

          break $labelgroup2;
      }
    }
  };

  function InflateBlocks_Reset () {
    var oldCheck = this.check;
    this.mode = $T06().TYPE;
    this.bitk = 0;
    this.bitb = 0;
    this.readAt = (this.writeAt = 0);
    if (this.checkfn !== null) {
      this._codec._Adler32 = (this.check = $T08().Adler32(0, null, 0, 0));
    }
    return oldCheck;
  };

  function InflateBlocks_SetDictionary (d, start, n) {
    $S00().CallStatic($T09(), "Copy", null, 
      d, 
      start, 
      this.window, 
      0, 
      n
    );
    this.writeAt = n;
    this.readAt = n;
  };

  function InflateBlocks_SyncPoint () {
    if (this.mode !== $T06().LENS) {
      return 0;
    }
    return 1;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Ionic.Zlib.InflateBlocks", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("Ionic.Zlib.ZlibCodec"), $.Object, 
          $.Int32
        ], []), 
      InflateBlocks__ctor
    );

    $.Method({Static:false, Public:false}, "Flush", 
      new JSIL.MethodSignature($.Int32, [$.Int32], []), 
      InflateBlocks_Flush
    );

    $.Method({Static:false, Public:false}, "Free", 
      new JSIL.MethodSignature(null, [], []), 
      InflateBlocks_Free
    );

    $.Method({Static:false, Public:false}, "Process", 
      new JSIL.MethodSignature($.Int32, [$.Int32], []), 
      InflateBlocks_Process
    );

    $.Method({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature($.UInt32, [], []), 
      InflateBlocks_Reset
    );

    $.Method({Static:false, Public:false}, "SetDictionary", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], []), 
      InflateBlocks_SetDictionary
    );

    $.Method({Static:false, Public:false}, "SyncPoint", 
      new JSIL.MethodSignature($.Int32, [], []), 
      InflateBlocks_SyncPoint
    );

    $.Constant({Static:true , Public:false}, "MANY", 1440); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "border", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "mode", $asm0A.TypeRef("Ionic.Zlib.InflateBlocks/InflateBlockMode")); 
    $.Field({Static:false, Public:false}, "left", $.Int32); 
    $.Field({Static:false, Public:false}, "table", $.Int32); 
    $.Field({Static:false, Public:false}, "index", $.Int32); 
    $.Field({Static:false, Public:false}, "blens", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "bb", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "tb", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "codes", $asm0A.TypeRef("Ionic.Zlib.InflateCodes")); 
    $.Field({Static:false, Public:false}, "last", $.Int32); 
    $.Field({Static:false, Public:false}, "_codec", $asm0A.TypeRef("Ionic.Zlib.ZlibCodec")); 
    $.Field({Static:false, Public:false}, "bitk", $.Int32); 
    $.Field({Static:false, Public:false}, "bitb", $.Int32); 
    $.Field({Static:false, Public:false}, "hufts", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "window", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "end", $.Int32); 
    $.Field({Static:false, Public:false}, "readAt", $.Int32); 
    $.Field({Static:false, Public:false}, "writeAt", $.Int32); 
    $.Field({Static:false, Public:false}, "checkfn", $.Object); 
    $.Field({Static:false, Public:false}, "check", $.UInt32); 
    $.Field({Static:false, Public:false}, "inftree", $asm0A.TypeRef("Ionic.Zlib.InfTree")); 
    function InflateBlocks__cctor () {
      $thisType.border = JSIL.Array.New($T00(), [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      InflateBlocks__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Ionic.Zlib.InflateBlocks/InflateBlockMode */ 

JSIL.MakeEnum(
  "Ionic.Zlib.InflateBlocks/InflateBlockMode", false, {
    TYPE: 0, 
    LENS: 1, 
    STORED: 2, 
    TABLE: 3, 
    BTREE: 4, 
    DTREE: 5, 
    CODES: 6, 
    DRY: 7, 
    DONE: 8, 
    BAD: 9
  }, false
);

/* class Ionic.Zlib.InternalInflateConstants */ 

(function InternalInflateConstants$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Int32)) ();
  };

  JSIL.MakeStaticClass("Ionic.Zlib.InternalInflateConstants", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:true , Public:false, ReadOnly:true }, "InflateMask", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    function InternalInflateConstants__cctor () {
      $thisType.InflateMask = JSIL.Array.New($T00(), [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535]);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      InternalInflateConstants__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Ionic.Zlib.InflateCodes */ 

(function InflateCodes$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm09.System.Int32))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.Ionic.Zlib.InflateBlocks)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibCodec)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.Ionic.Zlib.InternalInflateConstants)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Byte)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Array)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.Int64)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm09.TypeRef("System.Array"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Array"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Int32")
      ], []))) ();
  };

  function InflateCodes__ctor () {
  };

  function InflateCodes_InflateFast (bl, bd, tl, tl_index, td, td_index, s, z) {
    var $temp00, $temp01, $temp02, $temp03, $temp04, $temp05, $temp06, $temp07, $temp08, $temp09, $temp0A, $temp0B, $temp0C;
    var e = 0;

    var $label2 = 0;
  $labelgroup2: 
    while (true) {
      switch ($label2) {
        case 0: /* $entry2 */ 
          var p = z.NextIn;
          var i = z.AvailableBytesIn;
          var b = s.bitb;
          var j = s.bitk;
          var q = s.writeAt;
          var k = ((q < s.readAt) ? ((((s.readAt - q) | 0) - 1) | 0) : ((s.end - q) | 0));

          while (true) {
            if (j >= 20) {

              var $label1 = 0;
            $labelgroup1: 
              while (true) {
                switch ($label1) {
                  case 0: /* $entry1 */ 
                    var t = (b & $T04().InflateMask[bl]);
                    var tp_index_t_3 = ((((tl_index + t) | 0) * 3) | 0);
                    if ((e = tl[tp_index_t_3]) === 0) {
                      b = (b >> tl[((tp_index_t_3 + 1) | 0)]);
                      j = ((j - tl[((tp_index_t_3 + 1) | 0)]) | 0);
                      s.window[($temp00 = q, 
                        q = ((q + 1) | 0), 
                        $temp00)] = $T05().$Cast(tl[((tp_index_t_3 + 2) | 0)]);
                      k = ((k - 1) | 0);
                    } else {

                      var $label0 = 0;
                    $labelgroup0: 
                      while (true) {
                        switch ($label0) {
                          case 0: /* $entry0 */ 

                          $loop1: 
                            while (true) {
                              b = (b >> tl[((tp_index_t_3 + 1) | 0)]);
                              j = ((j - tl[((tp_index_t_3 + 1) | 0)]) | 0);
                              if ((e & 16) !== 0) {
                                break $loop1;
                              }
                              if ((e & 64) !== 0) {
                                $label2 = 2 /* goto IL_4B3 */ ;
                                continue $labelgroup2;
                              }
                              t = ((t + tl[((tp_index_t_3 + 2) | 0)]) | 0);
                              t = ((t + (b & $T04().InflateMask[e])) | 0);
                              tp_index_t_3 = ((((tl_index + t) | 0) * 3) | 0);
                              if ((e = tl[tp_index_t_3]) === 0) {
                                $label0 = 1 /* goto Block_20 */ ;
                                continue $labelgroup0;
                              }
                            }
                            e = (e & 15);
                            var c = ((tl[((tp_index_t_3 + 2) | 0)] + (b & $T04().InflateMask[e])) | 0);
                            b = (b >> e);

                            for (j = ((j - e) | 0); j < 15; j = ((j + 8) | 0)) {
                              i = ((i - 1) | 0);
                              b = (b | ((z.InputBuffer[($temp01 = p, 
                                      p = ((p + 1) | 0), 
                                      $temp01)] & 255) << j));
                            }
                            t = (b & $T04().InflateMask[bd]);
                            tp_index_t_3 = ((((td_index + t) | 0) * 3) | 0);
                            e = td[tp_index_t_3];

                          $loop3: 
                            while (true) {
                              b = (b >> td[((tp_index_t_3 + 1) | 0)]);
                              j = ((j - td[((tp_index_t_3 + 1) | 0)]) | 0);
                              if ((e & 16) !== 0) {
                                break $loop3;
                              }
                              if ((e & 64) !== 0) {
                                $label2 = 1 /* goto IL_3C1 */ ;
                                continue $labelgroup2;
                              }
                              t = ((t + td[((tp_index_t_3 + 2) | 0)]) | 0);
                              t = ((t + (b & $T04().InflateMask[e])) | 0);
                              tp_index_t_3 = ((((td_index + t) | 0) * 3) | 0);
                              e = td[tp_index_t_3];
                            }

                            for (e = (e & 15); j < e; ) {
                              i = ((i - 1) | 0);
                              b = (b | ((z.InputBuffer[($temp02 = p, 
                                      p = ((p + 1) | 0), 
                                      $temp02)] & 255) << j));
                              j = ((j + 8) | 0);
                            }
                            var d = ((td[((tp_index_t_3 + 2) | 0)] + (b & $T04().InflateMask[e])) | 0);
                            b = (b >> e);
                            j = ((j - e) | 0);
                            k = ((k - c) | 0);
                            if (q >= d) {
                              var r = ((q - d) | 0);
                              if (!((((q - r) | 0) <= 0) || (2 <= ((q - r) | 0)))) {
                                s.window[($temp03 = q, 
                                  q = ((q + 1) | 0), 
                                  $temp03)] = s.window[($temp04 = r, 
                                  r = ((r + 1) | 0), 
                                  $temp04)];
                                s.window[($temp05 = q, 
                                  q = ((q + 1) | 0), 
                                  $temp05)] = s.window[($temp06 = r, 
                                  r = ((r + 1) | 0), 
                                  $temp06)];
                                c = ((c - 2) | 0);
                              } else {
                                $S00().CallStatic($T06(), "Copy", null, 
                                  s.window, 
                                  r, 
                                  s.window, 
                                  q, 
                                  2
                                );
                                q = ((q + 2) | 0);
                                r = ((r + 2) | 0);
                                c = ((c - 2) | 0);
                              }
                            } else {
                              r = ((q - d) | 0);

                              do {
                                r = ((r + s.end) | 0);
                              } while (r < 0);
                              e = ((s.end - r) | 0);
                              if (c > e) {
                                c = ((c - e) | 0);
                                if (!((((q - r) | 0) <= 0) || (e <= ((q - r) | 0)))) {

                                  do {
                                    s.window[($temp07 = q, 
                                      q = ((q + 1) | 0), 
                                      $temp07)] = s.window[($temp08 = r, 
                                      r = ((r + 1) | 0), 
                                      $temp08)];
                                  } while ((e = ((e - 1) | 0)) !== 0);
                                } else {
                                  $S00().CallStatic($T06(), "Copy", null, 
                                    s.window, 
                                    r, 
                                    s.window, 
                                    q, 
                                    e
                                  );
                                  q = ((q + e) | 0);
                                  r = ((r + e) | 0);
                                }
                                r = 0;
                              }
                            }
                            if (!((((q - r) | 0) <= 0) || (c <= ((q - r) | 0)))) {

                              do {
                                s.window[($temp09 = q, 
                                  q = ((q + 1) | 0), 
                                  $temp09)] = s.window[($temp0A = r, 
                                  r = ((r + 1) | 0), 
                                  $temp0A)];
                              } while ((c = ((c - 1) | 0)) !== 0);
                              $label1 = 1 /* goto IL_5C0 */ ;
                              continue $labelgroup1;
                            }
                            $S00().CallStatic($T06(), "Copy", null, 
                              s.window, 
                              r, 
                              s.window, 
                              q, 
                              c
                            );
                            q = ((q + c) | 0);
                            r = ((r + c) | 0);
                            $label1 = 1 /* goto IL_5C0 */ ;
                            continue $labelgroup1;

                          case 1: /* Block_20 */ 
                            b = (b >> tl[((tp_index_t_3 + 1) | 0)]);
                            j = ((j - tl[((tp_index_t_3 + 1) | 0)]) | 0);
                            s.window[($temp0B = q, 
                              q = ((q + 1) | 0), 
                              $temp0B)] = $T05().$Cast(tl[((tp_index_t_3 + 2) | 0)]);
                            k = ((k - 1) | 0);
                            break $labelgroup0;

                        }
                      }
                    }

                    $label1 = 1 /* goto IL_5C0 */ ;
                    continue $labelgroup1;
                  case 1: /* IL_5C0 */ 
                    if (!((k >= 258) && (i >= 10))) {
                      $label2 = 3 /* goto IL_5D2 */ ;
                      continue $labelgroup2;
                    }
                    break $labelgroup1;

                }
              }
            } else {
              i = ((i - 1) | 0);
              b = (b | ((z.InputBuffer[($temp0C = p, 
                      p = ((p + 1) | 0), 
                      $temp0C)] & 255) << j));
              j = ((j + 8) | 0);
            }
          }

          $label2 = 1 /* goto IL_3C1 */ ;
          continue $labelgroup2;
        case 1: /* IL_3C1 */ 
          z.Message = "invalid distance code";
          c = ((z.AvailableBytesIn - i) | 0);
          c = (((j >> 3) < c) ? (j >> 3) : c);
          i = ((i + c) | 0);
          p = ((p - c) | 0);
          j = ((j - (c << 3)) | 0);
          s.bitb = b;
          s.bitk = j;
          z.AvailableBytesIn = i;
          z.TotalBytesIn = $T07().op_Addition(z.TotalBytesIn, $T07().FromNumber(((p - z.NextIn) | 0)));
          z.NextIn = p;
          s.writeAt = q;
          return -3;

          $label2 = 2 /* goto IL_4B3 */ ;
          continue $labelgroup2;
        case 2: /* IL_4B3 */ 
          if ((e & 32) !== 0) {
            c = ((z.AvailableBytesIn - i) | 0);
            c = (((j >> 3) < c) ? (j >> 3) : c);
            i = ((i + c) | 0);
            p = ((p - c) | 0);
            j = ((j - (c << 3)) | 0);
            s.bitb = b;
            s.bitk = j;
            z.AvailableBytesIn = i;
            z.TotalBytesIn = $T07().op_Addition(z.TotalBytesIn, $T07().FromNumber(((p - z.NextIn) | 0)));
            z.NextIn = p;
            s.writeAt = q;
            return 1;
          }
          z.Message = "invalid literal/length code";
          c = ((z.AvailableBytesIn - i) | 0);
          c = (((j >> 3) < c) ? (j >> 3) : c);
          i = ((i + c) | 0);
          p = ((p - c) | 0);
          j = ((j - (c << 3)) | 0);
          s.bitb = b;
          s.bitk = j;
          z.AvailableBytesIn = i;
          z.TotalBytesIn = $T07().op_Addition(z.TotalBytesIn, $T07().FromNumber(((p - z.NextIn) | 0)));
          z.NextIn = p;
          s.writeAt = q;
          return -3;

          $label2 = 3 /* goto IL_5D2 */ ;
          continue $labelgroup2;
        case 3: /* IL_5D2 */ 
          c = ((z.AvailableBytesIn - i) | 0);
          c = (((j >> 3) < c) ? (j >> 3) : c);
          i = ((i + c) | 0);
          p = ((p - c) | 0);
          j = ((j - (c << 3)) | 0);
          s.bitb = b;
          s.bitk = j;
          z.AvailableBytesIn = i;
          z.TotalBytesIn = $T07().op_Addition(z.TotalBytesIn, $T07().FromNumber(((p - z.NextIn) | 0)));
          z.NextIn = p;
          s.writeAt = q;
          return 0;

          break $labelgroup2;
      }
    }
  };

  function InflateCodes_Init (bl, bd, tl, tl_index, td, td_index) {
    this.mode = 0;
    this.lbits = $T05().$Cast(bl);
    this.dbits = $T05().$Cast(bd);
    this.ltree = tl;
    this.ltree_index = tl_index;
    this.dtree = td;
    this.dtree_index = td_index;
    this.tree = null;
  };

  function InflateCodes_Process (blocks, r) {
    var $temp00, $temp01, $temp02, $temp03, $temp04, $temp05, $temp06;

    var $label1 = 0;
  $labelgroup1: 
    while (true) {
      switch ($label1) {
        case 0: /* $entry1 */ 
          var z = blocks._codec;
          var p = z.NextIn;
          var i = z.AvailableBytesIn;
          var b = blocks.bitb;
          var j = blocks.bitk;
          var q = blocks.writeAt;
          var k = ((q < blocks.readAt) ? ((((blocks.readAt - q) | 0) - 1) | 0) : ((blocks.end - q) | 0));

        $loop0: 
          while (true) {

            var $label0 = 0;
          $labelgroup0: 
            while (true) {
              switch ($label0) {
                case 0: /* $entry0 */ 
                  switch (this.mode) {
                    case 0: 
                      if (!((k < 258) || (i < 10))) {
                        blocks.bitb = b;
                        blocks.bitk = j;
                        z.AvailableBytesIn = i;
                        z.TotalBytesIn = $T07().$Cast($T07().op_Addition(z.TotalBytesIn, $T07().FromNumber(((p - z.NextIn) | 0))));
                        z.NextIn = p;
                        blocks.writeAt = q;
                        r = this.InflateFast(
                          this.lbits, 
                          this.dbits, 
                          this.ltree, 
                          this.ltree_index, 
                          this.dtree, 
                          this.dtree_index, 
                          blocks, 
                          z
                        );
                        p = z.NextIn;
                        i = z.AvailableBytesIn;
                        b = blocks.bitb;
                        j = blocks.bitk;
                        q = blocks.writeAt;
                        k = ((q < blocks.readAt) ? ((((blocks.readAt - q) | 0) - 1) | 0) : ((blocks.end - q) | 0));
                        if (r !== 0) {
                          this.mode = ((r === 1) ? 7 : 9);
                          continue $labelgroup0;
                        }
                      }
                      this.need = this.lbits;
                      this.tree = this.ltree;
                      this.tree_index = this.ltree_index;
                      this.mode = 1;
                      $label0 = 1 /* goto IL_1AA */ ;
                      continue $labelgroup0;

                    case 1: 
                      $label0 = 1 /* goto IL_1AA */ ;
                      continue $labelgroup0;

                    case 2: 

                      for (var l = this.bitsToGet; j < l; ) {
                        if (i === 0) {
                          $label1 = 3 /* goto IL_36A */ ;
                          continue $labelgroup1;
                        }
                        r = 0;
                        i = ((i - 1) | 0);
                        b = (b | ((z.InputBuffer[($temp00 = p, 
                                p = ((p + 1) | 0), 
                                $temp00)] & 255) << j));
                        j = ((j + 8) | 0);
                      }
                      this.len = ((this.len + (b & $T04().InflateMask[l])) | 0);
                      b = (b >> l);
                      j = ((j - l) | 0);
                      this.need = this.dbits;
                      this.tree = this.dtree;
                      this.tree_index = this.dtree_index;
                      this.mode = 3;
                      $label0 = 2 /* goto IL_434 */ ;
                      continue $labelgroup0;

                    case 3: 
                      $label0 = 2 /* goto IL_434 */ ;
                      continue $labelgroup0;

                    case 4: 

                      for (l = this.bitsToGet; j < l; ) {
                        if (i === 0) {
                          $label1 = 6 /* goto IL_5C3 */ ;
                          continue $labelgroup1;
                        }
                        r = 0;
                        i = ((i - 1) | 0);
                        b = (b | ((z.InputBuffer[($temp01 = p, 
                                p = ((p + 1) | 0), 
                                $temp01)] & 255) << j));
                        j = ((j + 8) | 0);
                      }
                      this.dist = ((this.dist + (b & $T04().InflateMask[l])) | 0);
                      b = (b >> l);
                      j = ((j - l) | 0);
                      this.mode = 5;
                      $label0 = 3 /* goto IL_669 */ ;
                      continue $labelgroup0;

                    case 5: 
                      $label0 = 3 /* goto IL_669 */ ;
                      continue $labelgroup0;

                    case 6: 
                      if (k === 0) {
                        if (!((q !== blocks.end) || (blocks.readAt === 0))) {
                          q = 0;
                          k = ((q < blocks.readAt) ? ((((blocks.readAt - q) | 0) - 1) | 0) : ((blocks.end - q) | 0));
                        }
                        if (k === 0) {
                          blocks.writeAt = q;
                          r = blocks.Flush(r);
                          q = blocks.writeAt;
                          k = ((q < blocks.readAt) ? ((((blocks.readAt - q) | 0) - 1) | 0) : ((blocks.end - q) | 0));
                          if (!((q !== blocks.end) || (blocks.readAt === 0))) {
                            q = 0;
                            k = ((q < blocks.readAt) ? ((((blocks.readAt - q) | 0) - 1) | 0) : ((blocks.end - q) | 0));
                          }
                          if (k === 0) {
                            $label1 = 8 /* goto Block_44 */ ;
                            continue $labelgroup1;
                          }
                        }
                      }
                      r = 0;
                      blocks.window[($temp02 = q, 
                        q = ((q + 1) | 0), 
                        $temp02)] = $T05().$Cast(this.lit);
                      k = ((k - 1) | 0);
                      this.mode = 0;
                      continue $labelgroup0;

                    case 7: 
                      $label1 = 9 /* goto IL_913 */ ;
                      continue $labelgroup1;

                    case 8: 
                      $label1 = 10 /* goto IL_9C4 */ ;
                      continue $labelgroup1;

                    case 9: 
                      $label1 = 11 /* goto IL_A11 */ ;
                      continue $labelgroup1;

                  }
                  break $loop0;

                case 1: /* IL_1AA */ 

                  for (l = this.need; j < l; ) {
                    if (i === 0) {
                      $label1 = 1 /* goto IL_1BC */ ;
                      continue $labelgroup1;
                    }
                    r = 0;
                    i = ((i - 1) | 0);
                    b = (b | ((z.InputBuffer[($temp03 = p, 
                            p = ((p + 1) | 0), 
                            $temp03)] & 255) << j));
                    j = ((j + 8) | 0);
                  }
                  var tindex = ((((this.tree_index + (b & $T04().InflateMask[l])) | 0) * 3) | 0);
                  b = (b >> this.tree[((tindex + 1) | 0)]);
                  j = ((j - this.tree[((tindex + 1) | 0)]) | 0);
                  var e = this.tree[tindex];
                  if (e === 0) {
                    this.lit = this.tree[((tindex + 2) | 0)];
                    this.mode = 6;
                    continue $loop0;
                  }
                  if ((e & 16) !== 0) {
                    this.bitsToGet = (e & 15);
                    this.len = this.tree[((tindex + 2) | 0)];
                    this.mode = 2;
                    continue $loop0;
                  }
                  if ((e & 64) === 0) {
                    this.need = e;
                    this.tree_index = ((((tindex / 3) | 0) + this.tree[((tindex + 2) | 0)]) | 0);
                    continue $loop0;
                  }
                  if ((e & 32) !== 0) {
                    this.mode = 7;
                    continue $loop0;
                  }
                  $label1 = 2 /* goto IL_2F6 */ ;
                  continue $labelgroup1;

                case 2: /* IL_434 */ 

                  for (l = this.need; j < l; ) {
                    if (i === 0) {
                      $label1 = 4 /* goto IL_446 */ ;
                      continue $labelgroup1;
                    }
                    r = 0;
                    i = ((i - 1) | 0);
                    b = (b | ((z.InputBuffer[($temp04 = p, 
                            p = ((p + 1) | 0), 
                            $temp04)] & 255) << j));
                    j = ((j + 8) | 0);
                  }
                  tindex = ((((this.tree_index + (b & $T04().InflateMask[l])) | 0) * 3) | 0);
                  b = (b >> this.tree[((tindex + 1) | 0)]);
                  j = ((j - this.tree[((tindex + 1) | 0)]) | 0);
                  e = this.tree[tindex];
                  if ((e & 16) !== 0) {
                    this.bitsToGet = (e & 15);
                    this.dist = this.tree[((tindex + 2) | 0)];
                    this.mode = 4;
                    continue $loop0;
                  }
                  if ((e & 64) === 0) {
                    this.need = e;
                    this.tree_index = ((((tindex / 3) | 0) + this.tree[((tindex + 2) | 0)]) | 0);
                    continue $loop0;
                  }
                  $label1 = 5 /* goto IL_54F */ ;
                  continue $labelgroup1;

                case 3: /* IL_669 */ 

                  while (this.len !== 0) {
                    if (k === 0) {
                      if (!((q !== blocks.end) || (blocks.readAt === 0))) {
                        q = 0;
                        k = ((q < blocks.readAt) ? ((((blocks.readAt - q) | 0) - 1) | 0) : ((blocks.end - q) | 0));
                      }
                      if (k === 0) {
                        blocks.writeAt = q;
                        r = blocks.Flush(r);
                        q = blocks.writeAt;
                        k = ((q < blocks.readAt) ? ((((blocks.readAt - q) | 0) - 1) | 0) : ((blocks.end - q) | 0));
                        if (!((q !== blocks.end) || (blocks.readAt === 0))) {
                          q = 0;
                          k = ((q < blocks.readAt) ? ((((blocks.readAt - q) | 0) - 1) | 0) : ((blocks.end - q) | 0));
                        }
                        if (k === 0) {
                          $label1 = 7 /* goto Block_32 */ ;
                          continue $labelgroup1;
                        }
                      }
                    }
                    blocks.window[($temp05 = q, 
                      q = ((q + 1) | 0), 
                      $temp05)] = blocks.window[($temp06 = f, 
                      f = ((f + 1) | 0), 
                      $temp06)];
                    k = ((k - 1) | 0);
                    if (f === blocks.end) {
                      f = 0;
                    }
                    this.len = ((this.len - 1) | 0);
                  }
                  this.mode = 0;
                  break $labelgroup0;

              }
            }
          }
          r = -2;
          blocks.bitb = b;
          blocks.bitk = j;
          z.AvailableBytesIn = i;
          z.TotalBytesIn = $T07().$Cast($T07().op_Addition(z.TotalBytesIn, $T07().FromNumber(((p - z.NextIn) | 0))));
          z.NextIn = p;
          blocks.writeAt = q;
          return blocks.Flush(r);

          $label1 = 1 /* goto IL_1BC */ ;
          continue $labelgroup1;
        case 1: /* IL_1BC */ 
          blocks.bitb = b;
          blocks.bitk = j;
          z.AvailableBytesIn = i;
          z.TotalBytesIn = $T07().$Cast($T07().op_Addition(z.TotalBytesIn, $T07().FromNumber(((p - z.NextIn) | 0))));
          z.NextIn = p;
          blocks.writeAt = q;
          return blocks.Flush(r);

          $label1 = 2 /* goto IL_2F6 */ ;
          continue $labelgroup1;
        case 2: /* IL_2F6 */ 
          this.mode = 9;
          z.Message = "invalid literal/length code";
          r = -3;
          blocks.bitb = b;
          blocks.bitk = j;
          z.AvailableBytesIn = i;
          z.TotalBytesIn = $T07().$Cast($T07().op_Addition(z.TotalBytesIn, $T07().FromNumber(((p - z.NextIn) | 0))));
          z.NextIn = p;
          blocks.writeAt = q;
          return blocks.Flush(r);

          $label1 = 3 /* goto IL_36A */ ;
          continue $labelgroup1;
        case 3: /* IL_36A */ 
          blocks.bitb = b;
          blocks.bitk = j;
          z.AvailableBytesIn = i;
          z.TotalBytesIn = $T07().$Cast($T07().op_Addition(z.TotalBytesIn, $T07().FromNumber(((p - z.NextIn) | 0))));
          z.NextIn = p;
          blocks.writeAt = q;
          return blocks.Flush(r);

          $label1 = 4 /* goto IL_446 */ ;
          continue $labelgroup1;
        case 4: /* IL_446 */ 
          blocks.bitb = b;
          blocks.bitk = j;
          z.AvailableBytesIn = i;
          z.TotalBytesIn = $T07().$Cast($T07().op_Addition(z.TotalBytesIn, $T07().FromNumber(((p - z.NextIn) | 0))));
          z.NextIn = p;
          blocks.writeAt = q;
          return blocks.Flush(r);

          $label1 = 5 /* goto IL_54F */ ;
          continue $labelgroup1;
        case 5: /* IL_54F */ 
          this.mode = 9;
          z.Message = "invalid distance code";
          r = -3;
          blocks.bitb = b;
          blocks.bitk = j;
          z.AvailableBytesIn = i;
          z.TotalBytesIn = $T07().$Cast($T07().op_Addition(z.TotalBytesIn, $T07().FromNumber(((p - z.NextIn) | 0))));
          z.NextIn = p;
          blocks.writeAt = q;
          return blocks.Flush(r);

          $label1 = 6 /* goto IL_5C3 */ ;
          continue $labelgroup1;
        case 6: /* IL_5C3 */ 
          blocks.bitb = b;
          blocks.bitk = j;
          z.AvailableBytesIn = i;
          z.TotalBytesIn = $T07().$Cast($T07().op_Addition(z.TotalBytesIn, $T07().FromNumber(((p - z.NextIn) | 0))));
          z.NextIn = p;
          blocks.writeAt = q;
          return blocks.Flush(r);

          $label1 = 7 /* goto Block_32 */ ;
          continue $labelgroup1;
        case 7: /* Block_32 */ 
          blocks.bitb = b;
          blocks.bitk = j;
          z.AvailableBytesIn = i;
          z.TotalBytesIn = $T07().$Cast($T07().op_Addition(z.TotalBytesIn, $T07().FromNumber(((p - z.NextIn) | 0))));
          z.NextIn = p;
          blocks.writeAt = q;
          return blocks.Flush(r);

          $label1 = 8 /* goto Block_44 */ ;
          continue $labelgroup1;
        case 8: /* Block_44 */ 
          blocks.bitb = b;
          blocks.bitk = j;
          z.AvailableBytesIn = i;
          z.TotalBytesIn = $T07().$Cast($T07().op_Addition(z.TotalBytesIn, $T07().FromNumber(((p - z.NextIn) | 0))));
          z.NextIn = p;
          blocks.writeAt = q;
          return blocks.Flush(r);

          $label1 = 9 /* goto IL_913 */ ;
          continue $labelgroup1;
        case 9: /* IL_913 */ 
          if (j > 7) {
            j = ((j - 8) | 0);
            i = ((i + 1) | 0);
            p = ((p - 1) | 0);
          }
          blocks.writeAt = q;
          r = blocks.Flush(r);
          q = blocks.writeAt;
          var arg_963_0 = ((q < blocks.readAt) ? ((((blocks.readAt - q) | 0) - 1) | 0) : ((blocks.end - q) | 0));
          if (blocks.readAt !== blocks.writeAt) {
            blocks.bitb = b;
            blocks.bitk = j;
            z.AvailableBytesIn = i;
            z.TotalBytesIn = $T07().$Cast($T07().op_Addition(z.TotalBytesIn, $T07().FromNumber(((p - z.NextIn) | 0))));
            z.NextIn = p;
            blocks.writeAt = q;
            return blocks.Flush(r);
          }
          this.mode = 8;

          $label1 = 10 /* goto IL_9C4 */ ;
          continue $labelgroup1;
        case 10: /* IL_9C4 */ 
          r = 1;
          blocks.bitb = b;
          blocks.bitk = j;
          z.AvailableBytesIn = i;
          z.TotalBytesIn = $T07().$Cast($T07().op_Addition(z.TotalBytesIn, $T07().FromNumber(((p - z.NextIn) | 0))));
          z.NextIn = p;
          blocks.writeAt = q;
          return blocks.Flush(r);

          $label1 = 11 /* goto IL_A11 */ ;
          continue $labelgroup1;
        case 11: /* IL_A11 */ 
          r = -3;
          blocks.bitb = b;
          blocks.bitk = j;
          z.AvailableBytesIn = i;
          z.TotalBytesIn = $T07().$Cast($T07().op_Addition(z.TotalBytesIn, $T07().FromNumber(((p - z.NextIn) | 0))));
          z.NextIn = p;
          blocks.writeAt = q;
          return blocks.Flush(r);

          break $labelgroup1;
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Ionic.Zlib.InflateCodes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      InflateCodes__ctor
    );

    $.Method({Static:false, Public:false}, "InflateFast", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $asm0A.TypeRef("Ionic.Zlib.InflateBlocks"), $asm0A.TypeRef("Ionic.Zlib.ZlibCodec")
        ], []), 
      InflateCodes_InflateFast
    );

    $.Method({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32
        ], []), 
      InflateCodes_Init
    );

    $.Method({Static:false, Public:false}, "Process", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("Ionic.Zlib.InflateBlocks"), $.Int32], []), 
      InflateCodes_Process
    );

    $.Constant({Static:true , Public:false}, "START", 0); 
    $.Constant({Static:true , Public:false}, "LEN", 1); 
    $.Constant({Static:true , Public:false}, "LENEXT", 2); 
    $.Constant({Static:true , Public:false}, "DIST", 3); 
    $.Constant({Static:true , Public:false}, "DISTEXT", 4); 
    $.Constant({Static:true , Public:false}, "COPY", 5); 
    $.Constant({Static:true , Public:false}, "LIT", 6); 
    $.Constant({Static:true , Public:false}, "WASH", 7); 
    $.Constant({Static:true , Public:false}, "END", 8); 
    $.Constant({Static:true , Public:false}, "BADCODE", 9); 
    $.Field({Static:false, Public:false}, "mode", $.Int32); 
    $.Field({Static:false, Public:false}, "len", $.Int32); 
    $.Field({Static:false, Public:false}, "tree", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "tree_index", $.Int32); 
    $.Field({Static:false, Public:false}, "need", $.Int32); 
    $.Field({Static:false, Public:false}, "lit", $.Int32); 
    $.Field({Static:false, Public:false}, "bitsToGet", $.Int32); 
    $.Field({Static:false, Public:false}, "dist", $.Int32); 
    $.Field({Static:false, Public:false}, "lbits", $.Byte); 
    $.Field({Static:false, Public:false}, "dbits", $.Byte); 
    $.Field({Static:false, Public:false}, "ltree", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "ltree_index", $.Int32); 
    $.Field({Static:false, Public:false}, "dtree", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "dtree_index", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Ionic.Zlib.InflateManager */ 

(function InflateManager$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Byte)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.Ionic.Zlib.InflateBlocks)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Ionic.Zlib.FlushType)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm09.System.Byte))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.Int64)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.Ionic.Zlib.InflateManager_InflateManagerMode)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.UInt64)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm09.System.UInt32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibCodec)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0A.Ionic.Zlib.Adler)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.ZlibException"), [$asm09.TypeRef("System.String")]))) ();
  };

  function InflateManager__ctor$00 () {
    this._handleRfc1950HeaderBytes = true;
  };

  function InflateManager__ctor$01 (expectRfc1950HeaderBytes) {
    this._handleRfc1950HeaderBytes = true;
    this._handleRfc1950HeaderBytes = expectRfc1950HeaderBytes;
  };

  function InflateManager_End () {
    if (this.blocks !== null) {
      this.blocks.Free();
    }
    this.blocks = null;
    return 0;
  };

  function InflateManager_get_HandleRfc1950HeaderBytes () {
    return this._handleRfc1950HeaderBytes;
  };

  function InflateManager_Inflate (flush) {
    var $temp00, $temp01, $temp02, $temp03, $temp04, $temp05, $temp06, $temp07, $temp08, $temp09;

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          if (this._codec.InputBuffer === null) {
            throw $S00().Construct("InputBuffer is null. ");
          }
          var r = -5;

        $loop0: 
          while (true) {
            switch (this.mode.valueOf()) {
              case 0: 
                if (this._codec.AvailableBytesIn === 0) {
                  return r;
                }
                r = 0;
                this._codec.AvailableBytesIn = ((this._codec.AvailableBytesIn - 1) | 0);
                this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().Create(1, 0, 0)));
                if (((this.method = this._codec.InputBuffer[($temp00 = this._codec.NextIn, 
                        this._codec.NextIn = ((this._codec.NextIn + 1) | 0), 
                        $temp00)]) & 15) !== 8) {
                  this.mode = $T08().BAD;
                  this._codec.Message = $T09().Format("unknown compression method (0x{0:X2})", this.method);
                  this.marker = 5;
                  continue $labelgroup0;
                }
                if ((((this.method >> 4) + 8) | 0) > this.wbits) {
                  this.mode = $T08().BAD;
                  this._codec.Message = $T09().Format("invalid window size ({0})", (((this.method >> 4) + 8) | 0));
                  this.marker = 5;
                  continue $labelgroup0;
                }
                this.mode = $T08().FLAG;
                continue $labelgroup0;

              case 1: 
                if (this._codec.AvailableBytesIn === 0) {
                  return r;
                }
                r = 0;
                this._codec.AvailableBytesIn = ((this._codec.AvailableBytesIn - 1) | 0);
                this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().Create(1, 0, 0)));
                var b = (this._codec.InputBuffer[($temp01 = this._codec.NextIn, 
                    this._codec.NextIn = ((this._codec.NextIn + 1) | 0), 
                    $temp01)] & 255);
                if ((((((this.method << 8) + b) | 0) % 31) | 0) !== 0) {
                  this.mode = $T08().BAD;
                  this._codec.Message = "incorrect header check";
                  this.marker = 5;
                  continue $labelgroup0;
                }
                this.mode = (((b & 32) === 0) ? $T08().BLOCKS : $T08().DICT4);
                continue $labelgroup0;

              case 2: 
                if (this._codec.AvailableBytesIn === 0) {
                  return r;
                }
                r = 0;
                this._codec.AvailableBytesIn = ((this._codec.AvailableBytesIn - 1) | 0);
                this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().Create(1, 0, 0)));
                this.expectedCheck = ($T07().op_BitwiseAnd(
                    $T07().$Cast($T07().op_LeftShift($T07().FromNumber(this._codec.InputBuffer[($temp02 = this._codec.NextIn, 
                            this._codec.NextIn = ((this._codec.NextIn + 1) | 0), 
                            $temp02)]), 24)), 
                    ($T0A().FromNumber(-16777216)).ToInt64()
                  )).ToNumber(4294967295, false);
                this.mode = $T08().DICT3;
                continue $labelgroup0;

              case 3: 
                if (this._codec.AvailableBytesIn === 0) {
                  return r;
                }
                r = 0;
                this._codec.AvailableBytesIn = ((this._codec.AvailableBytesIn - 1) | 0);
                this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().Create(1, 0, 0)));
                this.expectedCheck = ((this.expectedCheck + $T0B().$Cast(((this._codec.InputBuffer[($temp03 = this._codec.NextIn, 
                            this._codec.NextIn = ((this._codec.NextIn + 1) | 0), 
                            $temp03)] << 16) & 16711680))) >>> 0);
                this.mode = $T08().DICT2;
                continue $labelgroup0;

              case 4: 
                if (this._codec.AvailableBytesIn === 0) {
                  return r;
                }
                r = 0;
                this._codec.AvailableBytesIn = ((this._codec.AvailableBytesIn - 1) | 0);
                this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().Create(1, 0, 0)));
                this.expectedCheck = ((this.expectedCheck + $T0B().$Cast(((this._codec.InputBuffer[($temp04 = this._codec.NextIn, 
                            this._codec.NextIn = ((this._codec.NextIn + 1) | 0), 
                            $temp04)] << 8) & 65280))) >>> 0);
                this.mode = $T08().DICT1;
                continue $labelgroup0;

              case 5: 
                $label0 = 1 /* goto IL_37E */ ;
                continue $labelgroup0;

              case 6: 
                $label0 = 2 /* goto IL_407 */ ;
                continue $labelgroup0;

              case 7: 
                r = this.blocks.Process(r);
                if (r === -3) {
                  this.mode = $T08().BAD;
                  this.marker = 0;
                  continue $labelgroup0;
                }
                if (r === 0) {
                  r = 0;
                }
                if (r !== 1) {
                  return r;
                }
                r = 0;
                this.computedCheck = this.blocks.Reset();
                if (!this.get_HandleRfc1950HeaderBytes()) {
                  $label0 = 3 /* goto Block_16 */ ;
                  continue $labelgroup0;
                }
                this.mode = $T08().CHECK4;
                continue $labelgroup0;

              case 8: 
                if (this._codec.AvailableBytesIn === 0) {
                  return r;
                }
                r = 0;
                this._codec.AvailableBytesIn = ((this._codec.AvailableBytesIn - 1) | 0);
                this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().Create(1, 0, 0)));
                this.expectedCheck = ($T07().op_BitwiseAnd(
                    $T07().$Cast($T07().op_LeftShift($T07().FromNumber(this._codec.InputBuffer[($temp05 = this._codec.NextIn, 
                            this._codec.NextIn = ((this._codec.NextIn + 1) | 0), 
                            $temp05)]), 24)), 
                    ($T0A().FromNumber(-16777216)).ToInt64()
                  )).ToNumber(4294967295, false);
                this.mode = $T08().CHECK3;
                continue $labelgroup0;

              case 9: 
                if (this._codec.AvailableBytesIn === 0) {
                  return r;
                }
                r = 0;
                this._codec.AvailableBytesIn = ((this._codec.AvailableBytesIn - 1) | 0);
                this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().Create(1, 0, 0)));
                this.expectedCheck = ((this.expectedCheck + $T0B().$Cast(((this._codec.InputBuffer[($temp06 = this._codec.NextIn, 
                            this._codec.NextIn = ((this._codec.NextIn + 1) | 0), 
                            $temp06)] << 16) & 16711680))) >>> 0);
                this.mode = $T08().CHECK2;
                continue $labelgroup0;

              case 10: 
                if (this._codec.AvailableBytesIn === 0) {
                  return r;
                }
                r = 0;
                this._codec.AvailableBytesIn = ((this._codec.AvailableBytesIn - 1) | 0);
                this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().Create(1, 0, 0)));
                this.expectedCheck = ((this.expectedCheck + $T0B().$Cast(((this._codec.InputBuffer[($temp07 = this._codec.NextIn, 
                            this._codec.NextIn = ((this._codec.NextIn + 1) | 0), 
                            $temp07)] << 8) & 65280))) >>> 0);
                this.mode = $T08().CHECK1;
                continue $labelgroup0;

              case 11: 
                if (this._codec.AvailableBytesIn === 0) {
                  return r;
                }
                r = 0;
                this._codec.AvailableBytesIn = ((this._codec.AvailableBytesIn - 1) | 0);
                this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().Create(1, 0, 0)));
                this.expectedCheck = ((this.expectedCheck + (this._codec.InputBuffer[($temp08 = this._codec.NextIn, 
                        this._codec.NextIn = ((this._codec.NextIn + 1) | 0), 
                        $temp08)] & 255)) >>> 0);
                if (this.computedCheck !== this.expectedCheck) {
                  this.mode = $T08().BAD;
                  this._codec.Message = "incorrect data check";
                  this.marker = 5;
                  continue $labelgroup0;
                }
                $label0 = 4 /* goto IL_6A4 */ ;
                continue $labelgroup0;

              case 12: 
                return 1;

              case 13: 
                $label0 = 5 /* goto IL_6B0 */ ;
                continue $labelgroup0;

            }
            break $loop0;
          }
          throw $S00().Construct("Stream error.");

          $label0 = 1 /* goto IL_37E */ ;
          continue $labelgroup0;
        case 1: /* IL_37E */ 
          if (this._codec.AvailableBytesIn === 0) {
            return r;
          }
          this._codec.AvailableBytesIn = ((this._codec.AvailableBytesIn - 1) | 0);
          this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().Create(1, 0, 0)));
          this.expectedCheck = ((this.expectedCheck + (this._codec.InputBuffer[($temp09 = this._codec.NextIn, 
                  this._codec.NextIn = ((this._codec.NextIn + 1) | 0), 
                  $temp09)] & 255)) >>> 0);
          this._codec._Adler32 = this.expectedCheck;
          this.mode = $T08().DICT0;
          return 2;

          $label0 = 2 /* goto IL_407 */ ;
          continue $labelgroup0;
        case 2: /* IL_407 */ 
          this.mode = $T08().BAD;
          this._codec.Message = "need dictionary";
          this.marker = 0;
          return -2;

          $label0 = 3 /* goto Block_16 */ ;
          continue $labelgroup0;
        case 3: /* Block_16 */ 
          this.mode = $T08().DONE;
          return 1;

          $label0 = 4 /* goto IL_6A4 */ ;
          continue $labelgroup0;
        case 4: /* IL_6A4 */ 
          this.mode = $T08().DONE;
          return 1;

          $label0 = 5 /* goto IL_6B0 */ ;
          continue $labelgroup0;
        case 5: /* IL_6B0 */ 
          throw $S00().Construct($T09().Format("Bad state ({0})", this._codec.Message));

          break $labelgroup0;
      }
    }
  };

  function InflateManager_Initialize (codec, w) {
    this._codec = codec;
    this._codec.Message = null;
    this.blocks = null;
    if (!((w >= 8) && (w <= 15))) {
      this.End();
      throw $S00().Construct("Bad window size.");
    }
    this.wbits = w;
    this.blocks = new ($T02())(codec, (this.get_HandleRfc1950HeaderBytes() ? this : null), (1 << w));
    this.Reset();
    return 0;
  };

  function InflateManager_Reset () {
    this._codec.TotalBytesIn = (this._codec.TotalBytesOut = $T07().Create(0, 0, 0));
    this._codec.Message = null;
    this.mode = (this.get_HandleRfc1950HeaderBytes() ? $T08().METHOD : $T08().BLOCKS);
    this.blocks.Reset();
    return 0;
  };

  function InflateManager_set_HandleRfc1950HeaderBytes (value) {
    this._handleRfc1950HeaderBytes = value;
  };

  function InflateManager_SetDictionary (dictionary) {
    var index = 0;
    var length = dictionary.length;
    if (this.mode !== $T08().DICT0) {
      throw $S00().Construct("Stream error.");
    }
    if ($T0D().Adler32(1, dictionary, 0, dictionary.length) !== this._codec._Adler32) {
      return -3;
    }
    this._codec._Adler32 = $T0D().Adler32(0, null, 0, 0);
    if (length >= (1 << this.wbits)) {
      length = (((1 << this.wbits) - 1) | 0);
      index = ((dictionary.length - length) | 0);
    }
    this.blocks.SetDictionary(dictionary, index, length);
    this.mode = $T08().BLOCKS;
    return 0;
  };

  function InflateManager_Sync () {
    var i = 0;
    if (this.mode !== $T08().BAD) {
      this.mode = $T08().BAD;
      this.marker = 0;
    }
    if ((i = this._codec.AvailableBytesIn) === 0) {
      return -5;
    }
    var p = this._codec.NextIn;
    var j = this.marker;

    while ((i !== 0) && (j < 4)) {
      if (this._codec.InputBuffer[p] === $thisType.mark[j]) {
        j = ((j + 1) | 0);
      } else if (this._codec.InputBuffer[p] !== 0) {
        j = 0;
      } else {
        j = ((4 - j) | 0);
      }
      p = ((p + 1) | 0);
      i = ((i - 1) | 0);
    }
    this._codec.TotalBytesIn = $T07().$Cast($T07().op_Addition(this._codec.TotalBytesIn, $T07().FromNumber(((p - this._codec.NextIn) | 0))));
    this._codec.NextIn = p;
    this._codec.AvailableBytesIn = i;
    this.marker = j;
    if (j !== 4) {
      return -3;
    }
    var r = this._codec.TotalBytesIn;
    var w = this._codec.TotalBytesOut;
    this.Reset();
    this._codec.TotalBytesIn = r;
    this._codec.TotalBytesOut = w;
    this.mode = $T08().BLOCKS;
    return 0;
  };

  function InflateManager_SyncPoint (z) {
    return this.blocks.SyncPoint();
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Ionic.Zlib.InflateManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      InflateManager__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      InflateManager__ctor$01
    );

    $.Method({Static:false, Public:false}, "End", 
      new JSIL.MethodSignature($.Int32, [], []), 
      InflateManager_End
    );

    $.Method({Static:false, Public:false}, "get_HandleRfc1950HeaderBytes", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      InflateManager_get_HandleRfc1950HeaderBytes
    );

    $.Method({Static:false, Public:false}, "Inflate", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("Ionic.Zlib.FlushType")], []), 
      InflateManager_Inflate
    );

    $.Method({Static:false, Public:false}, "Initialize", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("Ionic.Zlib.ZlibCodec"), $.Int32], []), 
      InflateManager_Initialize
    );

    $.Method({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature($.Int32, [], []), 
      InflateManager_Reset
    );

    $.Method({Static:false, Public:false}, "set_HandleRfc1950HeaderBytes", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      InflateManager_set_HandleRfc1950HeaderBytes
    );

    $.Method({Static:false, Public:false}, "SetDictionary", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte])], []), 
      InflateManager_SetDictionary
    );

    $.Method({Static:false, Public:false}, "Sync", 
      new JSIL.MethodSignature($.Int32, [], []), 
      InflateManager_Sync
    );

    $.Method({Static:false, Public:false}, "SyncPoint", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("Ionic.Zlib.ZlibCodec")], []), 
      InflateManager_SyncPoint
    );

    $.Constant({Static:true , Public:false}, "PRESET_DICT", 32); 
    $.Constant({Static:true , Public:false}, "Z_DEFLATED", 8); 
    $.Field({Static:false, Public:false}, "mode", $asm0A.TypeRef("Ionic.Zlib.InflateManager/InflateManagerMode")); 
    $.Field({Static:false, Public:false}, "_codec", $asm0A.TypeRef("Ionic.Zlib.ZlibCodec")); 
    $.Field({Static:false, Public:false}, "method", $.Int32); 
    $.Field({Static:false, Public:false}, "computedCheck", $.UInt32); 
    $.Field({Static:false, Public:false}, "expectedCheck", $.UInt32); 
    $.Field({Static:false, Public:false}, "marker", $.Int32); 
    $.Field({Static:false, Public:false}, "_handleRfc1950HeaderBytes", $.Boolean); 
    $.Field({Static:false, Public:false}, "wbits", $.Int32); 
    $.Field({Static:false, Public:false}, "blocks", $asm0A.TypeRef("Ionic.Zlib.InflateBlocks")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "mark", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    function InflateManager__cctor () {
      $thisType.mark = JSIL.Array.New($T00(), [0, 0, 255, 255]);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      InflateManager__cctor
    );

    $.Property({Static:false, Public:false}, "HandleRfc1950HeaderBytes", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Ionic.Zlib.InflateManager/InflateManagerMode */ 

JSIL.MakeEnum(
  "Ionic.Zlib.InflateManager/InflateManagerMode", false, {
    METHOD: 0, 
    FLAG: 1, 
    DICT4: 2, 
    DICT3: 3, 
    DICT2: 4, 
    DICT1: 5, 
    DICT0: 6, 
    BLOCKS: 7, 
    CHECK4: 8, 
    CHECK3: 9, 
    CHECK2: 10, 
    CHECK1: 11, 
    DONE: 12, 
    BAD: 13
  }, false
);

/* class Ionic.Zlib.InfTree */ 

(function InfTree$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm09.System.Int32))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.SByte)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Ionic.Zlib.SharedUtils)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Array)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibCodec)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm09.TypeRef("System.Array"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Array"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Int32")
      ], []))) ();
  };

  function InfTree__ctor () {
  };

  function InfTree_huft_build (b, bindex, n, s, d, e, t, m, hp, hn, v) {
    var $temp00, $temp01, $temp02, $temp03;
    var f = 0;
    var p = 0;
    var i = n;

    do {
      this.c[b[((bindex + p) | 0)]] = ((this.c[b[((bindex + p) | 0)]] + 1) | 0);
      p = ((p + 1) | 0);
      i = ((i - 1) | 0);
    } while (i !== 0);
    if (this.c[0] === n) {
      t[0] = -1;
      m[0] = 0;
      return 0;
    }
    var j = m[0];

    for (var k = 1; !((k > 15) || (this.c[k] !== 0)); k = ((k + 1) | 0)) {
    }
    var l = k;
    if (j < k) {
      j = k;
    }

    for (i = 15; !((i === 0) || (this.c[i] !== 0)); i = ((i - 1) | 0)) {
    }
    var g = i;
    if (j > i) {
      j = i;
    }
    m[0] = j;
    var y = (1 << k);

    while (k < i) {
      if ((y = ((y - this.c[k]) | 0)) < 0) {
        return -3;
      }
      k = ((k + 1) | 0);
      y = (y << 1);
    }
    if ((y = ((y - this.c[i]) | 0)) < 0) {
      return -3;
    }
    this.c[i] = ((this.c[i] + y) | 0);
    k = (this.x[1] = 0);
    p = 1;
    var xp = 2;

    while ((i = ((i - 1) | 0)) !== 0) {
      k = (this.x[xp] = ((k + this.c[p]) | 0));
      xp = ((xp + 1) | 0);
      p = ((p + 1) | 0);
    }
    i = 0;
    p = 0;

    do {
      if ((k = b[((bindex + p) | 0)]) !== 0) {
        v[($temp00 = this.x[k], 
          this.x[k] = ((this.x[k] + 1) | 0), 
          $temp00)] = i;
      }
      p = ((p + 1) | 0);
    } while ((i = ((i + 1) | 0)) < n);
    n = this.x[g];
    i = (this.x[0] = 0);
    p = 0;
    var h = -1;
    var w = (-j | 0);
    this.u[0] = 0;
    var q = 0;
    var z = 0;

    while (l <= g) {

      for (var a = this.c[l]; ($temp01 = a, 
          a = ((a - 1) | 0), 
          $temp01) !== 0; ) {

        while (l > ((w + j) | 0)) {
          h = ((h + 1) | 0);
          w = ((w + j) | 0);
          z = ((g - w) | 0);
          z = ((z > j) ? j : z);
          if ((f = (1 << ((k = ((l - w) | 0)) & 31))) > ((a + 1) | 0)) {
            f = ((f - ((a + 1) | 0)) | 0);
            xp = l;
            if (k < z) {

              for (; !(((k = ((k + 1) | 0)) >= z) || ((f = (f << 1)) <= this.c[(xp = ((xp + 1) | 0))])); f = ((f - this.c[xp]) | 0)) {
              }
            }
          }
          z = (1 << k);
          if (((hn[0] + z) | 0) > 1440) {
            return -3;
          }
          q = (this.u[h] = hn[0]);
          hn[0] = ((hn[0] + z) | 0);
          if (h !== 0) {
            this.x[h] = i;
            this.r[0] = $T02().$Cast(k);
            this.r[1] = $T02().$Cast(j);
            k = $T03().URShift(i, ((w - j) | 0));
            this.r[2] = ((((q - this.u[((h - 1) | 0)]) | 0) - k) | 0);
            $S00().CallStatic($T04(), "Copy", null, 
              this.r, 
              0, 
              hp, 
              ((((this.u[((h - 1) | 0)] + k) | 0) * 3) | 0), 
              3
            );
          } else {
            t[0] = q;
          }
        }
        this.r[1] = $T02().$Cast(((l - w) | 0));
        if (p >= n) {
          this.r[0] = 192;
        } else if (v[p] < s) {
          this.r[0] = ((v[p] < 256) ? 0 : 96);
          this.r[2] = v[($temp02 = p, 
            p = ((p + 1) | 0), 
            $temp02)];
        } else {
          this.r[0] = $T02().$Cast(((((e[((v[p] - s) | 0)] + 16) | 0) + 64) | 0));
          this.r[2] = d[((v[($temp03 = p, 
                p = ((p + 1) | 0), 
                $temp03)] - s) | 0)];
        }
        f = (1 << ((l - w) | 0));

        for (k = $T03().URShift(i, w); k < z; k = ((k + f) | 0)) {
          $S00().CallStatic($T04(), "Copy", null, 
            this.r, 
            0, 
            hp, 
            ((((q + k) | 0) * 3) | 0), 
            3
          );
        }

        for (k = (1 << ((l - 1) | 0)); (i & k) !== 0; k = $T03().URShift(k, 1)) {
          i = (i ^ k);
        }
        i = (i ^ k);

        for (var mask = (((1 << w) - 1) | 0); (i & mask) !== this.x[h]; ) {
          h = ((h - 1) | 0);
          w = ((w - j) | 0);
          mask = (((1 << w) - 1) | 0);
        }
      }
      l = ((l + 1) | 0);
    }
    if (!((y !== 0) && (g !== 1))) {
      return 0;
    }
    return -5;
  };

  function InfTree_inflate_trees_bits (c, bb, tb, hp, z) {
    this.initWorkArea(19);
    this.hn[0] = 0;
    var result = this.huft_build(
      c, 
      0, 
      19, 
      19, 
      null, 
      null, 
      tb, 
      bb, 
      hp, 
      this.hn, 
      this.v
    );
    if (result === -3) {
      z.Message = "oversubscribed dynamic bit lengths tree";
    } else if (!((result !== -5) && (bb[0] !== 0))) {
      z.Message = "incomplete dynamic bit lengths tree";
      result = -3;
    }
    return result;
  };

  function InfTree_inflate_trees_dynamic (nl, nd, c, bl, bd, tl, td, hp, z) {
    this.initWorkArea(288);
    this.hn[0] = 0;
    var result = this.huft_build(
      c, 
      0, 
      nl, 
      257, 
      $thisType.cplens, 
      $thisType.cplext, 
      tl, 
      bl, 
      hp, 
      this.hn, 
      this.v
    );
    if (!((result === 0) && (bl[0] !== 0))) {
      if (result === -3) {
        z.Message = "oversubscribed literal/length tree";
      } else if (result !== -4) {
        z.Message = "incomplete literal/length tree";
        result = -3;
      }
      return result;
    }
    this.initWorkArea(288);
    result = this.huft_build(
      c, 
      nl, 
      nd, 
      0, 
      $thisType.cpdist, 
      $thisType.cpdext, 
      td, 
      bd, 
      hp, 
      this.hn, 
      this.v
    );
    if (!((result === 0) && ((bd[0] !== 0) || 
          (nl <= 257)))) {
      if (result === -3) {
        z.Message = "oversubscribed distance tree";
      } else if (result === -5) {
        z.Message = "incomplete distance tree";
        result = -3;
      } else if (result !== -4) {
        z.Message = "empty distance tree with lengths";
        result = -3;
      }
      return result;
    }
    return 0;
  };

  function InfTree_inflate_trees_fixed (bl, bd, tl, td, z) {
    bl[0] = 9;
    bd[0] = 5;
    tl[0] = $thisType.fixed_tl;
    td[0] = $thisType.fixed_td;
    return 0;
  };

  function InfTree_initWorkArea (vsize) {
    if (this.hn === null) {
      this.hn = JSIL.Array.New($T00(), 1);
      this.v = JSIL.Array.New($T00(), vsize);
      this.c = JSIL.Array.New($T00(), 16);
      this.r = JSIL.Array.New($T00(), 3);
      this.u = JSIL.Array.New($T00(), 15);
      this.x = JSIL.Array.New($T00(), 16);
      return;
    }
    if (this.v.length < vsize) {
      this.v = JSIL.Array.New($T00(), vsize);
    }
    JSIL.Array.Erase(this.v, $T00().__Type__, 0, vsize);
    JSIL.Array.Erase(this.c, $T00().__Type__, 0, 16);
    this.r[0] = 0;
    this.r[1] = 0;
    this.r[2] = 0;
    JSIL.Array.Erase(this.u, $T00().__Type__, 0, 15);
    JSIL.Array.Erase(this.x, $T00().__Type__, 0, 16);
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Ionic.Zlib.InfTree", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      InfTree__ctor
    );

    $.Method({Static:false, Public:false}, "huft_build", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ], []), 
      InfTree_huft_build
    );

    $.Method({Static:false, Public:false}, "inflate_trees_bits", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $asm0A.TypeRef("Ionic.Zlib.ZlibCodec")
        ], []), 
      InfTree_inflate_trees_bits
    );

    $.Method({Static:false, Public:false}, "inflate_trees_dynamic", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $asm0A.TypeRef("Ionic.Zlib.ZlibCodec")
        ], []), 
      InfTree_inflate_trees_dynamic
    );

    $.Method({Static:true , Public:false}, "inflate_trees_fixed", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])]), $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])]), 
          $asm0A.TypeRef("Ionic.Zlib.ZlibCodec")
        ], []), 
      InfTree_inflate_trees_fixed
    );

    $.Method({Static:false, Public:false}, "initWorkArea", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      InfTree_initWorkArea
    );

    $.Constant({Static:true , Public:false}, "MANY", 1440); 
    $.Constant({Static:true , Public:false}, "Z_OK", 0); 
    $.Constant({Static:true , Public:false}, "Z_STREAM_END", 1); 
    $.Constant({Static:true , Public:false}, "Z_NEED_DICT", 2); 
    $.Constant({Static:true , Public:false}, "Z_ERRNO", -1); 
    $.Constant({Static:true , Public:false}, "Z_STREAM_ERROR", -2); 
    $.Constant({Static:true , Public:false}, "Z_DATA_ERROR", -3); 
    $.Constant({Static:true , Public:false}, "Z_MEM_ERROR", -4); 
    $.Constant({Static:true , Public:false}, "Z_BUF_ERROR", -5); 
    $.Constant({Static:true , Public:false}, "Z_VERSION_ERROR", -6); 
    $.Constant({Static:true , Public:false}, "fixed_bl", 9); 
    $.Constant({Static:true , Public:false}, "fixed_bd", 5); 
    $.Constant({Static:true , Public:false}, "BMAX", 15); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "fixed_tl", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "fixed_td", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "cplens", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "cplext", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "cpdist", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "cpdext", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "hn", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "v", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "c", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "r", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "u", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "x", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    function InfTree__cctor () {
      $thisType.fixed_tl = JSIL.Array.New($T00(), [96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 192, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 160, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 224, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 144, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 208, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 176, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 240, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 200, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 168, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 232, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 152, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 216, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 184, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 248, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 196, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 164, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 228, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 148, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 212, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 180, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 244, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 204, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 172, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 236, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 156, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 220, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 188, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 252, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 194, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 162, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 226, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 146, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 210, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 178, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 242, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 202, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 170, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 234, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 154, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 218, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 186, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 250, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 198, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 166, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 230, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 150, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 214, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 182, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 246, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 206, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 174, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 238, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 158, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 222, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 190, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 254, 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 193, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 161, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 225, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 145, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 209, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 177, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 241, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 201, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 169, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 233, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 153, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 217, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 185, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 249, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 197, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 165, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 229, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 149, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 213, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 181, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 245, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 205, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 173, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 237, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 157, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 221, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 189, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 253, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 195, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 163, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 227, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 147, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 211, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 179, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 243, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 203, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 171, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 235, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 155, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 219, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 187, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 251, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 199, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 167, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 231, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 151, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 215, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 183, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 247, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 207, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 175, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 239, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 159, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 223, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 191, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 255]);
      $thisType.fixed_td = JSIL.Array.New($T00(), [80, 5, 1, 87, 5, 257, 83, 5, 17, 91, 5, 4097, 81, 5, 5, 89, 5, 1025, 85, 5, 65, 93, 5, 16385, 80, 5, 3, 88, 5, 513, 84, 5, 33, 92, 5, 8193, 82, 5, 9, 90, 5, 2049, 86, 5, 129, 192, 5, 24577, 80, 5, 2, 87, 5, 385, 83, 5, 25, 91, 5, 6145, 81, 5, 7, 89, 5, 1537, 85, 5, 97, 93, 5, 24577, 80, 5, 4, 88, 5, 769, 84, 5, 49, 92, 5, 12289, 82, 5, 13, 90, 5, 3073, 86, 5, 193, 192, 5, 24577]);
      $thisType.cplens = JSIL.Array.New($T00(), [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0]);
      $thisType.cplext = JSIL.Array.New($T00(), [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112]);
      $thisType.cpdist = JSIL.Array.New($T00(), [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]);
      $thisType.cpdext = JSIL.Array.New($T00(), [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      InfTree__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Ionic.Zlib.WorkItem */ 

(function WorkItem$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionLevel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionStrategy)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Byte)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibCodec)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.ZlibCodec"), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$asm0A.TypeRef("Ionic.Zlib.CompressionLevel"), $asm09.TypeRef("System.Boolean")], []))) ();
  };

  function WorkItem__ctor (size, compressLevel, strategy, ix) {
    this.buffer = JSIL.Array.New($T03(), size);
    this.compressed = JSIL.Array.New($T03(), ((size + ((((((((size / 32768) | 0) + 1) | 0) * 5) | 0) * 2) | 0)) | 0));
    this.compressor = $S00().Construct();
    $S01().CallVirtual("InitializeDeflate", null, this.compressor, compressLevel, false);
    this.compressor.OutputBuffer = this.compressed;
    this.compressor.InputBuffer = this.buffer;
    this.index = ix;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Ionic.Zlib.WorkItem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm0A.TypeRef("Ionic.Zlib.CompressionLevel"), 
          $asm0A.TypeRef("Ionic.Zlib.CompressionStrategy"), $.Int32
        ], []), 
      WorkItem__ctor
    );

    $.Field({Static:false, Public:true }, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:true }, "compressed", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:true }, "crc", $.Int32); 
    $.Field({Static:false, Public:true }, "index", $.Int32); 
    $.Field({Static:false, Public:true }, "ordinal", $.Int32); 
    $.Field({Static:false, Public:true }, "inputBytesAvailable", $.Int32); 
    $.Field({Static:false, Public:true }, "compressedBytesAvailable", $.Int32); 
    $.Field({Static:false, Public:true }, "compressor", $asm0A.TypeRef("Ionic.Zlib.ZlibCodec")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Ionic.Zlib.ParallelDeflateOutputStream */ 

(function ParallelDeflateOutputStream$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.IO.Stream)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionLevel)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionStrategy)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.Ionic.Zlib.ParallelDeflateOutputStream_TraceBits)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Exception)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0B.System.Collections.Generic.Queue$b1.Of($asm09.System.Int32))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.Ionic.Zlib.WorkItem)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0A.Ionic.Crc.CRC32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.Threading.Monitor)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm09.System.Threading.EventWaitHandle)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm09.System.InvalidOperationException)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.Ionic.Zlib.WorkItem))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize(System.Array.Of($asm09.System.Byte))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm09.System.Byte)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibCodec)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0A.Ionic.Zlib.FlushType)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm09.System.Environment)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm09.System.Math)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm09.System.Threading.AutoResetEvent)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibException)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm09.System.Int64)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm09.System.Threading.WaitHandle)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm09.System.NotSupportedException)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm09.System.IO.SeekOrigin)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm09.System.ArgumentOutOfRangeException)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm09.System.ArgumentException)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize(System.Array.Of($asm09.System.Object))) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm09.System.Threading.Thread)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm09.System.Console)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm09.System.ConsoleColor)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm09.System.Buffer)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm09.System.Threading.ThreadPool)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm09.System.Threading.WaitCallback)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Object"), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Crc.CRC32"), []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.InvalidOperationException"), []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.ZlibCodec"), []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$asm0A.TypeRef("Ionic.Zlib.CompressionLevel"), $asm09.TypeRef("System.Boolean")], []))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Exception"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0B.TypeRef("System.Collections.Generic.Queue`1", [$asm09.TypeRef("System.Int32")]), []))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("Ionic.Zlib.WorkItem")]), []))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.ZlibException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Boolean"), [$asm09.TypeRef("System.Object"), $asm09.TypeRef("System.Int32")], []))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.NotSupportedException"), []))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.ArgumentOutOfRangeException"), [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.String")]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.ArgumentException"), [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.String")]))) ();
  };

  function ParallelDeflateOutputStream__ctor$00 (stream) {
    $thisType.prototype._ctor.call(this, stream, $T01().Level6, $T02().Default, false);
  };

  function ParallelDeflateOutputStream__ctor$01 (stream, level) {
    $thisType.prototype._ctor.call(this, stream, level, $T02().Default, false);
  };

  function ParallelDeflateOutputStream__ctor$02 (stream, leaveOpen) {
    $thisType.prototype._ctor.call(this, stream, $T01().Level6, $T02().Default, leaveOpen);
  };

  function ParallelDeflateOutputStream__ctor$03 (stream, level, leaveOpen) {
    $thisType.prototype._ctor.call(this, stream, $T01().Level6, $T02().Default, leaveOpen);
  };

  function ParallelDeflateOutputStream__ctor$04 (stream, level, strategy, leaveOpen) {
    this._bufferSize = $thisType.IO_BUFFER_SIZE_DEFAULT;
    this._outputLock = $S00().Construct();
    this._latestLock = $S00().Construct();
    this._eLock = $S00().Construct();
    this._DesiredTrace = $T05().$Flags(
        "Compress", "EmitAll", "EmitBegin", "EmitDone", 
        "EmitEnter", "EmitLock", "EmitSkip", "Session", 
        "WriteEnter", "WriteTake"
    );
    $T00().prototype._ctor.call(this);
    this._outStream = stream;
    this._compressLevel = level;
    this.ParallelDeflateOutputStream$Strategy$value = strategy;
    this._leaveOpen = leaveOpen;
    this.set_MaxBufferPairs(16);
  };

  function ParallelDeflateOutputStream__DeflateOne (wi, $exception) {
    var latestLock = null, toWrite = null, eLock = null;
    var workitem = $T08().$Cast(wi);
    var flag = new JSIL.BoxedVariable(false);
    var flag2 = new JSIL.BoxedVariable(false);
    var flag3 = new JSIL.BoxedVariable(false);
    try {
      var crc = $S01().Construct();
      crc.SlurpBlock(workitem.buffer, 0, workitem.inputBytesAvailable);
      this.DeflateOneSegment(workitem);
      workitem.crc = crc.get_Crc32Result();
      flag.set(false);
      try {
        $T0A().Enter((latestLock = this._latestLock), /* ref */ flag);
        if (workitem.ordinal > this._latestCompressed) {
          this._latestCompressed = workitem.ordinal;
        }
      } finally {
        if (flag.get()) {
          $T0A().Exit(latestLock);
        }
      }
      flag2.set(false);
      try {
        $T0A().Enter((toWrite = this._toWrite), /* ref */ flag2);
        $T07().prototype.Enqueue.call(this._toWrite, workitem.index);
      } finally {
        if (flag2.get()) {
          $T0A().Exit(toWrite);
        }
      }
      this._newlyCompressedBlob.Set();
    } catch ($exception) {
      flag3.set(false);
      try {
        $T0A().Enter((eLock = this._eLock), /* ref */ flag3);
        if (this._pendingException !== null) {
          this._pendingException = $exception;
        }
      } finally {
        if (flag3.get()) {
          $T0A().Exit(eLock);
        }
      }
    }
  };

  function ParallelDeflateOutputStream__Flush (lastInput) {
    if (this._isClosed) {
      throw $S02().Construct();
    }
    if (this.emitting) {
      return;
    }
    if (this._currentlyFilling >= 0) {
      var workitem = this._pool.get_Item(this._currentlyFilling);
      this._DeflateOne(workitem);
      this._currentlyFilling = -1;
    }
    if (lastInput) {
      this.EmitPendingBuffers(true, false);
      this._FlushFinish();
      return;
    }
    this.EmitPendingBuffers(false, false);
  };

  function ParallelDeflateOutputStream__FlushFinish () {
    var buffer = JSIL.Array.New($T0F(), 128);
    var compressor = $S03().Construct();
    var rc = $S04().CallVirtual("InitializeDeflate", null, compressor, this._compressLevel, false);
    compressor.InputBuffer = null;
    compressor.NextIn = 0;
    compressor.AvailableBytesIn = 0;
    compressor.OutputBuffer = buffer;
    compressor.NextOut = 0;
    compressor.AvailableBytesOut = buffer.length;
    rc = compressor.Deflate($T12().Finish);
    if (!((rc === 1) || (rc === 0))) {
      throw $S05().Construct(JSIL.ConcatString("deflating: ", compressor.Message));
    }
    if (((buffer.length - compressor.AvailableBytesOut) | 0) > 0) {
      this._outStream.Write(buffer, 0, ((buffer.length - compressor.AvailableBytesOut) | 0));
    }
    compressor.EndDeflate();
    this._Crc32 = this._runningCrc.get_Crc32Result();
  };

  function ParallelDeflateOutputStream__InitializePoolOfWorkItems () {
    this._toWrite = $S06().Construct();
    this._toFill = $S06().Construct();
    this._pool = $S07().Construct();
    var nTasks = (($thisType.BufferPairsPerCore * $T15().get_ProcessorCount()) | 0);
    nTasks = $T16().Min(nTasks, this._maxBufferPairs);

    for (var i = 0; i < nTasks; i = ((i + 1) | 0)) {
      this._pool.Add(new ($T08())(this._bufferSize, this._compressLevel, this.ParallelDeflateOutputStream$Strategy$value, i));
      $T07().prototype.Enqueue.call(this._toFill, i);
    }
    this._newlyCompressedBlob = new ($T17())(false);
    this._runningCrc = $S01().Construct();
    this._currentlyFilling = -1;
    this._lastFilled = -1;
    this._lastWritten = -1;
    this._latestCompressed = -1;
  };

  function ParallelDeflateOutputStream_Close () {
    if (this._pendingException !== null) {
      this._handlingException = true;
      var pe = this._pendingException;
      this._pendingException = null;
      throw pe;
    }
    if (this._handlingException) {
      return;
    }
    if (this._isClosed) {
      return;
    }
    this._Flush(true);
    if (!this._leaveOpen) {
      this._outStream.Close();
    }
    this._isClosed = true;
  };

  function ParallelDeflateOutputStream_DeflateOneSegment (workitem) {
    var compressor = workitem.compressor;
    compressor.ResetDeflate();
    compressor.NextIn = 0;
    compressor.AvailableBytesIn = workitem.inputBytesAvailable;
    compressor.NextOut = 0;
    compressor.AvailableBytesOut = workitem.compressed.length;

    do {
      compressor.Deflate($T12().None);
    } while ((compressor.AvailableBytesIn > 0) || (compressor.AvailableBytesOut === 0));
    var rc = compressor.Deflate($T12().Sync);
    if ((rc !== 0) | (rc !== 1)) {
      throw $S08().Construct("Deflate: unknown return code");
    }
    workitem.compressedBytesAvailable = compressor.TotalBytesOut.ToNumber(4294967295, true);
    return true;
  };

  function ParallelDeflateOutputStream_Dispose$05 () {
    this.Close();
    this._pool = null;
    this.Dispose(true);
  };

  function ParallelDeflateOutputStream_Dispose$06 (disposing) {
    $T00().prototype.Dispose.call(this, disposing);
  };

  function ParallelDeflateOutputStream_EmitPendingBuffers (doAll, mustWait) {
    var toWrite = null;
    if (this.emitting) {
      return;
    }
    this.emitting = true;
    if (!(!doAll && !mustWait)) {
      this._newlyCompressedBlob.WaitOne();
    }
    var flag = new JSIL.BoxedVariable(false);

    do {
      var firstSkip = -1;
      var millisecondsToWait = (doAll ? 200 : (mustWait ? -1 : 0));
      var nextToWrite = -1;

      do {
        if ($S09().CallStatic($T0A(), "TryEnter", null, this._toWrite, millisecondsToWait)) {
          nextToWrite = -1;
          try {
            if (this._toWrite.get_Count() > 0) {
              nextToWrite = $T07().prototype.Dequeue.call(this._toWrite);
            }
          } finally {
            $T0A().Exit(this._toWrite);
          }
          if (nextToWrite >= 0) {
            var workitem = this._pool.get_Item(nextToWrite);
            if (workitem.ordinal !== ((this._lastWritten + 1) | 0)) {
              flag.set(false);
              try {
                $T0A().Enter((toWrite = this._toWrite), /* ref */ flag);
                $T07().prototype.Enqueue.call(this._toWrite, nextToWrite);
              } finally {
                if (flag.get()) {
                  $T0A().Exit(toWrite);
                }
              }
              if (firstSkip === nextToWrite) {
                this._newlyCompressedBlob.WaitOne();
                firstSkip = -1;
              } else if (firstSkip === -1) {
                firstSkip = nextToWrite;
              }
            } else {
              firstSkip = -1;
              this._outStream.Write(workitem.compressed, 0, workitem.compressedBytesAvailable);
              this._runningCrc.Combine(workitem.crc, workitem.inputBytesAvailable);
              this._totalBytesProcessed = $T19().op_Addition(this._totalBytesProcessed, $T19().FromNumber(workitem.inputBytesAvailable));
              workitem.inputBytesAvailable = 0;
              this._lastWritten = workitem.ordinal;
              $T07().prototype.Enqueue.call(this._toFill, workitem.index);
              if (millisecondsToWait === -1) {
                millisecondsToWait = 0;
              }
            }
          }
        } else {
          nextToWrite = -1;
        }
      } while (nextToWrite >= 0);
    } while (doAll && (this._lastWritten !== this._latestCompressed));
    this.emitting = false;
  };

  function ParallelDeflateOutputStream_Flush () {
    if (this._pendingException !== null) {
      this._handlingException = true;
      var pe = this._pendingException;
      this._pendingException = null;
      throw pe;
    }
    if (this._handlingException) {
      return;
    }
    this._Flush(false);
  };

  function ParallelDeflateOutputStream_get_BufferSize () {
    return this._bufferSize;
  };

  function ParallelDeflateOutputStream_get_BytesProcessed () {
    return this._totalBytesProcessed;
  };

  function ParallelDeflateOutputStream_get_CanRead () {
    return false;
  };

  function ParallelDeflateOutputStream_get_CanSeek () {
    return false;
  };

  function ParallelDeflateOutputStream_get_CanWrite () {
    return this._outStream.get_CanWrite();
  };

  function ParallelDeflateOutputStream_get_Crc32 () {
    return this._Crc32;
  };

  function ParallelDeflateOutputStream_get_Length () {
    throw $S0A().Construct();
  };

  function ParallelDeflateOutputStream_get_MaxBufferPairs () {
    return this._maxBufferPairs;
  };

  function ParallelDeflateOutputStream_get_Position () {
    return this._outStream.get_Position();
  };

  function ParallelDeflateOutputStream_get_Strategy () {
    return this.ParallelDeflateOutputStream$Strategy$value;
  };

  function ParallelDeflateOutputStream_Read (buffer, offset, count) {
    throw $S0A().Construct();
  };

  function ParallelDeflateOutputStream_Reset (stream) {
    var $temp00;
    if (!this._firstWriteDone) {
      return;
    }
    $T07().prototype.Clear.call(this._toWrite);
    $T07().prototype.Clear.call(this._toFill);

    for (var a$0 = this._pool._items, i$0 = 0, l$0 = this._pool._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var workitem = a$0[i$0];
      $T07().prototype.Enqueue.call(this._toFill, workitem.index);
      workitem.ordinal = -1;
    }
    this._firstWriteDone = false;
    this._totalBytesProcessed = $T19().Create(0, 0, 0);
    this._runningCrc = $S01().Construct();
    this._isClosed = false;
    this._currentlyFilling = -1;
    this._lastFilled = -1;
    this._lastWritten = -1;
    this._latestCompressed = -1;
    this._outStream = stream;
  };

  function ParallelDeflateOutputStream_Seek (offset, origin) {
    throw $S0A().Construct();
  };

  function ParallelDeflateOutputStream_set_BufferSize (value) {
    if (value < 1024) {
      throw $S0B().Construct("BufferSize", "BufferSize must be greater than 1024 bytes");
    }
    this._bufferSize = value;
  };

  function ParallelDeflateOutputStream_set_MaxBufferPairs (value) {
    if (value < 4) {
      throw $S0C().Construct("MaxBufferPairs", "Value must be 4 or greater.");
    }
    this._maxBufferPairs = value;
  };

  function ParallelDeflateOutputStream_set_Position (value) {
    throw $S0A().Construct();
  };

  function ParallelDeflateOutputStream_set_Strategy (value) {
    this.ParallelDeflateOutputStream$Strategy$value = value;
  };

  function ParallelDeflateOutputStream_SetLength (value) {
    throw $S0A().Construct();
  };

  function ParallelDeflateOutputStream_TraceOutput (bits, format, varParams) {
    var outputLock = null;
    var flag = new JSIL.BoxedVariable(false);
    if ($T05().$Cast((bits & this._DesiredTrace)).valueOf() !== 0) {
      flag.set(false);
      try {
        $T0A().Enter((outputLock = this._outputLock), /* ref */ flag);
        var tid = $T20().get_CurrentThread().GetHashCode();
        $T21().set_ForegroundColor($asm09.System.ConsoleColor.$Cast(((tid % 8) | 0) + $T22().DarkGray));
        $T21().Write("{0:000} PDOS ", tid);
        $T21().WriteLine(format, varParams);
        $T21().ResetColor();
      } finally {
        if (flag.get()) {
          $T0A().Exit(outputLock);
        }
      }
    }
  };

  function ParallelDeflateOutputStream_Write (buffer, offset, count) {
    var mustWait = false;
    if (this._isClosed) {
      throw $S02().Construct();
    }
    if (this._pendingException !== null) {
      this._handlingException = true;
      var pe = this._pendingException;
      this._pendingException = null;
      throw pe;
    }
    if (count === 0) {
      return;
    }
    if (!this._firstWriteDone) {
      this._InitializePoolOfWorkItems();
      this._firstWriteDone = true;
    }

  $loop0: 
    while (true) {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            this.EmitPendingBuffers(false, mustWait);
            mustWait = false;
            if (this._currentlyFilling >= 0) {
              var ix = this._currentlyFilling;
              $label0 = 2 /* goto IL_9A */ ;
              continue $labelgroup0;
            }
            if (this._toFill.get_Count() !== 0) {
              ix = $T07().prototype.Dequeue.call(this._toFill);
              this._lastFilled = ((this._lastFilled + 1) | 0);
              $label0 = 2 /* goto IL_9A */ ;
              continue $labelgroup0;
            }
            mustWait = true;

            $label0 = 1 /* goto IL_14C */ ;
            continue $labelgroup0;
          case 1: /* IL_14C */ 
            if (count <= 0) {
              return;
            }
            continue $loop0;

          case 2: /* IL_9A */ 
            var workitem = this._pool.get_Item(ix);
            var limit = ((((workitem.buffer.length - workitem.inputBytesAvailable) | 0) > count) ? count : ((workitem.buffer.length - workitem.inputBytesAvailable) | 0));
            workitem.ordinal = this._lastFilled;
            $T23().BlockCopy(
              buffer, 
              offset, 
              workitem.buffer, 
              workitem.inputBytesAvailable, 
              limit
            );
            count = ((count - limit) | 0);
            offset = ((offset + limit) | 0);
            workitem.inputBytesAvailable = ((workitem.inputBytesAvailable + limit) | 0);
            if (workitem.inputBytesAvailable === workitem.buffer.length) {
              if (!$T24().QueueUserWorkItem($T25().New(this, $thisType.prototype._DeflateOne), workitem)) {
                break $loop0;
              }
              this._currentlyFilling = -1;
            } else {
              this._currentlyFilling = ix;
            }
            $label0 = 1 /* goto IL_14C */ ;
            continue $labelgroup0;

        }
      }
    }
    throw $S05().Construct("Cannot enqueue workitem");
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.IO.Stream"), 
      Name: "Ionic.Zlib.ParallelDeflateOutputStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream")], []), 
      ParallelDeflateOutputStream__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionLevel")], []), 
      ParallelDeflateOutputStream__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $.Boolean], []), 
      ParallelDeflateOutputStream__ctor$02
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionLevel"), 
          $.Boolean
        ], []), 
      ParallelDeflateOutputStream__ctor$03
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionLevel"), 
          $asm0A.TypeRef("Ionic.Zlib.CompressionStrategy"), $.Boolean
        ], []), 
      ParallelDeflateOutputStream__ctor$04
    );

    $.Method({Static:false, Public:false}, "_DeflateOne", 
      new JSIL.MethodSignature(null, [$.Object], []), 
      ParallelDeflateOutputStream__DeflateOne
    );

    $.Method({Static:false, Public:false}, "_Flush", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      ParallelDeflateOutputStream__Flush
    );

    $.Method({Static:false, Public:false}, "_FlushFinish", 
      new JSIL.MethodSignature(null, [], []), 
      ParallelDeflateOutputStream__FlushFinish
    );

    $.Method({Static:false, Public:false}, "_InitializePoolOfWorkItems", 
      new JSIL.MethodSignature(null, [], []), 
      ParallelDeflateOutputStream__InitializePoolOfWorkItems
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], []), 
      ParallelDeflateOutputStream_Close
    );

    $.Method({Static:false, Public:false}, "DeflateOneSegment", 
      new JSIL.MethodSignature($.Boolean, [$asm0A.TypeRef("Ionic.Zlib.WorkItem")], []), 
      ParallelDeflateOutputStream_DeflateOneSegment
    );

    $.Method({Static:false, Public:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], []), 
      ParallelDeflateOutputStream_Dispose$05
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      ParallelDeflateOutputStream_Dispose$06
    );

    $.Method({Static:false, Public:false}, "EmitPendingBuffers", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean], []), 
      ParallelDeflateOutputStream_EmitPendingBuffers
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], []), 
      ParallelDeflateOutputStream_Flush
    );

    $.Method({Static:false, Public:true }, "get_BufferSize", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ParallelDeflateOutputStream_get_BufferSize
    );

    $.Method({Static:false, Public:true }, "get_BytesProcessed", 
      new JSIL.MethodSignature($.Int64, [], []), 
      ParallelDeflateOutputStream_get_BytesProcessed
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ParallelDeflateOutputStream_get_CanRead
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ParallelDeflateOutputStream_get_CanSeek
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ParallelDeflateOutputStream_get_CanWrite
    );

    $.Method({Static:false, Public:true }, "get_Crc32", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ParallelDeflateOutputStream_get_Crc32
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], []), 
      ParallelDeflateOutputStream_get_Length
    );

    $.Method({Static:false, Public:true }, "get_MaxBufferPairs", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ParallelDeflateOutputStream_get_MaxBufferPairs
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Position", 
      new JSIL.MethodSignature($.Int64, [], []), 
      ParallelDeflateOutputStream_get_Position
    );

    $.Method({Static:false, Public:true }, "get_Strategy", 
      new JSIL.MethodSignature($asm0A.TypeRef("Ionic.Zlib.CompressionStrategy"), [], []), 
      ParallelDeflateOutputStream_get_Strategy
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], []), 
      ParallelDeflateOutputStream_Read
    );

    $.Method({Static:false, Public:true }, "Reset", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream")], []), 
      ParallelDeflateOutputStream_Reset
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm09.TypeRef("System.IO.SeekOrigin")], []), 
      ParallelDeflateOutputStream_Seek
    );

    $.Method({Static:false, Public:true }, "set_BufferSize", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      ParallelDeflateOutputStream_set_BufferSize
    );

    $.Method({Static:false, Public:true }, "set_MaxBufferPairs", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      ParallelDeflateOutputStream_set_MaxBufferPairs
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$.Int64], []), 
      ParallelDeflateOutputStream_set_Position
    );

    $.Method({Static:false, Public:false}, "set_Strategy", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Ionic.Zlib.CompressionStrategy")], []), 
      ParallelDeflateOutputStream_set_Strategy
    )
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int64], []), 
      ParallelDeflateOutputStream_SetLength
    );

    $.Method({Static:false, Public:false}, "TraceOutput", 
      new JSIL.MethodSignature(null, [
          $asm0A.TypeRef("Ionic.Zlib.ParallelDeflateOutputStream/TraceBits"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ], []), 
      ParallelDeflateOutputStream_TraceOutput
    )
      .Attribute($asm09.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["Trace"]; });

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], []), 
      ParallelDeflateOutputStream_Write
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "IO_BUFFER_SIZE_DEFAULT", $.Int32, 65536); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BufferPairsPerCore", $.Int32, 4); 
    $.Field({Static:false, Public:false}, "_pool", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("Ionic.Zlib.WorkItem")])); 
    $.Field({Static:false, Public:false}, "_leaveOpen", $.Boolean); 
    $.Field({Static:false, Public:false}, "emitting", $.Boolean); 
    $.Field({Static:false, Public:false}, "_outStream", $asm09.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "_maxBufferPairs", $.Int32); 
    $.Field({Static:false, Public:false}, "_bufferSize", $.Int32); 
    $.Field({Static:false, Public:false}, "_newlyCompressedBlob", $asm09.TypeRef("System.Threading.AutoResetEvent")); 
    $.Field({Static:false, Public:false}, "_outputLock", $.Object); 
    $.Field({Static:false, Public:false}, "_isClosed", $.Boolean); 
    $.Field({Static:false, Public:false}, "_firstWriteDone", $.Boolean); 
    $.Field({Static:false, Public:false}, "_currentlyFilling", $.Int32); 
    $.Field({Static:false, Public:false}, "_lastFilled", $.Int32); 
    $.Field({Static:false, Public:false}, "_lastWritten", $.Int32); 
    $.Field({Static:false, Public:false}, "_latestCompressed", $.Int32); 
    $.Field({Static:false, Public:false}, "_Crc32", $.Int32); 
    $.Field({Static:false, Public:false}, "_runningCrc", $asm0A.TypeRef("Ionic.Crc.CRC32")); 
    $.Field({Static:false, Public:false}, "_latestLock", $.Object); 
    $.Field({Static:false, Public:false}, "_toWrite", $asm0B.TypeRef("System.Collections.Generic.Queue`1", [$.Int32])); 
    $.Field({Static:false, Public:false}, "_toFill", $asm0B.TypeRef("System.Collections.Generic.Queue`1", [$.Int32])); 
    $.Field({Static:false, Public:false}, "_totalBytesProcessed", $.Int64); 
    $.Field({Static:false, Public:false}, "_compressLevel", $asm0A.TypeRef("Ionic.Zlib.CompressionLevel")); 
    $.Field({Static:false, Public:false}, "_pendingException", $asm09.TypeRef("System.Exception")); 
    $.Field({Static:false, Public:false}, "_handlingException", $.Boolean); 
    $.Field({Static:false, Public:false}, "_eLock", $.Object); 
    $.Field({Static:false, Public:false}, "_DesiredTrace", $asm0A.TypeRef("Ionic.Zlib.ParallelDeflateOutputStream/TraceBits")); 
    $.Field({Static:false, Public:false}, "ParallelDeflateOutputStream$Strategy$value", $asm0A.TypeRef("Ionic.Zlib.CompressionStrategy"))
      .Attribute($asm09.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    function ParallelDeflateOutputStream__cctor () {
      $thisType.IO_BUFFER_SIZE_DEFAULT = 65536;
      $thisType.BufferPairsPerCore = 4;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      ParallelDeflateOutputStream__cctor
    );

    $.Property({Static:false, Public:true }, "Strategy", $asm0A.TypeRef("Ionic.Zlib.CompressionStrategy"));

    $.Property({Static:false, Public:true }, "MaxBufferPairs", $.Int32);

    $.Property({Static:false, Public:true }, "BufferSize", $.Int32);

    $.Property({Static:false, Public:true }, "Crc32", $.Int32);

    $.Property({Static:false, Public:true }, "BytesProcessed", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Ionic.Zlib.ParallelDeflateOutputStream/TraceBits */ 

JSIL.MakeEnum(
  "Ionic.Zlib.ParallelDeflateOutputStream/TraceBits", false, {
    None: 0, 
    NotUsed1: 1, 
    EmitLock: 2, 
    EmitEnter: 4, 
    EmitBegin: 8, 
    EmitDone: 16, 
    EmitSkip: 32, 
    EmitAll: 58, 
    Flush: 64, 
    Lifecycle: 128, 
    Session: 256, 
    Synch: 512, 
    Instance: 1024, 
    Compress: 2048, 
    Write: 4096, 
    WriteEnter: 8192, 
    WriteTake: 16384, 
    All: 4294967295
  }, true
);

/* class Ionic.Zlib.Tree */ 

(function Tree$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.Ionic.Zlib.InternalConstants)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.SByte)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Ionic.Zlib.DeflateManager)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm09.System.Int16))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Int16)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Math)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.Byte)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.Ionic.Zlib.SharedUtils)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.Int64)) ();
  };

  function Tree__ctor () {
  };

  function Tree_bi_reverse (code, len) {
    var res = 0;

    do {
      res = (res | (code & 1));
      code = (code >> 1);
      res = (res << 1);
    } while ((len = ((len - 1) | 0)) > 0);
    return (res >> 1);
  };

  function Tree_build_tree (s) {
    var $temp00, $temp01;
    var tree = this.dyn_tree;
    var stree = this.staticTree.treeCodes;
    var elems = this.staticTree.elems;
    var max_code = -1;
    s.heap_len = 0;
    s.heap_max = $thisType.HEAP_SIZE;

    for (var i = 0; i < elems; i = ((i + 1) | 0)) {
      if (tree[((i * 2) | 0)] !== 0) {
        max_code = (s.heap[(s.heap_len = ((s.heap_len + 1) | 0))] = i);
        s.depth[i] = 0;
      } else {
        tree[((((i * 2) | 0) + 1) | 0)] = 0;
      }
    }

    while (s.heap_len < 2) {
      var node = (s.heap[(s.heap_len = ((s.heap_len + 1) | 0))] = ((max_code < 2) ? (max_code = ((max_code + 1) | 0)) : 0));
      tree[((node * 2) | 0)] = 1;
      s.depth[node] = 0;
      s.opt_len = ((s.opt_len - 1) | 0);
      if (stree !== null) {
        s.static_len = ((s.static_len - stree[((((node * 2) | 0) + 1) | 0)]) | 0);
      }
    }
    this.max_code = max_code;

    for (i = ((s.heap_len / 2) | 0); i >= 1; i = ((i - 1) | 0)) {
      s.pqdownheap(tree, i);
    }
    node = elems;

    do {
      i = s.heap[1];
      s.heap[1] = s.heap[($temp00 = s.heap_len, 
        s.heap_len = ((s.heap_len - 1) | 0), 
        $temp00)];
      s.pqdownheap(tree, 1);
      var j = s.heap[1];
      s.heap[(s.heap_max = ((s.heap_max - 1) | 0))] = i;
      s.heap[(s.heap_max = ((s.heap_max - 1) | 0))] = j;
      tree[((node * 2) | 0)] = ((tree[((i * 2) | 0)] + tree[((j * 2) | 0)]) | 0);
      s.depth[node] = $T02().$Cast((($T06().Max($T07().$Cast(s.depth[i]), $T07().$Cast(s.depth[j])) + 1) | 0));
      tree[((((i * 2) | 0) + 1) | 0)] = (tree[((((j * 2) | 0) + 1) | 0)] = $T05().$Cast(node));
      s.heap[1] = ($temp01 = node, 
        node = ((node + 1) | 0), 
        $temp01);
      s.pqdownheap(tree, 1);
    } while (s.heap_len >= 2);
    s.heap[(s.heap_max = ((s.heap_max - 1) | 0))] = s.heap[1];
    this.gen_bitlen(s);
    $thisType.gen_codes(tree, max_code, s.bl_count);
  };

  function Tree_DistanceCode (dist) {
    if (dist >= 256) {
      return $thisType._dist_code[((256 + $T08().URShift(dist, 7)) | 0)];
    }
    return $thisType._dist_code[dist];
  };

  function Tree_gen_bitlen (s) {
    var tree = this.dyn_tree;
    var stree = this.staticTree.treeCodes;
    var base_Renamed = this.staticTree.extraBase;
    var max_length = this.staticTree.maxLength;
    var overflow = 0;

    for (var bits = 0; bits <= $T00().MAX_BITS; bits = ((bits + 1) | 0)) {
      s.bl_count[bits] = 0;
    }
    tree[((((s.heap[s.heap_max] * 2) | 0) + 1) | 0)] = 0;

    for (var h = ((s.heap_max + 1) | 0); h < $thisType.HEAP_SIZE; h = ((h + 1) | 0)) {
      var i = s.heap[h];
      bits = ((tree[((((tree[((((i * 2) | 0) + 1) | 0)] * 2) | 0) + 1) | 0)] + 1) | 0);
      if (bits > max_length) {
        bits = max_length;
        overflow = ((overflow + 1) | 0);
      }
      tree[((((i * 2) | 0) + 1) | 0)] = $T05().$Cast(bits);
      if (i <= this.max_code) {
        var expr_CB_cp_0 = s.bl_count;
        var expr_CB_cp_1 = bits;
        expr_CB_cp_0[expr_CB_cp_1] = ((expr_CB_cp_0[expr_CB_cp_1] + 1) | 0);
        var xbits = 0;
        if (i >= base_Renamed) {
          xbits = this.staticTree.extraBits[((i - base_Renamed) | 0)];
        }
        var f = tree[((i * 2) | 0)];
        s.opt_len = ((s.opt_len + ((f * ((bits + xbits) | 0)) | 0)) | 0);
        if (stree !== null) {
          s.static_len = ((s.static_len + ((f * ((stree[((((i * 2) | 0) + 1) | 0)] + xbits) | 0)) | 0)) | 0);
        }
      }
    }
    if (overflow === 0) {
      return;
    }

    do {

      for (bits = ((max_length - 1) | 0); s.bl_count[bits] === 0; bits = ((bits - 1) | 0)) {
      }
      var expr_161_cp_0 = s.bl_count;
      var expr_161_cp_1 = bits;
      expr_161_cp_0[expr_161_cp_1] = ((expr_161_cp_0[expr_161_cp_1] - 1) | 0);
      s.bl_count[((bits + 1) | 0)] = ((s.bl_count[((bits + 1) | 0)] + 2) | 0);
      var expr_195_cp_0 = s.bl_count;
      var expr_195_cp_1 = max_length;
      expr_195_cp_0[expr_195_cp_1] = ((expr_195_cp_0[expr_195_cp_1] - 1) | 0);
      overflow = ((overflow - 2) | 0);
    } while (overflow > 0);

    for (bits = max_length; bits !== 0; bits = ((bits - 1) | 0)) {

      for (i = s.bl_count[bits]; i !== 0; ) {
        var j = s.heap[(h = ((h - 1) | 0))];
        if (j <= this.max_code) {
          if (tree[((((j * 2) | 0) + 1) | 0)] !== bits) {
            s.opt_len = ($T09().op_Addition(
                $T09().FromNumber(s.opt_len), 
                $T09().op_Multiplication(
                  $T09().op_Subtraction(
                    $T09().FromNumber(bits), 
                    $T09().FromNumber(tree[((((j * 2) | 0) + 1) | 0)])
                  ), 
                  $T09().FromNumber(tree[((j * 2) | 0)])
                )
              )).ToNumber(4294967295, true);
            tree[((((j * 2) | 0) + 1) | 0)] = $T05().$Cast(bits);
          }
          i = ((i - 1) | 0);
        }
      }
    }
  };

  function Tree_gen_codes (tree, max_code, bl_count) {
    var code2 = 0;
    var next_code = JSIL.Array.New($T05(), (($T00().MAX_BITS + 1) | 0));
    var code = 0;

    for (var bits = 1; bits <= $T00().MAX_BITS; bits = ((bits + 1) | 0)) {
      code = (next_code[bits] = $T05().$Cast((((code + bl_count[((bits - 1) | 0)]) | 0) << 1)));
    }

    for (var i = 0; i <= max_code; i = ((i + 1) | 0)) {
      var len = tree[((((i * 2) | 0) + 1) | 0)];
      if (len !== 0) {
        var arg_66_1 = ((i * 2) | 0);
        var expr_4B_cp_0 = next_code;
        var expr_4B_cp_1 = len;
        expr_4B_cp_0[expr_4B_cp_1] = (((code2 = expr_4B_cp_0[expr_4B_cp_1]) + 1) | 0);
        tree[arg_66_1] = $T05().$Cast($thisType.bi_reverse(code2, len));
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Ionic.Zlib.Tree", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Tree__ctor
    );

    $.Method({Static:true , Public:false}, "bi_reverse", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32], []), 
      Tree_bi_reverse
    );

    $.Method({Static:false, Public:false}, "build_tree", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Ionic.Zlib.DeflateManager")], []), 
      Tree_build_tree
    );

    $.Method({Static:true , Public:false}, "DistanceCode", 
      new JSIL.MethodSignature($.Int32, [$.Int32], []), 
      Tree_DistanceCode
    );

    $.Method({Static:false, Public:false}, "gen_bitlen", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Ionic.Zlib.DeflateManager")], []), 
      Tree_gen_bitlen
    );

    $.Method({Static:true , Public:false}, "gen_codes", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Int16]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int16])
        ], []), 
      Tree_gen_codes
    );

    $.Constant({Static:true , Public:false}, "Buf_size", 16); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "HEAP_SIZE", $.Int32, function ($pi) {
        return ((((2 * $asm0A.Ionic.Zlib.InternalConstants.L_CODES) | 0) + 1) | 0);
      }); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ExtraLengthBits", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "ExtraDistanceBits", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "extra_blbits", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "bl_order", $jsilcore.TypeRef("System.Array", [$.SByte])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_dist_code", $jsilcore.TypeRef("System.Array", [$.SByte])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LengthCode", $jsilcore.TypeRef("System.Array", [$.SByte])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LengthBase", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "DistanceBase", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "dyn_tree", $jsilcore.TypeRef("System.Array", [$.Int16])); 
    $.Field({Static:false, Public:false}, "max_code", $.Int32); 
    $.Field({Static:false, Public:false}, "staticTree", $asm0A.TypeRef("Ionic.Zlib.StaticTree")); 
    function Tree__cctor () {
      $thisType.HEAP_SIZE = ((((2 * $T00().L_CODES) | 0) + 1) | 0);
      $thisType.ExtraLengthBits = JSIL.Array.New($T01(), [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]);
      $thisType.ExtraDistanceBits = JSIL.Array.New($T01(), [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);
      $thisType.extra_blbits = JSIL.Array.New($T01(), [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]);
      $thisType.bl_order = JSIL.Array.New($T02(), [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
      $thisType._dist_code = JSIL.Array.New($T02(), [0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 16, 17, 18, 18, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]);
      $thisType.LengthCode = JSIL.Array.New($T02(), [0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28]);
      $thisType.LengthBase = JSIL.Array.New($T01(), [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0]);
      $thisType.DistanceBase = JSIL.Array.New($T01(), [0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384, 24576]);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      Tree__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Ionic.Zlib.FlushType */ 

JSIL.MakeEnum(
  "Ionic.Zlib.FlushType", true, {
    None: 0, 
    Partial: 1, 
    Sync: 2, 
    Full: 3, 
    Finish: 4
  }, false
);

/* enum Ionic.Zlib.CompressionLevel */ 

JSIL.MakeEnum(
  "Ionic.Zlib.CompressionLevel", true, {
    Level0: 0, 
    None: 0, 
    BestSpeed: 1, 
    Level1: 1, 
    Level2: 2, 
    Level3: 3, 
    Level4: 4, 
    Level5: 5, 
    Level6: 6, 
    Default: 6, 
    Level7: 7, 
    Level8: 8, 
    BestCompression: 9, 
    Level9: 9
  }, false
);

/* enum Ionic.Zlib.CompressionStrategy */ 

JSIL.MakeEnum(
  "Ionic.Zlib.CompressionStrategy", true, {
    Default: 0, 
    Filtered: 1, 
    HuffmanOnly: 2
  }, false
);

/* enum Ionic.Zlib.CompressionMode */ 

JSIL.MakeEnum(
  "Ionic.Zlib.CompressionMode", true, {
    Compress: 0, 
    Decompress: 1
  }, false
);

/* class Ionic.Zlib.ZlibException */ 

(function ZlibException$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Exception)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("System.String")], []))) ();
  };

  function ZlibException__ctor$00 () {
    $T00().prototype._ctor.call(this);
  };

  function ZlibException__ctor$01 (s) {
    $S00().Call($T00().prototype, "_ctor", null, this, s);
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Exception"), 
      Name: "Ionic.Zlib.ZlibException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ZlibException__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], []), 
      ZlibException__ctor$01
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["ebc25cf6-9120-4283-b972-0e5520d0000E"]; });

})();

/* class Ionic.Zlib.SharedUtils */ 

(function SharedUtils$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.IO.TextReader)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm09.System.Byte))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm09.System.Char))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Char)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Text.Encoding)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.UInt32)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Byte")]), [$asm09.TypeRef("System.String")], []))) ();
  };

  function SharedUtils__ctor () {
  };

  function SharedUtils_ReadInput (sourceTextReader, target, start, count) {
    if (target.length === 0) {
      return 0;
    }
    var charArray = JSIL.Array.New($T04(), target.length);
    var bytesRead = sourceTextReader.Read(charArray, start, count);
    if (bytesRead === 0) {
      return -1;
    }

    for (var index = start; index < ((start + bytesRead) | 0); index = ((index + 1) | 0)) {
      target[index] = charArray[index].charCodeAt(0);
    }
    return bytesRead;
  };

  function SharedUtils_ToByteArray (sourceString) {
    return $S00().CallVirtual("GetBytes", null, $T06().get_UTF8(), sourceString);
  };

  function SharedUtils_ToCharArray (byteArray) {
    return $T06().get_UTF8().GetChars(byteArray);
  };

  function SharedUtils_URShift (number, bits) {
    return $T02().$Cast(($T07().$Cast(number) >>> bits));
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Ionic.Zlib.SharedUtils", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      SharedUtils__ctor
    );

    $.Method({Static:true , Public:true }, "ReadInput", 
      new JSIL.MethodSignature($.Int32, [
          $asm09.TypeRef("System.IO.TextReader"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], []), 
      SharedUtils_ReadInput
    );

    $.Method({Static:true , Public:false}, "ToByteArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], []), 
      SharedUtils_ToByteArray
    );

    $.Method({Static:true , Public:false}, "ToCharArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Char]), [$jsilcore.TypeRef("System.Array", [$.Byte])], []), 
      SharedUtils_ToCharArray
    );

    $.Method({Static:true , Public:true }, "URShift", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32], []), 
      SharedUtils_URShift
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Ionic.Zlib.InternalConstants */ 

(function InternalConstants$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Ionic.Zlib.InternalConstants", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:true , Public:false, ReadOnly:true }, "MAX_BITS", $.Int32, 15); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BL_CODES", $.Int32, 19); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "D_CODES", $.Int32, 30); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LITERALS", $.Int32, 256); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "LENGTH_CODES", $.Int32, 29); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "L_CODES", $.Int32, function ($pi) {
        return (((($pi.LITERALS + 1) | 0) + $pi.LENGTH_CODES) | 0);
      }); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "MAX_BL_BITS", $.Int32, 7); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "REP_3_6", $.Int32, 16); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "REPZ_3_10", $.Int32, 17); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "REPZ_11_138", $.Int32, 18); 
    function InternalConstants__cctor () {
      $thisType.MAX_BITS = 15;
      $thisType.BL_CODES = 19;
      $thisType.D_CODES = 30;
      $thisType.LITERALS = 256;
      $thisType.LENGTH_CODES = 29;
      $thisType.L_CODES = (((($thisType.LITERALS + 1) | 0) + $thisType.LENGTH_CODES) | 0);
      $thisType.MAX_BL_BITS = 7;
      $thisType.REP_3_6 = 16;
      $thisType.REPZ_3_10 = 17;
      $thisType.REPZ_11_138 = 18;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      InternalConstants__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Ionic.Zlib.StaticTree */ 

(function StaticTree$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Int16)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Ionic.Zlib.Tree)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.Ionic.Zlib.InternalConstants)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm09.System.Int16))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm09.System.Int32))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Int32)) ();
  };

  function StaticTree__ctor (treeCodes, extraBits, extraBase, elems, maxLength) {
    this.treeCodes = treeCodes;
    this.extraBits = extraBits;
    this.extraBase = extraBase;
    this.elems = elems;
    this.maxLength = maxLength;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Ionic.Zlib.StaticTree", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Int16]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $.Int32, $.Int32, 
          $.Int32
        ], []), 
      StaticTree__ctor
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "lengthAndLiteralsTreeCodes", $jsilcore.TypeRef("System.Array", [$.Int16])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "distTreeCodes", $jsilcore.TypeRef("System.Array", [$.Int16])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Literals", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "Distances", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "BitLengths", $.Type); 
    $.Field({Static:false, Public:false}, "treeCodes", $jsilcore.TypeRef("System.Array", [$.Int16])); 
    $.Field({Static:false, Public:false}, "extraBits", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:false}, "extraBase", $.Int32); 
    $.Field({Static:false, Public:false}, "elems", $.Int32); 
    $.Field({Static:false, Public:false}, "maxLength", $.Int32); 
    function StaticTree__cctor () {
      $thisType.lengthAndLiteralsTreeCodes = JSIL.Array.New($T00(), [12, 8, 140, 8, 76, 8, 204, 8, 44, 8, 172, 8, 108, 8, 236, 8, 28, 8, 156, 8, 92, 8, 220, 8, 60, 8, 188, 8, 124, 8, 252, 8, 2, 8, 130, 8, 66, 8, 194, 8, 34, 8, 162, 8, 98, 8, 226, 8, 18, 8, 146, 8, 82, 8, 210, 8, 50, 8, 178, 8, 114, 8, 242, 8, 10, 8, 138, 8, 74, 8, 202, 8, 42, 8, 170, 8, 106, 8, 234, 8, 26, 8, 154, 8, 90, 8, 218, 8, 58, 8, 186, 8, 122, 8, 250, 8, 6, 8, 134, 8, 70, 8, 198, 8, 38, 8, 166, 8, 102, 8, 230, 8, 22, 8, 150, 8, 86, 8, 214, 8, 54, 8, 182, 8, 118, 8, 246, 8, 14, 8, 142, 8, 78, 8, 206, 8, 46, 8, 174, 8, 110, 8, 238, 8, 30, 8, 158, 8, 94, 8, 222, 8, 62, 8, 190, 8, 126, 8, 254, 8, 1, 8, 129, 8, 65, 8, 193, 8, 33, 8, 161, 8, 97, 8, 225, 8, 17, 8, 145, 8, 81, 8, 209, 8, 49, 8, 177, 8, 113, 8, 241, 8, 9, 8, 137, 8, 73, 8, 201, 8, 41, 8, 169, 8, 105, 8, 233, 8, 25, 8, 153, 8, 89, 8, 217, 8, 57, 8, 185, 8, 121, 8, 249, 8, 5, 8, 133, 8, 69, 8, 197, 8, 37, 8, 165, 8, 101, 8, 229, 8, 21, 8, 149, 8, 85, 8, 213, 8, 53, 8, 181, 8, 117, 8, 245, 8, 13, 8, 141, 8, 77, 8, 205, 8, 45, 8, 173, 8, 109, 8, 237, 8, 29, 8, 157, 8, 93, 8, 221, 8, 61, 8, 189, 8, 125, 8, 253, 8, 19, 9, 275, 9, 147, 9, 403, 9, 83, 9, 339, 9, 211, 9, 467, 9, 51, 9, 307, 9, 179, 9, 435, 9, 115, 9, 371, 9, 243, 9, 499, 9, 11, 9, 267, 9, 139, 9, 395, 9, 75, 9, 331, 9, 203, 9, 459, 9, 43, 9, 299, 9, 171, 9, 427, 9, 107, 9, 363, 9, 235, 9, 491, 9, 27, 9, 283, 9, 155, 9, 411, 9, 91, 9, 347, 9, 219, 9, 475, 9, 59, 9, 315, 9, 187, 9, 443, 9, 123, 9, 379, 9, 251, 9, 507, 9, 7, 9, 263, 9, 135, 9, 391, 9, 71, 9, 327, 9, 199, 9, 455, 9, 39, 9, 295, 9, 167, 9, 423, 9, 103, 9, 359, 9, 231, 9, 487, 9, 23, 9, 279, 9, 151, 9, 407, 9, 87, 9, 343, 9, 215, 9, 471, 9, 55, 9, 311, 9, 183, 9, 439, 9, 119, 9, 375, 9, 247, 9, 503, 9, 15, 9, 271, 9, 143, 9, 399, 9, 79, 9, 335, 9, 207, 9, 463, 9, 47, 9, 303, 9, 175, 9, 431, 9, 111, 9, 367, 9, 239, 9, 495, 9, 31, 9, 287, 9, 159, 9, 415, 9, 95, 9, 351, 9, 223, 9, 479, 9, 63, 9, 319, 9, 191, 9, 447, 9, 127, 9, 383, 9, 255, 9, 511, 9, 0, 7, 64, 7, 32, 7, 96, 7, 16, 7, 80, 7, 48, 7, 112, 7, 8, 7, 72, 7, 40, 7, 104, 7, 24, 7, 88, 7, 56, 7, 120, 7, 4, 7, 68, 7, 36, 7, 100, 7, 20, 7, 84, 7, 52, 7, 116, 7, 3, 8, 131, 8, 67, 8, 195, 8, 35, 8, 163, 8, 99, 8, 227, 8]);
      $thisType.distTreeCodes = JSIL.Array.New($T00(), [0, 5, 16, 5, 8, 5, 24, 5, 4, 5, 20, 5, 12, 5, 28, 5, 2, 5, 18, 5, 10, 5, 26, 5, 6, 5, 22, 5, 14, 5, 30, 5, 1, 5, 17, 5, 9, 5, 25, 5, 5, 5, 21, 5, 13, 5, 29, 5, 3, 5, 19, 5, 11, 5, 27, 5, 7, 5, 23, 5]);
      $thisType.Literals = new $thisType($thisType.lengthAndLiteralsTreeCodes, $T01().ExtraLengthBits, (($T02().LITERALS + 1) | 0), $T02().L_CODES, $T02().MAX_BITS);
      $thisType.Distances = new $thisType($thisType.distTreeCodes, $T01().ExtraDistanceBits, 0, $T02().D_CODES, $T02().MAX_BITS);
      $thisType.BitLengths = new $thisType(null, $T01().extra_blbits, 0, $T02().BL_CODES, $T02().MAX_BL_BITS);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      StaticTree__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Ionic.Zlib.Adler */ 

(function Adler$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.UInt32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm09.System.Byte))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Int32)) ();
  };

  function Adler__ctor () {
  };

  function Adler_Adler32 (adler, buf, index, len) {
    var $temp00, $temp01, $temp02, $temp03, $temp04, $temp05, $temp06, $temp07, $temp08, $temp09, $temp0A, $temp0B, $temp0C, $temp0D, $temp0E, $temp0F, $temp10;
    if (buf === null) {
      return 1;
    }
    var s = (adler & 65535);
    var s2 = ((adler >>> 16) & 65535);

    while (len > 0) {
      var i = ((len < $thisType.NMAX) ? len : $thisType.NMAX);
      len = ((len - i) | 0);

      while (i >= 16) {
        s = ((s + buf[($temp00 = index, 
              index = ((index + 1) | 0), 
              $temp00)]) >>> 0);
        s2 = ((s2 + s) >>> 0);
        s = ((s + buf[($temp01 = index, 
              index = ((index + 1) | 0), 
              $temp01)]) >>> 0);
        s2 = ((s2 + s) >>> 0);
        s = ((s + buf[($temp02 = index, 
              index = ((index + 1) | 0), 
              $temp02)]) >>> 0);
        s2 = ((s2 + s) >>> 0);
        s = ((s + buf[($temp03 = index, 
              index = ((index + 1) | 0), 
              $temp03)]) >>> 0);
        s2 = ((s2 + s) >>> 0);
        s = ((s + buf[($temp04 = index, 
              index = ((index + 1) | 0), 
              $temp04)]) >>> 0);
        s2 = ((s2 + s) >>> 0);
        s = ((s + buf[($temp05 = index, 
              index = ((index + 1) | 0), 
              $temp05)]) >>> 0);
        s2 = ((s2 + s) >>> 0);
        s = ((s + buf[($temp06 = index, 
              index = ((index + 1) | 0), 
              $temp06)]) >>> 0);
        s2 = ((s2 + s) >>> 0);
        s = ((s + buf[($temp07 = index, 
              index = ((index + 1) | 0), 
              $temp07)]) >>> 0);
        s2 = ((s2 + s) >>> 0);
        s = ((s + buf[($temp08 = index, 
              index = ((index + 1) | 0), 
              $temp08)]) >>> 0);
        s2 = ((s2 + s) >>> 0);
        s = ((s + buf[($temp09 = index, 
              index = ((index + 1) | 0), 
              $temp09)]) >>> 0);
        s2 = ((s2 + s) >>> 0);
        s = ((s + buf[($temp0A = index, 
              index = ((index + 1) | 0), 
              $temp0A)]) >>> 0);
        s2 = ((s2 + s) >>> 0);
        s = ((s + buf[($temp0B = index, 
              index = ((index + 1) | 0), 
              $temp0B)]) >>> 0);
        s2 = ((s2 + s) >>> 0);
        s = ((s + buf[($temp0C = index, 
              index = ((index + 1) | 0), 
              $temp0C)]) >>> 0);
        s2 = ((s2 + s) >>> 0);
        s = ((s + buf[($temp0D = index, 
              index = ((index + 1) | 0), 
              $temp0D)]) >>> 0);
        s2 = ((s2 + s) >>> 0);
        s = ((s + buf[($temp0E = index, 
              index = ((index + 1) | 0), 
              $temp0E)]) >>> 0);
        s2 = ((s2 + s) >>> 0);
        s = ((s + buf[($temp0F = index, 
              index = ((index + 1) | 0), 
              $temp0F)]) >>> 0);
        s2 = ((s2 + s) >>> 0);
        i = ((i - 16) | 0);
      }
      if (i !== 0) {

        do {
          s = ((s + buf[($temp10 = index, 
                index = ((index + 1) | 0), 
                $temp10)]) >>> 0);
          s2 = ((s2 + s) >>> 0);
        } while ((i = ((i - 1) | 0)) !== 0);
      }
      s = ((s % $thisType.BASE) >>> 0);
      s2 = ((s2 % $thisType.BASE) >>> 0);
    }
    return ((s2 << 16) | s);
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Ionic.Zlib.Adler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Adler__ctor
    );

    $.Method({Static:true , Public:true }, "Adler32", 
      new JSIL.MethodSignature($.UInt32, [
          $.UInt32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], []), 
      Adler_Adler32
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "BASE", $.UInt32, 65521); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "NMAX", $.Int32, 5552); 
    function Adler__cctor () {
      $thisType.BASE = 65521;
      $thisType.NMAX = 5552;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      Adler__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Ionic.Zlib.ZlibStreamFlavor */ 

JSIL.MakeEnum(
  "Ionic.Zlib.ZlibStreamFlavor", false, {
    ZLIB: 1950, 
    DEFLATE: 1951, 
    GZIP: 1952
  }, false
);

/* class Ionic.Zlib.ZlibBaseStream */ 

(function ZlibBaseStream$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.IO.Stream)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionMode)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionLevel)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibStreamFlavor)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibBaseStream_StreamMode)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Byte)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.Ionic.Zlib.FlushType)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0A.Ionic.Crc.CRC32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm09.System.Byte))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm09.System.BitConverter)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm09.System.DateTime)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm0A.Ionic.Zlib.GZipStream)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm09.System.Int16)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm09.System.IDisposable)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm09.System.Text.Encoding)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibCodec)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm09.System.Int64)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm09.System.UInt64)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm09.System.Array)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm09.System.NotImplementedException)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm09.System.ArgumentNullException)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm09.System.ArgumentOutOfRangeException)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm09.System.Byte))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm09.System.IO.SeekOrigin)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm09.System.IO.MemoryStream)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm09.System.IO.StreamReader)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm09.System.IO.TextReader)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Crc.CRC32"), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.ZlibException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Byte")]), [$asm09.TypeRef("System.String")], []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Byte")]), [$asm09.TypeRef("System.Int32")], []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm09.TypeRef("System.Array"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Array"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Int32")
      ], []))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.NotImplementedException"), []))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.ZlibCodec"), []))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$asm09.TypeRef("System.Boolean")], []))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$asm0A.TypeRef("Ionic.Zlib.CompressionLevel"), $asm09.TypeRef("System.Boolean")], []))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.ArgumentNullException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.ArgumentOutOfRangeException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm09.TypeRef("System.Byte")]), []))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.IO.MemoryStream"), []))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.IO.StreamReader"), [$asm09.TypeRef("System.IO.Stream"), $asm09.TypeRef("System.Text.Encoding")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm09.System.IDisposable.Dispose)) ();
  };

  function ZlibBaseStream__ctor (stream, compressionMode, level, flavor, leaveOpen) {
    this._streamMode = $T05().Undefined;
    this._bufferSize = 16384;
    this._buf1 = JSIL.Array.New($T06(), 1);
    $T00().prototype._ctor.call(this);
    this._flushMode = $T07().None;
    this._stream = stream;
    this._leaveOpen = leaveOpen;
    this._compressionMode = compressionMode;
    this._flavor = flavor;
    this._level = level;
    if (flavor === $T03().GZIP) {
      this.crc = $S00().Construct();
    }
  };

  function ZlibBaseStream__ReadAndValidateGzipHeader () {
    var totalBytesRead = 0;
    var header = JSIL.Array.New($T06(), 10);
    var i = this._stream.Read(header, 0, header.length);
    if (i === 0) {
      return 0;
    }
    if (i !== 10) {
      throw $S01().Construct("Not a valid GZIP stream.");
    }
    if (!((header[0] === 31) && 
        (header[1] === 139) && (header[2] === 8))) {
      throw $S01().Construct("Bad GZIP header.");
    }
    var timet = $T0C().ToInt32(header, 4);
    this._GzipMtime = $T0E()._unixEpoch.AddSeconds(timet).MemberwiseClone();
    totalBytesRead = ((totalBytesRead + i) | 0);
    if ((header[3] & 4) === 4) {
      i = this._stream.Read(header, 0, 2);
      totalBytesRead = ((totalBytesRead + i) | 0);
      var extraLength = $T0F().$Cast(((header[0] + ((header[1] * 256) | 0)) | 0));
      var extra = JSIL.Array.New($T06(), extraLength);
      i = this._stream.Read(extra, 0, extra.length);
      if (i !== extraLength) {
        throw $S01().Construct("Unexpected end-of-file reading GZIP header.");
      }
      totalBytesRead = ((totalBytesRead + i) | 0);
    }
    if ((header[3] & 8) === 8) {
      this._GzipFileName = this.ReadZeroTerminatedString();
    }
    if ((header[3] & 16) === 16) {
      this._GzipComment = this.ReadZeroTerminatedString();
    }
    if ((header[3] & 2) === 2) {
      this.Read(this._buf1, 0, 1);
    }
    return totalBytesRead;
  };

  function ZlibBaseStream_Close () {
    if (this._stream === null) {
      return;
    }
    try {
      this.finish();
    } finally {
      this.end();
      if (!this._leaveOpen) {
        this._stream.Close();
      }
      this._stream = null;
    }
  };

  function ZlibBaseStream_CompressBuffer (b, compressor) {
    try {
      compressor.Write(b, 0, b.length);
    } finally {
      if (compressor !== null) {
        $IM00().Call(compressor, null);
      }
    }
  };

  function ZlibBaseStream_CompressString (s, compressor) {
    var uncompressed = $S02().CallVirtual("GetBytes", null, $T12().get_UTF8(), s);
    try {
      compressor.Write(uncompressed, 0, uncompressed.length);
    } finally {
      if (compressor !== null) {
        $IM00().Call(compressor, null);
      }
    }
  };

  function ZlibBaseStream_end () {
    if (this.get_z() === null) {
      return;
    }
    if (this.get__wantCompress()) {
      this._z.EndDeflate();
    } else {
      this._z.EndInflate();
    }
    this._z = null;
  };

  function ZlibBaseStream_finish () {
    if (this._z === null) {
      return;
    }
    if (this._streamMode.valueOf() === 0) {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 

          $loop0: 
            while (true) {
              this._z.OutputBuffer = this.get_workingBuffer();
              this._z.NextOut = 0;
              this._z.AvailableBytesOut = this._workingBuffer.length;
              var rc = (this.get__wantCompress() ? this._z.Deflate($T07().Finish) : this._z.Inflate($T07().Finish));
              if (!((rc === 1) || (rc === 0))) {
                break $loop0;
              }
              if (((this._workingBuffer.length - this._z.AvailableBytesOut) | 0) > 0) {
                this._stream.Write(this._workingBuffer, 0, ((this._workingBuffer.length - this._z.AvailableBytesOut) | 0));
              }
              var done = ((this._z.AvailableBytesIn === 0) && 
                (this._z.AvailableBytesOut !== 0));
              if (!((this._flavor !== $T03().GZIP) || this.get__wantCompress())) {
                done = ((this._z.AvailableBytesIn === 8) && 
                  (this._z.AvailableBytesOut !== 0));
              }
              if (done) {
                $label0 = 1 /* goto Block_12 */ ;
                continue $labelgroup0;
              }
            }
            var verb = (JSIL.ConcatString((this.get__wantCompress() ? "de" : "in"), "flating"));
            if (this._z.Message === null) {
              throw $S01().Construct($T11().Format("{0}: (rc = {1})", verb, rc));
            }
            throw $S01().Construct((verb + ": " + this._z.Message));

            $label0 = 1 /* goto Block_12 */ ;
            continue $labelgroup0;
          case 1: /* Block_12 */ 
            this.Flush();
            if (this._flavor === $T03().GZIP) {
              if (this.get__wantCompress()) {
                var c = this.crc.get_Crc32Result();
                this._stream.Write($S03().CallStatic($T0C(), "GetBytes", null, c), 0, 4);
                var c2 = ($T15().op_BitwiseAnd(
                    this.crc.get_TotalBytesRead(), 
                    ($T16().FromNumber(-1)).ToInt64()
                  )).ToNumber(4294967295, true);
                this._stream.Write($S03().CallStatic($T0C(), "GetBytes", null, c2), 0, 4);
                return;
              }
              throw $S01().Construct("Writing with decompression is not supported.");
            }

            break $labelgroup0;
        }
      }
    } else if (!((this._streamMode !== $T05().Reader) || (this._flavor !== $T03().GZIP))) {
      if (this.get__wantCompress()) {
        throw $S01().Construct("Reading with compression is not supported.");
      }
      if (!$T15().op_Inequality(this._z.TotalBytesOut, $T15().Create(0, 0, 0))) {
        return;
      }
      var trailer = JSIL.Array.New($T06(), 8);
      if (this._z.AvailableBytesIn < 8) {
        $S04().CallStatic($T17(), "Copy", null, 
          this._z.InputBuffer, 
          this._z.NextIn, 
          trailer, 
          0, 
          this._z.AvailableBytesIn
        );
        var bytesNeeded = ((8 - this._z.AvailableBytesIn) | 0);
        var bytesRead = this._stream.Read(trailer, this._z.AvailableBytesIn, bytesNeeded);
        if (bytesNeeded !== bytesRead) {
          throw $S01().Construct($T11().Format("Missing or incomplete GZIP trailer. Expected 8 bytes, got {0}.", ((this._z.AvailableBytesIn + bytesRead) | 0)));
        }
      } else {
        $S04().CallStatic($T17(), "Copy", null, 
          this._z.InputBuffer, 
          this._z.NextIn, 
          trailer, 
          0, 
          trailer.length
        );
      }
      var crc32_expected = $T0C().ToInt32(trailer, 0);
      var crc32_actual = this.crc.get_Crc32Result();
      var isize_expected = $T0C().ToInt32(trailer, 4);
      var isize_actual = ($T15().op_BitwiseAnd(this._z.TotalBytesOut, ($T16().FromNumber(-1)).ToInt64())).ToNumber(4294967295, true);
      if (crc32_actual !== crc32_expected) {
        throw $S01().Construct($T11().Format("Bad CRC32 in GZIP trailer. (actual({0:X8})!=expected({1:X8}))", crc32_actual, crc32_expected));
      }
      if (isize_actual !== isize_expected) {
        throw $S01().Construct($T11().Format("Bad size in GZIP trailer. (actual({0})!=expected({1}))", isize_actual, isize_expected));
      }
    }
  };

  function ZlibBaseStream_Flush () {
    this._stream.Flush();
  };

  function ZlibBaseStream_get__wantCompress () {
    return (this._compressionMode === $T01().Compress);
  };

  function ZlibBaseStream_get_CanRead () {
    return this._stream.get_CanRead();
  };

  function ZlibBaseStream_get_CanSeek () {
    return this._stream.get_CanSeek();
  };

  function ZlibBaseStream_get_CanWrite () {
    return this._stream.get_CanWrite();
  };

  function ZlibBaseStream_get_Crc32 () {
    if (this.crc === null) {
      return 0;
    }
    return this.crc.get_Crc32Result();
  };

  function ZlibBaseStream_get_Length () {
    return this._stream.get_Length();
  };

  function ZlibBaseStream_get_Position () {
    throw $S05().Construct();
  };

  function ZlibBaseStream_get_workingBuffer () {
    if (this._workingBuffer === null) {
      this._workingBuffer = JSIL.Array.New($T06(), this._bufferSize);
    }
    return this._workingBuffer;
  };

  function ZlibBaseStream_get_z () {
    if (this._z === null) {
      var wantRfc1950Header = (this._flavor === $T03().ZLIB);
      this._z = $S06().Construct();
      if (this._compressionMode === $T01().Decompress) {
        $S07().CallVirtual("InitializeInflate", null, this._z, wantRfc1950Header);
      } else {
        this._z.Strategy = this.Strategy;
        $S08().CallVirtual("InitializeDeflate", null, this._z, this._level, wantRfc1950Header);
      }
    }
    return this._z;
  };

  function ZlibBaseStream_Read (buffer, offset, count) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          if (this._streamMode === $T05().Undefined) {
            if (!this._stream.get_CanRead()) {
              throw $S01().Construct("The stream is not readable.");
            }
            this._streamMode = $T05().Reader;
            this.z.AvailableBytesIn = 0;
            if (this._flavor === $T03().GZIP) {
              this._gzipHeaderByteCount = this._ReadAndValidateGzipHeader();
              if (this._gzipHeaderByteCount === 0) {
                return 0;
              }
            }
          }
          if (this._streamMode !== $T05().Reader) {
            throw $S01().Construct("Cannot Read after Writing.");
          }
          if (count === 0) {
            return 0;
          }
          if (!(!this.nomoreinput || !this.get__wantCompress())) {
            return 0;
          }
          if (buffer === null) {
            throw $S09().Construct("buffer");
          }
          if (count < 0) {
            throw $S0A().Construct("count");
          }
          if (offset < 0) {
            throw $S0A().Construct("offset");
          }
          if (((offset + count) | 0) > buffer.length0) {
            throw $S0A().Construct("count");
          }
          this._z.OutputBuffer = buffer;
          this._z.NextOut = offset;
          this._z.AvailableBytesOut = count;
          this._z.InputBuffer = this.get_workingBuffer();

        $loop0: 
          while (true) {
            if (!((this._z.AvailableBytesIn !== 0) || this.nomoreinput)) {
              this._z.NextIn = 0;
              this._z.AvailableBytesIn = this._stream.Read(this._workingBuffer, 0, this._workingBuffer.length);
              if (this._z.AvailableBytesIn === 0) {
                this.nomoreinput = true;
              }
            }
            var rc = (this.get__wantCompress() ? this._z.Deflate(this._flushMode) : this._z.Inflate(this._flushMode));
            if (!(!this.nomoreinput || (rc !== -5))) {
              break $loop0;
            }
            if (!((rc === 0) || (rc === 1))) {
              $label0 = 1 /* goto Block_20 */ ;
              continue $labelgroup0;
            }
            if (!(!(!(!this.nomoreinput && 
                    (rc !== 1)) && 
                  (this._z.AvailableBytesOut === count)) && 
                (this._z.AvailableBytesOut > 0) && 
                !this.nomoreinput && (rc === 0))) {
              break $labelgroup0;
            }
          }
          return 0;

          $label0 = 1 /* goto Block_20 */ ;
          continue $labelgroup0;
        case 1: /* Block_20 */ 
          throw $S01().Construct($T11().Format("{0}flating:  rc={1}  msg={2}", (this.get__wantCompress() ? "de" : "in"), rc, this._z.Message));
          break $labelgroup0;

      }
    }
    /* Original label IL_20A */ 
    if (this._z.AvailableBytesOut > 0) {
      if (rc === 0) {
      }
      if (!(!this.nomoreinput || !this.get__wantCompress())) {
        rc = this._z.Deflate($T07().Finish);
        if (!((rc === 0) || (rc === 1))) {
          throw $S01().Construct($T11().Format("Deflating:  rc={0}  msg={1}", rc, this._z.Message));
        }
      }
    }
    rc = ((count - this._z.AvailableBytesOut) | 0);
    if (this.crc !== null) {
      this.crc.SlurpBlock(buffer, offset, rc);
    }
    return rc;
  };

  function ZlibBaseStream_ReadZeroTerminatedString () {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var list = $S0B().Construct();
          var done = false;

        $loop0: 
          while (true) {
            var i = this._stream.Read(this._buf1, 0, 1);
            if (i !== 1) {
              break $loop0;
            }
            if (this._buf1[0] === 0) {
              done = true;
            } else {
              list.Add(this._buf1[0]);
            }
            if (done) {
              $label0 = 1 /* goto Block_3 */ ;
              continue $labelgroup0;
            }
          }
          throw $S01().Construct("Unexpected EOF reading GZIP header.");

          $label0 = 1 /* goto Block_3 */ ;
          continue $labelgroup0;
        case 1: /* Block_3 */ 
          var a = $T1B().prototype.ToArray.call(list);
          return $T0E().iso8859dash1.GetString(a, 0, a.length);

          break $labelgroup0;
      }
    }
  };

  function ZlibBaseStream_Seek (offset, origin) {
    throw $S05().Construct();
  };

  function ZlibBaseStream_set_Position (value) {
    throw $S05().Construct();
  };

  function ZlibBaseStream_SetLength (value) {
    this._stream.SetLength(value);
  };

  function ZlibBaseStream_UncompressBuffer (compressed, decompressor) {
    var i = 0;
    var working = JSIL.Array.New($T06(), 1024);
    var output = $S0C().Construct();
    try {
      try {

        while ((i = decompressor.Read(working, 0, working.length)) !== 0) {
          output.Write(working, 0, i);
        }
      } finally {
        if (decompressor !== null) {
          $IM00().Call(decompressor, null);
        }
      }
      var result = output.ToArray();
    } finally {
      if (output !== null) {
        $IM00().Call(output, null);
      }
    }
    return result;
  };

  function ZlibBaseStream_UncompressString (compressed, decompressor) {
    var i = 0;
    var working = JSIL.Array.New($T06(), 1024);
    var encoding = $T12().get_UTF8();
    var output = $S0C().Construct();
    try {
      try {

        while ((i = decompressor.Read(working, 0, working.length)) !== 0) {
          output.Write(working, 0, i);
        }
      } finally {
        if (decompressor !== null) {
          $IM00().Call(decompressor, null);
        }
      }
      output.Seek($T15().Create(0, 0, 0), $T1C().Begin);
      var sr = $S0D().Construct(output, encoding);
      var result = sr.ReadToEnd();
    } finally {
      if (output !== null) {
        $IM00().Call(output, null);
      }
    }
    return result;
  };

  function ZlibBaseStream_Write (buffer, offset, count) {
    if (this.crc !== null) {
      this.crc.SlurpBlock(buffer, offset, count);
    }
    if (this._streamMode === $T05().Undefined) {
      this._streamMode = $T05().Writer;
    } else if (this._streamMode.valueOf() !== 0) {
      throw $S01().Construct("Cannot Write after Reading.");
    }
    if (count === 0) {
      return;
    }
    this.z.InputBuffer = buffer;
    this._z.NextIn = offset;
    this._z.AvailableBytesIn = count;

  $loop0: 
    while (true) {
      this._z.OutputBuffer = this.get_workingBuffer();
      this._z.NextOut = 0;
      this._z.AvailableBytesOut = this._workingBuffer.length;
      var rc = (this.get__wantCompress() ? this._z.Deflate(this._flushMode) : this._z.Inflate(this._flushMode));
      if (!((rc === 0) || (rc === 1))) {
        break $loop0;
      }
      this._stream.Write(this._workingBuffer, 0, ((this._workingBuffer.length - this._z.AvailableBytesOut) | 0));
      var done = ((this._z.AvailableBytesIn === 0) && 
        (this._z.AvailableBytesOut !== 0));
      if (!((this._flavor !== $T03().GZIP) || this.get__wantCompress())) {
        done = ((this._z.AvailableBytesIn === 8) && 
          (this._z.AvailableBytesOut !== 0));
      }
      if (done) {
        return;
      }
    }
    throw $S01().Construct(((this.get__wantCompress() ? "de" : "in") + "flating: " + this._z.Message));
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.IO.Stream"), 
      Name: "Ionic.Zlib.ZlibBaseStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode"), 
          $asm0A.TypeRef("Ionic.Zlib.CompressionLevel"), $asm0A.TypeRef("Ionic.Zlib.ZlibStreamFlavor"), 
          $.Boolean
        ], []), 
      ZlibBaseStream__ctor
    );

    $.Method({Static:false, Public:false}, "_ReadAndValidateGzipHeader", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ZlibBaseStream__ReadAndValidateGzipHeader
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Close", 
      new JSIL.MethodSignature(null, [], []), 
      ZlibBaseStream_Close
    );

    $.Method({Static:true , Public:true }, "CompressBuffer", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm09.TypeRef("System.IO.Stream")], []), 
      ZlibBaseStream_CompressBuffer
    );

    $.Method({Static:true , Public:true }, "CompressString", 
      new JSIL.MethodSignature(null, [$.String, $asm09.TypeRef("System.IO.Stream")], []), 
      ZlibBaseStream_CompressString
    );

    $.Method({Static:false, Public:false}, "end", 
      new JSIL.MethodSignature(null, [], []), 
      ZlibBaseStream_end
    );

    $.Method({Static:false, Public:false}, "finish", 
      new JSIL.MethodSignature(null, [], []), 
      ZlibBaseStream_finish
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], []), 
      ZlibBaseStream_Flush
    );

    $.Method({Static:false, Public:false}, "get__wantCompress", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ZlibBaseStream_get__wantCompress
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ZlibBaseStream_get_CanRead
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ZlibBaseStream_get_CanSeek
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ZlibBaseStream_get_CanWrite
    );

    $.Method({Static:false, Public:false}, "get_Crc32", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ZlibBaseStream_get_Crc32
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], []), 
      ZlibBaseStream_get_Length
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Position", 
      new JSIL.MethodSignature($.Int64, [], []), 
      ZlibBaseStream_get_Position
    );

    $.Method({Static:false, Public:false}, "get_workingBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], []), 
      ZlibBaseStream_get_workingBuffer
    );

    $.Method({Static:false, Public:false}, "get_z", 
      new JSIL.MethodSignature($asm0A.TypeRef("Ionic.Zlib.ZlibCodec"), [], []), 
      ZlibBaseStream_get_z
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], []), 
      ZlibBaseStream_Read
    );

    $.Method({Static:false, Public:false}, "ReadZeroTerminatedString", 
      new JSIL.MethodSignature($.String, [], []), 
      ZlibBaseStream_ReadZeroTerminatedString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm09.TypeRef("System.IO.SeekOrigin")], []), 
      ZlibBaseStream_Seek
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$.Int64], []), 
      ZlibBaseStream_set_Position
    );

    $.Method({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int64], []), 
      ZlibBaseStream_SetLength
    );

    $.Method({Static:true , Public:true }, "UncompressBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm09.TypeRef("System.IO.Stream")], []), 
      ZlibBaseStream_UncompressBuffer
    );

    $.Method({Static:true , Public:true }, "UncompressString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm09.TypeRef("System.IO.Stream")], []), 
      ZlibBaseStream_UncompressString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], []), 
      ZlibBaseStream_Write
    );

    $.Field({Static:false, Public:false}, "_z", $asm0A.TypeRef("Ionic.Zlib.ZlibCodec")); 
    $.Field({Static:false, Public:false}, "_streamMode", $asm0A.TypeRef("Ionic.Zlib.ZlibBaseStream/StreamMode")); 
    $.Field({Static:false, Public:false}, "_flushMode", $asm0A.TypeRef("Ionic.Zlib.FlushType")); 
    $.Field({Static:false, Public:false}, "_flavor", $asm0A.TypeRef("Ionic.Zlib.ZlibStreamFlavor")); 
    $.Field({Static:false, Public:false}, "_compressionMode", $asm0A.TypeRef("Ionic.Zlib.CompressionMode")); 
    $.Field({Static:false, Public:false}, "_level", $asm0A.TypeRef("Ionic.Zlib.CompressionLevel")); 
    $.Field({Static:false, Public:false}, "_leaveOpen", $.Boolean); 
    $.Field({Static:false, Public:false}, "_workingBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "_bufferSize", $.Int32); 
    $.Field({Static:false, Public:false}, "_buf1", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "_stream", $asm09.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "Strategy", $asm0A.TypeRef("Ionic.Zlib.CompressionStrategy")); 
    $.Field({Static:false, Public:false}, "crc", $asm0A.TypeRef("Ionic.Crc.CRC32")); 
    $.Field({Static:false, Public:false}, "_GzipFileName", $.String); 
    $.Field({Static:false, Public:false}, "_GzipComment", $.String); 
    $.Field({Static:false, Public:false}, "_GzipMtime", $asm09.TypeRef("System.DateTime")); 
    $.Field({Static:false, Public:false}, "_gzipHeaderByteCount", $.Int32); 
    $.Field({Static:false, Public:false}, "nomoreinput", $.Boolean); 
    $.Property({Static:false, Public:false}, "Crc32", $.Int32);

    $.Property({Static:false, Public:false}, "_wantCompress", $.Boolean);

    $.Property({Static:false, Public:false}, "z", $asm0A.TypeRef("Ionic.Zlib.ZlibCodec"));

    $.Property({Static:false, Public:false}, "workingBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Ionic.Zlib.ZlibBaseStream/StreamMode */ 

JSIL.MakeEnum(
  "Ionic.Zlib.ZlibBaseStream/StreamMode", false, {
    Writer: 0, 
    Reader: 1, 
    Undefined: 2
  }, false
);

/* class Ionic.Zlib.ZlibCodec */ 

(function ZlibCodec$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionLevel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionMode)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.Ionic.Zlib.InflateManager)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0A.Ionic.Zlib.DeflateManager)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.Ionic.Zlib.FlushType)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm09.System.Byte))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.Array)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm09.System.Int64)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0A.Ionic.Zlib.Adler)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionStrategy)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.ZlibException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm09.TypeRef("System.Array"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Array"), $asm09.TypeRef("System.Int32"), 
        $asm09.TypeRef("System.Int32")
      ], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm09.TypeRef("System.Int32"), [$asm09.TypeRef("System.Int32")], []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.InflateManager"), [$asm09.TypeRef("System.Boolean")]))) ();
  };

  function ZlibCodec__ctor$00 () {
    this.CompressLevel = $T00().Level6;
    this.WindowBits = 15;
  };

  function ZlibCodec__ctor$01 (mode) {
    this.CompressLevel = $T00().Level6;
    this.WindowBits = 15;
    if (mode.valueOf() === 0) {
      var rc = this.InitializeDeflate();
      if (rc !== 0) {
        throw $S00().Construct("Cannot initialize for deflate.");
      }
    } else {
      if (mode !== $T01().Decompress) {
        throw $S00().Construct("Invalid ZlibStreamFlavor.");
      }
      var rc2 = this.InitializeInflate();
      if (rc2 !== 0) {
        throw $S00().Construct("Cannot initialize for inflate.");
      }
    }
  };

  function ZlibCodec__InternalInitializeDeflate (wantRfc1950Header) {
    if (this.istate !== null) {
      throw $S00().Construct("You may not call InitializeDeflate() after calling InitializeInflate().");
    }
    this.dstate = new ($T06())();
    this.dstate.set_WantRfc1950HeaderBytes(wantRfc1950Header);
    return this.dstate.Initialize(this, this.CompressLevel, this.WindowBits, this.Strategy);
  };

  function ZlibCodec_Deflate (flush) {
    if (this.dstate === null) {
      throw $S00().Construct("No Deflate State!");
    }
    return this.dstate.Deflate(flush);
  };

  function ZlibCodec_EndDeflate () {
    if (this.dstate === null) {
      throw $S00().Construct("No Deflate State!");
    }
    this.dstate = null;
    return 0;
  };

  function ZlibCodec_EndInflate () {
    if (this.istate === null) {
      throw $S00().Construct("No Inflate State!");
    }
    var ret = this.istate.End();
    this.istate = null;
    return ret;
  };

  function ZlibCodec_flush_pending () {
    var len = this.dstate.pendingCount;
    if (len > this.AvailableBytesOut) {
      len = this.AvailableBytesOut;
    }
    if (len === 0) {
      return;
    }
    if (!((this.dstate.pending.length > this.dstate.nextPending) && 
        (this.OutputBuffer.length > this.NextOut) && 
        (this.dstate.pending.length >= ((this.dstate.nextPending + len) | 0)) && (this.OutputBuffer.length >= ((this.NextOut + len) | 0)))) {
      throw $S00().Construct($T09().Format("Invalid State. (pending.Length={0}, pendingCount={1})", this.dstate.pending.length, this.dstate.pendingCount));
    }
    $S01().CallStatic($T0A(), "Copy", null, 
      this.dstate.pending, 
      this.dstate.nextPending, 
      this.OutputBuffer, 
      this.NextOut, 
      len
    );
    this.NextOut = ((this.NextOut + len) | 0);
    this.dstate.nextPending = ((this.dstate.nextPending + len) | 0);
    this.TotalBytesOut = $T0B().op_Addition(this.TotalBytesOut, $T0B().FromNumber(len));
    this.AvailableBytesOut = ((this.AvailableBytesOut - len) | 0);
    this.dstate.pendingCount = ((this.dstate.pendingCount - len) | 0);
    if (this.dstate.pendingCount === 0) {
      this.dstate.nextPending = 0;
    }
  };

  function ZlibCodec_get_Adler32 () {
    return $T02().$Cast(this._Adler32);
  };

  function ZlibCodec_Inflate (flush) {
    if (this.istate === null) {
      throw $S00().Construct("No Inflate State!");
    }
    return this.istate.Inflate(flush);
  };

  function ZlibCodec_InitializeDeflate$02 () {
    return this._InternalInitializeDeflate(true);
  };

  function ZlibCodec_InitializeDeflate$03 (level) {
    this.CompressLevel = level;
    return this._InternalInitializeDeflate(true);
  };

  function ZlibCodec_InitializeDeflate$04 (level, wantRfc1950Header) {
    this.CompressLevel = level;
    return this._InternalInitializeDeflate(wantRfc1950Header);
  };

  function ZlibCodec_InitializeDeflate$05 (level, bits) {
    this.CompressLevel = level;
    this.WindowBits = bits;
    return this._InternalInitializeDeflate(true);
  };

  function ZlibCodec_InitializeDeflate$06 (level, bits, wantRfc1950Header) {
    this.CompressLevel = level;
    this.WindowBits = bits;
    return this._InternalInitializeDeflate(wantRfc1950Header);
  };

  function ZlibCodec_InitializeInflate$07 () {
    return $S02().CallVirtual("InitializeInflate", null, this, this.WindowBits);
  };

  function ZlibCodec_InitializeInflate$08 (expectRfc1950Header) {
    return this.InitializeInflate(this.WindowBits, expectRfc1950Header);
  };

  function ZlibCodec_InitializeInflate$09 (windowBits) {
    this.WindowBits = windowBits;
    return this.InitializeInflate(windowBits, true);
  };

  function ZlibCodec_InitializeInflate$0A (windowBits, expectRfc1950Header) {
    this.WindowBits = windowBits;
    if (this.dstate !== null) {
      throw $S00().Construct("You may not call InitializeInflate() after calling InitializeDeflate().");
    }
    this.istate = $S03().Construct(expectRfc1950Header);
    return this.istate.Initialize(this, windowBits);
  };

  function ZlibCodec_read_buf (buf, start, size) {
    var len = this.AvailableBytesIn;
    if (len > size) {
      len = size;
    }
    if (len === 0) {
      return 0;
    }
    this.AvailableBytesIn = ((this.AvailableBytesIn - len) | 0);
    if (this.dstate.get_WantRfc1950HeaderBytes()) {
      this._Adler32 = $T0C().Adler32(this._Adler32, this.InputBuffer, this.NextIn, len);
    }
    $S01().CallStatic($T0A(), "Copy", null, 
      this.InputBuffer, 
      this.NextIn, 
      buf, 
      start, 
      len
    );
    this.NextIn = ((this.NextIn + len) | 0);
    this.TotalBytesIn = $T0B().op_Addition(this.TotalBytesIn, $T0B().FromNumber(len));
    return len;
  };

  function ZlibCodec_ResetDeflate () {
    if (this.dstate === null) {
      throw $S00().Construct("No Deflate State!");
    }
    this.dstate.Reset();
  };

  function ZlibCodec_SetDeflateParams (level, strategy) {
    if (this.dstate === null) {
      throw $S00().Construct("No Deflate State!");
    }
    return this.dstate.SetParams(level, strategy);
  };

  function ZlibCodec_SetDictionary (dictionary) {
    if (this.istate !== null) {
      return this.istate.SetDictionary(dictionary);
    }
    if (this.dstate !== null) {
      return this.dstate.SetDictionary(dictionary);
    }
    throw $S00().Construct("No Inflate or Deflate state!");
  };

  function ZlibCodec_SyncInflate () {
    if (this.istate === null) {
      throw $S00().Construct("No Inflate State!");
    }
    return this.istate.Sync();
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "Ionic.Zlib.ZlibCodec", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ZlibCodec__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Ionic.Zlib.CompressionMode")], []), 
      ZlibCodec__ctor$01
    );

    $.Method({Static:false, Public:false}, "_InternalInitializeDeflate", 
      new JSIL.MethodSignature($.Int32, [$.Boolean], []), 
      ZlibCodec__InternalInitializeDeflate
    );

    $.Method({Static:false, Public:true }, "Deflate", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("Ionic.Zlib.FlushType")], []), 
      ZlibCodec_Deflate
    );

    $.Method({Static:false, Public:true }, "EndDeflate", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ZlibCodec_EndDeflate
    );

    $.Method({Static:false, Public:true }, "EndInflate", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ZlibCodec_EndInflate
    );

    $.Method({Static:false, Public:false}, "flush_pending", 
      new JSIL.MethodSignature(null, [], []), 
      ZlibCodec_flush_pending
    );

    $.Method({Static:false, Public:true }, "get_Adler32", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ZlibCodec_get_Adler32
    );

    $.Method({Static:false, Public:true }, "Inflate", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("Ionic.Zlib.FlushType")], []), 
      ZlibCodec_Inflate
    );

    $.Method({Static:false, Public:true }, "InitializeDeflate", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ZlibCodec_InitializeDeflate$02
    );

    $.Method({Static:false, Public:true }, "InitializeDeflate", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("Ionic.Zlib.CompressionLevel")], []), 
      ZlibCodec_InitializeDeflate$03
    );

    $.Method({Static:false, Public:true }, "InitializeDeflate", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("Ionic.Zlib.CompressionLevel"), $.Boolean], []), 
      ZlibCodec_InitializeDeflate$04
    );

    $.Method({Static:false, Public:true }, "InitializeDeflate", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("Ionic.Zlib.CompressionLevel"), $.Int32], []), 
      ZlibCodec_InitializeDeflate$05
    );

    $.Method({Static:false, Public:true }, "InitializeDeflate", 
      new JSIL.MethodSignature($.Int32, [
          $asm0A.TypeRef("Ionic.Zlib.CompressionLevel"), $.Int32, 
          $.Boolean
        ], []), 
      ZlibCodec_InitializeDeflate$06
    );

    $.Method({Static:false, Public:true }, "InitializeInflate", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ZlibCodec_InitializeInflate$07
    );

    $.Method({Static:false, Public:true }, "InitializeInflate", 
      new JSIL.MethodSignature($.Int32, [$.Boolean], []), 
      ZlibCodec_InitializeInflate$08
    );

    $.Method({Static:false, Public:true }, "InitializeInflate", 
      new JSIL.MethodSignature($.Int32, [$.Int32], []), 
      ZlibCodec_InitializeInflate$09
    );

    $.Method({Static:false, Public:true }, "InitializeInflate", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Boolean], []), 
      ZlibCodec_InitializeInflate$0A
    );

    $.Method({Static:false, Public:false}, "read_buf", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], []), 
      ZlibCodec_read_buf
    );

    $.Method({Static:false, Public:true }, "ResetDeflate", 
      new JSIL.MethodSignature(null, [], []), 
      ZlibCodec_ResetDeflate
    );

    $.Method({Static:false, Public:true }, "SetDeflateParams", 
      new JSIL.MethodSignature($.Int32, [$asm0A.TypeRef("Ionic.Zlib.CompressionLevel"), $asm0A.TypeRef("Ionic.Zlib.CompressionStrategy")], []), 
      ZlibCodec_SetDeflateParams
    );

    $.Method({Static:false, Public:true }, "SetDictionary", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte])], []), 
      ZlibCodec_SetDictionary
    );

    $.Method({Static:false, Public:true }, "SyncInflate", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ZlibCodec_SyncInflate
    );

    $.Field({Static:false, Public:true }, "InputBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:true }, "NextIn", $.Int32); 
    $.Field({Static:false, Public:true }, "AvailableBytesIn", $.Int32); 
    $.Field({Static:false, Public:true }, "TotalBytesIn", $.Int64); 
    $.Field({Static:false, Public:true }, "OutputBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:true }, "NextOut", $.Int32); 
    $.Field({Static:false, Public:true }, "AvailableBytesOut", $.Int32); 
    $.Field({Static:false, Public:true }, "TotalBytesOut", $.Int64); 
    $.Field({Static:false, Public:true }, "Message", $.String); 
    $.Field({Static:false, Public:false}, "dstate", $asm0A.TypeRef("Ionic.Zlib.DeflateManager")); 
    $.Field({Static:false, Public:false}, "istate", $asm0A.TypeRef("Ionic.Zlib.InflateManager")); 
    $.Field({Static:false, Public:false}, "_Adler32", $.UInt32); 
    $.Field({Static:false, Public:true }, "CompressLevel", $asm0A.TypeRef("Ionic.Zlib.CompressionLevel")); 
    $.Field({Static:false, Public:true }, "WindowBits", $.Int32); 
    $.Field({Static:false, Public:true }, "Strategy", $asm0A.TypeRef("Ionic.Zlib.CompressionStrategy")); 
    $.Property({Static:false, Public:true }, "Adler32", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Runtime.InteropServices.GuidAttribute"), function () { return ["ebc25cf6-9120-4283-b972-0e5520d0000D"]; })
    .Attribute($asm09.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [true]; })
    .Attribute($asm09.TypeRef("System.Runtime.InteropServices.ClassInterfaceAttribute"), function () { return [$asm09.System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch]; });

})();

/* class Ionic.Zlib.ZlibConstants */ 

(function ZlibConstants$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Ionic.Zlib.ZlibConstants", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:true }, "WindowBitsMax", 15); 
    $.Constant({Static:true , Public:true }, "WindowBitsDefault", 15); 
    $.Constant({Static:true , Public:true }, "Z_OK", 0); 
    $.Constant({Static:true , Public:true }, "Z_STREAM_END", 1); 
    $.Constant({Static:true , Public:true }, "Z_NEED_DICT", 2); 
    $.Constant({Static:true , Public:true }, "Z_STREAM_ERROR", -2); 
    $.Constant({Static:true , Public:true }, "Z_DATA_ERROR", -3); 
    $.Constant({Static:true , Public:true }, "Z_BUF_ERROR", -5); 
    $.Constant({Static:true , Public:true }, "WorkingBufferSizeDefault", 16384); 
    $.Constant({Static:true , Public:true }, "WorkingBufferSizeMin", 1024); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Ionic.Zlib.ZlibStream */ 

(function ZlibStream$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.IO.Stream)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionMode)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.Ionic.Zlib.CompressionLevel)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibBaseStream)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibStreamFlavor)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm09.System.Byte))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.IO.MemoryStream)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.IDisposable)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.ObjectDisposedException)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm09.System.NotSupportedException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibBaseStream_StreamMode)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm09.System.Int64)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm09.System.IO.SeekOrigin)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0A.Ionic.Zlib.ZlibException)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0A.Ionic.Zlib.FlushType)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.IO.MemoryStream"), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.ZlibStream"), [
        $asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode"), 
        $asm0A.TypeRef("Ionic.Zlib.CompressionLevel")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.ObjectDisposedException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.NotSupportedException"), []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.ZlibException"), [$asm09.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.IO.MemoryStream"), [$jsilcore.TypeRef("System.Array", [$asm09.TypeRef("System.Byte")])]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0A.TypeRef("Ionic.Zlib.ZlibStream"), [$asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm09.System.IDisposable.Dispose)) ();
  };

  function ZlibStream__ctor$00 (stream, mode) {
    $thisType.prototype._ctor.call(this, stream, mode, $T02().Level6, false);
  };

  function ZlibStream__ctor$01 (stream, mode, level) {
    $thisType.prototype._ctor.call(this, stream, mode, level, false);
  };

  function ZlibStream__ctor$02 (stream, mode, leaveOpen) {
    $thisType.prototype._ctor.call(this, stream, mode, $T02().Level6, leaveOpen);
  };

  function ZlibStream__ctor$03 (stream, mode, level, leaveOpen) {
    $T00().prototype._ctor.call(this);
    this._baseStream = new ($T04())(stream, mode, level, $T05().ZLIB, leaveOpen);
  };

  function ZlibStream_CompressBuffer (b) {
    var ms = $S00().Construct();
    try {
      var compressor = $S01().Construct(ms, $T01().Compress, $T02().Level9);
      $T04().CompressBuffer(b, compressor);
      var result = ms.ToArray();
    } finally {
      if (ms !== null) {
        $IM00().Call(ms, null);
      }
    }
    return result;
  };

  function ZlibStream_CompressString (s) {
    var ms = $S00().Construct();
    try {
      var compressor = $S01().Construct(ms, $T01().Compress, $T02().Level9);
      $T04().CompressString(s, compressor);
      var result = ms.ToArray();
    } finally {
      if (ms !== null) {
        $IM00().Call(ms, null);
      }
    }
    return result;
  };

  function ZlibStream_Dispose (disposing) {
    try {
      if (!this._disposed) {
        if (!(!disposing || (this._baseStream === null))) {
          this._baseStream.Close();
        }
        this._disposed = true;
      }
    } finally {
      $T00().prototype.Dispose.call(this, disposing);
    }
  };

  function ZlibStream_Flush () {
    if (this._disposed) {
      throw $S02().Construct("ZlibStream");
    }
    this._baseStream.Flush();
  };

  function ZlibStream_get_BufferSize () {
    return this._baseStream._bufferSize;
  };

  function ZlibStream_get_CanRead () {
    if (this._disposed) {
      throw $S02().Construct("ZlibStream");
    }
    return this._baseStream._stream.get_CanRead();
  };

  function ZlibStream_get_CanSeek () {
    return false;
  };

  function ZlibStream_get_CanWrite () {
    if (this._disposed) {
      throw $S02().Construct("ZlibStream");
    }
    return this._baseStream._stream.get_CanWrite();
  };

  function ZlibStream_get_FlushMode () {
    return this._baseStream._flushMode;
  };

  function ZlibStream_get_Length () {
    throw $S03().Construct();
  };

  function ZlibStream_get_Position () {
    if (this._baseStream._streamMode.valueOf() === 0) {
      return this._baseStream._z.TotalBytesOut;
    }
    if (this._baseStream._streamMode === $T0C().Reader) {
      return this._baseStream._z.TotalBytesIn;
    }
    return $T0D().Create(0, 0, 0);
  };

  function ZlibStream_get_TotalIn () {
    return this._baseStream._z.TotalBytesIn;
  };

  function ZlibStream_get_TotalOut () {
    return this._baseStream._z.TotalBytesOut;
  };

  function ZlibStream_Read (buffer, offset, count) {
    if (this._disposed) {
      throw $S02().Construct("ZlibStream");
    }
    return this._baseStream.Read(buffer, offset, count);
  };

  function ZlibStream_Seek (offset, origin) {
    throw $S03().Construct();
  };

  function ZlibStream_set_BufferSize (value) {
    if (this._disposed) {
      throw $S02().Construct("ZlibStream");
    }
    if (this._baseStream._workingBuffer !== null) {
      throw $S04().Construct("The working buffer is already set.");
    }
    if (value < 1024) {
      throw $S04().Construct($T09().Format("Don't be silly. {0} bytes?? Use a bigger buffer, at least {1}.", value, 1024));
    }
    this._baseStream._bufferSize = value;
  };

  function ZlibStream_set_FlushMode (value) {
    if (this._disposed) {
      throw $S02().Construct("ZlibStream");
    }
    this._baseStream._flushMode = value;
  };

  function ZlibStream_set_Position (value) {
    throw $S03().Construct();
  };

  function ZlibStream_SetLength (value) {
    throw $S03().Construct();
  };

  function ZlibStream_UncompressBuffer (compressed) {
    var input = $S05().Construct(compressed);
    try {
      var decompressor = $S06().Construct(input, $T01().Decompress);
      var result = $T04().UncompressBuffer(compressed, decompressor);
    } finally {
      if (input !== null) {
        $IM00().Call(input, null);
      }
    }
    return result;
  };

  function ZlibStream_UncompressString (compressed) {
    var input = $S05().Construct(compressed);
    try {
      var decompressor = $S06().Construct(input, $T01().Decompress);
      var result = $T04().UncompressString(compressed, decompressor);
    } finally {
      if (input !== null) {
        $IM00().Call(input, null);
      }
    }
    return result;
  };

  function ZlibStream_Write (buffer, offset, count) {
    if (this._disposed) {
      throw $S02().Construct("ZlibStream");
    }
    this._baseStream.Write(buffer, offset, count);
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.IO.Stream"), 
      Name: "Ionic.Zlib.ZlibStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode")], []), 
      ZlibStream__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode"), 
          $asm0A.TypeRef("Ionic.Zlib.CompressionLevel")
        ], []), 
      ZlibStream__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode"), 
          $.Boolean
        ], []), 
      ZlibStream__ctor$02
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm09.TypeRef("System.IO.Stream"), $asm0A.TypeRef("Ionic.Zlib.CompressionMode"), 
          $asm0A.TypeRef("Ionic.Zlib.CompressionLevel"), $.Boolean
        ], []), 
      ZlibStream__ctor$03
    );

    $.Method({Static:true , Public:true }, "CompressBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], []), 
      ZlibStream_CompressBuffer
    );

    $.Method({Static:true , Public:true }, "CompressString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String], []), 
      ZlibStream_CompressString
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      ZlibStream_Dispose
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Flush", 
      new JSIL.MethodSignature(null, [], []), 
      ZlibStream_Flush
    );

    $.Method({Static:false, Public:true }, "get_BufferSize", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ZlibStream_get_BufferSize
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ZlibStream_get_CanRead
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ZlibStream_get_CanSeek
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ZlibStream_get_CanWrite
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_FlushMode", 
      new JSIL.MethodSignature($asm0A.TypeRef("Ionic.Zlib.FlushType"), [], []), 
      ZlibStream_get_FlushMode
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Length", 
      new JSIL.MethodSignature($.Int64, [], []), 
      ZlibStream_get_Length
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Position", 
      new JSIL.MethodSignature($.Int64, [], []), 
      ZlibStream_get_Position
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_TotalIn", 
      new JSIL.MethodSignature($.Int64, [], []), 
      ZlibStream_get_TotalIn
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_TotalOut", 
      new JSIL.MethodSignature($.Int64, [], []), 
      ZlibStream_get_TotalOut
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], []), 
      ZlibStream_Read
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm09.TypeRef("System.IO.SeekOrigin")], []), 
      ZlibStream_Seek
    );

    $.Method({Static:false, Public:true }, "set_BufferSize", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      ZlibStream_set_BufferSize
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_FlushMode", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("Ionic.Zlib.FlushType")], []), 
      ZlibStream_set_FlushMode
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$.Int64], []), 
      ZlibStream_set_Position
    );

    $.Method({Static:false, Public:true , Virtual:true }, "SetLength", 
      new JSIL.MethodSignature(null, [$.Int64], []), 
      ZlibStream_SetLength
    );

    $.Method({Static:true , Public:true }, "UncompressBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])], []), 
      ZlibStream_UncompressBuffer
    );

    $.Method({Static:true , Public:true }, "UncompressString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])], []), 
      ZlibStream_UncompressString
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], []), 
      ZlibStream_Write
    );

    $.Field({Static:false, Public:false}, "_baseStream", $asm0A.TypeRef("Ionic.Zlib.ZlibBaseStream")); 
    $.Field({Static:false, Public:false}, "_disposed", $.Boolean); 
    $.Property({Static:false, Public:true , Virtual:true }, "FlushMode", $asm0A.TypeRef("Ionic.Zlib.FlushType"));

    $.Property({Static:false, Public:true }, "BufferSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "TotalIn", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "TotalOut", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.ColorEx */ 

(function ColorEx$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Single)) ();
  };

  function ColorEx_Interpolate (a, b, t) {
    return (new ($T00())()).__Initialize__({
        A: (((a.get_A() * t) + (b.get_A() * (1 - t))) | 0), 
        R: (((a.get_R() * t) + (b.get_R() * (1 - t))) | 0), 
        G: (((a.get_G() * t) + (b.get_G() * (1 - t))) | 0), 
        B: (((a.get_B() * t) + (b.get_B() * (1 - t))) | 0)}
    );
  };

  function ColorEx_ReplaceAlpha (RGB, A) {
    var Result = RGB.MemberwiseClone();
    Result.set_A(((A * 255) | 0));
    return Result;
  };

  JSIL.MakeStaticClass("SharedXNA.ColorEx", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "Interpolate", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Color"), [
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $asm01.TypeRef("Microsoft.Xna.Framework.Color"), 
          $.Single
        ], []), 
      ColorEx_Interpolate
    );

    $.Method({Static:true , Public:true }, "ReplaceAlpha", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Color"), [$asm01.TypeRef("Microsoft.Xna.Framework.Color"), $.Single], []), 
      ColorEx_ReplaceAlpha
    );

    $.Field({Static:true , Public:true }, "TransparentBlack20", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:true , Public:true }, "TransparentBlack50", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:true , Public:true }, "TransparentBlack80", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:true , Public:true }, "TransparentWhite20", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:true , Public:true }, "TransparentWhite50", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:true , Public:true }, "TransparentWhite80", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:true , Public:true }, "SelectedRowBackground", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:true , Public:true }, "MenuBandColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:true , Public:true }, "ClearScreenColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:true , Public:true }, "TextShadow", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    function ColorEx__cctor () {
      $thisType.TransparentBlack20 = new $asm01.Microsoft.Xna.Framework.Color();
      $thisType.TransparentBlack50 = new $asm01.Microsoft.Xna.Framework.Color();
      $thisType.TransparentBlack80 = new $asm01.Microsoft.Xna.Framework.Color();
      $thisType.TransparentWhite20 = new $asm01.Microsoft.Xna.Framework.Color();
      $thisType.TransparentWhite50 = new $asm01.Microsoft.Xna.Framework.Color();
      $thisType.TransparentWhite80 = new $asm01.Microsoft.Xna.Framework.Color();
      $thisType.SelectedRowBackground = new $asm01.Microsoft.Xna.Framework.Color();
      $thisType.MenuBandColor = new $asm01.Microsoft.Xna.Framework.Color();
      $thisType.ClearScreenColor = new $asm01.Microsoft.Xna.Framework.Color();
      $thisType.TextShadow = new $asm01.Microsoft.Xna.Framework.Color();
      $thisType.TransparentBlack20 = ($jsilxna.ColorFromPremultipliedInts(null, 0, 0, 0, 51));
      $thisType.TransparentBlack50 = ($jsilxna.ColorFromPremultipliedInts(null, 0, 0, 0, 128));
      $thisType.TransparentBlack80 = ($jsilxna.ColorFromPremultipliedInts(null, 0, 0, 0, 204));
      $thisType.TransparentWhite20 = ($jsilxna.ColorFromPremultipliedInts(null, 255, 255, 255, 51));
      $thisType.TransparentWhite50 = ($jsilxna.ColorFromPremultipliedInts(null, 255, 255, 255, 128));
      $thisType.TransparentWhite80 = ($jsilxna.ColorFromPremultipliedInts(null, 255, 255, 255, 204));
      $thisType.SelectedRowBackground = ($jsilxna.ColorFromPremultipliedInts(null, 192, 192, 0, 204));
      $thisType.MenuBandColor = ($jsilxna.ColorFromPremultipliedInts(null, 96, 64, 64, 255));
      $thisType.ClearScreenColor = ($jsilxna.ColorFromPremultipliedInts(null, 24, 24, 24, 255));
      $thisType.TextShadow = ($jsilxna.ColorFromPremultipliedInts(null, 60, 60, 60, 204));
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      ColorEx__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.ContentHelper */ 

(function ContentHelper$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Content.ContentManager)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm09.System.String))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Globalization.CultureInfo)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Char)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.IO.Path)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.IO.File)) ();
  };

  function ContentHelper__ctor () {
  };

  function ContentHelper_GetLocalizedAssetName (Content, assetName) {
    var cultureNames = JSIL.Array.New($T01(), [$T03().get_CurrentCulture().get_Name(), $T03().get_CurrentCulture().get_TwoLetterISOLanguageName()]);
    var array = cultureNames;

    for (var i = 0; i < array.length; i = ((i + 1) | 0)) {
      var cultureName = array[i];
      var localizedAssetName = (JSIL.ConcatString(assetName, ".", cultureName));
      var localizedAssetPath = $T07().Combine(Content.get_RootDirectory(), JSIL.ConcatString(localizedAssetName, ".xnb"));
      if ($T08().Exists(localizedAssetPath)) {
        return localizedAssetName;
      }
    }
    return assetName;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.ContentHelper", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ContentHelper__ctor
    );

    $.Method({Static:false, Public:false}, "GetLocalizedAssetName", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("Microsoft.Xna.Framework.Content.ContentManager"), $.String], []), 
      ContentHelper_GetLocalizedAssetName
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.InputState */ 

(function InputState$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.KeyboardState)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePadState)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.PlayerIndex)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePadThumbSticks)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Buttons)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keys)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.Keyboard)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Input.GamePad)) ();
  };

  function InputState__ctor () {
    this.CurrentKeyboardStates = JSIL.Array.New($T00(), 4);
    this.CurrentGamePadStates = JSIL.Array.New($T01(), 4);
    this.LastKeyboardStates = JSIL.Array.New($T00(), 4);
    this.LastGamePadStates = JSIL.Array.New($T01(), 4);
    this.GamePadWasConnected = JSIL.Array.New($T02(), 4);
  };

  function InputState_GetLeftThumbsticks (controllingPlayer) {
    return this.CurrentGamePadStates[controllingPlayer.valueOf()].get_ThumbSticks().get_Left();
  };

  function InputState_IsButtonDown (button, controllingPlayer) {
    if (controllingPlayer !== null) {
      var playerIndex = controllingPlayer;
      var i = playerIndex.valueOf();
      return this.CurrentGamePadStates[i].IsButtonDown(button);
    }
    return (this.IsButtonDown(button, $T03().One) || 
      this.IsButtonDown(button, $T03().Two) || 
      this.IsButtonDown(button, $T03().Three) || this.IsButtonDown(button, $T03().Four));
  };

  function InputState_IsKeyDown (key, controllingPlayer) {
    if (controllingPlayer !== null) {
      var playerIndex = controllingPlayer;
      var i = playerIndex.valueOf();
      return this.CurrentKeyboardStates[i].IsKeyDown(key);
    }
    return (this.IsKeyDown(key, $T03().One) || 
      this.IsKeyDown(key, $T03().Two) || 
      this.IsKeyDown(key, $T03().Three) || this.IsKeyDown(key, $T03().Four));
  };

  function InputState_IsMenuA$00 (controllingPlayer, /* ref */ playerIndex) {
    return (this.IsNewKeyPress($T07().Z, controllingPlayer, /* ref */ playerIndex) || this.IsNewButtonPress($T05().A, controllingPlayer, /* ref */ playerIndex));
  };

  function InputState_IsMenuA$01 (controllingPlayer) {
    return (this.IsNewKeyPress($T07().Z, controllingPlayer) || this.IsNewButtonPress($T05().A, controllingPlayer));
  };

  function InputState_IsMenuB$02 (controllingPlayer, /* ref */ playerIndex) {
    return (this.IsNewKeyPress($T07().X, controllingPlayer, /* ref */ playerIndex) || this.IsNewButtonPress($T05().B, controllingPlayer, /* ref */ playerIndex));
  };

  function InputState_IsMenuB$03 (controllingPlayer) {
    return (this.IsNewKeyPress($T07().X, controllingPlayer) || this.IsNewButtonPress($T05().B, controllingPlayer));
  };

  function InputState_IsMenuCancel$04 (controllingPlayer, /* ref */ playerIndex) {
    return (this.IsNewKeyPress($T07().Escape, controllingPlayer, /* ref */ playerIndex) || 
      this.IsNewButtonPress($T05().B, controllingPlayer, /* ref */ playerIndex) || this.IsNewButtonPress($T05().Back, controllingPlayer, /* ref */ playerIndex));
  };

  function InputState_IsMenuCancel$05 (controllingPlayer) {
    return (this.IsNewKeyPress($T07().Escape, controllingPlayer) || 
      this.IsNewButtonPress($T05().B, controllingPlayer) || this.IsNewButtonPress($T05().Back, controllingPlayer));
  };

  function InputState_IsMenuDown (controllingPlayer) {
    var playerIndex = new JSIL.BoxedVariable($asm01.Microsoft.Xna.Framework.PlayerIndex.One);
    return (this.IsNewKeyPress($T07().Down, controllingPlayer, /* ref */ playerIndex) || 
      this.IsNewButtonPress($T05().DPadDown, controllingPlayer, /* ref */ playerIndex) || this.IsNewButtonPress($T05().LeftThumbstickDown, controllingPlayer, /* ref */ playerIndex));
  };

  function InputState_IsMenuLeft$06 (controllingPlayer, /* ref */ playerIndex) {
    return (this.IsNewKeyPress($T07().Left, controllingPlayer, /* ref */ playerIndex) || 
      this.IsNewButtonPress($T05().DPadLeft, controllingPlayer, /* ref */ playerIndex) || this.IsNewButtonPress($T05().LeftThumbstickLeft, controllingPlayer, /* ref */ playerIndex));
  };

  function InputState_IsMenuLeft$07 (controllingPlayer) {
    return (this.IsNewKeyPress($T07().Left, controllingPlayer) || 
      this.IsNewButtonPress($T05().DPadLeft, controllingPlayer) || this.IsNewButtonPress($T05().LeftThumbstickLeft, controllingPlayer));
  };

  function InputState_IsMenuRight$08 (controllingPlayer, /* ref */ playerIndex) {
    return (this.IsNewKeyPress($T07().Right, controllingPlayer, /* ref */ playerIndex) || 
      this.IsNewButtonPress($T05().DPadRight, controllingPlayer, /* ref */ playerIndex) || this.IsNewButtonPress($T05().LeftThumbstickRight, controllingPlayer, /* ref */ playerIndex));
  };

  function InputState_IsMenuRight$09 (controllingPlayer) {
    return (this.IsNewKeyPress($T07().Right, controllingPlayer) || 
      this.IsNewButtonPress($T05().DPadRight, controllingPlayer) || this.IsNewButtonPress($T05().LeftThumbstickRight, controllingPlayer));
  };

  function InputState_IsMenuSelect$0A (controllingPlayer, /* ref */ playerIndex) {
    return (this.IsNewKeyPress($T07().Space, controllingPlayer, /* ref */ playerIndex) || 
      this.IsNewKeyPress($T07().Enter, controllingPlayer, /* ref */ playerIndex) || 
      this.IsNewButtonPress($T05().A, controllingPlayer, /* ref */ playerIndex) || this.IsNewButtonPress($T05().Start, controllingPlayer, /* ref */ playerIndex));
  };

  function InputState_IsMenuSelect$0B (controllingPlayer) {
    return (this.IsNewKeyPress($T07().Space, controllingPlayer) || 
      this.IsNewKeyPress($T07().Enter, controllingPlayer) || 
      this.IsNewButtonPress($T05().A, controllingPlayer) || this.IsNewButtonPress($T05().Start, controllingPlayer));
  };

  function InputState_IsMenuUp (controllingPlayer) {
    var playerIndex = new JSIL.BoxedVariable($asm01.Microsoft.Xna.Framework.PlayerIndex.One);
    return (this.IsNewKeyPress($T07().Up, controllingPlayer, /* ref */ playerIndex) || 
      this.IsNewButtonPress($T05().DPadUp, controllingPlayer, /* ref */ playerIndex) || this.IsNewButtonPress($T05().LeftThumbstickUp, controllingPlayer, /* ref */ playerIndex));
  };

  function InputState_IsMenuX$0C (controllingPlayer, /* ref */ playerIndex) {
    return (this.IsNewKeyPress($T07().C, controllingPlayer, /* ref */ playerIndex) || this.IsNewButtonPress($T05().X, controllingPlayer, /* ref */ playerIndex));
  };

  function InputState_IsMenuX$0D (controllingPlayer) {
    return (this.IsNewKeyPress($T07().C, controllingPlayer) || this.IsNewButtonPress($T05().X, controllingPlayer));
  };

  function InputState_IsMenuY$0E (controllingPlayer, /* ref */ playerIndex) {
    return (this.IsNewKeyPress($T07().V, controllingPlayer, /* ref */ playerIndex) || this.IsNewButtonPress($T05().Y, controllingPlayer, /* ref */ playerIndex));
  };

  function InputState_IsMenuY$0F (controllingPlayer) {
    return (this.IsNewKeyPress($T07().V, controllingPlayer) || this.IsNewButtonPress($T05().Y, controllingPlayer));
  };

  function InputState_IsNewButtonPress$10 (button, controllingPlayer) {
    var Junk = new JSIL.BoxedVariable($asm01.Microsoft.Xna.Framework.PlayerIndex.One);
    return this.IsNewButtonPress(button, controllingPlayer, /* ref */ Junk);
  };

  function InputState_IsNewButtonPress$11 (button, controllingPlayer, /* ref */ playerIndex) {
    if (controllingPlayer !== null) {
      playerIndex.set(controllingPlayer);
      var i = playerIndex.get().valueOf();
      return (this.CurrentGamePadStates[i].IsButtonDown(button) && this.LastGamePadStates[i].IsButtonUp(button));
    }
    return (this.IsNewButtonPress(button, $T03().One, /* ref */ playerIndex) || 
      this.IsNewButtonPress(button, $T03().Two, /* ref */ playerIndex) || 
      this.IsNewButtonPress(button, $T03().Three, /* ref */ playerIndex) || this.IsNewButtonPress(button, $T03().Four, /* ref */ playerIndex));
  };

  function InputState_IsNewKeyPress$12 (key, controllingPlayer) {
    var Junk = new JSIL.BoxedVariable($asm01.Microsoft.Xna.Framework.PlayerIndex.One);
    return this.IsNewKeyPress(key, controllingPlayer, /* ref */ Junk);
  };

  function InputState_IsNewKeyPress$13 (key, controllingPlayer, /* ref */ playerIndex) {
    if (controllingPlayer !== null) {
      playerIndex.set(controllingPlayer);
      var i = playerIndex.get().valueOf();
      return (this.CurrentKeyboardStates[i].IsKeyDown(key) && this.LastKeyboardStates[i].IsKeyUp(key));
    }
    return (this.IsNewKeyPress(key, $T03().One, /* ref */ playerIndex) || 
      this.IsNewKeyPress(key, $T03().Two, /* ref */ playerIndex) || 
      this.IsNewKeyPress(key, $T03().Three, /* ref */ playerIndex) || this.IsNewKeyPress(key, $T03().Four, /* ref */ playerIndex));
  };

  function InputState_IsPauseGame (controllingPlayer) {
    var playerIndex = new JSIL.BoxedVariable($asm01.Microsoft.Xna.Framework.PlayerIndex.One);
    return (this.IsNewKeyPress($T07().Escape, controllingPlayer, /* ref */ playerIndex) || 
      this.IsNewButtonPress($T05().Back, controllingPlayer, /* ref */ playerIndex) || this.IsNewButtonPress($T05().Start, controllingPlayer, /* ref */ playerIndex));
  };

  function InputState_Update () {

    for (var i = 0; i < 4; i = ((i + 1) | 0)) {
      this.LastKeyboardStates[i] = this.CurrentKeyboardStates[i].MemberwiseClone();
      this.LastGamePadStates[i] = this.CurrentGamePadStates[i].MemberwiseClone();
      this.CurrentKeyboardStates[i] = $T08().GetState($T03().$Cast(i)).MemberwiseClone();
      this.CurrentGamePadStates[i] = $T09().GetState($T03().$Cast(i)).MemberwiseClone();
      if (this.CurrentGamePadStates[i].get_IsConnected()) {
        this.GamePadWasConnected[i] = true;
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.InputState", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      InputState__ctor
    );

    $.Method({Static:false, Public:true }, "GetLeftThumbsticks", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")], []), 
      InputState_GetLeftThumbsticks
    );

    $.Method({Static:false, Public:true }, "IsButtonDown", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Buttons"), $asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsButtonDown
    );

    $.Method({Static:false, Public:true }, "IsKeyDown", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"), $asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsKeyDown
    );

    $.Method({Static:false, Public:true }, "IsMenuA", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsMenuA$00
    );

    $.Method({Static:false, Public:true }, "IsMenuA", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsMenuA$01
    );

    $.Method({Static:false, Public:true }, "IsMenuB", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsMenuB$02
    );

    $.Method({Static:false, Public:true }, "IsMenuB", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsMenuB$03
    );

    $.Method({Static:false, Public:true }, "IsMenuCancel", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsMenuCancel$04
    );

    $.Method({Static:false, Public:true }, "IsMenuCancel", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsMenuCancel$05
    );

    $.Method({Static:false, Public:true }, "IsMenuDown", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsMenuDown
    );

    $.Method({Static:false, Public:true }, "IsMenuLeft", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsMenuLeft$06
    );

    $.Method({Static:false, Public:true }, "IsMenuLeft", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsMenuLeft$07
    );

    $.Method({Static:false, Public:true }, "IsMenuRight", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsMenuRight$08
    );

    $.Method({Static:false, Public:true }, "IsMenuRight", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsMenuRight$09
    );

    $.Method({Static:false, Public:true }, "IsMenuSelect", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsMenuSelect$0A
    );

    $.Method({Static:false, Public:true }, "IsMenuSelect", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsMenuSelect$0B
    );

    $.Method({Static:false, Public:true }, "IsMenuUp", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsMenuUp
    );

    $.Method({Static:false, Public:true }, "IsMenuX", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsMenuX$0C
    );

    $.Method({Static:false, Public:true }, "IsMenuX", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsMenuX$0D
    );

    $.Method({Static:false, Public:true }, "IsMenuY", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")]), $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsMenuY$0E
    );

    $.Method({Static:false, Public:true }, "IsMenuY", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsMenuY$0F
    );

    $.Method({Static:false, Public:true }, "IsNewButtonPress", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Buttons"), $asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsNewButtonPress$10
    );

    $.Method({Static:false, Public:true }, "IsNewButtonPress", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Input.Buttons"), $asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])
        ], []), 
      InputState_IsNewButtonPress$11
    );

    $.Method({Static:false, Public:true }, "IsNewKeyPress", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"), $asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsNewKeyPress$12
    );

    $.Method({Static:false, Public:true }, "IsNewKeyPress", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Input.Keys"), $asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])
        ], []), 
      InputState_IsNewKeyPress$13
    );

    $.Method({Static:false, Public:true }, "IsPauseGame", 
      new JSIL.MethodSignature($.Boolean, [$asm09.TypeRef("System.Nullable`1", [$asm01.TypeRef("Microsoft.Xna.Framework.PlayerIndex")])], []), 
      InputState_IsPauseGame
    );

    $.Method({Static:false, Public:true }, "Update", 
      new JSIL.MethodSignature(null, [], []), 
      InputState_Update
    );

    $.Constant({Static:true , Public:true }, "MaxInputs", 4); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "CurrentKeyboardStates", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")])); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "CurrentGamePadStates", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadState")])); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "LastKeyboardStates", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.KeyboardState")])); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "LastGamePadStates", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Microsoft.Xna.Framework.Input.GamePadState")])); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "GamePadWasConnected", $jsilcore.TypeRef("System.Array", [$.Boolean])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.PrettyString */ 

(function PrettyString$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.PrettyString_Section))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.SharedGlobals)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Char)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0A.SharedXNA.PrettyString_Section)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Vector2)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.Single)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteBatch)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0A.SharedXNA.UIHelper)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0A.SharedXNA.HAlign)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0A.SharedXNA.VAlign)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm09.System.Math)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm09.System.Collections.Generic.Dictionary$b2.Of($asm09.System.String, $asm0A.SharedXNA.PrettyString_Command))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm0A.SharedXNA.PrettyString_InsertGlyphCommand)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm0A.SharedXNA.PrettyString_ChangeColorCommand)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0A.SharedXNA.PrettyString_ResetColorCommand)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0A.SharedXNA.PrettyString_InsertNewlineCommand)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm0A.SharedXNA.PrettyString_ChangeFontCommand)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm0A.SharedXNA.PrettyString_ResetFontCommand)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm0A.SharedXNA.PrettyString_Command)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.PrettyString/Section")]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.String"), $asm0A.TypeRef("SharedXNA.PrettyString/Command")]), []))) ();
  };

  function PrettyString__ctor$00 (text, font, color) {
    this.MySections = $S00().Construct();
    this.MyDefaultFont = font;
    this.MyDefaultColor = color;
    this.ResetContext();
    this.MyBaseText = text;
    this.Recompile();
  };

  function PrettyString__ctor$01 (text) {
    this.MySections = $S00().Construct();
    this.MyDefaultFont = $T04().MenuFont;
    this.MyDefaultColor = $T02().get_White().MemberwiseClone();
    this.ResetContext();
    this.MyBaseText = text;
    this.Recompile();
  };

  function PrettyString_AddToken (st) {
    var stringLength = st.length;
    var start = 0;

    for (var spaceAt = (st.indexOf(" ", start)); spaceAt !== -1; ) {
      var word = (st.substr(start, ((spaceAt - start) | 0)));
      this.MySections.Add(new ($T07())(this.MyCurrentColor.MemberwiseClone(), word, this.MyCurrentFont));
      this.MySections.Add(new ($T07())(this.MyCurrentColor.MemberwiseClone(), " ", this.MyCurrentFont));
      start = ((spaceAt + 1) | 0);
      spaceAt = (st.indexOf(" ", start));
    }
    var remains = (st.substr(start, ((stringLength - start) | 0)));
    this.MySections.Add(new ($T07())(this.MyCurrentColor.MemberwiseClone(), remains, this.MyCurrentFont));
  };

  function PrettyString_Draw (startPosition) {
    var $temp00;
    var maxHeight = +this.FindMaximumHeight();
    var position = startPosition.MemberwiseClone();

    for (var a$0 = this.MySections._items, i$0 = 0, l$0 = this.MySections._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var s = a$0[i$0];
      position.Y = +(startPosition.Y + ((maxHeight - s.get_Size().Y) * 0.5));
      $T0B().get_Batch().DrawString(
        s.get_Font(), 
        s.get_Text(), 
        position, 
        s.get_TextColor()
      );
      position.X += +s.get_Size().X;
    }
  };

  function PrettyString_DrawBoxed$02 (x, y, w, h) {
    this.DrawBoxed(
      x, 
      y, 
      w, 
      h, 
      $T0C().Center, 
      $T0D().Center
    );
  };

  function PrettyString_DrawBoxed$03 (x, y, w, h, hset, vset) {
    var totalWidth = new JSIL.BoxedVariable(0);
    var totalHeight = new JSIL.BoxedVariable(0);
    var pos = new ($T08())();
    this.Measure(/* ref */ totalWidth, /* ref */ totalHeight, w);
    if (hset.valueOf() === 0) {
      var x2 = +x;
    } else if (hset === $T0C().Right) {
      x2 = +(x + (w - totalWidth.get()));
    } else {
      x2 = +(x + ((w - totalWidth.get()) * 0.5));
    }
    if (vset.valueOf() === 0) {
      var y2 = +y;
    } else if (vset === $T0D().Bottom) {
      y2 = +(y + (h - totalHeight.get()));
    } else {
      y2 = +(y + ((h - totalHeight.get()) * 0.5));
    }

    for (var i = 0; i < this.MySections.get_Count(); ) {
      var s = this.MySections.get_Item(i);
      var maxHeight = +-Infinity;

    $loop1: 
      for (var lastWordOnLine = i; lastWordOnLine < this.MySections.get_Count(); lastWordOnLine = ((lastWordOnLine + 1) | 0)) {
        var s2 = this.MySections.get_Item(lastWordOnLine);
        if (s2.LineIndex !== s.LineIndex) {
          break $loop1;
        }
        maxHeight = +$T0E().Max(maxHeight, s2.get_Size().Y);
      }
      $T08().prototype._ctor.call(pos, x2, y2);

      for (; i < lastWordOnLine; i = ((i + 1) | 0)) {
        s = this.MySections.get_Item(i);
        pos.Y = +(y2 + ((maxHeight - s.get_Size().Y) * 0.5));
        $T0B().get_Batch().DrawString(
          s.get_Font(), 
          s.get_Text(), 
          pos, 
          s.get_TextColor()
        );
        pos.X += +s.get_Size().X;
      }
      y2 += +maxHeight;
    }
  };

  function PrettyString_FindMaximumHeight () {
    var $temp00;
    var MaxHeight = +-Infinity;

    for (var a$0 = this.MySections._items, i$0 = 0, l$0 = this.MySections._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var s = a$0[i$0];
      MaxHeight = +$T0E().Max(MaxHeight, s.get_Size().Y);
    }
    return +MaxHeight;
  };

  function PrettyString_get_Text () {
    return this.MyBaseText;
  };

  function PrettyString_GetCommandForTag (tag) {
    return $thisType.MyCommandDictionary.get_Item(tag);
  };

  function PrettyString_Initialize () {
    $thisType.MyCommandDictionary = $S01().Construct();
    $thisType.MyCommandDictionary.Add("[LTHUMB]", new ($T10())($T04().ButtonFontOld, " "));
    $thisType.MyCommandDictionary.Add("[RTHUMB]", new ($T10())($T04().ButtonFontOld, "\""));
    $thisType.MyCommandDictionary.Add("[DPAD]", new ($T10())($T04().ButtonFontOld, "!"));
    $thisType.MyCommandDictionary.Add("[TallBACK]", new ($T10())($T04().ButtonFontOld, "#"));
    $thisType.MyCommandDictionary.Add("[GUIDE]", new ($T10())($T04().ButtonFontOld, "$"));
    $thisType.MyCommandDictionary.Add("[TallSTART]", new ($T10())($T04().ButtonFontOld, "%"));
    $thisType.MyCommandDictionary.Add("[TallX]", new ($T10())($T04().ButtonFontOld, "&"));
    $thisType.MyCommandDictionary.Add("[TallY]", new ($T10())($T04().ButtonFontOld, "("));
    $thisType.MyCommandDictionary.Add("[TallA]", new ($T10())($T04().ButtonFontOld, "'"));
    $thisType.MyCommandDictionary.Add("[TallB]", new ($T10())($T04().ButtonFontOld, ")"));
    $thisType.MyCommandDictionary.Add("[LB]", new ($T10())($T04().ButtonFontOld, "-"));
    $thisType.MyCommandDictionary.Add("[RB]", new ($T10())($T04().ButtonFontOld, "*"));
    $thisType.MyCommandDictionary.Add("[RT]", new ($T10())($T04().ButtonFontOld, "+"));
    $thisType.MyCommandDictionary.Add("[LT]", new ($T10())($T04().ButtonFontOld, ","));
    $thisType.MyCommandDictionary.Add("[SmallLTHUMB]", new ($T10())($T04().ButtonFont, "A"));
    $thisType.MyCommandDictionary.Add("[SmallDPAD]", new ($T10())($T04().ButtonFont, "B"));
    $thisType.MyCommandDictionary.Add("[SmallRTHUMB]", new ($T10())($T04().ButtonFont, "C"));
    $thisType.MyCommandDictionary.Add("[BACK]", new ($T10())($T04().ButtonFont, "D"));
    $thisType.MyCommandDictionary.Add("[START]", new ($T10())($T04().ButtonFont, "E"));
    $thisType.MyCommandDictionary.Add("[X]", new ($T10())($T04().ButtonFont, "H"));
    $thisType.MyCommandDictionary.Add("[A]", new ($T10())($T04().ButtonFont, "I"));
    $thisType.MyCommandDictionary.Add("[Y]", new ($T10())($T04().ButtonFont, "J"));
    $thisType.MyCommandDictionary.Add("[B]", new ($T10())($T04().ButtonFont, "K"));
    $thisType.MyCommandDictionary.Add("[SmallLB]", new ($T10())($T04().ButtonFont, "L"));
    $thisType.MyCommandDictionary.Add("[SmallRB]", new ($T10())($T04().ButtonFont, "M"));
    $thisType.MyCommandDictionary.Add("[SmallLT]", new ($T10())($T04().ButtonFont, "F"));
    $thisType.MyCommandDictionary.Add("[SmallRT]", new ($T10())($T04().ButtonFont, "G"));
    $thisType.MyCommandDictionary.Add("[White]", new ($T11())($T02().get_White().MemberwiseClone()));
    $thisType.MyCommandDictionary.Add("[Black]", new ($T11())($T02().get_Black().MemberwiseClone()));
    $thisType.MyCommandDictionary.Add("[Navy]", new ($T11())($T02().get_Navy().MemberwiseClone()));
    $thisType.MyCommandDictionary.Add("[Green]", new ($T11())($T02().get_Green().MemberwiseClone()));
    $thisType.MyCommandDictionary.Add("[Red]", new ($T11())($T02().get_Red().MemberwiseClone()));
    $thisType.MyCommandDictionary.Add("[Brown]", new ($T11())($T02().get_Brown().MemberwiseClone()));
    $thisType.MyCommandDictionary.Add("[Purple]", new ($T11())($T02().get_Purple().MemberwiseClone()));
    $thisType.MyCommandDictionary.Add("[Orange]", new ($T11())($T02().get_Orange().MemberwiseClone()));
    $thisType.MyCommandDictionary.Add("[Yellow]", new ($T11())($T02().get_Yellow().MemberwiseClone()));
    $thisType.MyCommandDictionary.Add("[Lime]", new ($T11())($T02().get_Lime().MemberwiseClone()));
    $thisType.MyCommandDictionary.Add("[Teal]", new ($T11())($T02().get_Teal().MemberwiseClone()));
    $thisType.MyCommandDictionary.Add("[Aqua]", new ($T11())($T02().get_Aqua().MemberwiseClone()));
    $thisType.MyCommandDictionary.Add("[Blue]", new ($T11())($T02().get_Blue().MemberwiseClone()));
    $thisType.MyCommandDictionary.Add("[Fuchsia]", new ($T11())($T02().get_Fuchsia().MemberwiseClone()));
    $thisType.MyCommandDictionary.Add("[Gray]", new ($T11())($T02().get_Gray().MemberwiseClone()));
    $thisType.MyCommandDictionary.Add("[Silver]", new ($T11())($T02().get_Silver().MemberwiseClone()));
    var resetColor = new ($T12())();
    $thisType.MyCommandDictionary.Add("[DefaultColor]", resetColor);
    $thisType.MyCommandDictionary.Add("[/White]", resetColor);
    $thisType.MyCommandDictionary.Add("[/Black]", resetColor);
    $thisType.MyCommandDictionary.Add("[/Navy]", resetColor);
    $thisType.MyCommandDictionary.Add("[/Green]", resetColor);
    $thisType.MyCommandDictionary.Add("[/Red]", resetColor);
    $thisType.MyCommandDictionary.Add("[/Brown]", resetColor);
    $thisType.MyCommandDictionary.Add("[/Purple]", resetColor);
    $thisType.MyCommandDictionary.Add("[/Orange]", resetColor);
    $thisType.MyCommandDictionary.Add("[/Yellow]", resetColor);
    $thisType.MyCommandDictionary.Add("[/Lime]", resetColor);
    $thisType.MyCommandDictionary.Add("[/Teal]", resetColor);
    $thisType.MyCommandDictionary.Add("[/Aqua]", resetColor);
    $thisType.MyCommandDictionary.Add("[/Blue]", resetColor);
    $thisType.MyCommandDictionary.Add("[/Fuchsia]", resetColor);
    $thisType.MyCommandDictionary.Add("[/Gray]", resetColor);
    $thisType.MyCommandDictionary.Add("[/Silver]", resetColor);
    $thisType.MyCommandDictionary.Add("[BREAK]", new ($T13())());
    $thisType.MyCommandDictionary.Add("[LargeFont]", new ($T14())($T04().LargeMenuFont));
    $thisType.MyCommandDictionary.Add("[MediumFont]", new ($T14())($T04().MenuFont));
    $thisType.MyCommandDictionary.Add("[SmallFont]", new ($T14())($T04().SmallMenuFont));
    var resetFont = new ($T15())();
    $thisType.MyCommandDictionary.Add("[DefaultFont]", resetFont);
    $thisType.MyCommandDictionary.Add("[/LargeFont]", resetFont);
    $thisType.MyCommandDictionary.Add("[/SmallFont]", resetFont);
  };

  function PrettyString_Measure (/* ref */ totalWidth, /* ref */ totalHeight, w) {
    var $temp00;
    totalWidth.set(0);
    totalHeight.set(0);
    var lineIndex = 0;
    var lineWidth = +0;
    var lineHeight = +0;

    for (var a$0 = this.MySections._items, i$0 = 0, l$0 = this.MySections._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var s = a$0[i$0];
      if (!(!s.IsNewLine && ((lineWidth + s.get_Size().X) <= w))) {
        totalHeight.set((totalHeight.get() + lineHeight));
        lineIndex = ((lineIndex + 1) | 0);
        s.LineIndex = lineIndex;
        lineWidth = +s.get_Size().X;
        lineHeight = +s.get_Size().Y;
      } else {
        s.LineIndex = lineIndex;
        lineWidth += +s.get_Size().X;
        lineHeight = +$T0E().Max(lineHeight, s.get_Size().Y);
      }
      totalWidth.set($T0E().Max(lineWidth, totalWidth.get()));
    }
    totalHeight.set((totalHeight.get() + lineHeight));
  };

  function PrettyString_Recompile () {
    this.MySections.Clear();
    this.ResetContext();
    var start = 0;

    for (var stringLength = this.MyBaseText.length; start < stringLength; ) {
      var closeBrace = -1;
      var foundCommand = null;
      var openBrace = (this.MyBaseText.indexOf("[", start));
      if (openBrace !== -1) {
        closeBrace = (this.MyBaseText.indexOf("]", ((openBrace + 1) | 0)));
        if (closeBrace !== -1) {
          var tag = (this.MyBaseText.substr(openBrace, ((((closeBrace - openBrace) | 0) + 1) | 0)));
          foundCommand = $thisType.GetCommandForTag(tag);
        }
      }
      if (foundCommand === null) {
        this.AddToken(this.MyBaseText.substr(start, ((stringLength - start) | 0)));
        return;
      }
      var beforeTag = (this.MyBaseText.substr(start, ((openBrace - start) | 0)));
      this.AddToken(beforeTag);
      foundCommand.Apply(this);
      start = ((closeBrace + 1) | 0);
    }
  };

  function PrettyString_ResetContext () {
    this.MyCurrentColor = this.MyDefaultColor.MemberwiseClone();
    this.MyCurrentFont = this.MyDefaultFont;
  };

  function PrettyString_set_Text (value) {
    if (value != this.MyBaseText) {
      this.MyBaseText = value;
      this.Recompile();
    }
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.PrettyString", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), 
          $asm01.TypeRef("Microsoft.Xna.Framework.Color")
        ], []), 
      PrettyString__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], []), 
      PrettyString__ctor$01
    );

    $.Method({Static:false, Public:false}, "AddToken", 
      new JSIL.MethodSignature(null, [$.String], []), 
      PrettyString_AddToken
    );

    $.Method({Static:false, Public:true }, "Draw", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Vector2")], []), 
      PrettyString_Draw
    );

    $.Method({Static:false, Public:true }, "DrawBoxed", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], []), 
      PrettyString_DrawBoxed$02
    );

    $.Method({Static:false, Public:true }, "DrawBoxed", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $asm0A.TypeRef("SharedXNA.HAlign"), $asm0A.TypeRef("SharedXNA.VAlign")
        ], []), 
      PrettyString_DrawBoxed$03
    );

    $.Method({Static:false, Public:false}, "FindMaximumHeight", 
      new JSIL.MethodSignature($.Single, [], []), 
      PrettyString_FindMaximumHeight
    );

    $.Method({Static:false, Public:true }, "get_Text", 
      new JSIL.MethodSignature($.String, [], []), 
      PrettyString_get_Text
    );

    $.Method({Static:true , Public:false}, "GetCommandForTag", 
      new JSIL.MethodSignature($asm0A.TypeRef("SharedXNA.PrettyString/Command"), [$.String], []), 
      PrettyString_GetCommandForTag
    );

    $.Method({Static:true , Public:true }, "Initialize", 
      new JSIL.MethodSignature(null, [], []), 
      PrettyString_Initialize
    );

    $.Method({Static:false, Public:true }, "Measure", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Single]), $jsilcore.TypeRef("JSIL.Reference", [$.Single]), 
          $.Single
        ], []), 
      PrettyString_Measure
    );

    $.Method({Static:false, Public:false}, "Recompile", 
      new JSIL.MethodSignature(null, [], []), 
      PrettyString_Recompile
    );

    $.Method({Static:false, Public:false}, "ResetContext", 
      new JSIL.MethodSignature(null, [], []), 
      PrettyString_ResetContext
    );

    $.Method({Static:false, Public:true }, "set_Text", 
      new JSIL.MethodSignature(null, [$.String], []), 
      PrettyString_set_Text
    );

    $.Field({Static:true , Public:false}, "MyCommandDictionary", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm0A.TypeRef("SharedXNA.PrettyString/Command")])); 
    $.Field({Static:false, Public:false}, "MyDefaultFont", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")); 
    $.Field({Static:false, Public:false}, "MyDefaultColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:false}, "MyCurrentFont", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")); 
    $.Field({Static:false, Public:false}, "MyCurrentColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:false}, "MyBaseText", $.String); 
    $.Field({Static:false, Public:false}, "MySections", $asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.PrettyString/Section")])); 
    $.Property({Static:false, Public:true }, "Text", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.PrettyString/Section */ 

(function Section$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };

  function Section__ctor (TextColor, Text, Font) {
    this.MyTextColor = TextColor;
    this.MyText = Text;
    this.MyFont = Font;
    this.MySize = this.MyFont.MeasureString(this.MyText).MemberwiseClone();
  };

  function Section_get_Font () {
    return this.MyFont;
  };

  function Section_get_Size () {
    return this.MySize;
  };

  function Section_get_Text () {
    return this.MyText;
  };

  function Section_get_TextColor () {
    return this.MyTextColor;
  };

  function Section_set_Font (value) {
    this.MyFont = value;
    this.MySize = this.MyFont.MeasureString(this.MyText).MemberwiseClone();
  };

  function Section_set_Text (value) {
    this.MyText = value;
    this.MySize = this.MyFont.MeasureString(this.MyText).MemberwiseClone();
  };

  function Section_set_TextColor (value) {
    this.MyTextColor = value;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.PrettyString/Section", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Microsoft.Xna.Framework.Color"), $.String, 
          $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")
        ], []), 
      Section__ctor
    );

    $.Method({Static:false, Public:true }, "get_Font", 
      new JSIL.MethodSignature($asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), [], []), 
      Section_get_Font
    );

    $.Method({Static:false, Public:true }, "get_Size", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Vector2"), [], []), 
      Section_get_Size
    );

    $.Method({Static:false, Public:true }, "get_Text", 
      new JSIL.MethodSignature($.String, [], []), 
      Section_get_Text
    );

    $.Method({Static:false, Public:true }, "get_TextColor", 
      new JSIL.MethodSignature($asm01.TypeRef("Microsoft.Xna.Framework.Color"), [], []), 
      Section_get_TextColor
    );

    $.Method({Static:false, Public:true }, "set_Font", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")], []), 
      Section_set_Font
    );

    $.Method({Static:false, Public:true }, "set_Text", 
      new JSIL.MethodSignature(null, [$.String], []), 
      Section_set_Text
    );

    $.Method({Static:false, Public:true }, "set_TextColor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Color")], []), 
      Section_set_TextColor
    );

    $.Field({Static:false, Public:false}, "MyTextColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    $.Field({Static:false, Public:false}, "MyText", $.String); 
    $.Field({Static:false, Public:false}, "MyFont", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")); 
    $.Field({Static:false, Public:false}, "MySize", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2")); 
    $.Field({Static:false, Public:true }, "IsNewLine", $.Boolean); 
    $.Field({Static:false, Public:true }, "LineIndex", $.Int32); 
    $.Property({Static:false, Public:true }, "TextColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color"));

    $.Property({Static:false, Public:true }, "Text", $.String);

    $.Property({Static:false, Public:true }, "Font", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"));

    $.Property({Static:false, Public:true }, "Size", $asm01.TypeRef("Microsoft.Xna.Framework.Vector2"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.PrettyString/Command */ 

(function Command$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.PrettyString)) ();
  };

  function Command__ctor$00 () {
  };

  function Command_Apply (ps) {
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.PrettyString/Command", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Command__ctor$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Apply", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.PrettyString")], []), 
      Command_Apply
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.PrettyString/InsertGlyphCommand */ 

(function InsertGlyphCommand$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.PrettyString_Command)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.SharedXNA.PrettyString)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.PrettyString_Section))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0A.SharedXNA.PrettyString_Section)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };

  function InsertGlyphCommand__ctor (glyphFont, glyphText) {
    $T02().prototype._ctor.call(this);
    this.MyGlyphFont = glyphFont;
    this.MyGlyphText = glyphText;
  };

  function InsertGlyphCommand_Apply (ps) {
    ps.MySections.Add(new ($T05())($T06().get_White().MemberwiseClone(), this.MyGlyphText, this.MyGlyphFont));
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.PrettyString/Command"), 
      Name: "SharedXNA.PrettyString/InsertGlyphCommand", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont"), $.String], []), 
      InsertGlyphCommand__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Apply", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.PrettyString")], []), 
      InsertGlyphCommand_Apply
    );

    $.Field({Static:false, Public:false}, "MyGlyphFont", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")); 
    $.Field({Static:false, Public:false}, "MyGlyphText", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.PrettyString/ResetColorCommand */ 

(function ResetColorCommand$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.PrettyString_Command)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.PrettyString)) ();
  };

  function ResetColorCommand__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ResetColorCommand_Apply (ps) {
    ps.MyCurrentColor = ps.MyDefaultColor.MemberwiseClone();
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.PrettyString/Command"), 
      Name: "SharedXNA.PrettyString/ResetColorCommand", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ResetColorCommand__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Apply", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.PrettyString")], []), 
      ResetColorCommand_Apply
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.PrettyString/ChangeColorCommand */ 

(function ChangeColorCommand$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Microsoft.Xna.Framework.Color)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.PrettyString_Command)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.PrettyString)) ();
  };

  function ChangeColorCommand__ctor (newColor) {
    $T01().prototype._ctor.call(this);
    this.MyColor = newColor;
  };

  function ChangeColorCommand_Apply (ps) {
    ps.MyCurrentColor = this.MyColor.MemberwiseClone();
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.PrettyString/Command"), 
      Name: "SharedXNA.PrettyString/ChangeColorCommand", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Microsoft.Xna.Framework.Color")], []), 
      ChangeColorCommand__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Apply", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.PrettyString")], []), 
      ChangeColorCommand_Apply
    );

    $.Field({Static:false, Public:false}, "MyColor", $asm01.TypeRef("Microsoft.Xna.Framework.Color")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.PrettyString/ResetFontCommand */ 

(function ResetFontCommand$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.PrettyString_Command)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.PrettyString)) ();
  };

  function ResetFontCommand__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ResetFontCommand_Apply (ps) {
    ps.MyCurrentFont = ps.MyDefaultFont;
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.PrettyString/Command"), 
      Name: "SharedXNA.PrettyString/ResetFontCommand", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ResetFontCommand__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Apply", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.PrettyString")], []), 
      ResetFontCommand_Apply
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.PrettyString/ChangeFontCommand */ 

(function ChangeFontCommand$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Microsoft.Xna.Framework.Graphics.SpriteFont)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.PrettyString_Command)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.PrettyString)) ();
  };

  function ChangeFontCommand__ctor (newFont) {
    $T01().prototype._ctor.call(this);
    this.MyFont = newFont;
  };

  function ChangeFontCommand_Apply (ps) {
    ps.MyCurrentFont = this.MyFont;
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.PrettyString/Command"), 
      Name: "SharedXNA.PrettyString/ChangeFontCommand", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")], []), 
      ChangeFontCommand__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Apply", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.PrettyString")], []), 
      ChangeFontCommand_Apply
    );

    $.Field({Static:false, Public:false}, "MyFont", $asm04.TypeRef("Microsoft.Xna.Framework.Graphics.SpriteFont")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.PrettyString/InsertNewlineCommand */ 

(function InsertNewlineCommand$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0A.SharedXNA.PrettyString_Command)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0A.SharedXNA.PrettyString)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0A.SharedXNA.PrettyString_Section)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.PrettyString_Section))) ();
  };

  function InsertNewlineCommand__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function InsertNewlineCommand_Apply (ps) {
    var s = new ($T02())(ps.MyCurrentColor.MemberwiseClone(), "", ps.MyCurrentFont);
    s.IsNewLine = true;
    ps.MySections.Add(s);
  };

  JSIL.MakeType({
      BaseType: $asm0A.TypeRef("SharedXNA.PrettyString/Command"), 
      Name: "SharedXNA.PrettyString/InsertNewlineCommand", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      InsertNewlineCommand__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Apply", 
      new JSIL.MethodSignature(null, [$asm0A.TypeRef("SharedXNA.PrettyString")], []), 
      InsertNewlineCommand_Apply
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.WorldObject */ 

(function WorldObject$Members () {
  var $, $thisType;
  function WorldObject__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.WorldObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      WorldObject__ctor
    );

    $.Field({Static:false, Public:true }, "Pos", $asm01.TypeRef("Microsoft.Xna.Framework.Vector3")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.XMLDocument */ 

(function XMLDocument$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.Void)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm09.System.Char)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0A.SharedXNA.XMLElement)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm09.System.Collections.Generic.Dictionary$b2.Of($asm09.System.String, $asm09.System.String))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.XMLElement))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm09.System.Boolean)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm09.System.IO.Stream)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm09.System.IO.StreamReader)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm09.System.IO.TextReader)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm09.System.Console)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm09.System.String))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm09.System.Collections.Generic.Dictionary$b2_Enumerator.Of($asm09.System.String, $asm09.System.String))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm09.System.Collections.Generic.KeyValuePair$b2.Of($asm09.System.String, $asm09.System.String))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.XMLElement")]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.IO.StreamReader"), [$asm09.TypeRef("System.IO.Stream")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm09.TypeRef("System.String")], []))) ();
  };

  function XMLDocument__ctor () {
  };

  function XMLDocument_GetAttribute$00 (path, attributeName) {
    return this.GetAttribute(this.RootNode, path, attributeName);
  };

  function XMLDocument_GetAttribute$01 (attributeName) {
    return this.GetAttribute(this.RootNode, "", attributeName);
  };

  function XMLDocument_GetAttribute$02 (node, attributeName) {
    return this.GetAttribute(node, "", attributeName);
  };

  function XMLDocument_GetAttribute$03 (node, path, attributeName) {
    var $temp00;
    if (!(path.trim() == "")) {
      var nodeName = $thisType.PathGetFirstNode(path);

      for (var a$0 = node.Children._items, i$0 = 0, l$0 = node.Children._size; i$0 < l$0; ($temp00 = i$0, 
          i$0 = ((i$0 + 1) | 0), 
          $temp00)) {
        var i = a$0[i$0];
        if (i.Name == nodeName) {
          var index = (path.indexOf($thisType.SLASH));
          if (!((index < 0) || (index >= path.length))) {
            var result = this.GetAttribute(i, path.substr(((index + 1) | 0)), attributeName);
            return result;
          }
          if (i.Attributes.ContainsKey(attributeName)) {
            result = i.Attributes.get_Item(attributeName);
            return result;
          }
          result = "";
          return result;
        }
      }
      return null;
    }
    if (node.Attributes.ContainsKey(attributeName)) {
      return node.Attributes.get_Item(attributeName);
    }
    return "";
  };

  function XMLDocument_GetNode$04 (path) {
    return $thisType.GetNode(this.RootNode, path);
  };

  function XMLDocument_GetNode$05 (node, path) {
    var $temp00;
    var nodeName = $thisType.PathGetFirstNode(path);

    for (var a$0 = node.Children._items, i$0 = 0, l$0 = node.Children._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var i = a$0[i$0];
      if (i.Name == nodeName) {
        var index = (path.indexOf($thisType.SLASH));
        if (!((index < 0) || (index >= path.length))) {
          var result = $thisType.GetNode(i, path.substr(0, ((index + 1) | 0)));
          return result;
        }
        result = i;
        return result;
      }
    }
    return null;
  };

  function XMLDocument_GetNodeList$06 (path) {
    return $thisType.GetNodeList(this.RootNode, path);
  };

  function XMLDocument_GetNodeList$07 (node, path) {
    var $temp00;
    var nodeList = null;
    var nodeName = $thisType.PathGetFirstNode(path);
    var index = (path.indexOf($thisType.SLASH));
    var isLastNode = false;
    var isFound = false;
    if (!((index >= 0) && (index < path.length))) {
      isLastNode = true;
    }
    if (isLastNode) {
      nodeList = $S00().Construct();
    }

    for (var a$0 = node.Children._items, i$0 = 0, l$0 = node.Children._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var i = a$0[i$0];
      if (i.Name == nodeName) {
        isFound = true;
        if (!isLastNode) {
          var nodeList2 = $thisType.GetNodeList(i, path.substr(0, ((index + 1) | 0)));
          return nodeList2;
        }
        nodeList.Add(i);
      }
    }
    if (!(!isLastNode || isFound)) {
      return nodeList;
    }
    return nodeList;
  };

  function XMLDocument_GetTextValue$08 (path) {
    return this.GetTextValue(this.RootNode, path);
  };

  function XMLDocument_GetTextValue$09 (node) {
    return this.GetTextValue(node, "");
  };

  function XMLDocument_GetTextValue$0A (node, path) {
    var $temp00;
    if (path.trim() == "") {
      return node.Value;
    }
    var nodeName = $thisType.PathGetFirstNode(path);

    for (var a$0 = node.Children._items, i$0 = 0, l$0 = node.Children._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var i = a$0[i$0];
      if (i.Name == nodeName) {
        var index = (path.indexOf($thisType.SLASH));
        if (!((index < 0) || (index >= path.length))) {
          var result = this.GetTextValue(i, path.substr(((index + 1) | 0)));
          return result;
        }
        result = i.Value;
        return result;
      }
    }
    return "";
  };

  function XMLDocument_Parse$0B (stream) {
    var reader = $S01().Construct(stream);
    var text = reader.ReadToEnd();
    $T0B().WriteLine(text);
    $S02().CallVirtual("Parse", null, this, text);
  };

  function XMLDocument_Parse$0C (xml) {
    var lastIndex = 0;
    this.RootNode = new ($T04())();
    var currentNode = this.RootNode;

  $loop0: 
    while (true) {
      var index = (xml.indexOf($thisType.TAG_START, lastIndex));
      if (index < 0) {
        return;
      }
      if (index >= xml.length) {
        break $loop0;
      }
      index = ((index + 1) | 0);
      lastIndex = (xml.indexOf($thisType.TAG_END, index));
      if (lastIndex < 0) {
        return;
      }
      if (lastIndex >= xml.length) {
        return;
      }
      var tagLength = ((lastIndex - index) | 0);
      var xmlTag = (xml.substr(index, tagLength));
      if ((xmlTag[0]).charCodeAt(0) !== $thisType.QUESTION.charCodeAt(0)) {
        if ((xmlTag[0]).charCodeAt(0) === $thisType.SLASH.charCodeAt(0)) {
          currentNode = currentNode.Parent;
        } else {
          var openTag = true;
          if ((xmlTag[((tagLength - 1) | 0)]).charCodeAt(0) === $thisType.SLASH.charCodeAt(0)) {
            xmlTag = (xmlTag.substr(0, ((tagLength - 1) | 0)));
            openTag = false;
          }
          var node = $thisType.ParseTag(xmlTag);
          node.Parent = currentNode;
          if (currentNode.Parent === null) {
            this.RootNode = node;
          } else {
            currentNode.Children.Add(node);
          }
          if (openTag) {
            var nextNode = (xml.indexOf($thisType.TAG_START, lastIndex));
            if (!((nextNode < 0) || (nextNode >= xml.length))) {
              node.Value = (xml.substr(((lastIndex + 1) | 0), ((((nextNode - lastIndex) | 0) - 1) | 0)).trim());
            } else {
              node.Value = "";
            }
            currentNode = node;
          }
        }
      }
    }
  };

  function XMLDocument_ParseAttributes (attrString, node) {
    var lastIndex = 0;

  $loop0: 
    while (true) {
      var index = (attrString.indexOf($thisType.BEGIN_QUOTE, lastIndex));
      if ((index < 0) || (index >= attrString.length)) {
        break $loop0;
      }
      var attrNameIndex = (attrString.lastIndexOf($thisType.SPACE, index));
      if ((attrNameIndex < 0) || (attrNameIndex >= attrString.length)) {
        break $loop0;
      }
      attrNameIndex = ((attrNameIndex + 1) | 0);
      var attrName = (attrString.substr(attrNameIndex, ((index - attrNameIndex) | 0)));
      index = ((index + 2) | 0);
      lastIndex = (attrString.indexOf($thisType.QUOTE, index));
      if ((lastIndex < 0) || (lastIndex >= attrString.length)) {
        break $loop0;
      }
      var tagLength = ((lastIndex - index) | 0);
      var attrValue = (attrString.substr(index, tagLength));
      node.Attributes.set_Item(attrName, attrValue);
    }
    return node;
  };

  function XMLDocument_ParseTag (xmlTag) {
    var node = new ($T04())();
    var nameEnd = (xmlTag.indexOf($thisType.SPACE, 0));
    if (nameEnd < 0) {
      node.Name = xmlTag;
      return node;
    }
    node.Name = (xmlTag.substr(0, nameEnd));
    var attrString = (xmlTag.substr(nameEnd, ((xmlTag.length - nameEnd) | 0)));
    return $thisType.ParseAttributes(attrString, node);
  };

  function XMLDocument_PathGetFirstNode (path) {
    var index = (path.indexOf($thisType.SLASH));
    if (!((index < 0) || (index >= path.length))) {
      return path.substr(0, index);
    }
    return path.trim();
  };

  function XMLDocument_toString () {
    var output = (JSIL.ConcatString(">XML: ", this.RootNode.Name, $thisType.NEWLINE));
    return JSIL.ConcatString(output, this.ToString(this.RootNode, 1));
  };

  function XMLDocument_ToString (node, indent) {
    var $temp00;
    var output = "";
    indent = ((indent + 1) | 0);
    var indentString = "";

    for (var i = 0; i < indent; i = ((i + 1) | 0)) {
      indentString = (JSIL.ConcatString(indentString, ">"));
    }

    for (var a$0 = node.Children._items, i$0 = 0, l$0 = node.Children._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var j = a$0[i$0];
      var text = output;
      output = (JSIL.ConcatString.apply(null, JSIL.Array.New($T00(), [text, indentString, " ", j.Name, " [", j.Value, "] "])));
      var enumerator2 = $T05().prototype.GetEnumerator.call(j.Attributes);

      while (enumerator2.MoveNext()) {
        var p = enumerator2.get_Current().MemberwiseClone();
        var text2 = output;
        output = (JSIL.ConcatString.apply(null, JSIL.Array.New($T00(), [text2, "<", p.get_Key(), ": ", p.get_Value(), "> "])));
      }
      output = (JSIL.ConcatString(output, $thisType.NEWLINE));
      output = (JSIL.ConcatString(output, this.ToString(j, indent)));
    }
    return output;
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.XMLDocument", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      XMLDocument__ctor
    );

    $.Method({Static:false, Public:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String], []), 
      XMLDocument_GetAttribute$00
    );

    $.Method({Static:false, Public:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], []), 
      XMLDocument_GetAttribute$01
    );

    $.Method({Static:false, Public:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("SharedXNA.XMLElement"), $.String], []), 
      XMLDocument_GetAttribute$02
    );

    $.Method({Static:false, Public:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [
          $asm0A.TypeRef("SharedXNA.XMLElement"), $.String, 
          $.String
        ], []), 
      XMLDocument_GetAttribute$03
    );

    $.Method({Static:false, Public:true }, "GetNode", 
      new JSIL.MethodSignature($asm0A.TypeRef("SharedXNA.XMLElement"), [$.String], []), 
      XMLDocument_GetNode$04
    );

    $.Method({Static:true , Public:true }, "GetNode", 
      new JSIL.MethodSignature($asm0A.TypeRef("SharedXNA.XMLElement"), [$asm0A.TypeRef("SharedXNA.XMLElement"), $.String], []), 
      XMLDocument_GetNode$05
    );

    $.Method({Static:false, Public:true }, "GetNodeList", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.XMLElement")]), [$.String], []), 
      XMLDocument_GetNodeList$06
    );

    $.Method({Static:true , Public:true }, "GetNodeList", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.XMLElement")]), [$asm0A.TypeRef("SharedXNA.XMLElement"), $.String], []), 
      XMLDocument_GetNodeList$07
    );

    $.Method({Static:false, Public:true }, "GetTextValue", 
      new JSIL.MethodSignature($.String, [$.String], []), 
      XMLDocument_GetTextValue$08
    );

    $.Method({Static:false, Public:true }, "GetTextValue", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("SharedXNA.XMLElement")], []), 
      XMLDocument_GetTextValue$09
    );

    $.Method({Static:false, Public:true }, "GetTextValue", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("SharedXNA.XMLElement"), $.String], []), 
      XMLDocument_GetTextValue$0A
    );

    $.Method({Static:false, Public:true }, "Parse", 
      new JSIL.MethodSignature(null, [$asm09.TypeRef("System.IO.Stream")], []), 
      XMLDocument_Parse$0B
    );

    $.Method({Static:false, Public:true }, "Parse", 
      new JSIL.MethodSignature(null, [$.String], []), 
      XMLDocument_Parse$0C
    );

    $.Method({Static:true , Public:true }, "ParseAttributes", 
      new JSIL.MethodSignature($asm0A.TypeRef("SharedXNA.XMLElement"), [$.String, $asm0A.TypeRef("SharedXNA.XMLElement")], []), 
      XMLDocument_ParseAttributes
    );

    $.Method({Static:true , Public:true }, "ParseTag", 
      new JSIL.MethodSignature($asm0A.TypeRef("SharedXNA.XMLElement"), [$.String], []), 
      XMLDocument_ParseTag
    );

    $.Method({Static:true , Public:false}, "PathGetFirstNode", 
      new JSIL.MethodSignature($.String, [$.String], []), 
      XMLDocument_PathGetFirstNode
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], []), 
      XMLDocument_toString
    );

    $.Method({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm0A.TypeRef("SharedXNA.XMLElement"), $.Int32], []), 
      XMLDocument_ToString
    );

    $.Field({Static:true , Public:false}, "TAG_START", $.Char, "<"[0]); 
    $.Field({Static:true , Public:false}, "TAG_END", $.Char, ">"[0]); 
    $.Field({Static:true , Public:false}, "SPACE", $.Char, " "[0]); 
    $.Field({Static:true , Public:false}, "QUOTE", $.Char, "\""[0]); 
    $.Field({Static:true , Public:false}, "SLASH", $.Char, "/"[0]); 
    $.Field({Static:true , Public:false}, "EQUALS", $.Char, "="[0]); 
    $.Field({Static:true , Public:false}, "QUESTION", $.Char, "?"[0]); 
    $.Field({Static:true , Public:false}, "NEWLINE", $.Char, "\n"[0]); 
    $.Field({Static:true , Public:false}, "BEGIN_QUOTE", $.String); 
    $.Field({Static:false, Public:true }, "RootNode", $asm0A.TypeRef("SharedXNA.XMLElement")); 
    function XMLDocument__cctor () {
      $thisType.TAG_START = ("<"[0]);
      $thisType.TAG_END = (">"[0]);
      $thisType.SPACE = (" "[0]);
      $thisType.QUOTE = ("\""[0]);
      $thisType.SLASH = ("/"[0]);
      $thisType.EQUALS = ("="[0]);
      $thisType.QUESTION = ("?"[0]);
      $thisType.NEWLINE = ("\n"[0]);
      $thisType.BEGIN_QUOTE = (JSIL.ConcatString($thisType.EQUALS, $thisType.QUOTE));
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      XMLDocument__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class SharedXNA.XMLElement */ 

(function XMLElement$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm09.System.Collections.Generic.List$b1.Of($asm0A.SharedXNA.XMLElement))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm09.System.Collections.Generic.Dictionary$b2.Of($asm09.System.String, $asm09.System.String))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm09.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0A.SharedXNA.XMLDocument)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("SharedXNA.XMLElement")]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$asm09.TypeRef("System.String"), $asm09.TypeRef("System.String")]), []))) ();
  };

  function XMLElement__ctor () {
    this.Value = "";
    this.Name = "NONE";
    this.Value = "";
    this.Parent = null;
    this.Children = $S00().Construct();
    this.Attributes = $S01().Construct();
  };

  function XMLElement_get_Item (elementName) {
    return $T03().GetNode(this, elementName);
  };

  function XMLElement_GetAttribute (name) {
    var value = new JSIL.BoxedVariable(null);
    if (this.Attributes.TryGetValue(name, /* ref */ value)) {
      return value.get();
    }
    return null;
  };

  function XMLElement_GetElements (name) {
    return $T03().GetNodeList(this, name);
  };

  JSIL.MakeType({
      BaseType: $asm09.TypeRef("System.Object"), 
      Name: "SharedXNA.XMLElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      XMLElement__ctor
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Type, [$.String], []), 
      XMLElement_get_Item
    );

    $.Method({Static:false, Public:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String], []), 
      XMLElement_GetAttribute
    );

    $.Method({Static:false, Public:true }, "GetElements", 
      new JSIL.MethodSignature($asm09.TypeRef("System.Collections.Generic.List`1", [$.Type]), [$.String], []), 
      XMLElement_GetElements
    );

    $.Field({Static:false, Public:true }, "Name", $.String); 
    $.Field({Static:false, Public:true }, "Value", $.String); 
    $.Field({Static:false, Public:true }, "Parent", $.Type); 
    $.Field({Static:false, Public:true }, "Children", $asm09.TypeRef("System.Collections.Generic.List`1", [$.Type])); 
    $.Field({Static:false, Public:true }, "Attributes", $asm09.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])); 
    $.Property({Static:false, Public:true }, "Item", $.Type);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

